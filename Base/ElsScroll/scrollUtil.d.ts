import { Ref } from "vue";
interface Config {
    containerRef: Ref<HTMLElement | undefined>;
    contentRef: Ref<HTMLElement | undefined>;
    trackXRef: Ref<HTMLElement | undefined>;
    trackYRef: Ref<HTMLElement | undefined>;
    thumbXRef: Ref<HTMLElement | undefined>;
    thumbYRef: Ref<HTMLElement | undefined>;
    minThumbSize: number;
    autoHide: boolean;
}
export default class ScrollUtil {
    containerRef: Ref<HTMLElement | undefined>;
    contentRef: Ref<HTMLElement | undefined>;
    trackXRef: Ref<HTMLElement | undefined>;
    trackYRef: Ref<HTMLElement | undefined>;
    thumbXRef: Ref<HTMLElement | undefined>;
    thumbYRef: Ref<HTMLElement | undefined>;
    thumbXSize: Ref<number>;
    thumbYSize: Ref<number>;
    autoHide: boolean;
    constructor(config: Config);
    contentWidth: Ref<number>;
    contentHeight: Ref<number>;
    contentScrollWidth: number;
    contentScrollHeight: number;
    speedX: number;
    speedY: number;
    offsetX: Ref<number>;
    offsetY: Ref<number>;
    scrollX: Ref<number>;
    scrollY: Ref<number>;
    isScroll: Ref<boolean>;
    isScrollX: Ref<boolean>;
    isScrollY: Ref<boolean>;
    showX: Ref<boolean>;
    showY: Ref<boolean>;
    isHover: Ref<boolean>;
    alignSize: Ref<number[]>;
    maxOffsetX: number;
    maxOffsetY: number;
    trackOpacity: Ref<number>;
    trackVisible: Ref<boolean>;
    showTrack: import("vue").ComputedRef<boolean>;
    dragEventHandle: any;
    moveEventHandle: any;
    init(): void;
    setContentSize(): void;
    initContentScroll(): void;
    showScrollBar(): void;
    calcAlignSize(): void;
    calcThumbSize(): void;
    calcThumbXPos(offset: number): boolean;
    calcThumbYPos(offset: number): boolean;
    calcScrollXPos(): boolean;
    calcScrollYPos(): boolean;
    unregistMoveEvet(): void;
    thumbDragHandle(evt: MouseEvent, type: "X" | "Y"): void;
    trackClickHandle(evt: MouseEvent, type: "X" | "Y"): void;
    scrollEventHandle(evt: Event): void;
    registEvent(): void;
}
export {};
