import { IElsX6 } from "../inter";
import type { Node } from "@antv/x6";
export declare const nifiNodeTabs: {}[];
export declare const nifiNodeElem: {};
export declare class AdapterNifi {
    constructor();
    clientId: string;
    processTypes: never[];
    rootGroups: never[];
    rootStatus: {};
    nodeList: any[];
    cellMetadata: Map<string, any>;
    groupId: string;
    groupFlowData: any;
    graphData: any[];
    graphFormData: Record<string, any>;
    graphCellData: Record<string, any>;
    graph: any;
    graphForm: any;
    graphShadow: any;
    tabs: IElsX6.NodeTab[];
    contextMenu: {
        node: never[];
        edge: never[];
        useDefaultMenu: boolean;
    };
    events: IElsX6.Props['events'];
    buildNodesFromTypes(): void;
    initGraph(id?: string): Promise<this>;
    initProcessCells(): void;
    initProcessGroup(): void;
    initIOPorts(): void;
    initNodeMetadata(data: any): void;
    initNodeForm(): void;
    initNodeFn(cell?: any): Promise<unknown>;
    nodeAdd(cell: any): Promise<void>;
    nodeDel(node: Node): void;
    nodeMove(node: Node): void;
    nodeUpdate(node: any): void;
    edgeAdd(edge: any): void;
    edgeDel(): void;
    groupNodeAdd(): void;
    groupNodeDel(): void;
    groupNodeUpdate(): void;
    apiGetClientId(): void;
    apiGetProcessTypes(): void;
    apiGetRootData(): void;
    apiGetRootStatus(): void;
    apiGetFlowByGroup(id: string): Promise<unknown>;
    apiNewNode(name: string): Promise<any>;
    apiUpdateNode(data: any): Promise<unknown>;
    apiDelNode(node: Node): void;
    apiNewEdge(): void;
    apiNewGroupNode(): void;
    apiGetNodeInfo(id: string): Promise<unknown>;
}
