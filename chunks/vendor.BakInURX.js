var eR = Object.defineProperty;
var tR = (n, e, t) => e in n ? eR(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t;
var vn = (n, e, t) => (tR(n, typeof e != "symbol" ? e + "" : e, t), t), Bg = (n, e, t) => {
  if (!e.has(n))
    throw TypeError("Cannot " + t);
};
var N = (n, e, t) => (Bg(n, e, "read from private field"), t ? t.call(n) : e.get(n)), We = (n, e, t) => {
  if (e.has(n))
    throw TypeError("Cannot add the same private member more than once");
  e instanceof WeakSet ? e.add(n) : e.set(n, t);
}, De = (n, e, t, i) => (Bg(n, e, "write to private field"), i ? i.call(n, t) : e.set(n, t), t);
var lf = (n, e, t, i) => ({
  set _(s) {
    De(n, e, s, t);
  },
  get _() {
    return N(n, e, i);
  }
}), Pe = (n, e, t) => (Bg(n, e, "access private method"), t);
import "../css/vendor-BycN2tkO.css";
import { defineComponent as Z, openBlock as R, createElementBlock as F, createElementVNode as W, shallowRef as gi, watchEffect as sr, readonly as iv, ref as L, watch as ee, getCurrentScope as BC, onScopeDispose as sv, unref as w, getCurrentInstance as qe, onMounted as Be, nextTick as Qe, warn as nR, isVNode as ur, computed as _, onBeforeUnmount as Zn, inject as ye, isRef as hr, onBeforeMount as rv, provide as ht, renderSlot as pe, mergeProps as Gi, toRef as Yi, onUnmounted as _h, reactive as Hn, toRefs as zo, normalizeClass as B, onUpdated as Mh, createVNode as ne, Fragment as sn, useSlots as Zo, withCtx as se, createBlock as oe, resolveDynamicComponent as Ot, normalizeStyle as Ye, createTextVNode as mi, toDisplayString as Re, createCommentVNode as te, TransitionGroup as iR, useAttrs as sR, withDirectives as tt, withModifiers as ft, vShow as Ht, Transition as br, cloneVNode as rR, Text as jC, Comment as zC, Teleport as _p, onDeactivated as oR, toRaw as Td, vModelCheckbox as _d, vModelRadio as ZC, toHandlers as lR, withKeys as On, renderList as Tl, h as _e, createSlots as aR, resolveComponent as $t, resolveDirective as ov, vModelText as cR, render as Ao, shallowReactive as uR, markRaw as hR, createApp as fR } from "vue";
var FC = typeof global == "object" && global && global.Object === Object && global, dR = typeof self == "object" && self && self.Object === Object && self, Ms = FC || dR || Function("return this")(), es = Ms.Symbol, VC = Object.prototype, pR = VC.hasOwnProperty, gR = VC.toString, qc = es ? es.toStringTag : void 0;
function mR(n) {
  var e = pR.call(n, qc), t = n[qc];
  try {
    n[qc] = void 0;
    var i = !0;
  } catch {
  }
  var s = gR.call(n);
  return i && (e ? n[qc] = t : delete n[qc]), s;
}
var bR = Object.prototype, vR = bR.toString;
function yR(n) {
  return vR.call(n);
}
var OR = "[object Null]", wR = "[object Undefined]", bO = es ? es.toStringTag : void 0;
function qr(n) {
  return n == null ? n === void 0 ? wR : OR : bO && bO in Object(n) ? mR(n) : yR(n);
}
function ts(n) {
  return n != null && typeof n == "object";
}
var xR = "[object Symbol]";
function fr(n) {
  return typeof n == "symbol" || ts(n) && qr(n) == xR;
}
function xl(n, e) {
  for (var t = -1, i = n == null ? 0 : n.length, s = Array(i); ++t < i; )
    s[t] = e(n[t], t, n);
  return s;
}
var Cn = Array.isArray, SR = 1 / 0, vO = es ? es.prototype : void 0, yO = vO ? vO.toString : void 0;
function qC(n) {
  if (typeof n == "string")
    return n;
  if (Cn(n))
    return xl(n, qC) + "";
  if (fr(n))
    return yO ? yO.call(n) : "";
  var e = n + "";
  return e == "0" && 1 / n == -SR ? "-0" : e;
}
var CR = /\s/;
function kR(n) {
  for (var e = n.length; e-- && CR.test(n.charAt(e)); )
    ;
  return e;
}
var PR = /^\s+/;
function AR(n) {
  return n && n.slice(0, kR(n) + 1).replace(PR, "");
}
function Vt(n) {
  var e = typeof n;
  return n != null && (e == "object" || e == "function");
}
var OO = NaN, ER = /^[-+]0x[0-9a-f]+$/i, $R = /^0b[01]+$/i, TR = /^0o[0-7]+$/i, _R = parseInt;
function va(n) {
  if (typeof n == "number")
    return n;
  if (fr(n))
    return OO;
  if (Vt(n)) {
    var e = typeof n.valueOf == "function" ? n.valueOf() : n;
    n = Vt(e) ? e + "" : e;
  }
  if (typeof n != "string")
    return n === 0 ? n : +n;
  n = AR(n);
  var t = $R.test(n);
  return t || TR.test(n) ? _R(n.slice(2), t ? 2 : 8) : ER.test(n) ? OO : +n;
}
var wO = 1 / 0, MR = 17976931348623157e292;
function RR(n) {
  if (!n)
    return n === 0 ? n : 0;
  if (n = va(n), n === wO || n === -wO) {
    var e = n < 0 ? -1 : 1;
    return e * MR;
  }
  return n === n ? n : 0;
}
function WC(n) {
  var e = RR(n), t = e % 1;
  return e === e ? t ? e - t : e : 0;
}
function wc(n) {
  return n;
}
var DR = "[object AsyncFunction]", LR = "[object Function]", NR = "[object GeneratorFunction]", IR = "[object Proxy]";
function lv(n) {
  if (!Vt(n))
    return !1;
  var e = qr(n);
  return e == LR || e == NR || e == DR || e == IR;
}
var jg = Ms["__core-js_shared__"], xO = function() {
  var n = /[^.]+$/.exec(jg && jg.keys && jg.keys.IE_PROTO || "");
  return n ? "Symbol(src)_1." + n : "";
}();
function QR(n) {
  return !!xO && xO in n;
}
var BR = Function.prototype, jR = BR.toString;
function Wl(n) {
  if (n != null) {
    try {
      return jR.call(n);
    } catch {
    }
    try {
      return n + "";
    } catch {
    }
  }
  return "";
}
var zR = /[\\^$.*+?()[\]{}|]/g, ZR = /^\[object .+?Constructor\]$/, FR = Function.prototype, VR = Object.prototype, qR = FR.toString, WR = VR.hasOwnProperty, XR = RegExp(
  "^" + qR.call(WR).replace(zR, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
);
function YR(n) {
  if (!Vt(n) || QR(n))
    return !1;
  var e = lv(n) ? XR : ZR;
  return e.test(Wl(n));
}
function HR(n, e) {
  return n == null ? void 0 : n[e];
}
function Xl(n, e) {
  var t = HR(n, e);
  return YR(t) ? t : void 0;
}
var Jm = Xl(Ms, "WeakMap"), SO = Object.create, GR = /* @__PURE__ */ function() {
  function n() {
  }
  return function(e) {
    if (!Vt(e))
      return {};
    if (SO)
      return SO(e);
    n.prototype = e;
    var t = new n();
    return n.prototype = void 0, t;
  };
}();
function XC(n, e, t) {
  switch (t.length) {
    case 0:
      return n.call(e);
    case 1:
      return n.call(e, t[0]);
    case 2:
      return n.call(e, t[0], t[1]);
    case 3:
      return n.call(e, t[0], t[1], t[2]);
  }
  return n.apply(e, t);
}
function UR() {
}
function YC(n, e) {
  var t = -1, i = n.length;
  for (e || (e = Array(i)); ++t < i; )
    e[t] = n[t];
  return e;
}
var KR = 800, JR = 16, eD = Date.now;
function tD(n) {
  var e = 0, t = 0;
  return function() {
    var i = eD(), s = JR - (i - t);
    if (t = i, s > 0) {
      if (++e >= KR)
        return arguments[0];
    } else
      e = 0;
    return n.apply(void 0, arguments);
  };
}
function nD(n) {
  return function() {
    return n;
  };
}
var Md = function() {
  try {
    var n = Xl(Object, "defineProperty");
    return n({}, "", {}), n;
  } catch {
  }
}(), iD = Md ? function(n, e) {
  return Md(n, "toString", {
    configurable: !0,
    enumerable: !1,
    value: nD(e),
    writable: !0
  });
} : wc;
const sD = iD;
var HC = tD(sD);
function rD(n, e) {
  for (var t = -1, i = n == null ? 0 : n.length; ++t < i && e(n[t], t, n) !== !1; )
    ;
  return n;
}
function GC(n, e, t, i) {
  for (var s = n.length, r = t + (i ? 1 : -1); i ? r-- : ++r < s; )
    if (e(n[r], r, n))
      return r;
  return -1;
}
function oD(n) {
  return n !== n;
}
function lD(n, e, t) {
  for (var i = t - 1, s = n.length; ++i < s; )
    if (n[i] === e)
      return i;
  return -1;
}
function aD(n, e, t) {
  return e === e ? lD(n, e, t) : GC(n, oD, t);
}
function UC(n, e) {
  var t = n == null ? 0 : n.length;
  return !!t && aD(n, e, 0) > -1;
}
var cD = 9007199254740991, uD = /^(?:0|[1-9]\d*)$/;
function Mp(n, e) {
  var t = typeof n;
  return e = e ?? cD, !!e && (t == "number" || t != "symbol" && uD.test(n)) && n > -1 && n % 1 == 0 && n < e;
}
function Rp(n, e, t) {
  e == "__proto__" && Md ? Md(n, e, {
    configurable: !0,
    enumerable: !0,
    value: t,
    writable: !0
  }) : n[e] = t;
}
function xc(n, e) {
  return n === e || n !== n && e !== e;
}
var hD = Object.prototype, fD = hD.hasOwnProperty;
function Dp(n, e, t) {
  var i = n[e];
  (!(fD.call(n, e) && xc(i, t)) || t === void 0 && !(e in n)) && Rp(n, e, t);
}
function Yl(n, e, t, i) {
  var s = !t;
  t || (t = {});
  for (var r = -1, o = e.length; ++r < o; ) {
    var l = e[r], a = i ? i(t[l], n[l], l, t, n) : void 0;
    a === void 0 && (a = n[l]), s ? Rp(t, l, a) : Dp(t, l, a);
  }
  return t;
}
var CO = Math.max;
function KC(n, e, t) {
  return e = CO(e === void 0 ? n.length - 1 : e, 0), function() {
    for (var i = arguments, s = -1, r = CO(i.length - e, 0), o = Array(r); ++s < r; )
      o[s] = i[e + s];
    s = -1;
    for (var l = Array(e + 1); ++s < e; )
      l[s] = i[s];
    return l[e] = t(o), XC(n, this, l);
  };
}
function Sc(n, e) {
  return HC(KC(n, e, wc), n + "");
}
var dD = 9007199254740991;
function av(n) {
  return typeof n == "number" && n > -1 && n % 1 == 0 && n <= dD;
}
function Fo(n) {
  return n != null && av(n.length) && !lv(n);
}
function Iu(n, e, t) {
  if (!Vt(t))
    return !1;
  var i = typeof e;
  return (i == "number" ? Fo(t) && Mp(e, t.length) : i == "string" && e in t) ? xc(t[e], n) : !1;
}
function cv(n) {
  return Sc(function(e, t) {
    var i = -1, s = t.length, r = s > 1 ? t[s - 1] : void 0, o = s > 2 ? t[2] : void 0;
    for (r = n.length > 3 && typeof r == "function" ? (s--, r) : void 0, o && Iu(t[0], t[1], o) && (r = s < 3 ? void 0 : r, s = 1), e = Object(e); ++i < s; ) {
      var l = t[i];
      l && n(e, l, i, r);
    }
    return e;
  });
}
var pD = Object.prototype;
function Rh(n) {
  var e = n && n.constructor, t = typeof e == "function" && e.prototype || pD;
  return n === t;
}
function gD(n, e) {
  for (var t = -1, i = Array(n); ++t < n; )
    i[t] = e(t);
  return i;
}
var mD = "[object Arguments]";
function kO(n) {
  return ts(n) && qr(n) == mD;
}
var JC = Object.prototype, bD = JC.hasOwnProperty, vD = JC.propertyIsEnumerable, Na = kO(/* @__PURE__ */ function() {
  return arguments;
}()) ? kO : function(n) {
  return ts(n) && bD.call(n, "callee") && !vD.call(n, "callee");
};
function yD() {
  return !1;
}
var ek = typeof exports == "object" && exports && !exports.nodeType && exports, PO = ek && typeof module == "object" && module && !module.nodeType && module, OD = PO && PO.exports === ek, AO = OD ? Ms.Buffer : void 0, wD = AO ? AO.isBuffer : void 0, Ia = wD || yD, xD = "[object Arguments]", SD = "[object Array]", CD = "[object Boolean]", kD = "[object Date]", PD = "[object Error]", AD = "[object Function]", ED = "[object Map]", $D = "[object Number]", TD = "[object Object]", _D = "[object RegExp]", MD = "[object Set]", RD = "[object String]", DD = "[object WeakMap]", LD = "[object ArrayBuffer]", ND = "[object DataView]", ID = "[object Float32Array]", QD = "[object Float64Array]", BD = "[object Int8Array]", jD = "[object Int16Array]", zD = "[object Int32Array]", ZD = "[object Uint8Array]", FD = "[object Uint8ClampedArray]", VD = "[object Uint16Array]", qD = "[object Uint32Array]", At = {};
At[ID] = At[QD] = At[BD] = At[jD] = At[zD] = At[ZD] = At[FD] = At[VD] = At[qD] = !0;
At[xD] = At[SD] = At[LD] = At[CD] = At[ND] = At[kD] = At[PD] = At[AD] = At[ED] = At[$D] = At[TD] = At[_D] = At[MD] = At[RD] = At[DD] = !1;
function WD(n) {
  return ts(n) && av(n.length) && !!At[qr(n)];
}
function Dh(n) {
  return function(e) {
    return n(e);
  };
}
var tk = typeof exports == "object" && exports && !exports.nodeType && exports, du = tk && typeof module == "object" && module && !module.nodeType && module, XD = du && du.exports === tk, zg = XD && FC.process, Qa = function() {
  try {
    var n = du && du.require && du.require("util").types;
    return n || zg && zg.binding && zg.binding("util");
  } catch {
  }
}(), EO = Qa && Qa.isTypedArray, YD = EO ? Dh(EO) : WD;
const Lp = YD;
var HD = Object.prototype, GD = HD.hasOwnProperty;
function nk(n, e) {
  var t = Cn(n), i = !t && Na(n), s = !t && !i && Ia(n), r = !t && !i && !s && Lp(n), o = t || i || s || r, l = o ? gD(n.length, String) : [], a = l.length;
  for (var c in n)
    (e || GD.call(n, c)) && !(o && // Safari 9 has enumerable `arguments.length` in strict mode.
    (c == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
    s && (c == "offset" || c == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
    r && (c == "buffer" || c == "byteLength" || c == "byteOffset") || // Skip index properties.
    Mp(c, a))) && l.push(c);
  return l;
}
function ik(n, e) {
  return function(t) {
    return n(e(t));
  };
}
var UD = ik(Object.keys, Object), KD = Object.prototype, JD = KD.hasOwnProperty;
function sk(n) {
  if (!Rh(n))
    return UD(n);
  var e = [];
  for (var t in Object(n))
    JD.call(n, t) && t != "constructor" && e.push(t);
  return e;
}
function Cc(n) {
  return Fo(n) ? nk(n) : sk(n);
}
var eL = Object.prototype, tL = eL.hasOwnProperty, nL = cv(function(n, e) {
  if (Rh(e) || Fo(e)) {
    Yl(e, Cc(e), n);
    return;
  }
  for (var t in e)
    tL.call(e, t) && Dp(n, t, e[t]);
});
const hZe = nL;
function iL(n) {
  var e = [];
  if (n != null)
    for (var t in Object(n))
      e.push(t);
  return e;
}
var sL = Object.prototype, rL = sL.hasOwnProperty;
function oL(n) {
  if (!Vt(n))
    return iL(n);
  var e = Rh(n), t = [];
  for (var i in n)
    i == "constructor" && (e || !rL.call(n, i)) || t.push(i);
  return t;
}
function kc(n) {
  return Fo(n) ? nk(n, !0) : oL(n);
}
var lL = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, aL = /^\w*$/;
function uv(n, e) {
  if (Cn(n))
    return !1;
  var t = typeof n;
  return t == "number" || t == "symbol" || t == "boolean" || n == null || fr(n) ? !0 : aL.test(n) || !lL.test(n) || e != null && n in Object(e);
}
var Qu = Xl(Object, "create");
function cL() {
  this.__data__ = Qu ? Qu(null) : {}, this.size = 0;
}
function uL(n) {
  var e = this.has(n) && delete this.__data__[n];
  return this.size -= e ? 1 : 0, e;
}
var hL = "__lodash_hash_undefined__", fL = Object.prototype, dL = fL.hasOwnProperty;
function pL(n) {
  var e = this.__data__;
  if (Qu) {
    var t = e[n];
    return t === hL ? void 0 : t;
  }
  return dL.call(e, n) ? e[n] : void 0;
}
var gL = Object.prototype, mL = gL.hasOwnProperty;
function bL(n) {
  var e = this.__data__;
  return Qu ? e[n] !== void 0 : mL.call(e, n);
}
var vL = "__lodash_hash_undefined__";
function yL(n, e) {
  var t = this.__data__;
  return this.size += this.has(n) ? 0 : 1, t[n] = Qu && e === void 0 ? vL : e, this;
}
function _l(n) {
  var e = -1, t = n == null ? 0 : n.length;
  for (this.clear(); ++e < t; ) {
    var i = n[e];
    this.set(i[0], i[1]);
  }
}
_l.prototype.clear = cL;
_l.prototype.delete = uL;
_l.prototype.get = pL;
_l.prototype.has = bL;
_l.prototype.set = yL;
function OL() {
  this.__data__ = [], this.size = 0;
}
function Np(n, e) {
  for (var t = n.length; t--; )
    if (xc(n[t][0], e))
      return t;
  return -1;
}
var wL = Array.prototype, xL = wL.splice;
function SL(n) {
  var e = this.__data__, t = Np(e, n);
  if (t < 0)
    return !1;
  var i = e.length - 1;
  return t == i ? e.pop() : xL.call(e, t, 1), --this.size, !0;
}
function CL(n) {
  var e = this.__data__, t = Np(e, n);
  return t < 0 ? void 0 : e[t][1];
}
function kL(n) {
  return Np(this.__data__, n) > -1;
}
function PL(n, e) {
  var t = this.__data__, i = Np(t, n);
  return i < 0 ? (++this.size, t.push([n, e])) : t[i][1] = e, this;
}
function Wr(n) {
  var e = -1, t = n == null ? 0 : n.length;
  for (this.clear(); ++e < t; ) {
    var i = n[e];
    this.set(i[0], i[1]);
  }
}
Wr.prototype.clear = OL;
Wr.prototype.delete = SL;
Wr.prototype.get = CL;
Wr.prototype.has = kL;
Wr.prototype.set = PL;
var Bu = Xl(Ms, "Map");
function AL() {
  this.size = 0, this.__data__ = {
    hash: new _l(),
    map: new (Bu || Wr)(),
    string: new _l()
  };
}
function EL(n) {
  var e = typeof n;
  return e == "string" || e == "number" || e == "symbol" || e == "boolean" ? n !== "__proto__" : n === null;
}
function Ip(n, e) {
  var t = n.__data__;
  return EL(e) ? t[typeof e == "string" ? "string" : "hash"] : t.map;
}
function $L(n) {
  var e = Ip(this, n).delete(n);
  return this.size -= e ? 1 : 0, e;
}
function TL(n) {
  return Ip(this, n).get(n);
}
function _L(n) {
  return Ip(this, n).has(n);
}
function ML(n, e) {
  var t = Ip(this, n), i = t.size;
  return t.set(n, e), this.size += t.size == i ? 0 : 1, this;
}
function Xr(n) {
  var e = -1, t = n == null ? 0 : n.length;
  for (this.clear(); ++e < t; ) {
    var i = n[e];
    this.set(i[0], i[1]);
  }
}
Xr.prototype.clear = AL;
Xr.prototype.delete = $L;
Xr.prototype.get = TL;
Xr.prototype.has = _L;
Xr.prototype.set = ML;
var RL = "Expected a function";
function hv(n, e) {
  if (typeof n != "function" || e != null && typeof e != "function")
    throw new TypeError(RL);
  var t = function() {
    var i = arguments, s = e ? e.apply(this, i) : i[0], r = t.cache;
    if (r.has(s))
      return r.get(s);
    var o = n.apply(this, i);
    return t.cache = r.set(s, o) || r, o;
  };
  return t.cache = new (hv.Cache || Xr)(), t;
}
hv.Cache = Xr;
var DL = 500;
function LL(n) {
  var e = hv(n, function(i) {
    return t.size === DL && t.clear(), i;
  }), t = e.cache;
  return e;
}
var NL = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g, IL = /\\(\\)?/g, QL = LL(function(n) {
  var e = [];
  return n.charCodeAt(0) === 46 && e.push(""), n.replace(NL, function(t, i, s, r) {
    e.push(s ? r.replace(IL, "$1") : i || t);
  }), e;
});
function Lh(n) {
  return n == null ? "" : qC(n);
}
function Pc(n, e) {
  return Cn(n) ? n : uv(n, e) ? [n] : QL(Lh(n));
}
var BL = 1 / 0;
function Ac(n) {
  if (typeof n == "string" || fr(n))
    return n;
  var e = n + "";
  return e == "0" && 1 / n == -BL ? "-0" : e;
}
function Nh(n, e) {
  e = Pc(e, n);
  for (var t = 0, i = e.length; n != null && t < i; )
    n = n[Ac(e[t++])];
  return t && t == i ? n : void 0;
}
function Wi(n, e, t) {
  var i = n == null ? void 0 : Nh(n, e);
  return i === void 0 ? t : i;
}
function fv(n, e) {
  for (var t = -1, i = e.length, s = n.length; ++t < i; )
    n[s + t] = e[t];
  return n;
}
var $O = es ? es.isConcatSpreadable : void 0;
function jL(n) {
  return Cn(n) || Na(n) || !!($O && n && n[$O]);
}
function Ec(n, e, t, i, s) {
  var r = -1, o = n.length;
  for (t || (t = jL), s || (s = []); ++r < o; ) {
    var l = n[r];
    e > 0 && t(l) ? e > 1 ? Ec(l, e - 1, t, i, s) : fv(s, l) : i || (s[s.length] = l);
  }
  return s;
}
function zL(n) {
  var e = n == null ? 0 : n.length;
  return e ? Ec(n, 1) : [];
}
function rk(n) {
  return HC(KC(n, void 0, zL), n + "");
}
var dv = ik(Object.getPrototypeOf, Object), ZL = "[object Object]", FL = Function.prototype, VL = Object.prototype, ok = FL.toString, qL = VL.hasOwnProperty, WL = ok.call(Object);
function Rs(n) {
  if (!ts(n) || qr(n) != ZL)
    return !1;
  var e = dv(n);
  if (e === null)
    return !0;
  var t = qL.call(e, "constructor") && e.constructor;
  return typeof t == "function" && t instanceof t && ok.call(t) == WL;
}
function pv(n, e, t) {
  var i = -1, s = n.length;
  e < 0 && (e = -e > s ? 0 : s + e), t = t > s ? s : t, t < 0 && (t += s), s = e > t ? 0 : t - e >>> 0, e >>>= 0;
  for (var r = Array(s); ++i < s; )
    r[i] = n[i + e];
  return r;
}
function XL(n, e, t) {
  var i = n.length;
  return t = t === void 0 ? i : t, !e && t >= i ? n : pv(n, e, t);
}
var YL = "\\ud800-\\udfff", HL = "\\u0300-\\u036f", GL = "\\ufe20-\\ufe2f", UL = "\\u20d0-\\u20ff", KL = HL + GL + UL, JL = "\\ufe0e\\ufe0f", eN = "\\u200d", tN = RegExp("[" + eN + YL + KL + JL + "]");
function lk(n) {
  return tN.test(n);
}
function nN(n) {
  return n.split("");
}
var ak = "\\ud800-\\udfff", iN = "\\u0300-\\u036f", sN = "\\ufe20-\\ufe2f", rN = "\\u20d0-\\u20ff", oN = iN + sN + rN, lN = "\\ufe0e\\ufe0f", aN = "[" + ak + "]", e0 = "[" + oN + "]", t0 = "\\ud83c[\\udffb-\\udfff]", cN = "(?:" + e0 + "|" + t0 + ")", ck = "[^" + ak + "]", uk = "(?:\\ud83c[\\udde6-\\uddff]){2}", hk = "[\\ud800-\\udbff][\\udc00-\\udfff]", uN = "\\u200d", fk = cN + "?", dk = "[" + lN + "]?", hN = "(?:" + uN + "(?:" + [ck, uk, hk].join("|") + ")" + dk + fk + ")*", fN = dk + fk + hN, dN = "(?:" + [ck + e0 + "?", e0, uk, hk, aN].join("|") + ")", pN = RegExp(t0 + "(?=" + t0 + ")|" + dN + fN, "g");
function gN(n) {
  return n.match(pN) || [];
}
function mN(n) {
  return lk(n) ? gN(n) : nN(n);
}
function pk(n) {
  return function(e) {
    e = Lh(e);
    var t = lk(e) ? mN(e) : void 0, i = t ? t[0] : e.charAt(0), s = t ? XL(t, 1).join("") : e.slice(1);
    return i[n]() + s;
  };
}
var Rd = pk("toUpperCase");
function bN(n) {
  return Rd(Lh(n).toLowerCase());
}
function vN(n, e, t, i) {
  var s = -1, r = n == null ? 0 : n.length;
  for (i && r && (t = n[++s]); ++s < r; )
    t = e(t, n[s], s, n);
  return t;
}
function yN(n) {
  return function(e) {
    return n == null ? void 0 : n[e];
  };
}
var ON = {
  // Latin-1 Supplement block.
  À: "A",
  Á: "A",
  Â: "A",
  Ã: "A",
  Ä: "A",
  Å: "A",
  à: "a",
  á: "a",
  â: "a",
  ã: "a",
  ä: "a",
  å: "a",
  Ç: "C",
  ç: "c",
  Ð: "D",
  ð: "d",
  È: "E",
  É: "E",
  Ê: "E",
  Ë: "E",
  è: "e",
  é: "e",
  ê: "e",
  ë: "e",
  Ì: "I",
  Í: "I",
  Î: "I",
  Ï: "I",
  ì: "i",
  í: "i",
  î: "i",
  ï: "i",
  Ñ: "N",
  ñ: "n",
  Ò: "O",
  Ó: "O",
  Ô: "O",
  Õ: "O",
  Ö: "O",
  Ø: "O",
  ò: "o",
  ó: "o",
  ô: "o",
  õ: "o",
  ö: "o",
  ø: "o",
  Ù: "U",
  Ú: "U",
  Û: "U",
  Ü: "U",
  ù: "u",
  ú: "u",
  û: "u",
  ü: "u",
  Ý: "Y",
  ý: "y",
  ÿ: "y",
  Æ: "Ae",
  æ: "ae",
  Þ: "Th",
  þ: "th",
  ß: "ss",
  // Latin Extended-A block.
  Ā: "A",
  Ă: "A",
  Ą: "A",
  ā: "a",
  ă: "a",
  ą: "a",
  Ć: "C",
  Ĉ: "C",
  Ċ: "C",
  Č: "C",
  ć: "c",
  ĉ: "c",
  ċ: "c",
  č: "c",
  Ď: "D",
  Đ: "D",
  ď: "d",
  đ: "d",
  Ē: "E",
  Ĕ: "E",
  Ė: "E",
  Ę: "E",
  Ě: "E",
  ē: "e",
  ĕ: "e",
  ė: "e",
  ę: "e",
  ě: "e",
  Ĝ: "G",
  Ğ: "G",
  Ġ: "G",
  Ģ: "G",
  ĝ: "g",
  ğ: "g",
  ġ: "g",
  ģ: "g",
  Ĥ: "H",
  Ħ: "H",
  ĥ: "h",
  ħ: "h",
  Ĩ: "I",
  Ī: "I",
  Ĭ: "I",
  Į: "I",
  İ: "I",
  ĩ: "i",
  ī: "i",
  ĭ: "i",
  į: "i",
  ı: "i",
  Ĵ: "J",
  ĵ: "j",
  Ķ: "K",
  ķ: "k",
  ĸ: "k",
  Ĺ: "L",
  Ļ: "L",
  Ľ: "L",
  Ŀ: "L",
  Ł: "L",
  ĺ: "l",
  ļ: "l",
  ľ: "l",
  ŀ: "l",
  ł: "l",
  Ń: "N",
  Ņ: "N",
  Ň: "N",
  Ŋ: "N",
  ń: "n",
  ņ: "n",
  ň: "n",
  ŋ: "n",
  Ō: "O",
  Ŏ: "O",
  Ő: "O",
  ō: "o",
  ŏ: "o",
  ő: "o",
  Ŕ: "R",
  Ŗ: "R",
  Ř: "R",
  ŕ: "r",
  ŗ: "r",
  ř: "r",
  Ś: "S",
  Ŝ: "S",
  Ş: "S",
  Š: "S",
  ś: "s",
  ŝ: "s",
  ş: "s",
  š: "s",
  Ţ: "T",
  Ť: "T",
  Ŧ: "T",
  ţ: "t",
  ť: "t",
  ŧ: "t",
  Ũ: "U",
  Ū: "U",
  Ŭ: "U",
  Ů: "U",
  Ű: "U",
  Ų: "U",
  ũ: "u",
  ū: "u",
  ŭ: "u",
  ů: "u",
  ű: "u",
  ų: "u",
  Ŵ: "W",
  ŵ: "w",
  Ŷ: "Y",
  ŷ: "y",
  Ÿ: "Y",
  Ź: "Z",
  Ż: "Z",
  Ž: "Z",
  ź: "z",
  ż: "z",
  ž: "z",
  Ĳ: "IJ",
  ĳ: "ij",
  Œ: "Oe",
  œ: "oe",
  ŉ: "'n",
  ſ: "s"
}, wN = yN(ON);
const xN = wN;
var SN = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g, CN = "\\u0300-\\u036f", kN = "\\ufe20-\\ufe2f", PN = "\\u20d0-\\u20ff", AN = CN + kN + PN, EN = "[" + AN + "]", $N = RegExp(EN, "g");
function TN(n) {
  return n = Lh(n), n && n.replace(SN, xN).replace($N, "");
}
var _N = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
function MN(n) {
  return n.match(_N) || [];
}
var RN = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
function DN(n) {
  return RN.test(n);
}
var gk = "\\ud800-\\udfff", LN = "\\u0300-\\u036f", NN = "\\ufe20-\\ufe2f", IN = "\\u20d0-\\u20ff", QN = LN + NN + IN, mk = "\\u2700-\\u27bf", bk = "a-z\\xdf-\\xf6\\xf8-\\xff", BN = "\\xac\\xb1\\xd7\\xf7", jN = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", zN = "\\u2000-\\u206f", ZN = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", vk = "A-Z\\xc0-\\xd6\\xd8-\\xde", FN = "\\ufe0e\\ufe0f", yk = BN + jN + zN + ZN, Ok = "['’]", TO = "[" + yk + "]", VN = "[" + QN + "]", wk = "\\d+", qN = "[" + mk + "]", xk = "[" + bk + "]", Sk = "[^" + gk + yk + wk + mk + bk + vk + "]", WN = "\\ud83c[\\udffb-\\udfff]", XN = "(?:" + VN + "|" + WN + ")", YN = "[^" + gk + "]", Ck = "(?:\\ud83c[\\udde6-\\uddff]){2}", kk = "[\\ud800-\\udbff][\\udc00-\\udfff]", ha = "[" + vk + "]", HN = "\\u200d", _O = "(?:" + xk + "|" + Sk + ")", GN = "(?:" + ha + "|" + Sk + ")", MO = "(?:" + Ok + "(?:d|ll|m|re|s|t|ve))?", RO = "(?:" + Ok + "(?:D|LL|M|RE|S|T|VE))?", Pk = XN + "?", Ak = "[" + FN + "]?", UN = "(?:" + HN + "(?:" + [YN, Ck, kk].join("|") + ")" + Ak + Pk + ")*", KN = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", JN = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", e3 = Ak + Pk + UN, t3 = "(?:" + [qN, Ck, kk].join("|") + ")" + e3, n3 = RegExp([
  ha + "?" + xk + "+" + MO + "(?=" + [TO, ha, "$"].join("|") + ")",
  GN + "+" + RO + "(?=" + [TO, ha + _O, "$"].join("|") + ")",
  ha + "?" + _O + "+" + MO,
  ha + "+" + RO,
  JN,
  KN,
  wk,
  t3
].join("|"), "g");
function i3(n) {
  return n.match(n3) || [];
}
function s3(n, e, t) {
  return n = Lh(n), e = t ? void 0 : e, e === void 0 ? DN(n) ? i3(n) : MN(n) : n.match(e) || [];
}
var r3 = "['’]", o3 = RegExp(r3, "g");
function gv(n) {
  return function(e) {
    return vN(s3(TN(e).replace(o3, "")), n, "");
  };
}
var Qp = gv(function(n, e, t) {
  return e = e.toLowerCase(), n + (t ? bN(e) : e);
});
function ju() {
  if (!arguments.length)
    return [];
  var n = arguments[0];
  return Cn(n) ? n : [n];
}
var l3 = Math.ceil, a3 = Math.max;
function fZe(n, e, t) {
  (t ? Iu(n, e, t) : e === void 0) ? e = 1 : e = a3(WC(e), 0);
  var i = n == null ? 0 : n.length;
  if (!i || e < 1)
    return [];
  for (var s = 0, r = 0, o = Array(l3(i / e)); s < i; )
    o[r++] = pv(n, s, s += e);
  return o;
}
function c3(n, e, t) {
  return n === n && (t !== void 0 && (n = n <= t ? n : t), e !== void 0 && (n = n >= e ? n : e)), n;
}
function di(n, e, t) {
  return t === void 0 && (t = e, e = void 0), t !== void 0 && (t = va(t), t = t === t ? t : 0), e !== void 0 && (e = va(e), e = e === e ? e : 0), c3(va(n), e, t);
}
function u3() {
  this.__data__ = new Wr(), this.size = 0;
}
function h3(n) {
  var e = this.__data__, t = e.delete(n);
  return this.size = e.size, t;
}
function f3(n) {
  return this.__data__.get(n);
}
function d3(n) {
  return this.__data__.has(n);
}
var p3 = 200;
function g3(n, e) {
  var t = this.__data__;
  if (t instanceof Wr) {
    var i = t.__data__;
    if (!Bu || i.length < p3 - 1)
      return i.push([n, e]), this.size = ++t.size, this;
    t = this.__data__ = new Xr(i);
  }
  return t.set(n, e), this.size = t.size, this;
}
function Cs(n) {
  var e = this.__data__ = new Wr(n);
  this.size = e.size;
}
Cs.prototype.clear = u3;
Cs.prototype.delete = h3;
Cs.prototype.get = f3;
Cs.prototype.has = d3;
Cs.prototype.set = g3;
function m3(n, e) {
  return n && Yl(e, Cc(e), n);
}
function b3(n, e) {
  return n && Yl(e, kc(e), n);
}
var Ek = typeof exports == "object" && exports && !exports.nodeType && exports, DO = Ek && typeof module == "object" && module && !module.nodeType && module, v3 = DO && DO.exports === Ek, LO = v3 ? Ms.Buffer : void 0, NO = LO ? LO.allocUnsafe : void 0;
function $k(n, e) {
  if (e)
    return n.slice();
  var t = n.length, i = NO ? NO(t) : new n.constructor(t);
  return n.copy(i), i;
}
function y3(n, e) {
  for (var t = -1, i = n == null ? 0 : n.length, s = 0, r = []; ++t < i; ) {
    var o = n[t];
    e(o, t, n) && (r[s++] = o);
  }
  return r;
}
function Tk() {
  return [];
}
var O3 = Object.prototype, w3 = O3.propertyIsEnumerable, IO = Object.getOwnPropertySymbols, mv = IO ? function(n) {
  return n == null ? [] : (n = Object(n), y3(IO(n), function(e) {
    return w3.call(n, e);
  }));
} : Tk;
function x3(n, e) {
  return Yl(n, mv(n), e);
}
var S3 = Object.getOwnPropertySymbols, _k = S3 ? function(n) {
  for (var e = []; n; )
    fv(e, mv(n)), n = dv(n);
  return e;
} : Tk;
function C3(n, e) {
  return Yl(n, _k(n), e);
}
function Mk(n, e, t) {
  var i = e(n);
  return Cn(n) ? i : fv(i, t(n));
}
function n0(n) {
  return Mk(n, Cc, mv);
}
function Rk(n) {
  return Mk(n, kc, _k);
}
var i0 = Xl(Ms, "DataView"), s0 = Xl(Ms, "Promise"), ya = Xl(Ms, "Set"), QO = "[object Map]", k3 = "[object Object]", BO = "[object Promise]", jO = "[object Set]", zO = "[object WeakMap]", ZO = "[object DataView]", P3 = Wl(i0), A3 = Wl(Bu), E3 = Wl(s0), $3 = Wl(ya), T3 = Wl(Jm), nl = qr;
(i0 && nl(new i0(new ArrayBuffer(1))) != ZO || Bu && nl(new Bu()) != QO || s0 && nl(s0.resolve()) != BO || ya && nl(new ya()) != jO || Jm && nl(new Jm()) != zO) && (nl = function(n) {
  var e = qr(n), t = e == k3 ? n.constructor : void 0, i = t ? Wl(t) : "";
  if (i)
    switch (i) {
      case P3:
        return ZO;
      case A3:
        return QO;
      case E3:
        return BO;
      case $3:
        return jO;
      case T3:
        return zO;
    }
  return e;
});
const Ba = nl;
var _3 = Object.prototype, M3 = _3.hasOwnProperty;
function R3(n) {
  var e = n.length, t = new n.constructor(e);
  return e && typeof n[0] == "string" && M3.call(n, "index") && (t.index = n.index, t.input = n.input), t;
}
var Dd = Ms.Uint8Array;
function bv(n) {
  var e = new n.constructor(n.byteLength);
  return new Dd(e).set(new Dd(n)), e;
}
function D3(n, e) {
  var t = e ? bv(n.buffer) : n.buffer;
  return new n.constructor(t, n.byteOffset, n.byteLength);
}
var L3 = /\w*$/;
function N3(n) {
  var e = new n.constructor(n.source, L3.exec(n));
  return e.lastIndex = n.lastIndex, e;
}
var FO = es ? es.prototype : void 0, VO = FO ? FO.valueOf : void 0;
function I3(n) {
  return VO ? Object(VO.call(n)) : {};
}
function Dk(n, e) {
  var t = e ? bv(n.buffer) : n.buffer;
  return new n.constructor(t, n.byteOffset, n.length);
}
var Q3 = "[object Boolean]", B3 = "[object Date]", j3 = "[object Map]", z3 = "[object Number]", Z3 = "[object RegExp]", F3 = "[object Set]", V3 = "[object String]", q3 = "[object Symbol]", W3 = "[object ArrayBuffer]", X3 = "[object DataView]", Y3 = "[object Float32Array]", H3 = "[object Float64Array]", G3 = "[object Int8Array]", U3 = "[object Int16Array]", K3 = "[object Int32Array]", J3 = "[object Uint8Array]", eI = "[object Uint8ClampedArray]", tI = "[object Uint16Array]", nI = "[object Uint32Array]";
function iI(n, e, t) {
  var i = n.constructor;
  switch (e) {
    case W3:
      return bv(n);
    case Q3:
    case B3:
      return new i(+n);
    case X3:
      return D3(n, t);
    case Y3:
    case H3:
    case G3:
    case U3:
    case K3:
    case J3:
    case eI:
    case tI:
    case nI:
      return Dk(n, t);
    case j3:
      return new i();
    case z3:
    case V3:
      return new i(n);
    case Z3:
      return N3(n);
    case F3:
      return new i();
    case q3:
      return I3(n);
  }
}
function Lk(n) {
  return typeof n.constructor == "function" && !Rh(n) ? GR(dv(n)) : {};
}
var sI = "[object Map]";
function rI(n) {
  return ts(n) && Ba(n) == sI;
}
var qO = Qa && Qa.isMap, oI = qO ? Dh(qO) : rI, lI = "[object Set]";
function aI(n) {
  return ts(n) && Ba(n) == lI;
}
var WO = Qa && Qa.isSet, cI = WO ? Dh(WO) : aI, uI = 1, hI = 2, fI = 4, Nk = "[object Arguments]", dI = "[object Array]", pI = "[object Boolean]", gI = "[object Date]", mI = "[object Error]", Ik = "[object Function]", bI = "[object GeneratorFunction]", vI = "[object Map]", yI = "[object Number]", Qk = "[object Object]", OI = "[object RegExp]", wI = "[object Set]", xI = "[object String]", SI = "[object Symbol]", CI = "[object WeakMap]", kI = "[object ArrayBuffer]", PI = "[object DataView]", AI = "[object Float32Array]", EI = "[object Float64Array]", $I = "[object Int8Array]", TI = "[object Int16Array]", _I = "[object Int32Array]", MI = "[object Uint8Array]", RI = "[object Uint8ClampedArray]", DI = "[object Uint16Array]", LI = "[object Uint32Array]", St = {};
St[Nk] = St[dI] = St[kI] = St[PI] = St[pI] = St[gI] = St[AI] = St[EI] = St[$I] = St[TI] = St[_I] = St[vI] = St[yI] = St[Qk] = St[OI] = St[wI] = St[xI] = St[SI] = St[MI] = St[RI] = St[DI] = St[LI] = !0;
St[mI] = St[Ik] = St[CI] = !1;
function Oa(n, e, t, i, s, r) {
  var o, l = e & uI, a = e & hI, c = e & fI;
  if (t && (o = s ? t(n, i, s, r) : t(n)), o !== void 0)
    return o;
  if (!Vt(n))
    return n;
  var u = Cn(n);
  if (u) {
    if (o = R3(n), !l)
      return YC(n, o);
  } else {
    var h = Ba(n), f = h == Ik || h == bI;
    if (Ia(n))
      return $k(n, l);
    if (h == Qk || h == Nk || f && !s) {
      if (o = a || f ? {} : Lk(n), !l)
        return a ? C3(n, b3(o, n)) : x3(n, m3(o, n));
    } else {
      if (!St[h])
        return s ? n : {};
      o = iI(n, h, l);
    }
  }
  r || (r = new Cs());
  var d = r.get(n);
  if (d)
    return d;
  r.set(n, o), cI(n) ? n.forEach(function(m) {
    o.add(Oa(m, e, t, m, n, r));
  }) : oI(n) && n.forEach(function(m, b) {
    o.set(b, Oa(m, e, t, b, n, r));
  });
  var p = c ? a ? Rk : n0 : a ? kc : Cc, g = u ? void 0 : p(n);
  return rD(g || n, function(m, b) {
    g && (b = m, m = n[b]), Dp(o, b, Oa(m, e, t, b, n, r));
  }), o;
}
var NI = 4;
function zu(n) {
  return Oa(n, NI);
}
var II = 1, QI = 4;
function Tt(n) {
  return Oa(n, II | QI);
}
var BI = "__lodash_hash_undefined__";
function jI(n) {
  return this.__data__.set(n, BI), this;
}
function zI(n) {
  return this.__data__.has(n);
}
function ja(n) {
  var e = -1, t = n == null ? 0 : n.length;
  for (this.__data__ = new Xr(); ++e < t; )
    this.add(n[e]);
}
ja.prototype.add = ja.prototype.push = jI;
ja.prototype.has = zI;
function ZI(n, e) {
  for (var t = -1, i = n == null ? 0 : n.length; ++t < i; )
    if (e(n[t], t, n))
      return !0;
  return !1;
}
function vv(n, e) {
  return n.has(e);
}
var FI = 1, VI = 2;
function Bk(n, e, t, i, s, r) {
  var o = t & FI, l = n.length, a = e.length;
  if (l != a && !(o && a > l))
    return !1;
  var c = r.get(n), u = r.get(e);
  if (c && u)
    return c == e && u == n;
  var h = -1, f = !0, d = t & VI ? new ja() : void 0;
  for (r.set(n, e), r.set(e, n); ++h < l; ) {
    var p = n[h], g = e[h];
    if (i)
      var m = o ? i(g, p, h, e, n, r) : i(p, g, h, n, e, r);
    if (m !== void 0) {
      if (m)
        continue;
      f = !1;
      break;
    }
    if (d) {
      if (!ZI(e, function(b, y) {
        if (!vv(d, y) && (p === b || s(p, b, t, i, r)))
          return d.push(y);
      })) {
        f = !1;
        break;
      }
    } else if (!(p === g || s(p, g, t, i, r))) {
      f = !1;
      break;
    }
  }
  return r.delete(n), r.delete(e), f;
}
function qI(n) {
  var e = -1, t = Array(n.size);
  return n.forEach(function(i, s) {
    t[++e] = [s, i];
  }), t;
}
function yv(n) {
  var e = -1, t = Array(n.size);
  return n.forEach(function(i) {
    t[++e] = i;
  }), t;
}
var WI = 1, XI = 2, YI = "[object Boolean]", HI = "[object Date]", GI = "[object Error]", UI = "[object Map]", KI = "[object Number]", JI = "[object RegExp]", eQ = "[object Set]", tQ = "[object String]", nQ = "[object Symbol]", iQ = "[object ArrayBuffer]", sQ = "[object DataView]", XO = es ? es.prototype : void 0, Zg = XO ? XO.valueOf : void 0;
function rQ(n, e, t, i, s, r, o) {
  switch (t) {
    case sQ:
      if (n.byteLength != e.byteLength || n.byteOffset != e.byteOffset)
        return !1;
      n = n.buffer, e = e.buffer;
    case iQ:
      return !(n.byteLength != e.byteLength || !r(new Dd(n), new Dd(e)));
    case YI:
    case HI:
    case KI:
      return xc(+n, +e);
    case GI:
      return n.name == e.name && n.message == e.message;
    case JI:
    case tQ:
      return n == e + "";
    case UI:
      var l = qI;
    case eQ:
      var a = i & WI;
      if (l || (l = yv), n.size != e.size && !a)
        return !1;
      var c = o.get(n);
      if (c)
        return c == e;
      i |= XI, o.set(n, e);
      var u = Bk(l(n), l(e), i, s, r, o);
      return o.delete(n), u;
    case nQ:
      if (Zg)
        return Zg.call(n) == Zg.call(e);
  }
  return !1;
}
var oQ = 1, lQ = Object.prototype, aQ = lQ.hasOwnProperty;
function cQ(n, e, t, i, s, r) {
  var o = t & oQ, l = n0(n), a = l.length, c = n0(e), u = c.length;
  if (a != u && !o)
    return !1;
  for (var h = a; h--; ) {
    var f = l[h];
    if (!(o ? f in e : aQ.call(e, f)))
      return !1;
  }
  var d = r.get(n), p = r.get(e);
  if (d && p)
    return d == e && p == n;
  var g = !0;
  r.set(n, e), r.set(e, n);
  for (var m = o; ++h < a; ) {
    f = l[h];
    var b = n[f], y = e[f];
    if (i)
      var v = o ? i(y, b, f, e, n, r) : i(b, y, f, n, e, r);
    if (!(v === void 0 ? b === y || s(b, y, t, i, r) : v)) {
      g = !1;
      break;
    }
    m || (m = f == "constructor");
  }
  if (g && !m) {
    var O = n.constructor, x = e.constructor;
    O != x && "constructor" in n && "constructor" in e && !(typeof O == "function" && O instanceof O && typeof x == "function" && x instanceof x) && (g = !1);
  }
  return r.delete(n), r.delete(e), g;
}
var uQ = 1, YO = "[object Arguments]", HO = "[object Array]", af = "[object Object]", hQ = Object.prototype, GO = hQ.hasOwnProperty;
function fQ(n, e, t, i, s, r) {
  var o = Cn(n), l = Cn(e), a = o ? HO : Ba(n), c = l ? HO : Ba(e);
  a = a == YO ? af : a, c = c == YO ? af : c;
  var u = a == af, h = c == af, f = a == c;
  if (f && Ia(n)) {
    if (!Ia(e))
      return !1;
    o = !0, u = !1;
  }
  if (f && !u)
    return r || (r = new Cs()), o || Lp(n) ? Bk(n, e, t, i, s, r) : rQ(n, e, a, t, i, s, r);
  if (!(t & uQ)) {
    var d = u && GO.call(n, "__wrapped__"), p = h && GO.call(e, "__wrapped__");
    if (d || p) {
      var g = d ? n.value() : n, m = p ? e.value() : e;
      return r || (r = new Cs()), s(g, m, t, i, r);
    }
  }
  return f ? (r || (r = new Cs()), cQ(n, e, t, i, s, r)) : !1;
}
function Bp(n, e, t, i, s) {
  return n === e ? !0 : n == null || e == null || !ts(n) && !ts(e) ? n !== n && e !== e : fQ(n, e, t, i, Bp, s);
}
var dQ = 1, pQ = 2;
function gQ(n, e, t, i) {
  var s = t.length, r = s, o = !i;
  if (n == null)
    return !r;
  for (n = Object(n); s--; ) {
    var l = t[s];
    if (o && l[2] ? l[1] !== n[l[0]] : !(l[0] in n))
      return !1;
  }
  for (; ++s < r; ) {
    l = t[s];
    var a = l[0], c = n[a], u = l[1];
    if (o && l[2]) {
      if (c === void 0 && !(a in n))
        return !1;
    } else {
      var h = new Cs();
      if (i)
        var f = i(c, u, a, n, e, h);
      if (!(f === void 0 ? Bp(u, c, dQ | pQ, i, h) : f))
        return !1;
    }
  }
  return !0;
}
function jk(n) {
  return n === n && !Vt(n);
}
function mQ(n) {
  for (var e = Cc(n), t = e.length; t--; ) {
    var i = e[t], s = n[i];
    e[t] = [i, s, jk(s)];
  }
  return e;
}
function zk(n, e) {
  return function(t) {
    return t == null ? !1 : t[n] === e && (e !== void 0 || n in Object(t));
  };
}
function bQ(n) {
  var e = mQ(n);
  return e.length == 1 && e[0][2] ? zk(e[0][0], e[0][1]) : function(t) {
    return t === n || gQ(t, n, e);
  };
}
function vQ(n, e) {
  return n != null && e in Object(n);
}
function Zk(n, e, t) {
  e = Pc(e, n);
  for (var i = -1, s = e.length, r = !1; ++i < s; ) {
    var o = Ac(e[i]);
    if (!(r = n != null && t(n, o)))
      break;
    n = n[o];
  }
  return r || ++i != s ? r : (s = n == null ? 0 : n.length, !!s && av(s) && Mp(o, s) && (Cn(n) || Na(n)));
}
function Fk(n, e) {
  return n != null && Zk(n, e, vQ);
}
var yQ = 1, OQ = 2;
function wQ(n, e) {
  return uv(n) && jk(e) ? zk(Ac(n), e) : function(t) {
    var i = Wi(t, n);
    return i === void 0 && i === e ? Fk(t, n) : Bp(e, i, yQ | OQ);
  };
}
function xQ(n) {
  return function(e) {
    return e == null ? void 0 : e[n];
  };
}
function SQ(n) {
  return function(e) {
    return Nh(e, n);
  };
}
function CQ(n) {
  return uv(n) ? xQ(Ac(n)) : SQ(n);
}
function Ih(n) {
  return typeof n == "function" ? n : n == null ? wc : typeof n == "object" ? Cn(n) ? wQ(n[0], n[1]) : bQ(n) : CQ(n);
}
function kQ(n, e, t, i) {
  for (var s = -1, r = n == null ? 0 : n.length; ++s < r; ) {
    var o = n[s];
    e(i, o, t(o), n);
  }
  return i;
}
function PQ(n) {
  return function(e, t, i) {
    for (var s = -1, r = Object(e), o = i(e), l = o.length; l--; ) {
      var a = o[n ? l : ++s];
      if (t(r[a], a, r) === !1)
        break;
    }
    return e;
  };
}
var Vk = PQ();
function AQ(n, e) {
  return n && Vk(n, e, Cc);
}
function EQ(n, e) {
  return function(t, i) {
    if (t == null)
      return t;
    if (!Fo(t))
      return n(t, i);
    for (var s = t.length, r = e ? s : -1, o = Object(t); (e ? r-- : ++r < s) && i(o[r], r, o) !== !1; )
      ;
    return t;
  };
}
var qk = EQ(AQ);
function $Q(n, e, t, i) {
  return qk(n, function(s, r, o) {
    e(i, s, t(s), o);
  }), i;
}
function TQ(n, e) {
  return function(t, i) {
    var s = Cn(t) ? kQ : $Q, r = e ? e() : {};
    return s(t, n, Ih(i), r);
  };
}
var Fg = function() {
  return Ms.Date.now();
}, _Q = "Expected a function", MQ = Math.max, RQ = Math.min;
function Ml(n, e, t) {
  var i, s, r, o, l, a, c = 0, u = !1, h = !1, f = !0;
  if (typeof n != "function")
    throw new TypeError(_Q);
  e = va(e) || 0, Vt(t) && (u = !!t.leading, h = "maxWait" in t, r = h ? MQ(va(t.maxWait) || 0, e) : r, f = "trailing" in t ? !!t.trailing : f);
  function d(S) {
    var C = i, k = s;
    return i = s = void 0, c = S, o = n.apply(k, C), o;
  }
  function p(S) {
    return c = S, l = setTimeout(b, e), u ? d(S) : o;
  }
  function g(S) {
    var C = S - a, k = S - c, E = e - C;
    return h ? RQ(E, r - k) : E;
  }
  function m(S) {
    var C = S - a, k = S - c;
    return a === void 0 || C >= e || C < 0 || h && k >= r;
  }
  function b() {
    var S = Fg();
    if (m(S))
      return y(S);
    l = setTimeout(b, g(S));
  }
  function y(S) {
    return l = void 0, f && i ? d(S) : (i = s = void 0, o);
  }
  function v() {
    l !== void 0 && clearTimeout(l), c = 0, i = a = s = l = void 0;
  }
  function O() {
    return l === void 0 ? o : y(Fg());
  }
  function x() {
    var S = Fg(), C = m(S);
    if (i = arguments, s = this, a = S, C) {
      if (l === void 0)
        return p(a);
      if (h)
        return clearTimeout(l), l = setTimeout(b, e), d(a);
    }
    return l === void 0 && (l = setTimeout(b, e)), o;
  }
  return x.cancel = v, x.flush = O, x;
}
var Wk = Object.prototype, DQ = Wk.hasOwnProperty, LQ = Sc(function(n, e) {
  n = Object(n);
  var t = -1, i = e.length, s = i > 2 ? e[2] : void 0;
  for (s && Iu(e[0], e[1], s) && (i = 1); ++t < i; )
    for (var r = e[t], o = kc(r), l = -1, a = o.length; ++l < a; ) {
      var c = o[l], u = n[c];
      (u === void 0 || xc(u, Wk[c]) && !DQ.call(n, c)) && (n[c] = r[c]);
    }
  return n;
});
function r0(n, e, t) {
  (t !== void 0 && !xc(n[e], t) || t === void 0 && !(e in n)) && Rp(n, e, t);
}
function Ld(n) {
  return ts(n) && Fo(n);
}
function o0(n, e) {
  if (!(e === "constructor" && typeof n[e] == "function") && e != "__proto__")
    return n[e];
}
function NQ(n) {
  return Yl(n, kc(n));
}
function IQ(n, e, t, i, s, r, o) {
  var l = o0(n, t), a = o0(e, t), c = o.get(a);
  if (c) {
    r0(n, t, c);
    return;
  }
  var u = r ? r(l, a, t + "", n, e, o) : void 0, h = u === void 0;
  if (h) {
    var f = Cn(a), d = !f && Ia(a), p = !f && !d && Lp(a);
    u = a, f || d || p ? Cn(l) ? u = l : Ld(l) ? u = YC(l) : d ? (h = !1, u = $k(a, !0)) : p ? (h = !1, u = Dk(a, !0)) : u = [] : Rs(a) || Na(a) ? (u = l, Na(l) ? u = NQ(l) : (!Vt(l) || lv(l)) && (u = Lk(a))) : h = !1;
  }
  h && (o.set(a, u), s(u, a, i, r, o), o.delete(a)), r0(n, t, u);
}
function jp(n, e, t, i, s) {
  n !== e && Vk(e, function(r, o) {
    if (s || (s = new Cs()), Vt(r))
      IQ(n, e, o, t, jp, i, s);
    else {
      var l = i ? i(o0(n, o), r, o + "", n, e, s) : void 0;
      l === void 0 && (l = r), r0(n, o, l);
    }
  }, kc);
}
function Xk(n, e, t, i, s, r) {
  return Vt(n) && Vt(e) && (r.set(e, n), jp(n, e, void 0, Xk, r), r.delete(e)), n;
}
var QQ = cv(function(n, e, t, i) {
  jp(n, e, t, i);
});
const BQ = QQ;
var Yk = Sc(function(n) {
  return n.push(void 0, Xk), XC(BQ, void 0, n);
});
function Hk(n, e, t) {
  for (var i = -1, s = n == null ? 0 : n.length; ++i < s; )
    if (t(e, n[i]))
      return !0;
  return !1;
}
var jQ = 200;
function zQ(n, e, t, i) {
  var s = -1, r = UC, o = !0, l = n.length, a = [], c = e.length;
  if (!l)
    return a;
  t && (e = xl(e, Dh(t))), i ? (r = Hk, o = !1) : e.length >= jQ && (r = vv, o = !1, e = new ja(e));
  e:
    for (; ++s < l; ) {
      var u = n[s], h = t == null ? u : t(u);
      if (u = i || u !== 0 ? u : 0, o && h === h) {
        for (var f = c; f--; )
          if (e[f] === h)
            continue e;
        a.push(u);
      } else
        r(e, h, i) || a.push(u);
    }
  return a;
}
var ZQ = Sc(function(n, e) {
  return Ld(n) ? zQ(n, Ec(e, 1, Ld, !0)) : [];
});
function FQ(n) {
  var e = n == null ? 0 : n.length;
  return e ? n[e - 1] : void 0;
}
var VQ = Math.max, qQ = Math.min;
function WQ(n, e, t) {
  var i = n == null ? 0 : n.length;
  if (!i)
    return -1;
  var s = i - 1;
  return t !== void 0 && (s = WC(t), s = t < 0 ? VQ(i + s, 0) : qQ(s, i - 1)), GC(n, Ih(e), s, !0);
}
function Gk(n, e) {
  var t = -1, i = Fo(n) ? Array(n.length) : [];
  return qk(n, function(s, r, o) {
    i[++t] = e(s, r, o);
  }), i;
}
function XQ(n, e) {
  var t = Cn(n) ? xl : Gk;
  return t(n, Ih(e));
}
function YQ(n, e) {
  return Ec(XQ(n, e), 1);
}
function Nd(n) {
  for (var e = -1, t = n == null ? 0 : n.length, i = {}; ++e < t; ) {
    var s = n[e];
    i[s[0]] = s[1];
  }
  return i;
}
var HQ = Object.prototype, GQ = HQ.hasOwnProperty, UO = TQ(function(n, e, t) {
  GQ.call(n, t) ? n[t].push(e) : Rp(n, t, [e]);
});
function UQ(n, e) {
  return n > e;
}
var KQ = Object.prototype, JQ = KQ.hasOwnProperty;
function e5(n, e) {
  return n != null && JQ.call(n, e);
}
function cf(n, e) {
  return n != null && Zk(n, e, e5);
}
function t5(n, e) {
  return e.length < 2 ? n : Nh(n, pv(e, 0, -1));
}
var n5 = "[object Boolean]";
function dZe(n) {
  return n === !0 || n === !1 || ts(n) && qr(n) == n5;
}
var i5 = "[object Map]", s5 = "[object Set]", r5 = Object.prototype, o5 = r5.hasOwnProperty;
function Uk(n) {
  if (n == null)
    return !0;
  if (Fo(n) && (Cn(n) || typeof n == "string" || typeof n.splice == "function" || Ia(n) || Lp(n) || Na(n)))
    return !n.length;
  var e = Ba(n);
  if (e == i5 || e == s5)
    return !n.size;
  if (Rh(n))
    return !sk(n).length;
  for (var t in n)
    if (o5.call(n, t))
      return !1;
  return !0;
}
function Xn(n, e) {
  return Bp(n, e);
}
var l5 = "[object Number]";
function KO(n) {
  return typeof n == "number" || ts(n) && qr(n) == l5;
}
function Ii(n) {
  return n == null;
}
function Kk(n) {
  return n === void 0;
}
var a5 = gv(function(n, e, t) {
  return n + (t ? "-" : "") + e.toLowerCase();
});
const pZe = a5;
var c5 = pk("toLowerCase");
function u5(n, e, t) {
  for (var i = -1, s = n.length; ++i < s; ) {
    var r = n[i], o = e(r);
    if (o != null && (l === void 0 ? o === o && !fr(o) : t(o, l)))
      var l = o, a = r;
  }
  return a;
}
function h5(n) {
  return n && n.length ? u5(n, wc, UQ) : void 0;
}
var Ft = cv(function(n, e, t) {
  jp(n, e, t);
});
function Jk(n, e) {
  return e = Pc(e, n), n = t5(n, e), n == null || delete n[Ac(FQ(e))];
}
function f5(n) {
  return Rs(n) ? void 0 : n;
}
var d5 = 1, p5 = 2, g5 = 4, gZe = rk(function(n, e) {
  var t = {};
  if (n == null)
    return t;
  var i = !1;
  e = xl(e, function(r) {
    return r = Pc(r, n), i || (i = r.length > 1), r;
  }), Yl(n, Rk(n), t), i && (t = Oa(t, d5 | p5 | g5, f5));
  for (var s = e.length; s--; )
    Jk(t, e[s]);
  return t;
});
function e2(n, e, t, i) {
  if (!Vt(n))
    return n;
  e = Pc(e, n);
  for (var s = -1, r = e.length, o = r - 1, l = n; l != null && ++s < r; ) {
    var a = Ac(e[s]), c = t;
    if (a === "__proto__" || a === "constructor" || a === "prototype")
      return n;
    if (s != o) {
      var u = l[a];
      c = i ? i(u, a, l) : void 0, c === void 0 && (c = Vt(u) ? u : Mp(e[s + 1]) ? [] : {});
    }
    Dp(l, a, c), l = l[a];
  }
  return n;
}
function m5(n, e, t) {
  for (var i = -1, s = e.length, r = {}; ++i < s; ) {
    var o = e[i], l = Nh(n, o);
    t(l, o) && e2(r, Pc(o, n), l);
  }
  return r;
}
function b5(n, e) {
  var t = n.length;
  for (n.sort(e); t--; )
    n[t] = n[t].value;
  return n;
}
function v5(n, e) {
  if (n !== e) {
    var t = n !== void 0, i = n === null, s = n === n, r = fr(n), o = e !== void 0, l = e === null, a = e === e, c = fr(e);
    if (!l && !c && !r && n > e || r && o && a && !l && !c || i && o && a || !t && a || !s)
      return 1;
    if (!i && !r && !c && n < e || c && t && s && !i && !r || l && t && s || !o && s || !a)
      return -1;
  }
  return 0;
}
function y5(n, e, t) {
  for (var i = -1, s = n.criteria, r = e.criteria, o = s.length, l = t.length; ++i < o; ) {
    var a = v5(s[i], r[i]);
    if (a) {
      if (i >= l)
        return a;
      var c = t[i];
      return a * (c == "desc" ? -1 : 1);
    }
  }
  return n.index - e.index;
}
function O5(n, e, t) {
  e.length ? e = xl(e, function(r) {
    return Cn(r) ? function(o) {
      return Nh(o, r.length === 1 ? r[0] : r);
    } : r;
  }) : e = [wc];
  var i = -1;
  e = xl(e, Dh(Ih));
  var s = Gk(n, function(r, o, l) {
    var a = xl(e, function(c) {
      return c(r);
    });
    return { criteria: a, index: ++i, value: r };
  });
  return b5(s, function(r, o) {
    return y5(r, o, t);
  });
}
function w5(n, e) {
  return m5(n, e, function(t, i) {
    return Fk(n, i);
  });
}
var l0 = rk(function(n, e) {
  return n == null ? {} : w5(n, e);
});
function x5(n, e, t) {
  return n == null ? n : e2(n, e, t);
}
var t2 = Sc(function(n, e) {
  if (n == null)
    return [];
  var t = e.length;
  return t > 1 && Iu(n, e[0], e[1]) ? e = [] : t > 2 && Iu(e[0], e[1], e[2]) && (e = [e[0]]), O5(n, Ec(e, 1), []);
}), S5 = 4294967295, C5 = S5 - 1, k5 = Math.floor, P5 = Math.min;
function n2(n, e, t, i) {
  var s = 0, r = n == null ? 0 : n.length;
  if (r === 0)
    return 0;
  e = t(e);
  for (var o = e !== e, l = e === null, a = fr(e), c = e === void 0; s < r; ) {
    var u = k5((s + r) / 2), h = t(n[u]), f = h !== void 0, d = h === null, p = h === h, g = fr(h);
    if (o)
      var m = i || p;
    else
      c ? m = p && (i || f) : l ? m = p && f && (i || !d) : a ? m = p && f && !d && (i || !g) : d || g ? m = !1 : m = i ? h <= e : h < e;
    m ? s = u + 1 : r = u;
  }
  return P5(r, C5);
}
var A5 = 4294967295, E5 = A5 >>> 1;
function $5(n, e, t) {
  var i = 0, s = n == null ? i : n.length;
  if (typeof e == "number" && e === e && s <= E5) {
    for (; i < s; ) {
      var r = i + s >>> 1, o = n[r];
      o !== null && !fr(o) && (t ? o <= e : o < e) ? i = r + 1 : s = r;
    }
    return s;
  }
  return n2(n, e, wc, t);
}
function T5(n, e) {
  return $5(n, e);
}
function _5(n, e, t) {
  return n2(n, e, Ih(t));
}
var M5 = gv(function(n, e, t) {
  return n + (t ? " " : "") + Rd(e);
}), R5 = "Expected a function";
function D5(n, e, t) {
  var i = !0, s = !0;
  if (typeof n != "function")
    throw new TypeError(R5);
  return Vt(t) && (i = "leading" in t ? !!t.leading : i, s = "trailing" in t ? !!t.trailing : s), Ml(n, e, {
    leading: i,
    maxWait: e,
    trailing: s
  });
}
var L5 = 1 / 0, N5 = ya && 1 / yv(new ya([, -0]))[1] == L5 ? function(n) {
  return new ya(n);
} : UR, I5 = 200;
function i2(n, e, t) {
  var i = -1, s = UC, r = n.length, o = !0, l = [], a = l;
  if (t)
    o = !1, s = Hk;
  else if (r >= I5) {
    var c = e ? null : N5(n);
    if (c)
      return yv(c);
    o = !1, s = vv, a = new ja();
  } else
    a = e ? [] : l;
  e:
    for (; ++i < r; ) {
      var u = n[i], h = e ? e(u) : u;
      if (u = t || u !== 0 ? u : 0, o && h === h) {
        for (var f = a.length; f--; )
          if (a[f] === h)
            continue e;
        e && a.push(h), l.push(u);
      } else
        s(a, h, t) || (a !== l && a.push(h), l.push(u));
    }
  return l;
}
var JO = Sc(function(n) {
  return i2(Ec(n, 1, Ld, !0));
});
function s2(n) {
  return n && n.length ? i2(n) : [];
}
function mZe(n, e) {
  return n == null ? !0 : Jk(n, e);
}
/*! Element Plus Icons Vue v2.3.1 */
var Q5 = /* @__PURE__ */ Z({
  name: "ArrowDown",
  __name: "arrow-down",
  setup(n) {
    return (e, t) => (R(), F("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      W("path", {
        fill: "currentColor",
        d: "M831.872 340.864 512 652.672 192.128 340.864a30.592 30.592 0 0 0-42.752 0 29.12 29.12 0 0 0 0 41.6L489.664 714.24a32 32 0 0 0 44.672 0l340.288-331.712a29.12 29.12 0 0 0 0-41.728 30.592 30.592 0 0 0-42.752 0z"
      })
    ]));
  }
}), zp = Q5, B5 = /* @__PURE__ */ Z({
  name: "ArrowLeft",
  __name: "arrow-left",
  setup(n) {
    return (e, t) => (R(), F("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      W("path", {
        fill: "currentColor",
        d: "M609.408 149.376 277.76 489.6a32 32 0 0 0 0 44.672l331.648 340.352a29.12 29.12 0 0 0 41.728 0 30.592 30.592 0 0 0 0-42.752L339.264 511.936l311.872-319.872a30.592 30.592 0 0 0 0-42.688 29.12 29.12 0 0 0-41.728 0z"
      })
    ]));
  }
}), r2 = B5, j5 = /* @__PURE__ */ Z({
  name: "ArrowRight",
  __name: "arrow-right",
  setup(n) {
    return (e, t) => (R(), F("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      W("path", {
        fill: "currentColor",
        d: "M340.864 149.312a30.592 30.592 0 0 0 0 42.752L652.736 512 340.864 831.872a30.592 30.592 0 0 0 0 42.752 29.12 29.12 0 0 0 41.728 0L714.24 534.336a32 32 0 0 0 0-44.672L382.592 149.376a29.12 29.12 0 0 0-41.728 0z"
      })
    ]));
  }
}), Qh = j5, z5 = /* @__PURE__ */ Z({
  name: "ArrowUp",
  __name: "arrow-up",
  setup(n) {
    return (e, t) => (R(), F("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      W("path", {
        fill: "currentColor",
        d: "m488.832 344.32-339.84 356.672a32 32 0 0 0 0 44.16l.384.384a29.44 29.44 0 0 0 42.688 0l320-335.872 319.872 335.872a29.44 29.44 0 0 0 42.688 0l.384-.384a32 32 0 0 0 0-44.16L535.168 344.32a32 32 0 0 0-46.336 0"
      })
    ]));
  }
}), o2 = z5, Z5 = /* @__PURE__ */ Z({
  name: "CircleCheck",
  __name: "circle-check",
  setup(n) {
    return (e, t) => (R(), F("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      W("path", {
        fill: "currentColor",
        d: "M512 896a384 384 0 1 0 0-768 384 384 0 0 0 0 768m0 64a448 448 0 1 1 0-896 448 448 0 0 1 0 896"
      }),
      W("path", {
        fill: "currentColor",
        d: "M745.344 361.344a32 32 0 0 1 45.312 45.312l-288 288a32 32 0 0 1-45.312 0l-160-160a32 32 0 1 1 45.312-45.312L480 626.752l265.344-265.408z"
      })
    ]));
  }
}), F5 = Z5, V5 = /* @__PURE__ */ Z({
  name: "CircleCloseFilled",
  __name: "circle-close-filled",
  setup(n) {
    return (e, t) => (R(), F("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      W("path", {
        fill: "currentColor",
        d: "M512 64a448 448 0 1 1 0 896 448 448 0 0 1 0-896m0 393.664L407.936 353.6a38.4 38.4 0 1 0-54.336 54.336L457.664 512 353.6 616.064a38.4 38.4 0 1 0 54.336 54.336L512 566.336 616.064 670.4a38.4 38.4 0 1 0 54.336-54.336L566.336 512 670.4 407.936a38.4 38.4 0 1 0-54.336-54.336z"
      })
    ]));
  }
}), l2 = V5, q5 = /* @__PURE__ */ Z({
  name: "CircleClose",
  __name: "circle-close",
  setup(n) {
    return (e, t) => (R(), F("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      W("path", {
        fill: "currentColor",
        d: "m466.752 512-90.496-90.496a32 32 0 0 1 45.248-45.248L512 466.752l90.496-90.496a32 32 0 1 1 45.248 45.248L557.248 512l90.496 90.496a32 32 0 1 1-45.248 45.248L512 557.248l-90.496 90.496a32 32 0 0 1-45.248-45.248z"
      }),
      W("path", {
        fill: "currentColor",
        d: "M512 896a384 384 0 1 0 0-768 384 384 0 0 0 0 768m0 64a448 448 0 1 1 0-896 448 448 0 0 1 0 896"
      })
    ]));
  }
}), Ov = q5, W5 = /* @__PURE__ */ Z({
  name: "Close",
  __name: "close",
  setup(n) {
    return (e, t) => (R(), F("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      W("path", {
        fill: "currentColor",
        d: "M764.288 214.592 512 466.88 259.712 214.592a31.936 31.936 0 0 0-45.12 45.12L466.752 512 214.528 764.224a31.936 31.936 0 1 0 45.12 45.184L512 557.184l252.288 252.288a31.936 31.936 0 0 0 45.12-45.12L557.12 512.064l252.288-252.352a31.936 31.936 0 1 0-45.12-45.184z"
      })
    ]));
  }
}), Rl = W5, X5 = /* @__PURE__ */ Z({
  name: "CopyDocument",
  __name: "copy-document",
  setup(n) {
    return (e, t) => (R(), F("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      W("path", {
        fill: "currentColor",
        d: "M768 832a128 128 0 0 1-128 128H192A128 128 0 0 1 64 832V384a128 128 0 0 1 128-128v64a64 64 0 0 0-64 64v448a64 64 0 0 0 64 64h448a64 64 0 0 0 64-64z"
      }),
      W("path", {
        fill: "currentColor",
        d: "M384 128a64 64 0 0 0-64 64v448a64 64 0 0 0 64 64h448a64 64 0 0 0 64-64V192a64 64 0 0 0-64-64zm0-64h448a128 128 0 0 1 128 128v448a128 128 0 0 1-128 128H384a128 128 0 0 1-128-128V192A128 128 0 0 1 384 64"
      })
    ]));
  }
}), bZe = X5, Y5 = /* @__PURE__ */ Z({
  name: "DArrowLeft",
  __name: "d-arrow-left",
  setup(n) {
    return (e, t) => (R(), F("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      W("path", {
        fill: "currentColor",
        d: "M529.408 149.376a29.12 29.12 0 0 1 41.728 0 30.592 30.592 0 0 1 0 42.688L259.264 511.936l311.872 319.936a30.592 30.592 0 0 1-.512 43.264 29.12 29.12 0 0 1-41.216-.512L197.76 534.272a32 32 0 0 1 0-44.672l331.648-340.224zm256 0a29.12 29.12 0 0 1 41.728 0 30.592 30.592 0 0 1 0 42.688L515.264 511.936l311.872 319.936a30.592 30.592 0 0 1-.512 43.264 29.12 29.12 0 0 1-41.216-.512L453.76 534.272a32 32 0 0 1 0-44.672l331.648-340.224z"
      })
    ]));
  }
}), H5 = Y5, G5 = /* @__PURE__ */ Z({
  name: "DArrowRight",
  __name: "d-arrow-right",
  setup(n) {
    return (e, t) => (R(), F("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      W("path", {
        fill: "currentColor",
        d: "M452.864 149.312a29.12 29.12 0 0 1 41.728.064L826.24 489.664a32 32 0 0 1 0 44.672L494.592 874.624a29.12 29.12 0 0 1-41.728 0 30.592 30.592 0 0 1 0-42.752L764.736 512 452.864 192a30.592 30.592 0 0 1 0-42.688m-256 0a29.12 29.12 0 0 1 41.728.064L570.24 489.664a32 32 0 0 1 0 44.672L238.592 874.624a29.12 29.12 0 0 1-41.728 0 30.592 30.592 0 0 1 0-42.752L508.736 512 196.864 192a30.592 30.592 0 0 1 0-42.688z"
      })
    ]));
  }
}), U5 = G5, K5 = /* @__PURE__ */ Z({
  name: "Delete",
  __name: "delete",
  setup(n) {
    return (e, t) => (R(), F("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      W("path", {
        fill: "currentColor",
        d: "M160 256H96a32 32 0 0 1 0-64h256V95.936a32 32 0 0 1 32-32h256a32 32 0 0 1 32 32V192h256a32 32 0 1 1 0 64h-64v672a32 32 0 0 1-32 32H192a32 32 0 0 1-32-32zm448-64v-64H416v64zM224 896h576V256H224zm192-128a32 32 0 0 1-32-32V416a32 32 0 0 1 64 0v320a32 32 0 0 1-32 32m192 0a32 32 0 0 1-32-32V416a32 32 0 0 1 64 0v320a32 32 0 0 1-32 32"
      })
    ]));
  }
}), vZe = K5, J5 = /* @__PURE__ */ Z({
  name: "Download",
  __name: "download",
  setup(n) {
    return (e, t) => (R(), F("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      W("path", {
        fill: "currentColor",
        d: "M160 832h704a32 32 0 1 1 0 64H160a32 32 0 1 1 0-64m384-253.696 236.288-236.352 45.248 45.248L508.8 704 192 387.2l45.248-45.248L480 584.704V128h64z"
      })
    ]));
  }
}), yZe = J5, e4 = /* @__PURE__ */ Z({
  name: "Edit",
  __name: "edit",
  setup(n) {
    return (e, t) => (R(), F("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      W("path", {
        fill: "currentColor",
        d: "M832 512a32 32 0 1 1 64 0v352a32 32 0 0 1-32 32H160a32 32 0 0 1-32-32V160a32 32 0 0 1 32-32h352a32 32 0 0 1 0 64H192v640h640z"
      }),
      W("path", {
        fill: "currentColor",
        d: "m469.952 554.24 52.8-7.552L847.104 222.4a32 32 0 1 0-45.248-45.248L477.44 501.44l-7.552 52.8zm422.4-422.4a96 96 0 0 1 0 135.808l-331.84 331.84a32 32 0 0 1-18.112 9.088L436.8 623.68a32 32 0 0 1-36.224-36.224l15.104-105.6a32 32 0 0 1 9.024-18.112l331.904-331.84a96 96 0 0 1 135.744 0z"
      })
    ]));
  }
}), OZe = e4, t4 = /* @__PURE__ */ Z({
  name: "Files",
  __name: "files",
  setup(n) {
    return (e, t) => (R(), F("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      W("path", {
        fill: "currentColor",
        d: "M128 384v448h768V384zm-32-64h832a32 32 0 0 1 32 32v512a32 32 0 0 1-32 32H96a32 32 0 0 1-32-32V352a32 32 0 0 1 32-32m64-128h704v64H160zm96-128h512v64H256z"
      })
    ]));
  }
}), wZe = t4, n4 = /* @__PURE__ */ Z({
  name: "Fold",
  __name: "fold",
  setup(n) {
    return (e, t) => (R(), F("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      W("path", {
        fill: "currentColor",
        d: "M896 192H128v128h768zm0 256H384v128h512zm0 256H128v128h768zM320 384 128 512l192 128z"
      })
    ]));
  }
}), xZe = n4, i4 = /* @__PURE__ */ Z({
  name: "FullScreen",
  __name: "full-screen",
  setup(n) {
    return (e, t) => (R(), F("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      W("path", {
        fill: "currentColor",
        d: "m160 96.064 192 .192a32 32 0 0 1 0 64l-192-.192V352a32 32 0 0 1-64 0V96h64zm0 831.872V928H96V672a32 32 0 1 1 64 0v191.936l192-.192a32 32 0 1 1 0 64zM864 96.064V96h64v256a32 32 0 1 1-64 0V160.064l-192 .192a32 32 0 1 1 0-64l192-.192zm0 831.872-192-.192a32 32 0 0 1 0-64l192 .192V672a32 32 0 1 1 64 0v256h-64z"
      })
    ]));
  }
}), SZe = i4, s4 = /* @__PURE__ */ Z({
  name: "Help",
  __name: "help",
  setup(n) {
    return (e, t) => (R(), F("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      W("path", {
        fill: "currentColor",
        d: "m759.936 805.248-90.944-91.008A254.912 254.912 0 0 1 512 768a254.912 254.912 0 0 1-156.992-53.76l-90.944 91.008A382.464 382.464 0 0 0 512 896c94.528 0 181.12-34.176 247.936-90.752m45.312-45.312A382.464 382.464 0 0 0 896 512c0-94.528-34.176-181.12-90.752-247.936l-91.008 90.944C747.904 398.4 768 452.864 768 512c0 59.136-20.096 113.6-53.76 156.992l91.008 90.944zm-45.312-541.184A382.464 382.464 0 0 0 512 128c-94.528 0-181.12 34.176-247.936 90.752l90.944 91.008A254.912 254.912 0 0 1 512 256c59.136 0 113.6 20.096 156.992 53.76l90.944-91.008zm-541.184 45.312A382.464 382.464 0 0 0 128 512c0 94.528 34.176 181.12 90.752 247.936l91.008-90.944A254.912 254.912 0 0 1 256 512c0-59.136 20.096-113.6 53.76-156.992zm417.28 394.496a194.56 194.56 0 0 0 22.528-22.528C686.912 602.56 704 559.232 704 512a191.232 191.232 0 0 0-67.968-146.56A191.296 191.296 0 0 0 512 320a191.232 191.232 0 0 0-146.56 67.968C337.088 421.44 320 464.768 320 512a191.232 191.232 0 0 0 67.968 146.56C421.44 686.912 464.768 704 512 704c47.296 0 90.56-17.088 124.032-45.44zM512 960a448 448 0 1 1 0-896 448 448 0 0 1 0 896"
      })
    ]));
  }
}), CZe = s4, r4 = /* @__PURE__ */ Z({
  name: "Hide",
  __name: "hide",
  setup(n) {
    return (e, t) => (R(), F("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      W("path", {
        fill: "currentColor",
        d: "M876.8 156.8c0-9.6-3.2-16-9.6-22.4-6.4-6.4-12.8-9.6-22.4-9.6-9.6 0-16 3.2-22.4 9.6L736 220.8c-64-32-137.6-51.2-224-60.8-160 16-288 73.6-377.6 176C44.8 438.4 0 496 0 512s48 73.6 134.4 176c22.4 25.6 44.8 48 73.6 67.2l-86.4 89.6c-6.4 6.4-9.6 12.8-9.6 22.4 0 9.6 3.2 16 9.6 22.4 6.4 6.4 12.8 9.6 22.4 9.6 9.6 0 16-3.2 22.4-9.6l704-710.4c3.2-6.4 6.4-12.8 6.4-22.4Zm-646.4 528c-76.8-70.4-128-128-153.6-172.8 28.8-48 80-105.6 153.6-172.8C304 272 400 230.4 512 224c64 3.2 124.8 19.2 176 44.8l-54.4 54.4C598.4 300.8 560 288 512 288c-64 0-115.2 22.4-160 64s-64 96-64 160c0 48 12.8 89.6 35.2 124.8L256 707.2c-9.6-6.4-19.2-16-25.6-22.4Zm140.8-96c-12.8-22.4-19.2-48-19.2-76.8 0-44.8 16-83.2 48-112 32-28.8 67.2-48 112-48 28.8 0 54.4 6.4 73.6 19.2zM889.599 336c-12.8-16-28.8-28.8-41.6-41.6l-48 48c73.6 67.2 124.8 124.8 150.4 169.6-28.8 48-80 105.6-153.6 172.8-73.6 67.2-172.8 108.8-284.8 115.2-51.2-3.2-99.2-12.8-140.8-28.8l-48 48c57.6 22.4 118.4 38.4 188.8 44.8 160-16 288-73.6 377.6-176C979.199 585.6 1024 528 1024 512s-48.001-73.6-134.401-176Z"
      }),
      W("path", {
        fill: "currentColor",
        d: "M511.998 672c-12.8 0-25.6-3.2-38.4-6.4l-51.2 51.2c28.8 12.8 57.6 19.2 89.6 19.2 64 0 115.2-22.4 160-64 41.6-41.6 64-96 64-160 0-32-6.4-64-19.2-89.6l-51.2 51.2c3.2 12.8 6.4 25.6 6.4 38.4 0 44.8-16 83.2-48 112-32 28.8-67.2 48-112 48Z"
      })
    ]));
  }
}), o4 = r4, l4 = /* @__PURE__ */ Z({
  name: "InfoFilled",
  __name: "info-filled",
  setup(n) {
    return (e, t) => (R(), F("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      W("path", {
        fill: "currentColor",
        d: "M512 64a448 448 0 1 1 0 896.064A448 448 0 0 1 512 64m67.2 275.072c33.28 0 60.288-23.104 60.288-57.344s-27.072-57.344-60.288-57.344c-33.28 0-60.16 23.104-60.16 57.344s26.88 57.344 60.16 57.344M590.912 699.2c0-6.848 2.368-24.64 1.024-34.752l-52.608 60.544c-10.88 11.456-24.512 19.392-30.912 17.28a12.992 12.992 0 0 1-8.256-14.72l87.68-276.992c7.168-35.136-12.544-67.2-54.336-71.296-44.096 0-108.992 44.736-148.48 101.504 0 6.784-1.28 23.68.064 33.792l52.544-60.608c10.88-11.328 23.552-19.328 29.952-17.152a12.8 12.8 0 0 1 7.808 16.128L388.48 728.576c-10.048 32.256 8.96 63.872 55.04 71.04 67.84 0 107.904-43.648 147.456-100.416z"
      })
    ]));
  }
}), a2 = l4, a4 = /* @__PURE__ */ Z({
  name: "Loading",
  __name: "loading",
  setup(n) {
    return (e, t) => (R(), F("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      W("path", {
        fill: "currentColor",
        d: "M512 64a32 32 0 0 1 32 32v192a32 32 0 0 1-64 0V96a32 32 0 0 1 32-32m0 640a32 32 0 0 1 32 32v192a32 32 0 1 1-64 0V736a32 32 0 0 1 32-32m448-192a32 32 0 0 1-32 32H736a32 32 0 1 1 0-64h192a32 32 0 0 1 32 32m-640 0a32 32 0 0 1-32 32H96a32 32 0 0 1 0-64h192a32 32 0 0 1 32 32M195.2 195.2a32 32 0 0 1 45.248 0L376.32 331.008a32 32 0 0 1-45.248 45.248L195.2 240.448a32 32 0 0 1 0-45.248zm452.544 452.544a32 32 0 0 1 45.248 0L828.8 783.552a32 32 0 0 1-45.248 45.248L647.744 692.992a32 32 0 0 1 0-45.248zM828.8 195.264a32 32 0 0 1 0 45.184L692.992 376.32a32 32 0 0 1-45.248-45.248l135.808-135.808a32 32 0 0 1 45.248 0m-452.544 452.48a32 32 0 0 1 0 45.248L240.448 828.8a32 32 0 0 1-45.248-45.248l135.808-135.808a32 32 0 0 1 45.248 0z"
      })
    ]));
  }
}), Zp = a4, c4 = /* @__PURE__ */ Z({
  name: "MagicStick",
  __name: "magic-stick",
  setup(n) {
    return (e, t) => (R(), F("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      W("path", {
        fill: "currentColor",
        d: "M512 64h64v192h-64zm0 576h64v192h-64zM160 480v-64h192v64zm576 0v-64h192v64zM249.856 199.04l45.248-45.184L430.848 289.6 385.6 334.848 249.856 199.104zM657.152 606.4l45.248-45.248 135.744 135.744-45.248 45.248zM114.048 923.2 68.8 877.952l316.8-316.8 45.248 45.248zM702.4 334.848 657.152 289.6l135.744-135.744 45.248 45.248z"
      })
    ]));
  }
}), kZe = c4, u4 = /* @__PURE__ */ Z({
  name: "Minus",
  __name: "minus",
  setup(n) {
    return (e, t) => (R(), F("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      W("path", {
        fill: "currentColor",
        d: "M128 544h768a32 32 0 1 0 0-64H128a32 32 0 0 0 0 64"
      })
    ]));
  }
}), h4 = u4, f4 = /* @__PURE__ */ Z({
  name: "MoreFilled",
  __name: "more-filled",
  setup(n) {
    return (e, t) => (R(), F("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      W("path", {
        fill: "currentColor",
        d: "M176 416a112 112 0 1 1 0 224 112 112 0 0 1 0-224m336 0a112 112 0 1 1 0 224 112 112 0 0 1 0-224m336 0a112 112 0 1 1 0 224 112 112 0 0 1 0-224"
      })
    ]));
  }
}), e1 = f4, d4 = /* @__PURE__ */ Z({
  name: "Plus",
  __name: "plus",
  setup(n) {
    return (e, t) => (R(), F("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      W("path", {
        fill: "currentColor",
        d: "M480 480V128a32 32 0 0 1 64 0v352h352a32 32 0 1 1 0 64H544v352a32 32 0 1 1-64 0V544H128a32 32 0 0 1 0-64z"
      })
    ]));
  }
}), c2 = d4, p4 = /* @__PURE__ */ Z({
  name: "RefreshLeft",
  __name: "refresh-left",
  setup(n) {
    return (e, t) => (R(), F("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      W("path", {
        fill: "currentColor",
        d: "M289.088 296.704h92.992a32 32 0 0 1 0 64H232.96a32 32 0 0 1-32-32V179.712a32 32 0 0 1 64 0v50.56a384 384 0 0 1 643.84 282.88 384 384 0 0 1-383.936 384 384 384 0 0 1-384-384h64a320 320 0 1 0 640 0 320 320 0 0 0-555.712-216.448z"
      })
    ]));
  }
}), PZe = p4, g4 = /* @__PURE__ */ Z({
  name: "RefreshRight",
  __name: "refresh-right",
  setup(n) {
    return (e, t) => (R(), F("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      W("path", {
        fill: "currentColor",
        d: "M784.512 230.272v-50.56a32 32 0 1 1 64 0v149.056a32 32 0 0 1-32 32H667.52a32 32 0 1 1 0-64h92.992A320 320 0 1 0 524.8 833.152a320 320 0 0 0 320-320h64a384 384 0 0 1-384 384 384 384 0 0 1-384-384 384 384 0 0 1 643.712-282.88z"
      })
    ]));
  }
}), AZe = g4, m4 = /* @__PURE__ */ Z({
  name: "Refresh",
  __name: "refresh",
  setup(n) {
    return (e, t) => (R(), F("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      W("path", {
        fill: "currentColor",
        d: "M771.776 794.88A384 384 0 0 1 128 512h64a320 320 0 0 0 555.712 216.448H654.72a32 32 0 1 1 0-64h149.056a32 32 0 0 1 32 32v148.928a32 32 0 1 1-64 0v-50.56zM276.288 295.616h92.992a32 32 0 0 1 0 64H220.16a32 32 0 0 1-32-32V178.56a32 32 0 0 1 64 0v50.56A384 384 0 0 1 896.128 512h-64a320 320 0 0 0-555.776-216.384z"
      })
    ]));
  }
}), EZe = m4, b4 = /* @__PURE__ */ Z({
  name: "Search",
  __name: "search",
  setup(n) {
    return (e, t) => (R(), F("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      W("path", {
        fill: "currentColor",
        d: "m795.904 750.72 124.992 124.928a32 32 0 0 1-45.248 45.248L750.656 795.904a416 416 0 1 1 45.248-45.248zM480 832a352 352 0 1 0 0-704 352 352 0 0 0 0 704"
      })
    ]));
  }
}), $Ze = b4, v4 = /* @__PURE__ */ Z({
  name: "Select",
  __name: "select",
  setup(n) {
    return (e, t) => (R(), F("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      W("path", {
        fill: "currentColor",
        d: "M77.248 415.04a64 64 0 0 1 90.496 0l226.304 226.304L846.528 188.8a64 64 0 1 1 90.56 90.496l-543.04 543.04-316.8-316.8a64 64 0 0 1 0-90.496z"
      })
    ]));
  }
}), TZe = v4, y4 = /* @__PURE__ */ Z({
  name: "SuccessFilled",
  __name: "success-filled",
  setup(n) {
    return (e, t) => (R(), F("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      W("path", {
        fill: "currentColor",
        d: "M512 64a448 448 0 1 1 0 896 448 448 0 0 1 0-896m-55.808 536.384-99.52-99.584a38.4 38.4 0 1 0-54.336 54.336l126.72 126.72a38.272 38.272 0 0 0 54.336 0l262.4-262.464a38.4 38.4 0 1 0-54.272-54.336z"
      })
    ]));
  }
}), u2 = y4, O4 = /* @__PURE__ */ Z({
  name: "Upload",
  __name: "upload",
  setup(n) {
    return (e, t) => (R(), F("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      W("path", {
        fill: "currentColor",
        d: "M160 832h704a32 32 0 1 1 0 64H160a32 32 0 1 1 0-64m384-578.304V704h-64V247.296L237.248 490.048 192 444.8 508.8 128l316.8 316.8-45.312 45.248z"
      })
    ]));
  }
}), _Ze = O4, w4 = /* @__PURE__ */ Z({
  name: "View",
  __name: "view",
  setup(n) {
    return (e, t) => (R(), F("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      W("path", {
        fill: "currentColor",
        d: "M512 160c320 0 512 352 512 352S832 864 512 864 0 512 0 512s192-352 512-352m0 64c-225.28 0-384.128 208.064-436.8 288 52.608 79.872 211.456 288 436.8 288 225.28 0 384.128-208.064 436.8-288-52.608-79.872-211.456-288-436.8-288zm0 64a224 224 0 1 1 0 448 224 224 0 0 1 0-448m0 64a160.192 160.192 0 0 0-160 160c0 88.192 71.744 160 160 160s160-71.808 160-160-71.744-160-160-160"
      })
    ]));
  }
}), x4 = w4, S4 = /* @__PURE__ */ Z({
  name: "WarningFilled",
  __name: "warning-filled",
  setup(n) {
    return (e, t) => (R(), F("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      W("path", {
        fill: "currentColor",
        d: "M512 64a448 448 0 1 1 0 896 448 448 0 0 1 0-896m0 192a58.432 58.432 0 0 0-58.24 63.744l23.36 256.384a35.072 35.072 0 0 0 69.76 0l23.296-256.384A58.432 58.432 0 0 0 512 256m0 512a51.2 51.2 0 1 0 0-102.4 51.2 51.2 0 0 0 0 102.4"
      })
    ]));
  }
}), h2 = S4, C4 = /* @__PURE__ */ Z({
  name: "ZoomIn",
  __name: "zoom-in",
  setup(n) {
    return (e, t) => (R(), F("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      W("path", {
        fill: "currentColor",
        d: "m795.904 750.72 124.992 124.928a32 32 0 0 1-45.248 45.248L750.656 795.904a416 416 0 1 1 45.248-45.248zM480 832a352 352 0 1 0 0-704 352 352 0 0 0 0 704m-32-384v-96a32 32 0 0 1 64 0v96h96a32 32 0 0 1 0 64h-96v96a32 32 0 0 1-64 0v-96h-96a32 32 0 0 1 0-64z"
      })
    ]));
  }
}), MZe = C4, k4 = /* @__PURE__ */ Z({
  name: "ZoomOut",
  __name: "zoom-out",
  setup(n) {
    return (e, t) => (R(), F("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      W("path", {
        fill: "currentColor",
        d: "m795.904 750.72 124.992 124.928a32 32 0 0 1-45.248 45.248L750.656 795.904a416 416 0 1 1 45.248-45.248zM480 832a352 352 0 1 0 0-704 352 352 0 0 0 0 704M352 448h256a32 32 0 0 1 0 64H352a32 32 0 0 1 0-64"
      })
    ]));
  }
}), RZe = k4;
function ul() {
  return ul = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var i in t)
        Object.prototype.hasOwnProperty.call(t, i) && (n[i] = t[i]);
    }
    return n;
  }, ul.apply(this, arguments);
}
function P4(n, e) {
  n.prototype = Object.create(e.prototype), n.prototype.constructor = n, Zu(n, e);
}
function a0(n) {
  return a0 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
    return t.__proto__ || Object.getPrototypeOf(t);
  }, a0(n);
}
function Zu(n, e) {
  return Zu = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(i, s) {
    return i.__proto__ = s, i;
  }, Zu(n, e);
}
function A4() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function td(n, e, t) {
  return A4() ? td = Reflect.construct.bind() : td = function(s, r, o) {
    var l = [null];
    l.push.apply(l, r);
    var a = Function.bind.apply(s, l), c = new a();
    return o && Zu(c, o.prototype), c;
  }, td.apply(null, arguments);
}
function E4(n) {
  return Function.toString.call(n).indexOf("[native code]") !== -1;
}
function c0(n) {
  var e = typeof Map == "function" ? /* @__PURE__ */ new Map() : void 0;
  return c0 = function(i) {
    if (i === null || !E4(i))
      return i;
    if (typeof i != "function")
      throw new TypeError("Super expression must either be null or a function");
    if (typeof e < "u") {
      if (e.has(i))
        return e.get(i);
      e.set(i, s);
    }
    function s() {
      return td(i, arguments, a0(this).constructor);
    }
    return s.prototype = Object.create(i.prototype, {
      constructor: {
        value: s,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    }), Zu(s, i);
  }, c0(n);
}
var $4 = /%[sdj%]/g, f2 = function() {
};
typeof process < "u" && process.env && process.env.NODE_ENV !== "production" && typeof window < "u" && typeof document < "u" && (f2 = function(e, t) {
  typeof console < "u" && console.warn && typeof ASYNC_VALIDATOR_NO_WARNING > "u" && t.every(function(i) {
    return typeof i == "string";
  }) && console.warn(e, t);
});
function u0(n) {
  if (!n || !n.length)
    return null;
  var e = {};
  return n.forEach(function(t) {
    var i = t.field;
    e[i] = e[i] || [], e[i].push(t);
  }), e;
}
function Di(n) {
  for (var e = arguments.length, t = new Array(e > 1 ? e - 1 : 0), i = 1; i < e; i++)
    t[i - 1] = arguments[i];
  var s = 0, r = t.length;
  if (typeof n == "function")
    return n.apply(null, t);
  if (typeof n == "string") {
    var o = n.replace($4, function(l) {
      if (l === "%%")
        return "%";
      if (s >= r)
        return l;
      switch (l) {
        case "%s":
          return String(t[s++]);
        case "%d":
          return Number(t[s++]);
        case "%j":
          try {
            return JSON.stringify(t[s++]);
          } catch {
            return "[Circular]";
          }
          break;
        default:
          return l;
      }
    });
    return o;
  }
  return n;
}
function T4(n) {
  return n === "string" || n === "url" || n === "hex" || n === "email" || n === "date" || n === "pattern";
}
function gn(n, e) {
  return !!(n == null || e === "array" && Array.isArray(n) && !n.length || T4(e) && typeof n == "string" && !n);
}
function _4(n, e, t) {
  var i = [], s = 0, r = n.length;
  function o(l) {
    i.push.apply(i, l || []), s++, s === r && t(i);
  }
  n.forEach(function(l) {
    e(l, o);
  });
}
function t1(n, e, t) {
  var i = 0, s = n.length;
  function r(o) {
    if (o && o.length) {
      t(o);
      return;
    }
    var l = i;
    i = i + 1, l < s ? e(n[l], r) : t([]);
  }
  r([]);
}
function M4(n) {
  var e = [];
  return Object.keys(n).forEach(function(t) {
    e.push.apply(e, n[t] || []);
  }), e;
}
var n1 = /* @__PURE__ */ function(n) {
  P4(e, n);
  function e(t, i) {
    var s;
    return s = n.call(this, "Async Validation Error") || this, s.errors = t, s.fields = i, s;
  }
  return e;
}(/* @__PURE__ */ c0(Error));
function R4(n, e, t, i, s) {
  if (e.first) {
    var r = new Promise(function(f, d) {
      var p = function(b) {
        return i(b), b.length ? d(new n1(b, u0(b))) : f(s);
      }, g = M4(n);
      t1(g, t, p);
    });
    return r.catch(function(f) {
      return f;
    }), r;
  }
  var o = e.firstFields === !0 ? Object.keys(n) : e.firstFields || [], l = Object.keys(n), a = l.length, c = 0, u = [], h = new Promise(function(f, d) {
    var p = function(m) {
      if (u.push.apply(u, m), c++, c === a)
        return i(u), u.length ? d(new n1(u, u0(u))) : f(s);
    };
    l.length || (i(u), f(s)), l.forEach(function(g) {
      var m = n[g];
      o.indexOf(g) !== -1 ? t1(m, t, p) : _4(m, t, p);
    });
  });
  return h.catch(function(f) {
    return f;
  }), h;
}
function D4(n) {
  return !!(n && n.message !== void 0);
}
function L4(n, e) {
  for (var t = n, i = 0; i < e.length; i++) {
    if (t == null)
      return t;
    t = t[e[i]];
  }
  return t;
}
function i1(n, e) {
  return function(t) {
    var i;
    return n.fullFields ? i = L4(e, n.fullFields) : i = e[t.field || n.fullField], D4(t) ? (t.field = t.field || n.fullField, t.fieldValue = i, t) : {
      message: typeof t == "function" ? t() : t,
      fieldValue: i,
      field: t.field || n.fullField
    };
  };
}
function s1(n, e) {
  if (e) {
    for (var t in e)
      if (e.hasOwnProperty(t)) {
        var i = e[t];
        typeof i == "object" && typeof n[t] == "object" ? n[t] = ul({}, n[t], i) : n[t] = i;
      }
  }
  return n;
}
var d2 = function(e, t, i, s, r, o) {
  e.required && (!i.hasOwnProperty(e.field) || gn(t, o || e.type)) && s.push(Di(r.messages.required, e.fullField));
}, N4 = function(e, t, i, s, r) {
  (/^\s+$/.test(t) || t === "") && s.push(Di(r.messages.whitespace, e.fullField));
}, uf, I4 = function() {
  if (uf)
    return uf;
  var n = "[a-fA-F\\d:]", e = function(O) {
    return O && O.includeBoundaries ? "(?:(?<=\\s|^)(?=" + n + ")|(?<=" + n + ")(?=\\s|$))" : "";
  }, t = "(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}", i = "[a-fA-F\\d]{1,4}", s = (`
(?:
(?:` + i + ":){7}(?:" + i + `|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8
(?:` + i + ":){6}(?:" + t + "|:" + i + `|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4
(?:` + i + ":){5}(?::" + t + "|(?::" + i + `){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4
(?:` + i + ":){4}(?:(?::" + i + "){0,1}:" + t + "|(?::" + i + `){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4
(?:` + i + ":){3}(?:(?::" + i + "){0,2}:" + t + "|(?::" + i + `){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4
(?:` + i + ":){2}(?:(?::" + i + "){0,3}:" + t + "|(?::" + i + `){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4
(?:` + i + ":){1}(?:(?::" + i + "){0,4}:" + t + "|(?::" + i + `){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4
(?::(?:(?::` + i + "){0,5}:" + t + "|(?::" + i + `){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4
)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1
`).replace(/\s*\/\/.*$/gm, "").replace(/\n/g, "").trim(), r = new RegExp("(?:^" + t + "$)|(?:^" + s + "$)"), o = new RegExp("^" + t + "$"), l = new RegExp("^" + s + "$"), a = function(O) {
    return O && O.exact ? r : new RegExp("(?:" + e(O) + t + e(O) + ")|(?:" + e(O) + s + e(O) + ")", "g");
  };
  a.v4 = function(v) {
    return v && v.exact ? o : new RegExp("" + e(v) + t + e(v), "g");
  }, a.v6 = function(v) {
    return v && v.exact ? l : new RegExp("" + e(v) + s + e(v), "g");
  };
  var c = "(?:(?:[a-z]+:)?//)", u = "(?:\\S+(?::\\S*)?@)?", h = a.v4().source, f = a.v6().source, d = "(?:(?:[a-z\\u00a1-\\uffff0-9][-_]*)*[a-z\\u00a1-\\uffff0-9]+)", p = "(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*", g = "(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))", m = "(?::\\d{2,5})?", b = '(?:[/?#][^\\s"]*)?', y = "(?:" + c + "|www\\.)" + u + "(?:localhost|" + h + "|" + f + "|" + d + p + g + ")" + m + b;
  return uf = new RegExp("(?:^" + y + "$)", "i"), uf;
}, r1 = {
  // http://emailregex.com/
  email: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+\.)+[a-zA-Z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,}))$/,
  // url: new RegExp(
  //   '^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\S+(?::\\S*)?@)?(?:(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[0-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))|localhost)(?::\\d{2,5})?(?:(/|\\?|#)[^\\s]*)?$',
  //   'i',
  // ),
  hex: /^#?([a-f0-9]{6}|[a-f0-9]{3})$/i
}, iu = {
  integer: function(e) {
    return iu.number(e) && parseInt(e, 10) === e;
  },
  float: function(e) {
    return iu.number(e) && !iu.integer(e);
  },
  array: function(e) {
    return Array.isArray(e);
  },
  regexp: function(e) {
    if (e instanceof RegExp)
      return !0;
    try {
      return !!new RegExp(e);
    } catch {
      return !1;
    }
  },
  date: function(e) {
    return typeof e.getTime == "function" && typeof e.getMonth == "function" && typeof e.getYear == "function" && !isNaN(e.getTime());
  },
  number: function(e) {
    return isNaN(e) ? !1 : typeof e == "number";
  },
  object: function(e) {
    return typeof e == "object" && !iu.array(e);
  },
  method: function(e) {
    return typeof e == "function";
  },
  email: function(e) {
    return typeof e == "string" && e.length <= 320 && !!e.match(r1.email);
  },
  url: function(e) {
    return typeof e == "string" && e.length <= 2048 && !!e.match(I4());
  },
  hex: function(e) {
    return typeof e == "string" && !!e.match(r1.hex);
  }
}, Q4 = function(e, t, i, s, r) {
  if (e.required && t === void 0) {
    d2(e, t, i, s, r);
    return;
  }
  var o = ["integer", "float", "array", "regexp", "object", "method", "email", "number", "date", "url", "hex"], l = e.type;
  o.indexOf(l) > -1 ? iu[l](t) || s.push(Di(r.messages.types[l], e.fullField, e.type)) : l && typeof t !== e.type && s.push(Di(r.messages.types[l], e.fullField, e.type));
}, B4 = function(e, t, i, s, r) {
  var o = typeof e.len == "number", l = typeof e.min == "number", a = typeof e.max == "number", c = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g, u = t, h = null, f = typeof t == "number", d = typeof t == "string", p = Array.isArray(t);
  if (f ? h = "number" : d ? h = "string" : p && (h = "array"), !h)
    return !1;
  p && (u = t.length), d && (u = t.replace(c, "_").length), o ? u !== e.len && s.push(Di(r.messages[h].len, e.fullField, e.len)) : l && !a && u < e.min ? s.push(Di(r.messages[h].min, e.fullField, e.min)) : a && !l && u > e.max ? s.push(Di(r.messages[h].max, e.fullField, e.max)) : l && a && (u < e.min || u > e.max) && s.push(Di(r.messages[h].range, e.fullField, e.min, e.max));
}, sa = "enum", j4 = function(e, t, i, s, r) {
  e[sa] = Array.isArray(e[sa]) ? e[sa] : [], e[sa].indexOf(t) === -1 && s.push(Di(r.messages[sa], e.fullField, e[sa].join(", ")));
}, z4 = function(e, t, i, s, r) {
  if (e.pattern) {
    if (e.pattern instanceof RegExp)
      e.pattern.lastIndex = 0, e.pattern.test(t) || s.push(Di(r.messages.pattern.mismatch, e.fullField, t, e.pattern));
    else if (typeof e.pattern == "string") {
      var o = new RegExp(e.pattern);
      o.test(t) || s.push(Di(r.messages.pattern.mismatch, e.fullField, t, e.pattern));
    }
  }
}, Je = {
  required: d2,
  whitespace: N4,
  type: Q4,
  range: B4,
  enum: j4,
  pattern: z4
}, Z4 = function(e, t, i, s, r) {
  var o = [], l = e.required || !e.required && s.hasOwnProperty(e.field);
  if (l) {
    if (gn(t, "string") && !e.required)
      return i();
    Je.required(e, t, s, o, r, "string"), gn(t, "string") || (Je.type(e, t, s, o, r), Je.range(e, t, s, o, r), Je.pattern(e, t, s, o, r), e.whitespace === !0 && Je.whitespace(e, t, s, o, r));
  }
  i(o);
}, F4 = function(e, t, i, s, r) {
  var o = [], l = e.required || !e.required && s.hasOwnProperty(e.field);
  if (l) {
    if (gn(t) && !e.required)
      return i();
    Je.required(e, t, s, o, r), t !== void 0 && Je.type(e, t, s, o, r);
  }
  i(o);
}, V4 = function(e, t, i, s, r) {
  var o = [], l = e.required || !e.required && s.hasOwnProperty(e.field);
  if (l) {
    if (t === "" && (t = void 0), gn(t) && !e.required)
      return i();
    Je.required(e, t, s, o, r), t !== void 0 && (Je.type(e, t, s, o, r), Je.range(e, t, s, o, r));
  }
  i(o);
}, q4 = function(e, t, i, s, r) {
  var o = [], l = e.required || !e.required && s.hasOwnProperty(e.field);
  if (l) {
    if (gn(t) && !e.required)
      return i();
    Je.required(e, t, s, o, r), t !== void 0 && Je.type(e, t, s, o, r);
  }
  i(o);
}, W4 = function(e, t, i, s, r) {
  var o = [], l = e.required || !e.required && s.hasOwnProperty(e.field);
  if (l) {
    if (gn(t) && !e.required)
      return i();
    Je.required(e, t, s, o, r), gn(t) || Je.type(e, t, s, o, r);
  }
  i(o);
}, X4 = function(e, t, i, s, r) {
  var o = [], l = e.required || !e.required && s.hasOwnProperty(e.field);
  if (l) {
    if (gn(t) && !e.required)
      return i();
    Je.required(e, t, s, o, r), t !== void 0 && (Je.type(e, t, s, o, r), Je.range(e, t, s, o, r));
  }
  i(o);
}, Y4 = function(e, t, i, s, r) {
  var o = [], l = e.required || !e.required && s.hasOwnProperty(e.field);
  if (l) {
    if (gn(t) && !e.required)
      return i();
    Je.required(e, t, s, o, r), t !== void 0 && (Je.type(e, t, s, o, r), Je.range(e, t, s, o, r));
  }
  i(o);
}, H4 = function(e, t, i, s, r) {
  var o = [], l = e.required || !e.required && s.hasOwnProperty(e.field);
  if (l) {
    if (t == null && !e.required)
      return i();
    Je.required(e, t, s, o, r, "array"), t != null && (Je.type(e, t, s, o, r), Je.range(e, t, s, o, r));
  }
  i(o);
}, G4 = function(e, t, i, s, r) {
  var o = [], l = e.required || !e.required && s.hasOwnProperty(e.field);
  if (l) {
    if (gn(t) && !e.required)
      return i();
    Je.required(e, t, s, o, r), t !== void 0 && Je.type(e, t, s, o, r);
  }
  i(o);
}, U4 = "enum", K4 = function(e, t, i, s, r) {
  var o = [], l = e.required || !e.required && s.hasOwnProperty(e.field);
  if (l) {
    if (gn(t) && !e.required)
      return i();
    Je.required(e, t, s, o, r), t !== void 0 && Je[U4](e, t, s, o, r);
  }
  i(o);
}, J4 = function(e, t, i, s, r) {
  var o = [], l = e.required || !e.required && s.hasOwnProperty(e.field);
  if (l) {
    if (gn(t, "string") && !e.required)
      return i();
    Je.required(e, t, s, o, r), gn(t, "string") || Je.pattern(e, t, s, o, r);
  }
  i(o);
}, eB = function(e, t, i, s, r) {
  var o = [], l = e.required || !e.required && s.hasOwnProperty(e.field);
  if (l) {
    if (gn(t, "date") && !e.required)
      return i();
    if (Je.required(e, t, s, o, r), !gn(t, "date")) {
      var a;
      t instanceof Date ? a = t : a = new Date(t), Je.type(e, a, s, o, r), a && Je.range(e, a.getTime(), s, o, r);
    }
  }
  i(o);
}, tB = function(e, t, i, s, r) {
  var o = [], l = Array.isArray(t) ? "array" : typeof t;
  Je.required(e, t, s, o, r, l), i(o);
}, Vg = function(e, t, i, s, r) {
  var o = e.type, l = [], a = e.required || !e.required && s.hasOwnProperty(e.field);
  if (a) {
    if (gn(t, o) && !e.required)
      return i();
    Je.required(e, t, s, l, r, o), gn(t, o) || Je.type(e, t, s, l, r);
  }
  i(l);
}, nB = function(e, t, i, s, r) {
  var o = [], l = e.required || !e.required && s.hasOwnProperty(e.field);
  if (l) {
    if (gn(t) && !e.required)
      return i();
    Je.required(e, t, s, o, r);
  }
  i(o);
}, pu = {
  string: Z4,
  method: F4,
  number: V4,
  boolean: q4,
  regexp: W4,
  integer: X4,
  float: Y4,
  array: H4,
  object: G4,
  enum: K4,
  pattern: J4,
  date: eB,
  url: Vg,
  hex: Vg,
  email: Vg,
  required: tB,
  any: nB
};
function h0() {
  return {
    default: "Validation error on field %s",
    required: "%s is required",
    enum: "%s must be one of %s",
    whitespace: "%s cannot be empty",
    date: {
      format: "%s date %s is invalid for format %s",
      parse: "%s date could not be parsed, %s is invalid ",
      invalid: "%s date %s is invalid"
    },
    types: {
      string: "%s is not a %s",
      method: "%s is not a %s (function)",
      array: "%s is not an %s",
      object: "%s is not an %s",
      number: "%s is not a %s",
      date: "%s is not a %s",
      boolean: "%s is not a %s",
      integer: "%s is not an %s",
      float: "%s is not a %s",
      regexp: "%s is not a valid %s",
      email: "%s is not a valid %s",
      url: "%s is not a valid %s",
      hex: "%s is not a valid %s"
    },
    string: {
      len: "%s must be exactly %s characters",
      min: "%s must be at least %s characters",
      max: "%s cannot be longer than %s characters",
      range: "%s must be between %s and %s characters"
    },
    number: {
      len: "%s must equal %s",
      min: "%s cannot be less than %s",
      max: "%s cannot be greater than %s",
      range: "%s must be between %s and %s"
    },
    array: {
      len: "%s must be exactly %s in length",
      min: "%s cannot be less than %s in length",
      max: "%s cannot be greater than %s in length",
      range: "%s must be between %s and %s in length"
    },
    pattern: {
      mismatch: "%s value %s does not match pattern %s"
    },
    clone: function() {
      var e = JSON.parse(JSON.stringify(this));
      return e.clone = this.clone, e;
    }
  };
}
var f0 = h0(), Bh = /* @__PURE__ */ function() {
  function n(t) {
    this.rules = null, this._messages = f0, this.define(t);
  }
  var e = n.prototype;
  return e.define = function(i) {
    var s = this;
    if (!i)
      throw new Error("Cannot configure a schema with no rules");
    if (typeof i != "object" || Array.isArray(i))
      throw new Error("Rules must be an object");
    this.rules = {}, Object.keys(i).forEach(function(r) {
      var o = i[r];
      s.rules[r] = Array.isArray(o) ? o : [o];
    });
  }, e.messages = function(i) {
    return i && (this._messages = s1(h0(), i)), this._messages;
  }, e.validate = function(i, s, r) {
    var o = this;
    s === void 0 && (s = {}), r === void 0 && (r = function() {
    });
    var l = i, a = s, c = r;
    if (typeof a == "function" && (c = a, a = {}), !this.rules || Object.keys(this.rules).length === 0)
      return c && c(null, l), Promise.resolve(l);
    function u(g) {
      var m = [], b = {};
      function y(O) {
        if (Array.isArray(O)) {
          var x;
          m = (x = m).concat.apply(x, O);
        } else
          m.push(O);
      }
      for (var v = 0; v < g.length; v++)
        y(g[v]);
      m.length ? (b = u0(m), c(m, b)) : c(null, l);
    }
    if (a.messages) {
      var h = this.messages();
      h === f0 && (h = h0()), s1(h, a.messages), a.messages = h;
    } else
      a.messages = this.messages();
    var f = {}, d = a.keys || Object.keys(this.rules);
    d.forEach(function(g) {
      var m = o.rules[g], b = l[g];
      m.forEach(function(y) {
        var v = y;
        typeof v.transform == "function" && (l === i && (l = ul({}, l)), b = l[g] = v.transform(b)), typeof v == "function" ? v = {
          validator: v
        } : v = ul({}, v), v.validator = o.getValidationMethod(v), v.validator && (v.field = g, v.fullField = v.fullField || g, v.type = o.getType(v), f[g] = f[g] || [], f[g].push({
          rule: v,
          value: b,
          source: l,
          field: g
        }));
      });
    });
    var p = {};
    return R4(f, a, function(g, m) {
      var b = g.rule, y = (b.type === "object" || b.type === "array") && (typeof b.fields == "object" || typeof b.defaultField == "object");
      y = y && (b.required || !b.required && g.value), b.field = g.field;
      function v(S, C) {
        return ul({}, C, {
          fullField: b.fullField + "." + S,
          fullFields: b.fullFields ? [].concat(b.fullFields, [S]) : [S]
        });
      }
      function O(S) {
        S === void 0 && (S = []);
        var C = Array.isArray(S) ? S : [S];
        !a.suppressWarning && C.length && n.warning("async-validator:", C), C.length && b.message !== void 0 && (C = [].concat(b.message));
        var k = C.map(i1(b, l));
        if (a.first && k.length)
          return p[b.field] = 1, m(k);
        if (!y)
          m(k);
        else {
          if (b.required && !g.value)
            return b.message !== void 0 ? k = [].concat(b.message).map(i1(b, l)) : a.error && (k = [a.error(b, Di(a.messages.required, b.field))]), m(k);
          var E = {};
          b.defaultField && Object.keys(g.value).map(function(M) {
            E[M] = b.defaultField;
          }), E = ul({}, E, g.rule.fields);
          var $ = {};
          Object.keys(E).forEach(function(M) {
            var j = E[M], D = Array.isArray(j) ? j : [j];
            $[M] = D.map(v.bind(null, M));
          });
          var T = new n($);
          T.messages(a.messages), g.rule.options && (g.rule.options.messages = a.messages, g.rule.options.error = a.error), T.validate(g.value, g.rule.options || a, function(M) {
            var j = [];
            k && k.length && j.push.apply(j, k), M && M.length && j.push.apply(j, M), m(j.length ? j : null);
          });
        }
      }
      var x;
      if (b.asyncValidator)
        x = b.asyncValidator(b, g.value, O, g.source, a);
      else if (b.validator) {
        try {
          x = b.validator(b, g.value, O, g.source, a);
        } catch (S) {
          console.error == null || console.error(S), a.suppressValidatorError || setTimeout(function() {
            throw S;
          }, 0), O(S.message);
        }
        x === !0 ? O() : x === !1 ? O(typeof b.message == "function" ? b.message(b.fullField || b.field) : b.message || (b.fullField || b.field) + " fails") : x instanceof Array ? O(x) : x instanceof Error && O(x.message);
      }
      x && x.then && x.then(function() {
        return O();
      }, function(S) {
        return O(S);
      });
    }, function(g) {
      u(g);
    }, l);
  }, e.getType = function(i) {
    if (i.type === void 0 && i.pattern instanceof RegExp && (i.type = "pattern"), typeof i.validator != "function" && i.type && !pu.hasOwnProperty(i.type))
      throw new Error(Di("Unknown rule type %s", i.type));
    return i.type || "string";
  }, e.getValidationMethod = function(i) {
    if (typeof i.validator == "function")
      return i.validator;
    var s = Object.keys(i), r = s.indexOf("message");
    return r !== -1 && s.splice(r, 1), s.length === 1 && s[0] === "required" ? pu.required : pu[this.getType(i)] || void 0;
  }, n;
}();
Bh.register = function(e, t) {
  if (typeof t != "function")
    throw new Error("Cannot register a validator by type, validator is not a function");
  pu[e] = t;
};
Bh.warning = f2;
Bh.messages = f0;
Bh.validators = pu;
const iB = 'a[href],button:not([disabled]),button:not([hidden]),:not([tabindex="-1"]),input:not([disabled]),input:not([type="hidden"]),select:not([disabled]),textarea:not([disabled])', sB = (n) => process.env.NODE_ENV === "test" ? !0 : getComputedStyle(n).position === "fixed" ? !1 : n.offsetParent !== null, o1 = (n) => Array.from(n.querySelectorAll(iB)).filter((e) => rB(e) && sB(e)), rB = (n) => {
  if (n.tabIndex > 0 || n.tabIndex === 0 && n.getAttribute("tabIndex") !== null)
    return !0;
  if (n.disabled)
    return !1;
  switch (n.nodeName) {
    case "A":
      return !!n.href && n.rel !== "ignore";
    case "INPUT":
      return !(n.type === "hidden" || n.type === "file");
    case "BUTTON":
    case "SELECT":
    case "TEXTAREA":
      return !0;
    default:
      return !1;
  }
}, Ar = (n, e, { checkForDefaultPrevented: t = !0 } = {}) => (s) => {
  const r = n == null ? void 0 : n(s);
  if (t === !1 || !r)
    return e == null ? void 0 : e(s);
};
var oB = Object.defineProperty, lB = Object.defineProperties, aB = Object.getOwnPropertyDescriptors, l1 = Object.getOwnPropertySymbols, cB = Object.prototype.hasOwnProperty, uB = Object.prototype.propertyIsEnumerable, a1 = (n, e, t) => e in n ? oB(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t, hB = (n, e) => {
  for (var t in e || (e = {}))
    cB.call(e, t) && a1(n, t, e[t]);
  if (l1)
    for (var t of l1(e))
      uB.call(e, t) && a1(n, t, e[t]);
  return n;
}, fB = (n, e) => lB(n, aB(e));
function c1(n, e) {
  var t;
  const i = gi();
  return sr(() => {
    i.value = n();
  }, fB(hB({}, e), {
    flush: (t = e == null ? void 0 : e.flush) != null ? t : "sync"
  })), iv(i);
}
var u1;
const ot = typeof window < "u", dB = (n) => typeof n == "string", Id = () => {
}, pB = ot && ((u1 = window == null ? void 0 : window.navigator) == null ? void 0 : u1.userAgent) && /iP(ad|hone|od)/.test(window.navigator.userAgent);
function Fu(n) {
  return typeof n == "function" ? n() : w(n);
}
function gB(n, e) {
  function t(...i) {
    return new Promise((s, r) => {
      Promise.resolve(n(() => e.apply(this, i), { fn: e, thisArg: this, args: i })).then(s).catch(r);
    });
  }
  return t;
}
function mB(n, e = {}) {
  let t, i, s = Id;
  const r = (l) => {
    clearTimeout(l), s(), s = Id;
  };
  return (l) => {
    const a = Fu(n), c = Fu(e.maxWait);
    return t && r(t), a <= 0 || c !== void 0 && c <= 0 ? (i && (r(i), i = null), Promise.resolve(l())) : new Promise((u, h) => {
      s = e.rejectOnCancel ? h : u, c && !i && (i = setTimeout(() => {
        t && r(t), i = null, u(l());
      }, c)), t = setTimeout(() => {
        i && r(i), i = null, u(l());
      }, a);
    });
  };
}
function bB(n) {
  return n;
}
function jh(n) {
  return BC() ? (sv(n), !0) : !1;
}
function vB(n, e = 200, t = {}) {
  return gB(mB(e, t), n);
}
function yB(n, e = 200, t = {}) {
  const i = L(n.value), s = vB(() => {
    i.value = n.value;
  }, e, t);
  return ee(n, () => s()), i;
}
function OB(n, e = !0) {
  qe() ? Be(n) : e ? n() : Qe(n);
}
function Qd(n, e, t = {}) {
  const {
    immediate: i = !0
  } = t, s = L(!1);
  let r = null;
  function o() {
    r && (clearTimeout(r), r = null);
  }
  function l() {
    s.value = !1, o();
  }
  function a(...c) {
    o(), s.value = !0, r = setTimeout(() => {
      s.value = !1, r = null, n(...c);
    }, Fu(e));
  }
  return i && (s.value = !0, ot && a()), jh(l), {
    isPending: iv(s),
    start: a,
    stop: l
  };
}
function Rr(n) {
  var e;
  const t = Fu(n);
  return (e = t == null ? void 0 : t.$el) != null ? e : t;
}
const zh = ot ? window : void 0, wB = ot ? window.document : void 0;
function bi(...n) {
  let e, t, i, s;
  if (dB(n[0]) || Array.isArray(n[0]) ? ([t, i, s] = n, e = zh) : [e, t, i, s] = n, !e)
    return Id;
  Array.isArray(t) || (t = [t]), Array.isArray(i) || (i = [i]);
  const r = [], o = () => {
    r.forEach((u) => u()), r.length = 0;
  }, l = (u, h, f, d) => (u.addEventListener(h, f, d), () => u.removeEventListener(h, f, d)), a = ee(() => [Rr(e), Fu(s)], ([u, h]) => {
    o(), u && r.push(...t.flatMap((f) => i.map((d) => l(u, f, d, h))));
  }, { immediate: !0, flush: "post" }), c = () => {
    a(), o();
  };
  return jh(c), c;
}
let h1 = !1;
function xB(n, e, t = {}) {
  const { window: i = zh, ignore: s = [], capture: r = !0, detectIframe: o = !1 } = t;
  if (!i)
    return;
  pB && !h1 && (h1 = !0, Array.from(i.document.body.children).forEach((f) => f.addEventListener("click", Id)));
  let l = !0;
  const a = (f) => s.some((d) => {
    if (typeof d == "string")
      return Array.from(i.document.querySelectorAll(d)).some((p) => p === f.target || f.composedPath().includes(p));
    {
      const p = Rr(d);
      return p && (f.target === p || f.composedPath().includes(p));
    }
  }), u = [
    bi(i, "click", (f) => {
      const d = Rr(n);
      if (!(!d || d === f.target || f.composedPath().includes(d))) {
        if (f.detail === 0 && (l = !a(f)), !l) {
          l = !0;
          return;
        }
        e(f);
      }
    }, { passive: !0, capture: r }),
    bi(i, "pointerdown", (f) => {
      const d = Rr(n);
      d && (l = !f.composedPath().includes(d) && !a(f));
    }, { passive: !0 }),
    o && bi(i, "blur", (f) => {
      var d;
      const p = Rr(n);
      ((d = i.document.activeElement) == null ? void 0 : d.tagName) === "IFRAME" && !(p != null && p.contains(i.document.activeElement)) && e(f);
    })
  ].filter(Boolean);
  return () => u.forEach((f) => f());
}
function p2(n, e = !1) {
  const t = L(), i = () => t.value = !!n();
  return i(), OB(i, e), t;
}
const f1 = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {}, d1 = "__vueuse_ssr_handlers__";
f1[d1] = f1[d1] || {};
function SB({ document: n = wB } = {}) {
  if (!n)
    return L("visible");
  const e = L(n.visibilityState);
  return bi(n, "visibilitychange", () => {
    e.value = n.visibilityState;
  }), e;
}
var p1 = Object.getOwnPropertySymbols, CB = Object.prototype.hasOwnProperty, kB = Object.prototype.propertyIsEnumerable, PB = (n, e) => {
  var t = {};
  for (var i in n)
    CB.call(n, i) && e.indexOf(i) < 0 && (t[i] = n[i]);
  if (n != null && p1)
    for (var i of p1(n))
      e.indexOf(i) < 0 && kB.call(n, i) && (t[i] = n[i]);
  return t;
};
function Jn(n, e, t = {}) {
  const i = t, { window: s = zh } = i, r = PB(i, ["window"]);
  let o;
  const l = p2(() => s && "ResizeObserver" in s), a = () => {
    o && (o.disconnect(), o = void 0);
  }, c = ee(() => Rr(n), (h) => {
    a(), l.value && s && h && (o = new ResizeObserver(e), o.observe(h, r));
  }, { immediate: !0, flush: "post" }), u = () => {
    a(), c();
  };
  return jh(u), {
    isSupported: l,
    stop: u
  };
}
var g1 = Object.getOwnPropertySymbols, AB = Object.prototype.hasOwnProperty, EB = Object.prototype.propertyIsEnumerable, $B = (n, e) => {
  var t = {};
  for (var i in n)
    AB.call(n, i) && e.indexOf(i) < 0 && (t[i] = n[i]);
  if (n != null && g1)
    for (var i of g1(n))
      e.indexOf(i) < 0 && EB.call(n, i) && (t[i] = n[i]);
  return t;
};
function TB(n, e, t = {}) {
  const i = t, { window: s = zh } = i, r = $B(i, ["window"]);
  let o;
  const l = p2(() => s && "MutationObserver" in s), a = () => {
    o && (o.disconnect(), o = void 0);
  }, c = ee(() => Rr(n), (h) => {
    a(), l.value && s && h && (o = new MutationObserver(e), o.observe(h, r));
  }, { immediate: !0 }), u = () => {
    a(), c();
  };
  return jh(u), {
    isSupported: l,
    stop: u
  };
}
var m1;
(function(n) {
  n.UP = "UP", n.RIGHT = "RIGHT", n.DOWN = "DOWN", n.LEFT = "LEFT", n.NONE = "NONE";
})(m1 || (m1 = {}));
var _B = Object.defineProperty, b1 = Object.getOwnPropertySymbols, MB = Object.prototype.hasOwnProperty, RB = Object.prototype.propertyIsEnumerable, v1 = (n, e, t) => e in n ? _B(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t, DB = (n, e) => {
  for (var t in e || (e = {}))
    MB.call(e, t) && v1(n, t, e[t]);
  if (b1)
    for (var t of b1(e))
      RB.call(e, t) && v1(n, t, e[t]);
  return n;
};
const LB = {
  easeInSine: [0.12, 0, 0.39, 0],
  easeOutSine: [0.61, 1, 0.88, 1],
  easeInOutSine: [0.37, 0, 0.63, 1],
  easeInQuad: [0.11, 0, 0.5, 0],
  easeOutQuad: [0.5, 1, 0.89, 1],
  easeInOutQuad: [0.45, 0, 0.55, 1],
  easeInCubic: [0.32, 0, 0.67, 0],
  easeOutCubic: [0.33, 1, 0.68, 1],
  easeInOutCubic: [0.65, 0, 0.35, 1],
  easeInQuart: [0.5, 0, 0.75, 0],
  easeOutQuart: [0.25, 1, 0.5, 1],
  easeInOutQuart: [0.76, 0, 0.24, 1],
  easeInQuint: [0.64, 0, 0.78, 0],
  easeOutQuint: [0.22, 1, 0.36, 1],
  easeInOutQuint: [0.83, 0, 0.17, 1],
  easeInExpo: [0.7, 0, 0.84, 0],
  easeOutExpo: [0.16, 1, 0.3, 1],
  easeInOutExpo: [0.87, 0, 0.13, 1],
  easeInCirc: [0.55, 0, 1, 0.45],
  easeOutCirc: [0, 0.55, 0.45, 1],
  easeInOutCirc: [0.85, 0, 0.15, 1],
  easeInBack: [0.36, 0, 0.66, -0.56],
  easeOutBack: [0.34, 1.56, 0.64, 1],
  easeInOutBack: [0.68, -0.6, 0.32, 1.6]
};
DB({
  linear: bB
}, LB);
function NB({ window: n = zh } = {}) {
  if (!n)
    return L(!1);
  const e = L(n.document.hasFocus());
  return bi(n, "blur", () => {
    e.value = !1;
  }), bi(n, "focus", () => {
    e.value = !0;
  }), e;
}
const IB = () => ot && /firefox/i.test(window.navigator.userAgent), wv = (n) => {
  let e, t;
  return n.type === "touchend" ? (t = n.changedTouches[0].clientY, e = n.changedTouches[0].clientX) : n.type.startsWith("touch") ? (t = n.touches[0].clientY, e = n.touches[0].clientX) : (t = n.clientY, e = n.clientX), {
    clientX: e,
    clientY: t
  };
};
/**
* @vue/shared v3.4.19
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/
process.env.NODE_ENV !== "production" && Object.freeze({});
process.env.NODE_ENV !== "production" && Object.freeze([]);
const Lr = () => {
}, g2 = Object.assign, QB = Object.prototype.hasOwnProperty, Ps = (n, e) => QB.call(n, e), Zt = Array.isArray, Mt = (n) => typeof n == "function", pt = (n) => typeof n == "string", BB = (n) => typeof n == "symbol", Qn = (n) => n !== null && typeof n == "object", y1 = (n) => (Qn(n) || Mt(n)) && Mt(n.then) && Mt(n.catch), jB = Object.prototype.toString, zB = (n) => jB.call(n), qg = (n) => zB(n).slice(8, -1), m2 = (n) => {
  const e = /* @__PURE__ */ Object.create(null);
  return (t) => e[t] || (e[t] = n(t));
}, ZB = /-(\w)/g, FB = m2((n) => n.replace(ZB, (e, t) => t ? t.toUpperCase() : "")), VB = m2((n) => n.charAt(0).toUpperCase() + n.slice(1)), qB = (n, e) => !Object.is(n, e), Li = (n) => n === void 0, Yn = (n) => typeof n == "boolean", ze = (n) => typeof n == "number", As = (n) => typeof Element > "u" ? !1 : n instanceof Element, WB = (n) => pt(n) ? !Number.isNaN(Number(n)) : !1, XB = (n = "") => n.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d"), fo = (n) => VB(n), O1 = (n) => Object.keys(n), nd = (n, e, t) => ({
  get value() {
    return Wi(n, e, t);
  },
  set value(i) {
    x5(n, e, i);
  }
});
class b2 extends Error {
  constructor(e) {
    super(e), this.name = "ElementPlusError";
  }
}
function Yr(n, e) {
  throw new b2(`[${n}] ${e}`);
}
function rt(n, e) {
  if (process.env.NODE_ENV !== "production") {
    const t = pt(n) ? new b2(`[${n}] ${e}`) : n;
    console.warn(t);
  }
}
const YB = "utils/dom/style", v2 = (n = "") => n.split(" ").filter((e) => !!e.trim()), wa = (n, e) => {
  if (!n || !e)
    return !1;
  if (e.includes(" "))
    throw new Error("className should not contain space.");
  return n.classList.contains(e);
}, Vu = (n, e) => {
  !n || !e.trim() || n.classList.add(...v2(e));
}, za = (n, e) => {
  !n || !e.trim() || n.classList.remove(...v2(e));
}, HB = (n, e) => {
  var t;
  if (!ot || !n || !e)
    return "";
  let i = FB(e);
  i === "float" && (i = "cssFloat");
  try {
    const s = n.style[i];
    if (s)
      return s;
    const r = (t = document.defaultView) == null ? void 0 : t.getComputedStyle(n, "");
    return r ? r[i] : "";
  } catch {
    return n.style[i];
  }
};
function Qi(n, e = "px") {
  if (!n)
    return "";
  if (ze(n) || WB(n))
    return `${n}${e}`;
  if (pt(n))
    return n;
  rt(YB, "binding value must be a string or number");
}
let hf;
const GB = (n) => {
  var e;
  if (!ot)
    return 0;
  if (hf !== void 0)
    return hf;
  const t = document.createElement("div");
  t.className = `${n}-scrollbar__wrap`, t.style.visibility = "hidden", t.style.width = "100px", t.style.position = "absolute", t.style.top = "-9999px", document.body.appendChild(t);
  const i = t.offsetWidth;
  t.style.overflow = "scroll";
  const s = document.createElement("div");
  s.style.width = "100%", t.appendChild(s);
  const r = s.offsetWidth;
  return (e = t.parentNode) == null || e.removeChild(t), hf = i - r, hf;
};
function UB(n, e) {
  if (!ot)
    return;
  if (!e) {
    n.scrollTop = 0;
    return;
  }
  const t = [];
  let i = e.offsetParent;
  for (; i !== null && n !== i && n.contains(i); )
    t.push(i), i = i.offsetParent;
  const s = e.offsetTop + t.reduce((a, c) => a + c.offsetTop, 0), r = s + e.offsetHeight, o = n.scrollTop, l = o + n.clientHeight;
  s < o ? n.scrollTop = s : r > l && (n.scrollTop = r - n.clientHeight);
}
const y2 = "__epPropKey", be = (n) => n, KB = (n) => Qn(n) && !!n[y2], Fp = (n, e) => {
  if (!Qn(n) || KB(n))
    return n;
  const { values: t, required: i, default: s, type: r, validator: o } = n, a = {
    type: r,
    required: !!i,
    validator: t || o ? (c) => {
      let u = !1, h = [];
      if (t && (h = Array.from(t), Ps(n, "default") && h.push(s), u || (u = h.includes(c))), o && (u || (u = o(c))), !u && h.length > 0) {
        const f = [...new Set(h)].map((d) => JSON.stringify(d)).join(", ");
        nR(`Invalid prop: validation failed${e ? ` for prop "${e}"` : ""}. Expected one of [${f}], got value ${JSON.stringify(c)}.`);
      }
      return u;
    } : void 0,
    [y2]: !0
  };
  return Ps(n, "default") && (a.default = s), a;
}, Ae = (n) => Nd(Object.entries(n).map(([e, t]) => [
  e,
  Fp(t, e)
])), xn = be([
  String,
  Object,
  Function
]), O2 = {
  Close: Rl
}, w2 = {
  Close: Rl,
  SuccessFilled: u2,
  InfoFilled: a2,
  WarningFilled: h2,
  CircleCloseFilled: l2
}, Za = {
  success: u2,
  warning: h2,
  error: l2,
  info: a2
}, x2 = {
  validating: Zp,
  success: F5,
  error: Ov
}, Bt = (n, e) => {
  if (n.install = (t) => {
    for (const i of [n, ...Object.values(e ?? {})])
      t.component(i.name, i);
  }, e)
    for (const [t, i] of Object.entries(e))
      n[t] = i;
  return n;
}, S2 = (n, e) => (n.install = (t) => {
  n._context = t._context, t.config.globalProperties[e] = n;
}, n), JB = (n, e) => (n.install = (t) => {
  t.directive(e, n);
}, n), Ds = (n) => (n.install = Lr, n), ej = (...n) => (e) => {
  n.forEach((t) => {
    Mt(t) ? t(e) : t.value = e;
  });
}, jn = {
  tab: "Tab",
  enter: "Enter",
  space: "Space",
  left: "ArrowLeft",
  up: "ArrowUp",
  right: "ArrowRight",
  down: "ArrowDown",
  esc: "Escape",
  delete: "Delete",
  backspace: "Backspace",
  numpadEnter: "NumpadEnter",
  pageUp: "PageUp",
  pageDown: "PageDown",
  home: "Home",
  end: "End"
}, et = "update:modelValue", Es = "change", Sl = "input", Hl = ["", "default", "small", "large"], C2 = (n) => ["", ...Hl].includes(n);
var id = /* @__PURE__ */ ((n) => (n[n.TEXT = 1] = "TEXT", n[n.CLASS = 2] = "CLASS", n[n.STYLE = 4] = "STYLE", n[n.PROPS = 8] = "PROPS", n[n.FULL_PROPS = 16] = "FULL_PROPS", n[n.HYDRATE_EVENTS = 32] = "HYDRATE_EVENTS", n[n.STABLE_FRAGMENT = 64] = "STABLE_FRAGMENT", n[n.KEYED_FRAGMENT = 128] = "KEYED_FRAGMENT", n[n.UNKEYED_FRAGMENT = 256] = "UNKEYED_FRAGMENT", n[n.NEED_PATCH = 512] = "NEED_PATCH", n[n.DYNAMIC_SLOTS = 1024] = "DYNAMIC_SLOTS", n[n.HOISTED = -1] = "HOISTED", n[n.BAIL = -2] = "BAIL", n))(id || {});
const sd = (n) => {
  const e = Zt(n) ? n : [n], t = [];
  return e.forEach((i) => {
    var s;
    Zt(i) ? t.push(...sd(i)) : ur(i) && Zt(i.children) ? t.push(...sd(i.children)) : (t.push(i), ur(i) && ((s = i.component) != null && s.subTree) && t.push(...sd(i.component.subTree)));
  }), t;
}, k2 = (n) => /([\uAC00-\uD7AF\u3130-\u318F])+/gi.test(n), tj = (n) => ot ? window.requestAnimationFrame(n) : setTimeout(n, 16), Gl = (n) => n, nj = ["class", "style"], ij = /^on[A-Z]/, sj = (n = {}) => {
  const { excludeListeners: e = !1, excludeKeys: t } = n, i = _(() => ((t == null ? void 0 : t.value) || []).concat(nj)), s = qe();
  return s ? _(() => {
    var r;
    return Nd(Object.entries((r = s.proxy) == null ? void 0 : r.$attrs).filter(([o]) => !i.value.includes(o) && !(e && ij.test(o))));
  }) : (rt("use-attrs", "getCurrentInstance() returned null. useAttrs() must be called at the top of a setup function"), _(() => ({})));
}, Dl = ({ from: n, replacement: e, scope: t, version: i, ref: s, type: r = "API" }, o) => {
  ee(() => w(o), (l) => {
    l && rt(t, `[${r}] ${n} is about to be deprecated in version ${i}, please use ${e} instead.
For more detail, please visit: ${s}
`);
  }, {
    immediate: !0
  });
}, P2 = (n, e, t, i) => {
  let s = {
    offsetX: 0,
    offsetY: 0
  };
  const r = (a) => {
    const c = a.clientX, u = a.clientY, { offsetX: h, offsetY: f } = s, d = n.value.getBoundingClientRect(), p = d.left, g = d.top, m = d.width, b = d.height, y = document.documentElement.clientWidth, v = document.documentElement.clientHeight, O = -p + h, x = -g + f, S = y - p - m + h, C = v - g - b + f, k = ($) => {
      let T = h + $.clientX - c, M = f + $.clientY - u;
      i != null && i.value || (T = Math.min(Math.max(T, O), S), M = Math.min(Math.max(M, x), C)), s = {
        offsetX: T,
        offsetY: M
      }, n.value && (n.value.style.transform = `translate(${Qi(T)}, ${Qi(M)})`);
    }, E = () => {
      document.removeEventListener("mousemove", k), document.removeEventListener("mouseup", E);
    };
    document.addEventListener("mousemove", k), document.addEventListener("mouseup", E);
  }, o = () => {
    e.value && n.value && e.value.addEventListener("mousedown", r);
  }, l = () => {
    e.value && n.value && e.value.removeEventListener("mousedown", r);
  };
  Be(() => {
    sr(() => {
      t.value ? o() : l();
    });
  }), Zn(() => {
    l();
  });
};
var rj = {
  name: "en",
  el: {
    colorpicker: {
      confirm: "OK",
      clear: "Clear",
      defaultLabel: "color picker",
      description: "current color is {color}. press enter to select a new color."
    },
    datepicker: {
      now: "Now",
      today: "Today",
      cancel: "Cancel",
      clear: "Clear",
      confirm: "OK",
      dateTablePrompt: "Use the arrow keys and enter to select the day of the month",
      monthTablePrompt: "Use the arrow keys and enter to select the month",
      yearTablePrompt: "Use the arrow keys and enter to select the year",
      selectedDate: "Selected date",
      selectDate: "Select date",
      selectTime: "Select time",
      startDate: "Start Date",
      startTime: "Start Time",
      endDate: "End Date",
      endTime: "End Time",
      prevYear: "Previous Year",
      nextYear: "Next Year",
      prevMonth: "Previous Month",
      nextMonth: "Next Month",
      year: "",
      month1: "January",
      month2: "February",
      month3: "March",
      month4: "April",
      month5: "May",
      month6: "June",
      month7: "July",
      month8: "August",
      month9: "September",
      month10: "October",
      month11: "November",
      month12: "December",
      week: "week",
      weeks: {
        sun: "Sun",
        mon: "Mon",
        tue: "Tue",
        wed: "Wed",
        thu: "Thu",
        fri: "Fri",
        sat: "Sat"
      },
      weeksFull: {
        sun: "Sunday",
        mon: "Monday",
        tue: "Tuesday",
        wed: "Wednesday",
        thu: "Thursday",
        fri: "Friday",
        sat: "Saturday"
      },
      months: {
        jan: "Jan",
        feb: "Feb",
        mar: "Mar",
        apr: "Apr",
        may: "May",
        jun: "Jun",
        jul: "Jul",
        aug: "Aug",
        sep: "Sep",
        oct: "Oct",
        nov: "Nov",
        dec: "Dec"
      }
    },
    inputNumber: {
      decrease: "decrease number",
      increase: "increase number"
    },
    select: {
      loading: "Loading",
      noMatch: "No matching data",
      noData: "No data",
      placeholder: "Select"
    },
    dropdown: {
      toggleDropdown: "Toggle Dropdown"
    },
    cascader: {
      noMatch: "No matching data",
      loading: "Loading",
      placeholder: "Select",
      noData: "No data"
    },
    pagination: {
      goto: "Go to",
      pagesize: "/page",
      total: "Total {total}",
      pageClassifier: "",
      page: "Page",
      prev: "Go to previous page",
      next: "Go to next page",
      currentPage: "page {pager}",
      prevPages: "Previous {pager} pages",
      nextPages: "Next {pager} pages",
      deprecationWarning: "Deprecated usages detected, please refer to the el-pagination documentation for more details"
    },
    dialog: {
      close: "Close this dialog"
    },
    drawer: {
      close: "Close this dialog"
    },
    messagebox: {
      title: "Message",
      confirm: "OK",
      cancel: "Cancel",
      error: "Illegal input",
      close: "Close this dialog"
    },
    upload: {
      deleteTip: "press delete to remove",
      delete: "Delete",
      preview: "Preview",
      continue: "Continue"
    },
    slider: {
      defaultLabel: "slider between {min} and {max}",
      defaultRangeStartLabel: "pick start value",
      defaultRangeEndLabel: "pick end value"
    },
    table: {
      emptyText: "No Data",
      confirmFilter: "Confirm",
      resetFilter: "Reset",
      clearFilter: "All",
      sumText: "Sum"
    },
    tour: {
      next: "Next",
      previous: "Previous",
      finish: "Finish"
    },
    tree: {
      emptyText: "No Data"
    },
    transfer: {
      noMatch: "No matching data",
      noData: "No data",
      titles: ["List 1", "List 2"],
      filterPlaceholder: "Enter keyword",
      noCheckedFormat: "{total} items",
      hasCheckedFormat: "{checked}/{total} checked"
    },
    image: {
      error: "FAILED"
    },
    pageHeader: {
      title: "Back"
    },
    popconfirm: {
      confirmButtonText: "Yes",
      cancelButtonText: "No"
    },
    carousel: {
      leftArrow: "Carousel arrow left",
      rightArrow: "Carousel arrow right",
      indicator: "Carousel switch to index {index}"
    }
  }
};
const oj = (n) => (e, t) => lj(e, t, w(n)), lj = (n, e, t) => Wi(t, n, n).replace(/\{(\w+)\}/g, (i, s) => {
  var r;
  return `${(r = e == null ? void 0 : e[s]) != null ? r : `{${s}}`}`;
}), aj = (n) => {
  const e = _(() => w(n).name), t = hr(n) ? n : L(n);
  return {
    lang: e,
    locale: t,
    t: oj(n)
  };
}, A2 = Symbol("localeContextKey"), ni = (n) => {
  const e = n || ye(A2, L());
  return aj(_(() => e.value || rj));
};
/**
* @vue/reactivity v3.4.19
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/
function E2(n, ...e) {
  console.warn(`[Vue warn] ${n}`, ...e);
}
let cj;
function uj(n, e = cj) {
  e && e.active && e.effects.push(n);
}
let gu;
class hj {
  constructor(e, t, i, s) {
    this.fn = e, this.trigger = t, this.scheduler = i, this.active = !0, this.deps = [], this._dirtyLevel = 4, this._trackId = 0, this._runnings = 0, this._shouldSchedule = !1, this._depsLength = 0, uj(this, s);
  }
  get dirty() {
    if (this._dirtyLevel === 2 || this._dirtyLevel === 3) {
      this._dirtyLevel = 1, dj();
      for (let e = 0; e < this._depsLength; e++) {
        const t = this.deps[e];
        if (t.computed && (fj(t.computed), this._dirtyLevel >= 4))
          break;
      }
      this._dirtyLevel === 1 && (this._dirtyLevel = 0), pj();
    }
    return this._dirtyLevel >= 4;
  }
  set dirty(e) {
    this._dirtyLevel = e ? 4 : 0;
  }
  run() {
    if (this._dirtyLevel = 0, !this.active)
      return this.fn();
    let e = Cl, t = gu;
    try {
      return Cl = !0, gu = this, this._runnings++, w1(this), this.fn();
    } finally {
      x1(this), this._runnings--, gu = t, Cl = e;
    }
  }
  stop() {
    var e;
    this.active && (w1(this), x1(this), (e = this.onStop) == null || e.call(this), this.active = !1);
  }
}
function fj(n) {
  return n.value;
}
function w1(n) {
  n._trackId++, n._depsLength = 0;
}
function x1(n) {
  if (n.deps.length > n._depsLength) {
    for (let e = n._depsLength; e < n.deps.length; e++)
      $2(n.deps[e], n);
    n.deps.length = n._depsLength;
  }
}
function $2(n, e) {
  const t = n.get(e);
  t !== void 0 && e._trackId !== t && (n.delete(e), n.size === 0 && n.cleanup());
}
let Cl = !0, d0 = 0;
const T2 = [];
function dj() {
  T2.push(Cl), Cl = !1;
}
function pj() {
  const n = T2.pop();
  Cl = n === void 0 ? !0 : n;
}
function gj() {
  d0++;
}
function mj() {
  for (d0--; !d0 && p0.length; )
    p0.shift()();
}
function bj(n, e, t) {
  var i;
  if (e.get(n) !== n._trackId) {
    e.set(n, n._trackId);
    const s = n.deps[n._depsLength];
    s !== e ? (s && $2(s, n), n.deps[n._depsLength++] = e) : n._depsLength++, process.env.NODE_ENV !== "production" && ((i = n.onTrack) == null || i.call(n, g2({ effect: n }, t)));
  }
}
const p0 = [];
function vj(n, e, t) {
  var i;
  gj();
  for (const s of n.keys()) {
    let r;
    s._dirtyLevel < e && (r ?? (r = n.get(s) === s._trackId)) && (s._shouldSchedule || (s._shouldSchedule = s._dirtyLevel === 0), s._dirtyLevel = e), s._shouldSchedule && (r ?? (r = n.get(s) === s._trackId)) && (process.env.NODE_ENV !== "production" && ((i = s.onTrigger) == null || i.call(s, g2({ effect: s }, t))), s.trigger(), (!s._runnings || s.allowRecurse) && s._dirtyLevel !== 2 && (s._shouldSchedule = !1, s.scheduler && p0.push(s.scheduler)));
  }
  mj();
}
const yj = (n, e) => {
  const t = /* @__PURE__ */ new Map();
  return t.cleanup = n, t.computed = e, t;
};
Symbol(process.env.NODE_ENV !== "production" ? "iterate" : "");
Symbol(process.env.NODE_ENV !== "production" ? "Map key iterate" : "");
new Set(
  /* @__PURE__ */ Object.getOwnPropertyNames(Symbol).filter((n) => n !== "arguments" && n !== "caller").map((n) => Symbol[n]).filter(BB)
);
function Vp(n) {
  const e = n && n.__v_raw;
  return e ? Vp(e) : n;
}
const Oj = "Computed is still dirty after getter evaluation, likely because a computed is mutating its own dependency in its getter. State mutations in computed getters should be avoided.  Check the docs for more details: https://vuejs.org/guide/essentials/computed.html#getters-should-be-side-effect-free";
class _2 {
  constructor(e, t, i, s) {
    this._setter = t, this.dep = void 0, this.__v_isRef = !0, this.__v_isReadonly = !1, this.effect = new hj(
      () => e(this._value),
      () => Wg(
        this,
        this.effect._dirtyLevel === 2 ? 2 : 3
      )
    ), this.effect.computed = this, this.effect.active = this._cacheable = !s, this.__v_isReadonly = i;
  }
  get value() {
    const e = Vp(this);
    return (!e._cacheable || e.effect.dirty) && qB(e._value, e._value = e.effect.run()) && Wg(e, 4), xj(e), e.effect._dirtyLevel >= 2 && (process.env.NODE_ENV !== "production" && E2(Oj), Wg(e, 2)), e._value;
  }
  set value(e) {
    this._setter(e);
  }
  // #region polyfill _dirty for backward compatibility third party code for Vue <= 3.3.x
  get _dirty() {
    return this.effect.dirty;
  }
  set _dirty(e) {
    this.effect.dirty = e;
  }
  // #endregion
}
function wj(n, e, t = !1) {
  let i, s;
  const r = Mt(n);
  r ? (i = n, s = process.env.NODE_ENV !== "production" ? () => {
    E2("Write operation failed: computed value is readonly");
  } : Lr) : (i = n.get, s = n.set);
  const o = new _2(i, s, r || !s, t);
  return process.env.NODE_ENV !== "production" && e && !t && (o.effect.onTrack = e.onTrack, o.effect.onTrigger = e.onTrigger), o;
}
function xj(n) {
  var e;
  Cl && gu && (n = Vp(n), bj(
    gu,
    (e = n.dep) != null ? e : n.dep = yj(
      () => n.dep = void 0,
      n instanceof _2 ? n : void 0
    ),
    process.env.NODE_ENV !== "production" ? {
      target: n,
      type: "get",
      key: "value"
    } : void 0
  ));
}
function Wg(n, e = 4, t) {
  n = Vp(n);
  const i = n.dep;
  i && vj(
    i,
    e,
    process.env.NODE_ENV !== "production" ? {
      target: n,
      type: "set",
      key: "value",
      newValue: t
    } : void 0
  );
}
const mu = "el", Sj = "is-", Ko = (n, e, t, i, s) => {
  let r = `${n}-${e}`;
  return t && (r += `-${t}`), i && (r += `__${i}`), s && (r += `--${s}`), r;
}, M2 = Symbol("namespaceContextKey"), xv = (n) => {
  const e = n || (qe() ? ye(M2, L(mu)) : L(mu));
  return _(() => w(e) || mu);
}, ve = (n, e) => {
  const t = xv(e);
  return {
    namespace: t,
    b: (g = "") => Ko(t.value, n, g, "", ""),
    e: (g) => g ? Ko(t.value, n, "", g, "") : "",
    m: (g) => g ? Ko(t.value, n, "", "", g) : "",
    be: (g, m) => g && m ? Ko(t.value, n, g, m, "") : "",
    em: (g, m) => g && m ? Ko(t.value, n, "", g, m) : "",
    bm: (g, m) => g && m ? Ko(t.value, n, g, "", m) : "",
    bem: (g, m, b) => g && m && b ? Ko(t.value, n, g, m, b) : "",
    is: (g, ...m) => {
      const b = m.length >= 1 ? m[0] : !0;
      return g && b ? `${Sj}${g}` : "";
    },
    cssVar: (g) => {
      const m = {};
      for (const b in g)
        g[b] && (m[`--${t.value}-${b}`] = g[b]);
      return m;
    },
    cssVarName: (g) => `--${t.value}-${g}`,
    cssVarBlock: (g) => {
      const m = {};
      for (const b in g)
        g[b] && (m[`--${t.value}-${n}-${b}`] = g[b]);
      return m;
    },
    cssVarBlockName: (g) => `--${t.value}-${n}-${g}`
  };
}, R2 = (n, e = {}) => {
  hr(n) || Yr("[useLockscreen]", "You need to pass a ref param to this function");
  const t = e.ns || ve("popup"), i = wj(() => t.bm("parent", "hidden"));
  if (!ot || wa(document.body, i.value))
    return;
  let s = 0, r = !1, o = "0";
  const l = () => {
    setTimeout(() => {
      za(document == null ? void 0 : document.body, i.value), r && document && (document.body.style.width = o);
    }, 200);
  };
  ee(n, (a) => {
    if (!a) {
      l();
      return;
    }
    r = !wa(document.body, i.value), r && (o = document.body.style.width), s = GB(t.namespace.value);
    const c = document.documentElement.clientHeight < document.body.scrollHeight, u = HB(document.body, "overflowY");
    s > 0 && (c || u === "scroll") && r && (document.body.style.width = `calc(100% - ${s}px)`), Vu(document.body, i.value);
  }), sv(() => l());
}, Cj = Fp({
  type: be(Boolean),
  default: null
}), kj = Fp({
  type: be(Function)
}), D2 = (n) => {
  const e = `update:${n}`, t = `onUpdate:${n}`, i = [e], s = {
    [n]: Cj,
    [t]: kj
  };
  return {
    useModelToggle: ({
      indicator: o,
      toggleReason: l,
      shouldHideWhenRouteChanges: a,
      shouldProceed: c,
      onShow: u,
      onHide: h
    }) => {
      const f = qe(), { emit: d } = f, p = f.props, g = _(() => Mt(p[t])), m = _(() => p[n] === null), b = (C) => {
        o.value !== !0 && (o.value = !0, l && (l.value = C), Mt(u) && u(C));
      }, y = (C) => {
        o.value !== !1 && (o.value = !1, l && (l.value = C), Mt(h) && h(C));
      }, v = (C) => {
        if (p.disabled === !0 || Mt(c) && !c())
          return;
        const k = g.value && ot;
        k && d(e, !0), (m.value || !k) && b(C);
      }, O = (C) => {
        if (p.disabled === !0 || !ot)
          return;
        const k = g.value && ot;
        k && d(e, !1), (m.value || !k) && y(C);
      }, x = (C) => {
        Yn(C) && (p.disabled && C ? g.value && d(e, !1) : o.value !== C && (C ? b() : y()));
      }, S = () => {
        o.value ? O() : v();
      };
      return ee(() => p[n], x), a && f.appContext.config.globalProperties.$route !== void 0 && ee(() => ({
        ...f.proxy.$route
      }), () => {
        a.value && o.value && O();
      }), Be(() => {
        x(p[n]);
      }), {
        hide: O,
        show: v,
        toggle: S,
        hasUpdateHandler: g
      };
    },
    useModelToggleProps: s,
    useModelToggleEmits: i
  };
};
D2("modelValue");
const L2 = (n) => {
  const e = qe();
  return _(() => {
    var t, i;
    return (i = (t = e == null ? void 0 : e.proxy) == null ? void 0 : t.$props) == null ? void 0 : i[n];
  });
};
var vi = "top", ns = "bottom", is = "right", yi = "left", Sv = "auto", Zh = [vi, ns, is, yi], Fa = "start", qu = "end", Pj = "clippingParents", N2 = "viewport", Wc = "popper", Aj = "reference", S1 = Zh.reduce(function(n, e) {
  return n.concat([e + "-" + Fa, e + "-" + qu]);
}, []), qp = [].concat(Zh, [Sv]).reduce(function(n, e) {
  return n.concat([e, e + "-" + Fa, e + "-" + qu]);
}, []), Ej = "beforeRead", $j = "read", Tj = "afterRead", _j = "beforeMain", Mj = "main", Rj = "afterMain", Dj = "beforeWrite", Lj = "write", Nj = "afterWrite", Ij = [Ej, $j, Tj, _j, Mj, Rj, Dj, Lj, Nj];
function dr(n) {
  return n ? (n.nodeName || "").toLowerCase() : null;
}
function Ls(n) {
  if (n == null)
    return window;
  if (n.toString() !== "[object Window]") {
    var e = n.ownerDocument;
    return e && e.defaultView || window;
  }
  return n;
}
function Va(n) {
  var e = Ls(n).Element;
  return n instanceof e || n instanceof Element;
}
function Ui(n) {
  var e = Ls(n).HTMLElement;
  return n instanceof e || n instanceof HTMLElement;
}
function Cv(n) {
  if (typeof ShadowRoot > "u")
    return !1;
  var e = Ls(n).ShadowRoot;
  return n instanceof e || n instanceof ShadowRoot;
}
function Qj(n) {
  var e = n.state;
  Object.keys(e.elements).forEach(function(t) {
    var i = e.styles[t] || {}, s = e.attributes[t] || {}, r = e.elements[t];
    !Ui(r) || !dr(r) || (Object.assign(r.style, i), Object.keys(s).forEach(function(o) {
      var l = s[o];
      l === !1 ? r.removeAttribute(o) : r.setAttribute(o, l === !0 ? "" : l);
    }));
  });
}
function Bj(n) {
  var e = n.state, t = { popper: { position: e.options.strategy, left: "0", top: "0", margin: "0" }, arrow: { position: "absolute" }, reference: {} };
  return Object.assign(e.elements.popper.style, t.popper), e.styles = t, e.elements.arrow && Object.assign(e.elements.arrow.style, t.arrow), function() {
    Object.keys(e.elements).forEach(function(i) {
      var s = e.elements[i], r = e.attributes[i] || {}, o = Object.keys(e.styles.hasOwnProperty(i) ? e.styles[i] : t[i]), l = o.reduce(function(a, c) {
        return a[c] = "", a;
      }, {});
      !Ui(s) || !dr(s) || (Object.assign(s.style, l), Object.keys(r).forEach(function(a) {
        s.removeAttribute(a);
      }));
    });
  };
}
var I2 = { name: "applyStyles", enabled: !0, phase: "write", fn: Qj, effect: Bj, requires: ["computeStyles"] };
function rr(n) {
  return n.split("-")[0];
}
var kl = Math.max, Bd = Math.min, qa = Math.round;
function Wa(n, e) {
  e === void 0 && (e = !1);
  var t = n.getBoundingClientRect(), i = 1, s = 1;
  if (Ui(n) && e) {
    var r = n.offsetHeight, o = n.offsetWidth;
    o > 0 && (i = qa(t.width) / o || 1), r > 0 && (s = qa(t.height) / r || 1);
  }
  return { width: t.width / i, height: t.height / s, top: t.top / s, right: t.right / i, bottom: t.bottom / s, left: t.left / i, x: t.left / i, y: t.top / s };
}
function kv(n) {
  var e = Wa(n), t = n.offsetWidth, i = n.offsetHeight;
  return Math.abs(e.width - t) <= 1 && (t = e.width), Math.abs(e.height - i) <= 1 && (i = e.height), { x: n.offsetLeft, y: n.offsetTop, width: t, height: i };
}
function Q2(n, e) {
  var t = e.getRootNode && e.getRootNode();
  if (n.contains(e))
    return !0;
  if (t && Cv(t)) {
    var i = e;
    do {
      if (i && n.isSameNode(i))
        return !0;
      i = i.parentNode || i.host;
    } while (i);
  }
  return !1;
}
function Ir(n) {
  return Ls(n).getComputedStyle(n);
}
function jj(n) {
  return ["table", "td", "th"].indexOf(dr(n)) >= 0;
}
function Vo(n) {
  return ((Va(n) ? n.ownerDocument : n.document) || window.document).documentElement;
}
function Wp(n) {
  return dr(n) === "html" ? n : n.assignedSlot || n.parentNode || (Cv(n) ? n.host : null) || Vo(n);
}
function C1(n) {
  return !Ui(n) || Ir(n).position === "fixed" ? null : n.offsetParent;
}
function zj(n) {
  var e = navigator.userAgent.toLowerCase().indexOf("firefox") !== -1, t = navigator.userAgent.indexOf("Trident") !== -1;
  if (t && Ui(n)) {
    var i = Ir(n);
    if (i.position === "fixed")
      return null;
  }
  var s = Wp(n);
  for (Cv(s) && (s = s.host); Ui(s) && ["html", "body"].indexOf(dr(s)) < 0; ) {
    var r = Ir(s);
    if (r.transform !== "none" || r.perspective !== "none" || r.contain === "paint" || ["transform", "perspective"].indexOf(r.willChange) !== -1 || e && r.willChange === "filter" || e && r.filter && r.filter !== "none")
      return s;
    s = s.parentNode;
  }
  return null;
}
function Fh(n) {
  for (var e = Ls(n), t = C1(n); t && jj(t) && Ir(t).position === "static"; )
    t = C1(t);
  return t && (dr(t) === "html" || dr(t) === "body" && Ir(t).position === "static") ? e : t || zj(n) || e;
}
function Pv(n) {
  return ["top", "bottom"].indexOf(n) >= 0 ? "x" : "y";
}
function bu(n, e, t) {
  return kl(n, Bd(e, t));
}
function Zj(n, e, t) {
  var i = bu(n, e, t);
  return i > t ? t : i;
}
function B2() {
  return { top: 0, right: 0, bottom: 0, left: 0 };
}
function j2(n) {
  return Object.assign({}, B2(), n);
}
function z2(n, e) {
  return e.reduce(function(t, i) {
    return t[i] = n, t;
  }, {});
}
var Fj = function(n, e) {
  return n = typeof n == "function" ? n(Object.assign({}, e.rects, { placement: e.placement })) : n, j2(typeof n != "number" ? n : z2(n, Zh));
};
function Vj(n) {
  var e, t = n.state, i = n.name, s = n.options, r = t.elements.arrow, o = t.modifiersData.popperOffsets, l = rr(t.placement), a = Pv(l), c = [yi, is].indexOf(l) >= 0, u = c ? "height" : "width";
  if (!(!r || !o)) {
    var h = Fj(s.padding, t), f = kv(r), d = a === "y" ? vi : yi, p = a === "y" ? ns : is, g = t.rects.reference[u] + t.rects.reference[a] - o[a] - t.rects.popper[u], m = o[a] - t.rects.reference[a], b = Fh(r), y = b ? a === "y" ? b.clientHeight || 0 : b.clientWidth || 0 : 0, v = g / 2 - m / 2, O = h[d], x = y - f[u] - h[p], S = y / 2 - f[u] / 2 + v, C = bu(O, S, x), k = a;
    t.modifiersData[i] = (e = {}, e[k] = C, e.centerOffset = C - S, e);
  }
}
function qj(n) {
  var e = n.state, t = n.options, i = t.element, s = i === void 0 ? "[data-popper-arrow]" : i;
  s != null && (typeof s == "string" && (s = e.elements.popper.querySelector(s), !s) || !Q2(e.elements.popper, s) || (e.elements.arrow = s));
}
var Wj = { name: "arrow", enabled: !0, phase: "main", fn: Vj, effect: qj, requires: ["popperOffsets"], requiresIfExists: ["preventOverflow"] };
function Xa(n) {
  return n.split("-")[1];
}
var Xj = { top: "auto", right: "auto", bottom: "auto", left: "auto" };
function Yj(n) {
  var e = n.x, t = n.y, i = window, s = i.devicePixelRatio || 1;
  return { x: qa(e * s) / s || 0, y: qa(t * s) / s || 0 };
}
function k1(n) {
  var e, t = n.popper, i = n.popperRect, s = n.placement, r = n.variation, o = n.offsets, l = n.position, a = n.gpuAcceleration, c = n.adaptive, u = n.roundOffsets, h = n.isFixed, f = o.x, d = f === void 0 ? 0 : f, p = o.y, g = p === void 0 ? 0 : p, m = typeof u == "function" ? u({ x: d, y: g }) : { x: d, y: g };
  d = m.x, g = m.y;
  var b = o.hasOwnProperty("x"), y = o.hasOwnProperty("y"), v = yi, O = vi, x = window;
  if (c) {
    var S = Fh(t), C = "clientHeight", k = "clientWidth";
    if (S === Ls(t) && (S = Vo(t), Ir(S).position !== "static" && l === "absolute" && (C = "scrollHeight", k = "scrollWidth")), S = S, s === vi || (s === yi || s === is) && r === qu) {
      O = ns;
      var E = h && S === x && x.visualViewport ? x.visualViewport.height : S[C];
      g -= E - i.height, g *= a ? 1 : -1;
    }
    if (s === yi || (s === vi || s === ns) && r === qu) {
      v = is;
      var $ = h && S === x && x.visualViewport ? x.visualViewport.width : S[k];
      d -= $ - i.width, d *= a ? 1 : -1;
    }
  }
  var T = Object.assign({ position: l }, c && Xj), M = u === !0 ? Yj({ x: d, y: g }) : { x: d, y: g };
  if (d = M.x, g = M.y, a) {
    var j;
    return Object.assign({}, T, (j = {}, j[O] = y ? "0" : "", j[v] = b ? "0" : "", j.transform = (x.devicePixelRatio || 1) <= 1 ? "translate(" + d + "px, " + g + "px)" : "translate3d(" + d + "px, " + g + "px, 0)", j));
  }
  return Object.assign({}, T, (e = {}, e[O] = y ? g + "px" : "", e[v] = b ? d + "px" : "", e.transform = "", e));
}
function Hj(n) {
  var e = n.state, t = n.options, i = t.gpuAcceleration, s = i === void 0 ? !0 : i, r = t.adaptive, o = r === void 0 ? !0 : r, l = t.roundOffsets, a = l === void 0 ? !0 : l, c = { placement: rr(e.placement), variation: Xa(e.placement), popper: e.elements.popper, popperRect: e.rects.popper, gpuAcceleration: s, isFixed: e.options.strategy === "fixed" };
  e.modifiersData.popperOffsets != null && (e.styles.popper = Object.assign({}, e.styles.popper, k1(Object.assign({}, c, { offsets: e.modifiersData.popperOffsets, position: e.options.strategy, adaptive: o, roundOffsets: a })))), e.modifiersData.arrow != null && (e.styles.arrow = Object.assign({}, e.styles.arrow, k1(Object.assign({}, c, { offsets: e.modifiersData.arrow, position: "absolute", adaptive: !1, roundOffsets: a })))), e.attributes.popper = Object.assign({}, e.attributes.popper, { "data-popper-placement": e.placement });
}
var Z2 = { name: "computeStyles", enabled: !0, phase: "beforeWrite", fn: Hj, data: {} }, ff = { passive: !0 };
function Gj(n) {
  var e = n.state, t = n.instance, i = n.options, s = i.scroll, r = s === void 0 ? !0 : s, o = i.resize, l = o === void 0 ? !0 : o, a = Ls(e.elements.popper), c = [].concat(e.scrollParents.reference, e.scrollParents.popper);
  return r && c.forEach(function(u) {
    u.addEventListener("scroll", t.update, ff);
  }), l && a.addEventListener("resize", t.update, ff), function() {
    r && c.forEach(function(u) {
      u.removeEventListener("scroll", t.update, ff);
    }), l && a.removeEventListener("resize", t.update, ff);
  };
}
var F2 = { name: "eventListeners", enabled: !0, phase: "write", fn: function() {
}, effect: Gj, data: {} }, Uj = { left: "right", right: "left", bottom: "top", top: "bottom" };
function rd(n) {
  return n.replace(/left|right|bottom|top/g, function(e) {
    return Uj[e];
  });
}
var Kj = { start: "end", end: "start" };
function P1(n) {
  return n.replace(/start|end/g, function(e) {
    return Kj[e];
  });
}
function Av(n) {
  var e = Ls(n), t = e.pageXOffset, i = e.pageYOffset;
  return { scrollLeft: t, scrollTop: i };
}
function Ev(n) {
  return Wa(Vo(n)).left + Av(n).scrollLeft;
}
function Jj(n) {
  var e = Ls(n), t = Vo(n), i = e.visualViewport, s = t.clientWidth, r = t.clientHeight, o = 0, l = 0;
  return i && (s = i.width, r = i.height, /^((?!chrome|android).)*safari/i.test(navigator.userAgent) || (o = i.offsetLeft, l = i.offsetTop)), { width: s, height: r, x: o + Ev(n), y: l };
}
function ez(n) {
  var e, t = Vo(n), i = Av(n), s = (e = n.ownerDocument) == null ? void 0 : e.body, r = kl(t.scrollWidth, t.clientWidth, s ? s.scrollWidth : 0, s ? s.clientWidth : 0), o = kl(t.scrollHeight, t.clientHeight, s ? s.scrollHeight : 0, s ? s.clientHeight : 0), l = -i.scrollLeft + Ev(n), a = -i.scrollTop;
  return Ir(s || t).direction === "rtl" && (l += kl(t.clientWidth, s ? s.clientWidth : 0) - r), { width: r, height: o, x: l, y: a };
}
function $v(n) {
  var e = Ir(n), t = e.overflow, i = e.overflowX, s = e.overflowY;
  return /auto|scroll|overlay|hidden/.test(t + s + i);
}
function V2(n) {
  return ["html", "body", "#document"].indexOf(dr(n)) >= 0 ? n.ownerDocument.body : Ui(n) && $v(n) ? n : V2(Wp(n));
}
function vu(n, e) {
  var t;
  e === void 0 && (e = []);
  var i = V2(n), s = i === ((t = n.ownerDocument) == null ? void 0 : t.body), r = Ls(i), o = s ? [r].concat(r.visualViewport || [], $v(i) ? i : []) : i, l = e.concat(o);
  return s ? l : l.concat(vu(Wp(o)));
}
function g0(n) {
  return Object.assign({}, n, { left: n.x, top: n.y, right: n.x + n.width, bottom: n.y + n.height });
}
function tz(n) {
  var e = Wa(n);
  return e.top = e.top + n.clientTop, e.left = e.left + n.clientLeft, e.bottom = e.top + n.clientHeight, e.right = e.left + n.clientWidth, e.width = n.clientWidth, e.height = n.clientHeight, e.x = e.left, e.y = e.top, e;
}
function A1(n, e) {
  return e === N2 ? g0(Jj(n)) : Va(e) ? tz(e) : g0(ez(Vo(n)));
}
function nz(n) {
  var e = vu(Wp(n)), t = ["absolute", "fixed"].indexOf(Ir(n).position) >= 0, i = t && Ui(n) ? Fh(n) : n;
  return Va(i) ? e.filter(function(s) {
    return Va(s) && Q2(s, i) && dr(s) !== "body";
  }) : [];
}
function iz(n, e, t) {
  var i = e === "clippingParents" ? nz(n) : [].concat(e), s = [].concat(i, [t]), r = s[0], o = s.reduce(function(l, a) {
    var c = A1(n, a);
    return l.top = kl(c.top, l.top), l.right = Bd(c.right, l.right), l.bottom = Bd(c.bottom, l.bottom), l.left = kl(c.left, l.left), l;
  }, A1(n, r));
  return o.width = o.right - o.left, o.height = o.bottom - o.top, o.x = o.left, o.y = o.top, o;
}
function q2(n) {
  var e = n.reference, t = n.element, i = n.placement, s = i ? rr(i) : null, r = i ? Xa(i) : null, o = e.x + e.width / 2 - t.width / 2, l = e.y + e.height / 2 - t.height / 2, a;
  switch (s) {
    case vi:
      a = { x: o, y: e.y - t.height };
      break;
    case ns:
      a = { x: o, y: e.y + e.height };
      break;
    case is:
      a = { x: e.x + e.width, y: l };
      break;
    case yi:
      a = { x: e.x - t.width, y: l };
      break;
    default:
      a = { x: e.x, y: e.y };
  }
  var c = s ? Pv(s) : null;
  if (c != null) {
    var u = c === "y" ? "height" : "width";
    switch (r) {
      case Fa:
        a[c] = a[c] - (e[u] / 2 - t[u] / 2);
        break;
      case qu:
        a[c] = a[c] + (e[u] / 2 - t[u] / 2);
        break;
    }
  }
  return a;
}
function Wu(n, e) {
  e === void 0 && (e = {});
  var t = e, i = t.placement, s = i === void 0 ? n.placement : i, r = t.boundary, o = r === void 0 ? Pj : r, l = t.rootBoundary, a = l === void 0 ? N2 : l, c = t.elementContext, u = c === void 0 ? Wc : c, h = t.altBoundary, f = h === void 0 ? !1 : h, d = t.padding, p = d === void 0 ? 0 : d, g = j2(typeof p != "number" ? p : z2(p, Zh)), m = u === Wc ? Aj : Wc, b = n.rects.popper, y = n.elements[f ? m : u], v = iz(Va(y) ? y : y.contextElement || Vo(n.elements.popper), o, a), O = Wa(n.elements.reference), x = q2({ reference: O, element: b, strategy: "absolute", placement: s }), S = g0(Object.assign({}, b, x)), C = u === Wc ? S : O, k = { top: v.top - C.top + g.top, bottom: C.bottom - v.bottom + g.bottom, left: v.left - C.left + g.left, right: C.right - v.right + g.right }, E = n.modifiersData.offset;
  if (u === Wc && E) {
    var $ = E[s];
    Object.keys(k).forEach(function(T) {
      var M = [is, ns].indexOf(T) >= 0 ? 1 : -1, j = [vi, ns].indexOf(T) >= 0 ? "y" : "x";
      k[T] += $[j] * M;
    });
  }
  return k;
}
function sz(n, e) {
  e === void 0 && (e = {});
  var t = e, i = t.placement, s = t.boundary, r = t.rootBoundary, o = t.padding, l = t.flipVariations, a = t.allowedAutoPlacements, c = a === void 0 ? qp : a, u = Xa(i), h = u ? l ? S1 : S1.filter(function(p) {
    return Xa(p) === u;
  }) : Zh, f = h.filter(function(p) {
    return c.indexOf(p) >= 0;
  });
  f.length === 0 && (f = h);
  var d = f.reduce(function(p, g) {
    return p[g] = Wu(n, { placement: g, boundary: s, rootBoundary: r, padding: o })[rr(g)], p;
  }, {});
  return Object.keys(d).sort(function(p, g) {
    return d[p] - d[g];
  });
}
function rz(n) {
  if (rr(n) === Sv)
    return [];
  var e = rd(n);
  return [P1(n), e, P1(e)];
}
function oz(n) {
  var e = n.state, t = n.options, i = n.name;
  if (!e.modifiersData[i]._skip) {
    for (var s = t.mainAxis, r = s === void 0 ? !0 : s, o = t.altAxis, l = o === void 0 ? !0 : o, a = t.fallbackPlacements, c = t.padding, u = t.boundary, h = t.rootBoundary, f = t.altBoundary, d = t.flipVariations, p = d === void 0 ? !0 : d, g = t.allowedAutoPlacements, m = e.options.placement, b = rr(m), y = b === m, v = a || (y || !p ? [rd(m)] : rz(m)), O = [m].concat(v).reduce(function(U, le) {
      return U.concat(rr(le) === Sv ? sz(e, { placement: le, boundary: u, rootBoundary: h, padding: c, flipVariations: p, allowedAutoPlacements: g }) : le);
    }, []), x = e.rects.reference, S = e.rects.popper, C = /* @__PURE__ */ new Map(), k = !0, E = O[0], $ = 0; $ < O.length; $++) {
      var T = O[$], M = rr(T), j = Xa(T) === Fa, D = [vi, ns].indexOf(M) >= 0, P = D ? "width" : "height", A = Wu(e, { placement: T, boundary: u, rootBoundary: h, altBoundary: f, padding: c }), Q = D ? j ? is : yi : j ? ns : vi;
      x[P] > S[P] && (Q = rd(Q));
      var X = rd(Q), z = [];
      if (r && z.push(A[M] <= 0), l && z.push(A[Q] <= 0, A[X] <= 0), z.every(function(U) {
        return U;
      })) {
        E = T, k = !1;
        break;
      }
      C.set(T, z);
    }
    if (k)
      for (var q = p ? 3 : 1, re = function(U) {
        var le = O.find(function(ce) {
          var K = C.get(ce);
          if (K)
            return K.slice(0, U).every(function(he) {
              return he;
            });
        });
        if (le)
          return E = le, "break";
      }, H = q; H > 0; H--) {
        var G = re(H);
        if (G === "break")
          break;
      }
    e.placement !== E && (e.modifiersData[i]._skip = !0, e.placement = E, e.reset = !0);
  }
}
var lz = { name: "flip", enabled: !0, phase: "main", fn: oz, requiresIfExists: ["offset"], data: { _skip: !1 } };
function E1(n, e, t) {
  return t === void 0 && (t = { x: 0, y: 0 }), { top: n.top - e.height - t.y, right: n.right - e.width + t.x, bottom: n.bottom - e.height + t.y, left: n.left - e.width - t.x };
}
function $1(n) {
  return [vi, is, ns, yi].some(function(e) {
    return n[e] >= 0;
  });
}
function az(n) {
  var e = n.state, t = n.name, i = e.rects.reference, s = e.rects.popper, r = e.modifiersData.preventOverflow, o = Wu(e, { elementContext: "reference" }), l = Wu(e, { altBoundary: !0 }), a = E1(o, i), c = E1(l, s, r), u = $1(a), h = $1(c);
  e.modifiersData[t] = { referenceClippingOffsets: a, popperEscapeOffsets: c, isReferenceHidden: u, hasPopperEscaped: h }, e.attributes.popper = Object.assign({}, e.attributes.popper, { "data-popper-reference-hidden": u, "data-popper-escaped": h });
}
var cz = { name: "hide", enabled: !0, phase: "main", requiresIfExists: ["preventOverflow"], fn: az };
function uz(n, e, t) {
  var i = rr(n), s = [yi, vi].indexOf(i) >= 0 ? -1 : 1, r = typeof t == "function" ? t(Object.assign({}, e, { placement: n })) : t, o = r[0], l = r[1];
  return o = o || 0, l = (l || 0) * s, [yi, is].indexOf(i) >= 0 ? { x: l, y: o } : { x: o, y: l };
}
function hz(n) {
  var e = n.state, t = n.options, i = n.name, s = t.offset, r = s === void 0 ? [0, 0] : s, o = qp.reduce(function(u, h) {
    return u[h] = uz(h, e.rects, r), u;
  }, {}), l = o[e.placement], a = l.x, c = l.y;
  e.modifiersData.popperOffsets != null && (e.modifiersData.popperOffsets.x += a, e.modifiersData.popperOffsets.y += c), e.modifiersData[i] = o;
}
var fz = { name: "offset", enabled: !0, phase: "main", requires: ["popperOffsets"], fn: hz };
function dz(n) {
  var e = n.state, t = n.name;
  e.modifiersData[t] = q2({ reference: e.rects.reference, element: e.rects.popper, strategy: "absolute", placement: e.placement });
}
var W2 = { name: "popperOffsets", enabled: !0, phase: "read", fn: dz, data: {} };
function pz(n) {
  return n === "x" ? "y" : "x";
}
function gz(n) {
  var e = n.state, t = n.options, i = n.name, s = t.mainAxis, r = s === void 0 ? !0 : s, o = t.altAxis, l = o === void 0 ? !1 : o, a = t.boundary, c = t.rootBoundary, u = t.altBoundary, h = t.padding, f = t.tether, d = f === void 0 ? !0 : f, p = t.tetherOffset, g = p === void 0 ? 0 : p, m = Wu(e, { boundary: a, rootBoundary: c, padding: h, altBoundary: u }), b = rr(e.placement), y = Xa(e.placement), v = !y, O = Pv(b), x = pz(O), S = e.modifiersData.popperOffsets, C = e.rects.reference, k = e.rects.popper, E = typeof g == "function" ? g(Object.assign({}, e.rects, { placement: e.placement })) : g, $ = typeof E == "number" ? { mainAxis: E, altAxis: E } : Object.assign({ mainAxis: 0, altAxis: 0 }, E), T = e.modifiersData.offset ? e.modifiersData.offset[e.placement] : null, M = { x: 0, y: 0 };
  if (S) {
    if (r) {
      var j, D = O === "y" ? vi : yi, P = O === "y" ? ns : is, A = O === "y" ? "height" : "width", Q = S[O], X = Q + m[D], z = Q - m[P], q = d ? -k[A] / 2 : 0, re = y === Fa ? C[A] : k[A], H = y === Fa ? -k[A] : -C[A], G = e.elements.arrow, U = d && G ? kv(G) : { width: 0, height: 0 }, le = e.modifiersData["arrow#persistent"] ? e.modifiersData["arrow#persistent"].padding : B2(), ce = le[D], K = le[P], he = bu(0, C[A], U[A]), Ne = v ? C[A] / 2 - q - he - ce - $.mainAxis : re - he - ce - $.mainAxis, ae = v ? -C[A] / 2 + q + he + K + $.mainAxis : H + he + K + $.mainAxis, $e = e.elements.arrow && Fh(e.elements.arrow), lt = $e ? O === "y" ? $e.clientTop || 0 : $e.clientLeft || 0 : 0, En = (j = T == null ? void 0 : T[O]) != null ? j : 0, ii = Q + Ne - En - lt, Si = Q + ae - En, ls = bu(d ? Bd(X, ii) : X, Q, d ? kl(z, Si) : z);
      S[O] = ls, M[O] = ls - Q;
    }
    if (l) {
      var as, cs = O === "x" ? vi : yi, Cr = O === "x" ? ns : is, si = S[x], us = x === "y" ? "height" : "width", js = si + m[cs], kr = si - m[Cr], ri = [vi, yi].indexOf(b) !== -1, ie = (as = T == null ? void 0 : T[x]) != null ? as : 0, Ze = ri ? js : si - C[us] - k[us] - ie + $.altAxis, Dt = ri ? si + C[us] + k[us] - ie - $.altAxis : kr, hs = d && ri ? Zj(Ze, si, Dt) : bu(d ? Ze : js, si, d ? Dt : kr);
      S[x] = hs, M[x] = hs - si;
    }
    e.modifiersData[i] = M;
  }
}
var mz = { name: "preventOverflow", enabled: !0, phase: "main", fn: gz, requiresIfExists: ["offset"] };
function bz(n) {
  return { scrollLeft: n.scrollLeft, scrollTop: n.scrollTop };
}
function vz(n) {
  return n === Ls(n) || !Ui(n) ? Av(n) : bz(n);
}
function yz(n) {
  var e = n.getBoundingClientRect(), t = qa(e.width) / n.offsetWidth || 1, i = qa(e.height) / n.offsetHeight || 1;
  return t !== 1 || i !== 1;
}
function Oz(n, e, t) {
  t === void 0 && (t = !1);
  var i = Ui(e), s = Ui(e) && yz(e), r = Vo(e), o = Wa(n, s), l = { scrollLeft: 0, scrollTop: 0 }, a = { x: 0, y: 0 };
  return (i || !i && !t) && ((dr(e) !== "body" || $v(r)) && (l = vz(e)), Ui(e) ? (a = Wa(e, !0), a.x += e.clientLeft, a.y += e.clientTop) : r && (a.x = Ev(r))), { x: o.left + l.scrollLeft - a.x, y: o.top + l.scrollTop - a.y, width: o.width, height: o.height };
}
function wz(n) {
  var e = /* @__PURE__ */ new Map(), t = /* @__PURE__ */ new Set(), i = [];
  n.forEach(function(r) {
    e.set(r.name, r);
  });
  function s(r) {
    t.add(r.name);
    var o = [].concat(r.requires || [], r.requiresIfExists || []);
    o.forEach(function(l) {
      if (!t.has(l)) {
        var a = e.get(l);
        a && s(a);
      }
    }), i.push(r);
  }
  return n.forEach(function(r) {
    t.has(r.name) || s(r);
  }), i;
}
function xz(n) {
  var e = wz(n);
  return Ij.reduce(function(t, i) {
    return t.concat(e.filter(function(s) {
      return s.phase === i;
    }));
  }, []);
}
function Sz(n) {
  var e;
  return function() {
    return e || (e = new Promise(function(t) {
      Promise.resolve().then(function() {
        e = void 0, t(n());
      });
    })), e;
  };
}
function Cz(n) {
  var e = n.reduce(function(t, i) {
    var s = t[i.name];
    return t[i.name] = s ? Object.assign({}, s, i, { options: Object.assign({}, s.options, i.options), data: Object.assign({}, s.data, i.data) }) : i, t;
  }, {});
  return Object.keys(e).map(function(t) {
    return e[t];
  });
}
var T1 = { placement: "bottom", modifiers: [], strategy: "absolute" };
function _1() {
  for (var n = arguments.length, e = new Array(n), t = 0; t < n; t++)
    e[t] = arguments[t];
  return !e.some(function(i) {
    return !(i && typeof i.getBoundingClientRect == "function");
  });
}
function Tv(n) {
  n === void 0 && (n = {});
  var e = n, t = e.defaultModifiers, i = t === void 0 ? [] : t, s = e.defaultOptions, r = s === void 0 ? T1 : s;
  return function(o, l, a) {
    a === void 0 && (a = r);
    var c = { placement: "bottom", orderedModifiers: [], options: Object.assign({}, T1, r), modifiersData: {}, elements: { reference: o, popper: l }, attributes: {}, styles: {} }, u = [], h = !1, f = { state: c, setOptions: function(g) {
      var m = typeof g == "function" ? g(c.options) : g;
      p(), c.options = Object.assign({}, r, c.options, m), c.scrollParents = { reference: Va(o) ? vu(o) : o.contextElement ? vu(o.contextElement) : [], popper: vu(l) };
      var b = xz(Cz([].concat(i, c.options.modifiers)));
      return c.orderedModifiers = b.filter(function(y) {
        return y.enabled;
      }), d(), f.update();
    }, forceUpdate: function() {
      if (!h) {
        var g = c.elements, m = g.reference, b = g.popper;
        if (_1(m, b)) {
          c.rects = { reference: Oz(m, Fh(b), c.options.strategy === "fixed"), popper: kv(b) }, c.reset = !1, c.placement = c.options.placement, c.orderedModifiers.forEach(function(k) {
            return c.modifiersData[k.name] = Object.assign({}, k.data);
          });
          for (var y = 0; y < c.orderedModifiers.length; y++) {
            if (c.reset === !0) {
              c.reset = !1, y = -1;
              continue;
            }
            var v = c.orderedModifiers[y], O = v.fn, x = v.options, S = x === void 0 ? {} : x, C = v.name;
            typeof O == "function" && (c = O({ state: c, options: S, name: C, instance: f }) || c);
          }
        }
      }
    }, update: Sz(function() {
      return new Promise(function(g) {
        f.forceUpdate(), g(c);
      });
    }), destroy: function() {
      p(), h = !0;
    } };
    if (!_1(o, l))
      return f;
    f.setOptions(a).then(function(g) {
      !h && a.onFirstUpdate && a.onFirstUpdate(g);
    });
    function d() {
      c.orderedModifiers.forEach(function(g) {
        var m = g.name, b = g.options, y = b === void 0 ? {} : b, v = g.effect;
        if (typeof v == "function") {
          var O = v({ state: c, name: m, instance: f, options: y }), x = function() {
          };
          u.push(O || x);
        }
      });
    }
    function p() {
      u.forEach(function(g) {
        return g();
      }), u = [];
    }
    return f;
  };
}
Tv();
var kz = [F2, W2, Z2, I2];
Tv({ defaultModifiers: kz });
var Pz = [F2, W2, Z2, I2, fz, lz, mz, Wj, cz], Az = Tv({ defaultModifiers: Pz });
const Ez = (n, e, t = {}) => {
  const i = {
    name: "updateState",
    enabled: !0,
    phase: "write",
    fn: ({ state: a }) => {
      const c = $z(a);
      Object.assign(o.value, c);
    },
    requires: ["computeStyles"]
  }, s = _(() => {
    const { onFirstUpdate: a, placement: c, strategy: u, modifiers: h } = w(t);
    return {
      onFirstUpdate: a,
      placement: c || "bottom",
      strategy: u || "absolute",
      modifiers: [
        ...h || [],
        i,
        { name: "applyStyles", enabled: !1 }
      ]
    };
  }), r = gi(), o = L({
    styles: {
      popper: {
        position: w(s).strategy,
        left: "0",
        top: "0"
      },
      arrow: {
        position: "absolute"
      }
    },
    attributes: {}
  }), l = () => {
    r.value && (r.value.destroy(), r.value = void 0);
  };
  return ee(s, (a) => {
    const c = w(r);
    c && c.setOptions(a);
  }, {
    deep: !0
  }), ee([n, e], ([a, c]) => {
    l(), !(!a || !c) && (r.value = Az(a, c, w(s)));
  }), Zn(() => {
    l();
  }), {
    state: _(() => {
      var a;
      return { ...((a = w(r)) == null ? void 0 : a.state) || {} };
    }),
    styles: _(() => w(o).styles),
    attributes: _(() => w(o).attributes),
    update: () => {
      var a;
      return (a = w(r)) == null ? void 0 : a.update();
    },
    forceUpdate: () => {
      var a;
      return (a = w(r)) == null ? void 0 : a.forceUpdate();
    },
    instanceRef: _(() => w(r))
  };
};
function $z(n) {
  const e = Object.keys(n.elements), t = Nd(e.map((s) => [s, n.styles[s] || {}])), i = Nd(e.map((s) => [s, n.attributes[s]]));
  return {
    styles: t,
    attributes: i
  };
}
const _v = (n) => {
  if (!n)
    return { onClick: Lr, onMousedown: Lr, onMouseup: Lr };
  let e = !1, t = !1;
  return { onClick: (o) => {
    e && t && n(o), e = t = !1;
  }, onMousedown: (o) => {
    e = o.target === o.currentTarget;
  }, onMouseup: (o) => {
    t = o.target === o.currentTarget;
  } };
};
function M1() {
  let n;
  const e = (i, s) => {
    t(), n = window.setTimeout(i, s);
  }, t = () => window.clearTimeout(n);
  return jh(() => t()), {
    registerTimeout: e,
    cancelTimeout: t
  };
}
const m0 = {
  prefix: Math.floor(Math.random() * 1e4),
  current: 0
}, Tz = Symbol("elIdInjection"), Mv = () => qe() ? ye(Tz, m0) : m0, pr = (n) => {
  const e = Mv();
  !ot && e === m0 && rt("IdInjection", `Looks like you are using server rendering, you must provide a id provider to ensure the hydration process to be succeed
usage: app.provide(ID_INJECTION_KEY, {
  prefix: number,
  current: number,
})`);
  const t = xv();
  return _(() => w(n) || `${t.value}-id-${e.prefix}-${e.current++}`);
};
let fa = [];
const R1 = (n) => {
  const e = n;
  e.key === jn.esc && fa.forEach((t) => t(e));
}, _z = (n) => {
  Be(() => {
    fa.length === 0 && document.addEventListener("keydown", R1), ot && fa.push(n);
  }), Zn(() => {
    fa = fa.filter((e) => e !== n), fa.length === 0 && ot && document.removeEventListener("keydown", R1);
  });
};
let D1;
const X2 = () => {
  const n = xv(), e = Mv(), t = _(() => `${n.value}-popper-container-${e.prefix}`), i = _(() => `#${t.value}`);
  return {
    id: t,
    selector: i
  };
}, Mz = (n) => {
  const e = document.createElement("div");
  return e.id = n, document.body.appendChild(e), e;
}, Rz = () => {
  const { id: n, selector: e } = X2();
  return rv(() => {
    ot && (process.env.NODE_ENV === "test" || !D1 && !document.body.querySelector(e.value)) && (D1 = Mz(n.value));
  }), {
    id: n,
    selector: e
  };
}, Dz = Ae({
  showAfter: {
    type: Number,
    default: 0
  },
  hideAfter: {
    type: Number,
    default: 200
  },
  autoClose: {
    type: Number,
    default: 0
  }
}), Lz = ({
  showAfter: n,
  hideAfter: e,
  autoClose: t,
  open: i,
  close: s
}) => {
  const { registerTimeout: r } = M1(), {
    registerTimeout: o,
    cancelTimeout: l
  } = M1();
  return {
    onOpen: (u) => {
      r(() => {
        i(u);
        const h = w(t);
        ze(h) && h > 0 && o(() => {
          s(u);
        }, h);
      }, w(n));
    },
    onClose: (u) => {
      l(), r(() => {
        s(u);
      }, w(e));
    }
  };
}, Y2 = Symbol("elForwardRef"), Nz = (n) => {
  ht(Y2, {
    setForwardRef: (t) => {
      n.value = t;
    }
  });
}, Iz = (n) => ({
  mounted(e) {
    n(e);
  },
  updated(e) {
    n(e);
  },
  unmounted() {
    n(null);
  }
}), L1 = L(0), H2 = 2e3, G2 = Symbol("zIndexContextKey"), Rv = (n) => {
  const e = n || (qe() ? ye(G2, void 0) : void 0), t = _(() => {
    const r = w(e);
    return ze(r) ? r : H2;
  }), i = _(() => t.value + L1.value);
  return {
    initialZIndex: t,
    currentZIndex: i,
    nextZIndex: () => (L1.value++, i.value)
  };
};
function Qz(n) {
  const e = L();
  function t() {
    if (n.value == null)
      return;
    const { selectionStart: s, selectionEnd: r, value: o } = n.value;
    if (s == null || r == null)
      return;
    const l = o.slice(0, Math.max(0, s)), a = o.slice(Math.max(0, r));
    e.value = {
      selectionStart: s,
      selectionEnd: r,
      value: o,
      beforeTxt: l,
      afterTxt: a
    };
  }
  function i() {
    if (n.value == null || e.value == null)
      return;
    const { value: s } = n.value, { beforeTxt: r, afterTxt: o, selectionStart: l } = e.value;
    if (r == null || o == null || l == null)
      return;
    let a = s.length;
    if (s.endsWith(o))
      a = s.length - o.length;
    else if (s.startsWith(r))
      a = r.length;
    else {
      const c = r[l - 1], u = s.indexOf(c, l - 1);
      u !== -1 && (a = u + 1);
    }
    n.value.setSelectionRange(a, a);
  }
  return [t, i];
}
const Bz = (n, e, t) => sd(n.subTree).filter((r) => {
  var o;
  return ur(r) && ((o = r.type) == null ? void 0 : o.name) === e && !!r.component;
}).map((r) => r.component.uid).map((r) => t[r]).filter((r) => !!r), jz = (n, e) => {
  const t = {}, i = gi([]);
  return {
    children: i,
    addChild: (o) => {
      t[o.uid] = o, i.value = Bz(n, e, t);
    },
    removeChild: (o) => {
      delete t[o], i.value = i.value.filter((l) => l.uid !== o);
    }
  };
}, Ns = Fp({
  type: String,
  values: Hl,
  required: !1
}), U2 = Symbol("size"), zz = () => {
  const n = ye(U2, {});
  return _(() => w(n.size) || "");
};
function Dv(n, { afterFocus: e, beforeBlur: t, afterBlur: i } = {}) {
  const s = qe(), { emit: r } = s, o = gi(), l = L(!1), a = (h) => {
    l.value || (l.value = !0, r("focus", h), e == null || e());
  }, c = (h) => {
    var f;
    Mt(t) && t(h) || h.relatedTarget && ((f = o.value) != null && f.contains(h.relatedTarget)) || (l.value = !1, r("blur", h), i == null || i());
  }, u = () => {
    var h;
    (h = n.value) == null || h.focus();
  };
  return ee(o, (h) => {
    h && h.setAttribute("tabindex", "-1");
  }), bi(o, "click", u), {
    wrapperRef: o,
    isFocused: l,
    handleFocus: a,
    handleBlur: c
  };
}
const K2 = Symbol(), jd = L();
function Xp(n, e = void 0) {
  const t = qe() ? ye(K2, jd) : jd;
  return n ? _(() => {
    var i, s;
    return (s = (i = t.value) == null ? void 0 : i[n]) != null ? s : e;
  }) : t;
}
function Lv(n, e) {
  const t = Xp(), i = ve(n, _(() => {
    var l;
    return ((l = t.value) == null ? void 0 : l.namespace) || mu;
  })), s = ni(_(() => {
    var l;
    return (l = t.value) == null ? void 0 : l.locale;
  })), r = Rv(_(() => {
    var l;
    return ((l = t.value) == null ? void 0 : l.zIndex) || H2;
  })), o = _(() => {
    var l;
    return w(e) || ((l = t.value) == null ? void 0 : l.size) || "";
  });
  return J2(_(() => w(t) || {})), {
    ns: i,
    locale: s,
    zIndex: r,
    size: o
  };
}
const J2 = (n, e, t = !1) => {
  var i;
  const s = !!qe(), r = s ? Xp() : void 0, o = (i = e == null ? void 0 : e.provide) != null ? i : s ? ht : void 0;
  if (!o) {
    rt("provideGlobalConfig", "provideGlobalConfig() can only be used inside setup().");
    return;
  }
  const l = _(() => {
    const a = w(n);
    return r != null && r.value ? Zz(r.value, a) : a;
  });
  return o(K2, l), o(A2, _(() => l.value.locale)), o(M2, _(() => l.value.namespace)), o(G2, _(() => l.value.zIndex)), o(U2, {
    size: _(() => l.value.size || "")
  }), (t || !jd.value) && (jd.value = l.value), l;
}, Zz = (n, e) => {
  var t;
  const i = [.../* @__PURE__ */ new Set([...O1(n), ...O1(e)])], s = {};
  for (const r of i)
    s[r] = (t = e[r]) != null ? t : n[r];
  return s;
}, Fz = Ae({
  a11y: {
    type: Boolean,
    default: !0
  },
  locale: {
    type: be(Object)
  },
  size: Ns,
  button: {
    type: be(Object)
  },
  experimentalFeatures: {
    type: be(Object)
  },
  keyboardNavigation: {
    type: Boolean,
    default: !0
  },
  message: {
    type: be(Object)
  },
  zIndex: Number,
  namespace: {
    type: String,
    default: "el"
  }
}), b0 = {};
Z({
  name: "ElConfigProvider",
  props: Fz,
  setup(n, { slots: e }) {
    ee(() => n.message, (i) => {
      Object.assign(b0, i ?? {});
    }, { immediate: !0, deep: !0 });
    const t = J2(n);
    return () => pe(e, "default", { config: t == null ? void 0 : t.value });
  }
});
var Ce = (n, e) => {
  const t = n.__vccOpts || n;
  for (const [i, s] of e)
    t[i] = s;
  return t;
};
const Vz = Ae({
  size: {
    type: be([Number, String])
  },
  color: {
    type: String
  }
}), qz = Z({
  name: "ElIcon",
  inheritAttrs: !1
}), Wz = /* @__PURE__ */ Z({
  ...qz,
  props: Vz,
  setup(n) {
    const e = n, t = ve("icon"), i = _(() => {
      const { size: s, color: r } = e;
      return !s && !r ? {} : {
        fontSize: Li(s) ? void 0 : Qi(s),
        "--color": r
      };
    });
    return (s, r) => (R(), F("i", Gi({
      class: w(t).b(),
      style: w(i)
    }, s.$attrs), [
      pe(s.$slots, "default")
    ], 16));
  }
});
var Xz = /* @__PURE__ */ Ce(Wz, [["__file", "icon.vue"]]);
const Ue = Bt(Xz), $c = Symbol("formContextKey"), Ll = Symbol("formItemContextKey"), Bi = (n, e = {}) => {
  const t = L(void 0), i = e.prop ? t : L2("size"), s = e.global ? t : zz(), r = e.form ? { size: void 0 } : ye($c, void 0), o = e.formItem ? { size: void 0 } : ye(Ll, void 0);
  return _(() => i.value || w(n) || (o == null ? void 0 : o.size) || (r == null ? void 0 : r.size) || s.value || "");
}, qo = (n) => {
  const e = L2("disabled"), t = ye($c, void 0);
  return _(() => e.value || w(n) || (t == null ? void 0 : t.disabled) || !1);
}, vr = () => {
  const n = ye($c, void 0), e = ye(Ll, void 0);
  return {
    form: n,
    formItem: e
  };
}, Ul = (n, {
  formItemContext: e,
  disableIdGeneration: t,
  disableIdManagement: i
}) => {
  t || (t = L(!1)), i || (i = L(!1));
  const s = L();
  let r;
  const o = _(() => {
    var l;
    return !!(!n.label && e && e.inputIds && ((l = e.inputIds) == null ? void 0 : l.length) <= 1);
  });
  return Be(() => {
    r = ee([Yi(n, "id"), t], ([l, a]) => {
      const c = l ?? (a ? void 0 : pr().value);
      c !== s.value && (e != null && e.removeInputId && (s.value && e.removeInputId(s.value), !(i != null && i.value) && !a && c && e.addInputId(c)), s.value = c);
    }, { immediate: !0 });
  }), _h(() => {
    r && r(), e != null && e.removeInputId && s.value && e.removeInputId(s.value);
  }), {
    isLabeledByFormItem: o,
    inputId: s
  };
}, Yz = Ae({
  size: {
    type: String,
    values: Hl
  },
  disabled: Boolean
}), Hz = Ae({
  ...Yz,
  model: Object,
  rules: {
    type: be(Object)
  },
  labelPosition: {
    type: String,
    values: ["left", "right", "top"],
    default: "right"
  },
  requireAsteriskPosition: {
    type: String,
    values: ["left", "right"],
    default: "left"
  },
  labelWidth: {
    type: [String, Number],
    default: ""
  },
  labelSuffix: {
    type: String,
    default: ""
  },
  inline: Boolean,
  inlineMessage: Boolean,
  statusIcon: Boolean,
  showMessage: {
    type: Boolean,
    default: !0
  },
  validateOnRuleChange: {
    type: Boolean,
    default: !0
  },
  hideRequiredAsterisk: Boolean,
  scrollToError: Boolean,
  scrollIntoViewOptions: {
    type: [Object, Boolean]
  }
}), Gz = {
  validate: (n, e, t) => (Zt(n) || pt(n)) && Yn(e) && pt(t)
}, Uz = "ElForm";
function Kz() {
  const n = L([]), e = _(() => {
    if (!n.value.length)
      return "0";
    const r = Math.max(...n.value);
    return r ? `${r}px` : "";
  });
  function t(r) {
    const o = n.value.indexOf(r);
    return o === -1 && e.value === "0" && rt(Uz, `unexpected width ${r}`), o;
  }
  function i(r, o) {
    if (r && o) {
      const l = t(o);
      n.value.splice(l, 1, r);
    } else
      r && n.value.push(r);
  }
  function s(r) {
    const o = t(r);
    o > -1 && n.value.splice(o, 1);
  }
  return {
    autoLabelWidth: e,
    registerLabelWidth: i,
    deregisterLabelWidth: s
  };
}
const df = (n, e) => {
  const t = ju(e);
  return t.length > 0 ? n.filter((i) => i.prop && t.includes(i.prop)) : n;
}, od = "ElForm", Jz = Z({
  name: od
}), e6 = /* @__PURE__ */ Z({
  ...Jz,
  props: Hz,
  emits: Gz,
  setup(n, { expose: e, emit: t }) {
    const i = n, s = [], r = Bi(), o = ve("form"), l = _(() => {
      const { labelPosition: v, inline: O } = i;
      return [
        o.b(),
        o.m(r.value || "default"),
        {
          [o.m(`label-${v}`)]: v,
          [o.m("inline")]: O
        }
      ];
    }), a = (v) => s.find((O) => O.prop === v), c = (v) => {
      s.push(v);
    }, u = (v) => {
      v.prop && s.splice(s.indexOf(v), 1);
    }, h = (v = []) => {
      if (!i.model) {
        rt(od, "model is required for resetFields to work.");
        return;
      }
      df(s, v).forEach((O) => O.resetField());
    }, f = (v = []) => {
      df(s, v).forEach((O) => O.clearValidate());
    }, d = _(() => {
      const v = !!i.model;
      return v || rt(od, "model is required for validate to work."), v;
    }), p = (v) => {
      if (s.length === 0)
        return [];
      const O = df(s, v);
      return O.length ? O : (rt(od, "please pass correct props!"), []);
    }, g = async (v) => b(void 0, v), m = async (v = []) => {
      if (!d.value)
        return !1;
      const O = p(v);
      if (O.length === 0)
        return !0;
      let x = {};
      for (const S of O)
        try {
          await S.validate("");
        } catch (C) {
          x = {
            ...x,
            ...C
          };
        }
      return Object.keys(x).length === 0 ? !0 : Promise.reject(x);
    }, b = async (v = [], O) => {
      const x = !Mt(O);
      try {
        const S = await m(v);
        return S === !0 && (O == null || O(S)), S;
      } catch (S) {
        if (S instanceof Error)
          throw S;
        const C = S;
        return i.scrollToError && y(Object.keys(C)[0]), O == null || O(!1, C), x && Promise.reject(C);
      }
    }, y = (v) => {
      var O;
      const x = df(s, v)[0];
      x && ((O = x.$el) == null || O.scrollIntoView(i.scrollIntoViewOptions));
    };
    return ee(() => i.rules, () => {
      i.validateOnRuleChange && g().catch((v) => rt(v));
    }, { deep: !0 }), ht($c, Hn({
      ...zo(i),
      emit: t,
      resetFields: h,
      clearValidate: f,
      validateField: b,
      getField: a,
      addField: c,
      removeField: u,
      ...Kz()
    })), e({
      validate: g,
      validateField: b,
      resetFields: h,
      clearValidate: f,
      scrollToField: y
    }), (v, O) => (R(), F("form", {
      class: B(w(l))
    }, [
      pe(v.$slots, "default")
    ], 2));
  }
});
var t6 = /* @__PURE__ */ Ce(e6, [["__file", "form.vue"]]);
const n6 = [
  "",
  "error",
  "validating",
  "success"
], i6 = Ae({
  label: String,
  labelWidth: {
    type: [String, Number],
    default: ""
  },
  prop: {
    type: be([String, Array])
  },
  required: {
    type: Boolean,
    default: void 0
  },
  rules: {
    type: be([Object, Array])
  },
  error: String,
  validateStatus: {
    type: String,
    values: n6
  },
  for: String,
  inlineMessage: {
    type: [String, Boolean],
    default: ""
  },
  showMessage: {
    type: Boolean,
    default: !0
  },
  size: {
    type: String,
    values: Hl
  }
}), N1 = "ElLabelWrap";
var s6 = Z({
  name: N1,
  props: {
    isAutoWidth: Boolean,
    updateAll: Boolean
  },
  setup(n, {
    slots: e
  }) {
    const t = ye($c, void 0), i = ye(Ll);
    i || Yr(N1, "usage: <el-form-item><label-wrap /></el-form-item>");
    const s = ve("form"), r = L(), o = L(0), l = () => {
      var u;
      if ((u = r.value) != null && u.firstElementChild) {
        const h = window.getComputedStyle(r.value.firstElementChild).width;
        return Math.ceil(Number.parseFloat(h));
      } else
        return 0;
    }, a = (u = "update") => {
      Qe(() => {
        e.default && n.isAutoWidth && (u === "update" ? o.value = l() : u === "remove" && (t == null || t.deregisterLabelWidth(o.value)));
      });
    }, c = () => a("update");
    return Be(() => {
      c();
    }), Zn(() => {
      a("remove");
    }), Mh(() => c()), ee(o, (u, h) => {
      n.updateAll && (t == null || t.registerLabelWidth(u, h));
    }), Jn(_(() => {
      var u, h;
      return (h = (u = r.value) == null ? void 0 : u.firstElementChild) != null ? h : null;
    }), c), () => {
      var u, h;
      if (!e)
        return null;
      const {
        isAutoWidth: f
      } = n;
      if (f) {
        const d = t == null ? void 0 : t.autoLabelWidth, p = i == null ? void 0 : i.hasLabel, g = {};
        if (p && d && d !== "auto") {
          const m = Math.max(0, Number.parseInt(d, 10) - o.value), b = t.labelPosition === "left" ? "marginRight" : "marginLeft";
          m && (g[b] = `${m}px`);
        }
        return ne("div", {
          ref: r,
          class: [s.be("item", "label-wrap")],
          style: g
        }, [(u = e.default) == null ? void 0 : u.call(e)]);
      } else
        return ne(sn, {
          ref: r
        }, [(h = e.default) == null ? void 0 : h.call(e)]);
    };
  }
});
const r6 = ["role", "aria-labelledby"], o6 = Z({
  name: "ElFormItem"
}), l6 = /* @__PURE__ */ Z({
  ...o6,
  props: i6,
  setup(n, { expose: e }) {
    const t = n, i = Zo(), s = ye($c, void 0), r = ye(Ll, void 0), o = Bi(void 0, { formItem: !1 }), l = ve("form-item"), a = pr().value, c = L([]), u = L(""), h = yB(u, 100), f = L(""), d = L();
    let p, g = !1;
    const m = _(() => {
      if ((s == null ? void 0 : s.labelPosition) === "top")
        return {};
      const K = Qi(t.labelWidth || (s == null ? void 0 : s.labelWidth) || "");
      return K ? { width: K } : {};
    }), b = _(() => {
      if ((s == null ? void 0 : s.labelPosition) === "top" || s != null && s.inline)
        return {};
      if (!t.label && !t.labelWidth && E)
        return {};
      const K = Qi(t.labelWidth || (s == null ? void 0 : s.labelWidth) || "");
      return !t.label && !i.label ? { marginLeft: K } : {};
    }), y = _(() => [
      l.b(),
      l.m(o.value),
      l.is("error", u.value === "error"),
      l.is("validating", u.value === "validating"),
      l.is("success", u.value === "success"),
      l.is("required", D.value || t.required),
      l.is("no-asterisk", s == null ? void 0 : s.hideRequiredAsterisk),
      (s == null ? void 0 : s.requireAsteriskPosition) === "right" ? "asterisk-right" : "asterisk-left",
      { [l.m("feedback")]: s == null ? void 0 : s.statusIcon }
    ]), v = _(() => Yn(t.inlineMessage) ? t.inlineMessage : (s == null ? void 0 : s.inlineMessage) || !1), O = _(() => [
      l.e("error"),
      { [l.em("error", "inline")]: v.value }
    ]), x = _(() => t.prop ? pt(t.prop) ? t.prop : t.prop.join(".") : ""), S = _(() => !!(t.label || i.label)), C = _(() => t.for || (c.value.length === 1 ? c.value[0] : void 0)), k = _(() => !C.value && S.value), E = !!r, $ = _(() => {
      const K = s == null ? void 0 : s.model;
      if (!(!K || !t.prop))
        return nd(K, t.prop).value;
    }), T = _(() => {
      const { required: K } = t, he = [];
      t.rules && he.push(...ju(t.rules));
      const Ne = s == null ? void 0 : s.rules;
      if (Ne && t.prop) {
        const ae = nd(Ne, t.prop).value;
        ae && he.push(...ju(ae));
      }
      if (K !== void 0) {
        const ae = he.map(($e, lt) => [$e, lt]).filter(([$e]) => Object.keys($e).includes("required"));
        if (ae.length > 0)
          for (const [$e, lt] of ae)
            $e.required !== K && (he[lt] = { ...$e, required: K });
        else
          he.push({ required: K });
      }
      return he;
    }), M = _(() => T.value.length > 0), j = (K) => T.value.filter((Ne) => !Ne.trigger || !K ? !0 : Array.isArray(Ne.trigger) ? Ne.trigger.includes(K) : Ne.trigger === K).map(({ trigger: Ne, ...ae }) => ae), D = _(() => T.value.some((K) => K.required)), P = _(() => {
      var K;
      return h.value === "error" && t.showMessage && ((K = s == null ? void 0 : s.showMessage) != null ? K : !0);
    }), A = _(() => `${t.label || ""}${(s == null ? void 0 : s.labelSuffix) || ""}`), Q = (K) => {
      u.value = K;
    }, X = (K) => {
      var he, Ne;
      const { errors: ae, fields: $e } = K;
      (!ae || !$e) && console.error(K), Q("error"), f.value = ae ? (Ne = (he = ae == null ? void 0 : ae[0]) == null ? void 0 : he.message) != null ? Ne : `${t.prop} is required` : "", s == null || s.emit("validate", t.prop, !1, f.value);
    }, z = () => {
      Q("success"), s == null || s.emit("validate", t.prop, !0, "");
    }, q = async (K) => {
      const he = x.value;
      return new Bh({
        [he]: K
      }).validate({ [he]: $.value }, { firstFields: !0 }).then(() => (z(), !0)).catch((ae) => (X(ae), Promise.reject(ae)));
    }, re = async (K, he) => {
      if (g || !t.prop)
        return !1;
      const Ne = Mt(he);
      if (!M.value)
        return he == null || he(!1), !1;
      const ae = j(K);
      return ae.length === 0 ? (he == null || he(!0), !0) : (Q("validating"), q(ae).then(() => (he == null || he(!0), !0)).catch(($e) => {
        const { fields: lt } = $e;
        return he == null || he(!1, lt), Ne ? !1 : Promise.reject(lt);
      }));
    }, H = () => {
      Q(""), f.value = "", g = !1;
    }, G = async () => {
      const K = s == null ? void 0 : s.model;
      if (!K || !t.prop)
        return;
      const he = nd(K, t.prop);
      g = !0, he.value = zu(p), await Qe(), H(), g = !1;
    }, U = (K) => {
      c.value.includes(K) || c.value.push(K);
    }, le = (K) => {
      c.value = c.value.filter((he) => he !== K);
    };
    ee(() => t.error, (K) => {
      f.value = K || "", Q(K ? "error" : "");
    }, { immediate: !0 }), ee(() => t.validateStatus, (K) => Q(K || ""));
    const ce = Hn({
      ...zo(t),
      $el: d,
      size: o,
      validateState: u,
      labelId: a,
      inputIds: c,
      isGroup: k,
      hasLabel: S,
      fieldValue: $,
      addInputId: U,
      removeInputId: le,
      resetField: G,
      clearValidate: H,
      validate: re
    });
    return ht(Ll, ce), Be(() => {
      t.prop && (s == null || s.addField(ce), p = zu($.value));
    }), Zn(() => {
      s == null || s.removeField(ce);
    }), e({
      size: o,
      validateMessage: f,
      validateState: u,
      validate: re,
      clearValidate: H,
      resetField: G
    }), (K, he) => {
      var Ne;
      return R(), F("div", {
        ref_key: "formItemRef",
        ref: d,
        class: B(w(y)),
        role: w(k) ? "group" : void 0,
        "aria-labelledby": w(k) ? w(a) : void 0
      }, [
        ne(w(s6), {
          "is-auto-width": w(m).width === "auto",
          "update-all": ((Ne = w(s)) == null ? void 0 : Ne.labelWidth) === "auto"
        }, {
          default: se(() => [
            w(S) ? (R(), oe(Ot(w(C) ? "label" : "div"), {
              key: 0,
              id: w(a),
              for: w(C),
              class: B(w(l).e("label")),
              style: Ye(w(m))
            }, {
              default: se(() => [
                pe(K.$slots, "label", { label: w(A) }, () => [
                  mi(Re(w(A)), 1)
                ])
              ]),
              _: 3
            }, 8, ["id", "for", "class", "style"])) : te("v-if", !0)
          ]),
          _: 3
        }, 8, ["is-auto-width", "update-all"]),
        W("div", {
          class: B(w(l).e("content")),
          style: Ye(w(b))
        }, [
          pe(K.$slots, "default"),
          ne(iR, {
            name: `${w(l).namespace.value}-zoom-in-top`
          }, {
            default: se(() => [
              w(P) ? pe(K.$slots, "error", {
                key: 0,
                error: f.value
              }, () => [
                W("div", {
                  class: B(w(O))
                }, Re(f.value), 3)
              ]) : te("v-if", !0)
            ]),
            _: 3
          }, 8, ["name"])
        ], 6)
      ], 10, r6);
    };
  }
});
var eP = /* @__PURE__ */ Ce(l6, [["__file", "form-item.vue"]]);
const DZe = Bt(t6, {
  FormItem: eP
}), LZe = Ds(eP);
let ds;
const a6 = `
  height:0 !important;
  visibility:hidden !important;
  ${IB() ? "" : "overflow:hidden !important;"}
  position:absolute !important;
  z-index:-1000 !important;
  top:0 !important;
  right:0 !important;
`, c6 = [
  "letter-spacing",
  "line-height",
  "padding-top",
  "padding-bottom",
  "font-family",
  "font-weight",
  "font-size",
  "text-rendering",
  "text-transform",
  "width",
  "text-indent",
  "padding-left",
  "padding-right",
  "border-width",
  "box-sizing"
];
function u6(n) {
  const e = window.getComputedStyle(n), t = e.getPropertyValue("box-sizing"), i = Number.parseFloat(e.getPropertyValue("padding-bottom")) + Number.parseFloat(e.getPropertyValue("padding-top")), s = Number.parseFloat(e.getPropertyValue("border-bottom-width")) + Number.parseFloat(e.getPropertyValue("border-top-width"));
  return { contextStyle: c6.map((o) => `${o}:${e.getPropertyValue(o)}`).join(";"), paddingSize: i, borderSize: s, boxSizing: t };
}
function I1(n, e = 1, t) {
  var i;
  ds || (ds = document.createElement("textarea"), document.body.appendChild(ds));
  const { paddingSize: s, borderSize: r, boxSizing: o, contextStyle: l } = u6(n);
  ds.setAttribute("style", `${l};${a6}`), ds.value = n.value || n.placeholder || "";
  let a = ds.scrollHeight;
  const c = {};
  o === "border-box" ? a = a + r : o === "content-box" && (a = a - s), ds.value = "";
  const u = ds.scrollHeight - s;
  if (ze(e)) {
    let h = u * e;
    o === "border-box" && (h = h + s + r), a = Math.max(h, a), c.minHeight = `${h}px`;
  }
  if (ze(t)) {
    let h = u * t;
    o === "border-box" && (h = h + s + r), a = Math.min(h, a);
  }
  return c.height = `${a}px`, (i = ds.parentNode) == null || i.removeChild(ds), ds = void 0, c;
}
const h6 = Ae({
  id: {
    type: String,
    default: void 0
  },
  size: Ns,
  disabled: Boolean,
  modelValue: {
    type: be([
      String,
      Number,
      Object
    ]),
    default: ""
  },
  maxlength: {
    type: [String, Number]
  },
  minlength: {
    type: [String, Number]
  },
  type: {
    type: String,
    default: "text"
  },
  resize: {
    type: String,
    values: ["none", "both", "horizontal", "vertical"]
  },
  autosize: {
    type: be([Boolean, Object]),
    default: !1
  },
  autocomplete: {
    type: String,
    default: "off"
  },
  formatter: {
    type: Function
  },
  parser: {
    type: Function
  },
  placeholder: {
    type: String
  },
  form: {
    type: String
  },
  readonly: {
    type: Boolean,
    default: !1
  },
  clearable: {
    type: Boolean,
    default: !1
  },
  showPassword: {
    type: Boolean,
    default: !1
  },
  showWordLimit: {
    type: Boolean,
    default: !1
  },
  suffixIcon: {
    type: xn
  },
  prefixIcon: {
    type: xn
  },
  containerRole: {
    type: String,
    default: void 0
  },
  label: {
    type: String,
    default: void 0
  },
  tabindex: {
    type: [String, Number],
    default: 0
  },
  validateEvent: {
    type: Boolean,
    default: !0
  },
  inputStyle: {
    type: be([Object, Array, String]),
    default: () => Gl({})
  },
  autofocus: {
    type: Boolean,
    default: !1
  }
}), f6 = {
  [et]: (n) => pt(n),
  input: (n) => pt(n),
  change: (n) => pt(n),
  focus: (n) => n instanceof FocusEvent,
  blur: (n) => n instanceof FocusEvent,
  clear: () => !0,
  mouseleave: (n) => n instanceof MouseEvent,
  mouseenter: (n) => n instanceof MouseEvent,
  keydown: (n) => n instanceof Event,
  compositionstart: (n) => n instanceof CompositionEvent,
  compositionupdate: (n) => n instanceof CompositionEvent,
  compositionend: (n) => n instanceof CompositionEvent
}, d6 = ["role"], p6 = ["id", "minlength", "maxlength", "type", "disabled", "readonly", "autocomplete", "tabindex", "aria-label", "placeholder", "form", "autofocus"], g6 = ["id", "minlength", "maxlength", "tabindex", "disabled", "readonly", "autocomplete", "aria-label", "placeholder", "form", "autofocus"], m6 = Z({
  name: "ElInput",
  inheritAttrs: !1
}), b6 = /* @__PURE__ */ Z({
  ...m6,
  props: h6,
  emits: f6,
  setup(n, { expose: e, emit: t }) {
    const i = n, s = sR(), r = Zo(), o = _(() => {
      const ie = {};
      return i.containerRole === "combobox" && (ie["aria-haspopup"] = s["aria-haspopup"], ie["aria-owns"] = s["aria-owns"], ie["aria-expanded"] = s["aria-expanded"]), ie;
    }), l = _(() => [
      i.type === "textarea" ? m.b() : g.b(),
      g.m(d.value),
      g.is("disabled", p.value),
      g.is("exceed", U.value),
      {
        [g.b("group")]: r.prepend || r.append,
        [g.bm("group", "append")]: r.append,
        [g.bm("group", "prepend")]: r.prepend,
        [g.m("prefix")]: r.prefix || i.prefixIcon,
        [g.m("suffix")]: r.suffix || i.suffixIcon || i.clearable || i.showPassword,
        [g.bm("suffix", "password-clear")]: q.value && re.value
      },
      s.class
    ]), a = _(() => [
      g.e("wrapper"),
      g.is("focus", $.value)
    ]), c = sj({
      excludeKeys: _(() => Object.keys(o.value))
    }), { form: u, formItem: h } = vr(), { inputId: f } = Ul(i, {
      formItemContext: h
    }), d = Bi(), p = qo(), g = ve("input"), m = ve("textarea"), b = gi(), y = gi(), v = L(!1), O = L(!1), x = L(!1), S = L(), C = gi(i.inputStyle), k = _(() => b.value || y.value), { wrapperRef: E, isFocused: $, handleFocus: T, handleBlur: M } = Dv(k, {
      afterBlur() {
        var ie;
        i.validateEvent && ((ie = h == null ? void 0 : h.validate) == null || ie.call(h, "blur").catch((Ze) => rt(Ze)));
      }
    }), j = _(() => {
      var ie;
      return (ie = u == null ? void 0 : u.statusIcon) != null ? ie : !1;
    }), D = _(() => (h == null ? void 0 : h.validateState) || ""), P = _(() => D.value && x2[D.value]), A = _(() => x.value ? x4 : o4), Q = _(() => [
      s.style
    ]), X = _(() => [
      i.inputStyle,
      C.value,
      { resize: i.resize }
    ]), z = _(() => Ii(i.modelValue) ? "" : String(i.modelValue)), q = _(() => i.clearable && !p.value && !i.readonly && !!z.value && ($.value || v.value)), re = _(() => i.showPassword && !p.value && !i.readonly && !!z.value && (!!z.value || $.value)), H = _(() => i.showWordLimit && !!i.maxlength && (i.type === "text" || i.type === "textarea") && !p.value && !i.readonly && !i.showPassword), G = _(() => z.value.length), U = _(() => !!H.value && G.value > Number(i.maxlength)), le = _(() => !!r.suffix || !!i.suffixIcon || q.value || i.showPassword || H.value || !!D.value && j.value), [ce, K] = Qz(b);
    Jn(y, (ie) => {
      if (ae(), !H.value || i.resize !== "both")
        return;
      const Ze = ie[0], { width: Dt } = Ze.contentRect;
      S.value = {
        right: `calc(100% - ${Dt + 15 + 6}px)`
      };
    });
    const he = () => {
      const { type: ie, autosize: Ze } = i;
      if (!(!ot || ie !== "textarea" || !y.value))
        if (Ze) {
          const Dt = Qn(Ze) ? Ze.minRows : void 0, hs = Qn(Ze) ? Ze.maxRows : void 0, ea = I1(y.value, Dt, hs);
          C.value = {
            overflowY: "hidden",
            ...ea
          }, Qe(() => {
            y.value.offsetHeight, C.value = ea;
          });
        } else
          C.value = {
            minHeight: I1(y.value).minHeight
          };
    }, ae = ((ie) => {
      let Ze = !1;
      return () => {
        var Dt;
        if (Ze || !i.autosize)
          return;
        ((Dt = y.value) == null ? void 0 : Dt.offsetParent) === null || (ie(), Ze = !0);
      };
    })(he), $e = () => {
      const ie = k.value, Ze = i.formatter ? i.formatter(z.value) : z.value;
      !ie || ie.value === Ze || (ie.value = Ze);
    }, lt = async (ie) => {
      ce();
      let { value: Ze } = ie.target;
      if (i.formatter && (Ze = i.parser ? i.parser(Ze) : Ze), !O.value) {
        if (Ze === z.value) {
          $e();
          return;
        }
        t(et, Ze), t("input", Ze), await Qe(), $e(), K();
      }
    }, En = (ie) => {
      t("change", ie.target.value);
    }, ii = (ie) => {
      t("compositionstart", ie), O.value = !0;
    }, Si = (ie) => {
      var Ze;
      t("compositionupdate", ie);
      const Dt = (Ze = ie.target) == null ? void 0 : Ze.value, hs = Dt[Dt.length - 1] || "";
      O.value = !k2(hs);
    }, ls = (ie) => {
      t("compositionend", ie), O.value && (O.value = !1, lt(ie));
    }, as = () => {
      x.value = !x.value, cs();
    }, cs = async () => {
      var ie;
      await Qe(), (ie = k.value) == null || ie.focus();
    }, Cr = () => {
      var ie;
      return (ie = k.value) == null ? void 0 : ie.blur();
    }, si = (ie) => {
      v.value = !1, t("mouseleave", ie);
    }, us = (ie) => {
      v.value = !0, t("mouseenter", ie);
    }, js = (ie) => {
      t("keydown", ie);
    }, kr = () => {
      var ie;
      (ie = k.value) == null || ie.select();
    }, ri = () => {
      t(et, ""), t("change", ""), t("clear"), t("input", "");
    };
    return ee(() => i.modelValue, () => {
      var ie;
      Qe(() => he()), i.validateEvent && ((ie = h == null ? void 0 : h.validate) == null || ie.call(h, "change").catch((Ze) => rt(Ze)));
    }), ee(z, () => $e()), ee(() => i.type, async () => {
      await Qe(), $e(), he();
    }), Be(() => {
      !i.formatter && i.parser && rt("ElInput", "If you set the parser, you also need to set the formatter."), $e(), Qe(he);
    }), e({
      input: b,
      textarea: y,
      ref: k,
      textareaStyle: X,
      autosize: Yi(i, "autosize"),
      focus: cs,
      blur: Cr,
      select: kr,
      clear: ri,
      resizeTextarea: he
    }), (ie, Ze) => tt((R(), F("div", Gi(w(o), {
      class: w(l),
      style: w(Q),
      role: ie.containerRole,
      onMouseenter: us,
      onMouseleave: si
    }), [
      te(" input "),
      ie.type !== "textarea" ? (R(), F(sn, { key: 0 }, [
        te(" prepend slot "),
        ie.$slots.prepend ? (R(), F("div", {
          key: 0,
          class: B(w(g).be("group", "prepend"))
        }, [
          pe(ie.$slots, "prepend")
        ], 2)) : te("v-if", !0),
        W("div", {
          ref_key: "wrapperRef",
          ref: E,
          class: B(w(a))
        }, [
          te(" prefix slot "),
          ie.$slots.prefix || ie.prefixIcon ? (R(), F("span", {
            key: 0,
            class: B(w(g).e("prefix"))
          }, [
            W("span", {
              class: B(w(g).e("prefix-inner"))
            }, [
              pe(ie.$slots, "prefix"),
              ie.prefixIcon ? (R(), oe(w(Ue), {
                key: 0,
                class: B(w(g).e("icon"))
              }, {
                default: se(() => [
                  (R(), oe(Ot(ie.prefixIcon)))
                ]),
                _: 1
              }, 8, ["class"])) : te("v-if", !0)
            ], 2)
          ], 2)) : te("v-if", !0),
          W("input", Gi({
            id: w(f),
            ref_key: "input",
            ref: b,
            class: w(g).e("inner")
          }, w(c), {
            minlength: ie.minlength,
            maxlength: ie.maxlength,
            type: ie.showPassword ? x.value ? "text" : "password" : ie.type,
            disabled: w(p),
            readonly: ie.readonly,
            autocomplete: ie.autocomplete,
            tabindex: ie.tabindex,
            "aria-label": ie.label,
            placeholder: ie.placeholder,
            style: ie.inputStyle,
            form: ie.form,
            autofocus: ie.autofocus,
            onCompositionstart: ii,
            onCompositionupdate: Si,
            onCompositionend: ls,
            onInput: lt,
            onFocus: Ze[0] || (Ze[0] = (...Dt) => w(T) && w(T)(...Dt)),
            onBlur: Ze[1] || (Ze[1] = (...Dt) => w(M) && w(M)(...Dt)),
            onChange: En,
            onKeydown: js
          }), null, 16, p6),
          te(" suffix slot "),
          w(le) ? (R(), F("span", {
            key: 1,
            class: B(w(g).e("suffix"))
          }, [
            W("span", {
              class: B(w(g).e("suffix-inner"))
            }, [
              !w(q) || !w(re) || !w(H) ? (R(), F(sn, { key: 0 }, [
                pe(ie.$slots, "suffix"),
                ie.suffixIcon ? (R(), oe(w(Ue), {
                  key: 0,
                  class: B(w(g).e("icon"))
                }, {
                  default: se(() => [
                    (R(), oe(Ot(ie.suffixIcon)))
                  ]),
                  _: 1
                }, 8, ["class"])) : te("v-if", !0)
              ], 64)) : te("v-if", !0),
              w(q) ? (R(), oe(w(Ue), {
                key: 1,
                class: B([w(g).e("icon"), w(g).e("clear")]),
                onMousedown: ft(w(Lr), ["prevent"]),
                onClick: ri
              }, {
                default: se(() => [
                  ne(w(Ov))
                ]),
                _: 1
              }, 8, ["class", "onMousedown"])) : te("v-if", !0),
              w(re) ? (R(), oe(w(Ue), {
                key: 2,
                class: B([w(g).e("icon"), w(g).e("password")]),
                onClick: as
              }, {
                default: se(() => [
                  (R(), oe(Ot(w(A))))
                ]),
                _: 1
              }, 8, ["class"])) : te("v-if", !0),
              w(H) ? (R(), F("span", {
                key: 3,
                class: B(w(g).e("count"))
              }, [
                W("span", {
                  class: B(w(g).e("count-inner"))
                }, Re(w(G)) + " / " + Re(ie.maxlength), 3)
              ], 2)) : te("v-if", !0),
              w(D) && w(P) && w(j) ? (R(), oe(w(Ue), {
                key: 4,
                class: B([
                  w(g).e("icon"),
                  w(g).e("validateIcon"),
                  w(g).is("loading", w(D) === "validating")
                ])
              }, {
                default: se(() => [
                  (R(), oe(Ot(w(P))))
                ]),
                _: 1
              }, 8, ["class"])) : te("v-if", !0)
            ], 2)
          ], 2)) : te("v-if", !0)
        ], 2),
        te(" append slot "),
        ie.$slots.append ? (R(), F("div", {
          key: 1,
          class: B(w(g).be("group", "append"))
        }, [
          pe(ie.$slots, "append")
        ], 2)) : te("v-if", !0)
      ], 64)) : (R(), F(sn, { key: 1 }, [
        te(" textarea "),
        W("textarea", Gi({
          id: w(f),
          ref_key: "textarea",
          ref: y,
          class: w(m).e("inner")
        }, w(c), {
          minlength: ie.minlength,
          maxlength: ie.maxlength,
          tabindex: ie.tabindex,
          disabled: w(p),
          readonly: ie.readonly,
          autocomplete: ie.autocomplete,
          style: w(X),
          "aria-label": ie.label,
          placeholder: ie.placeholder,
          form: ie.form,
          autofocus: ie.autofocus,
          onCompositionstart: ii,
          onCompositionupdate: Si,
          onCompositionend: ls,
          onInput: lt,
          onFocus: Ze[2] || (Ze[2] = (...Dt) => w(T) && w(T)(...Dt)),
          onBlur: Ze[3] || (Ze[3] = (...Dt) => w(M) && w(M)(...Dt)),
          onChange: En,
          onKeydown: js
        }), null, 16, g6),
        w(H) ? (R(), F("span", {
          key: 0,
          style: Ye(S.value),
          class: B(w(g).e("count"))
        }, Re(w(G)) + " / " + Re(ie.maxlength), 7)) : te("v-if", !0)
      ], 64))
    ], 16, d6)), [
      [Ht, ie.type !== "hidden"]
    ]);
  }
});
var v6 = /* @__PURE__ */ Ce(b6, [["__file", "input.vue"]]);
const Vh = Bt(v6), ra = 4, y6 = {
  vertical: {
    offset: "offsetHeight",
    scroll: "scrollTop",
    scrollSize: "scrollHeight",
    size: "height",
    key: "vertical",
    axis: "Y",
    client: "clientY",
    direction: "top"
  },
  horizontal: {
    offset: "offsetWidth",
    scroll: "scrollLeft",
    scrollSize: "scrollWidth",
    size: "width",
    key: "horizontal",
    axis: "X",
    client: "clientX",
    direction: "left"
  }
}, O6 = ({
  move: n,
  size: e,
  bar: t
}) => ({
  [t.size]: e,
  transform: `translate${t.axis}(${n}%)`
}), Nv = Symbol("scrollbarContextKey"), w6 = Ae({
  vertical: Boolean,
  size: String,
  move: Number,
  ratio: {
    type: Number,
    required: !0
  },
  always: Boolean
}), x6 = "Thumb", S6 = /* @__PURE__ */ Z({
  __name: "thumb",
  props: w6,
  setup(n) {
    const e = n, t = ye(Nv), i = ve("scrollbar");
    t || Yr(x6, "can not inject scrollbar context");
    const s = L(), r = L(), o = L({}), l = L(!1);
    let a = !1, c = !1, u = ot ? document.onselectstart : null;
    const h = _(() => y6[e.vertical ? "vertical" : "horizontal"]), f = _(() => O6({
      size: e.size,
      move: e.move,
      bar: h.value
    })), d = _(() => s.value[h.value.offset] ** 2 / t.wrapElement[h.value.scrollSize] / e.ratio / r.value[h.value.offset]), p = (S) => {
      var C;
      if (S.stopPropagation(), S.ctrlKey || [1, 2].includes(S.button))
        return;
      (C = window.getSelection()) == null || C.removeAllRanges(), m(S);
      const k = S.currentTarget;
      k && (o.value[h.value.axis] = k[h.value.offset] - (S[h.value.client] - k.getBoundingClientRect()[h.value.direction]));
    }, g = (S) => {
      if (!r.value || !s.value || !t.wrapElement)
        return;
      const C = Math.abs(S.target.getBoundingClientRect()[h.value.direction] - S[h.value.client]), k = r.value[h.value.offset] / 2, E = (C - k) * 100 * d.value / s.value[h.value.offset];
      t.wrapElement[h.value.scroll] = E * t.wrapElement[h.value.scrollSize] / 100;
    }, m = (S) => {
      S.stopImmediatePropagation(), a = !0, document.addEventListener("mousemove", b), document.addEventListener("mouseup", y), u = document.onselectstart, document.onselectstart = () => !1;
    }, b = (S) => {
      if (!s.value || !r.value || a === !1)
        return;
      const C = o.value[h.value.axis];
      if (!C)
        return;
      const k = (s.value.getBoundingClientRect()[h.value.direction] - S[h.value.client]) * -1, E = r.value[h.value.offset] - C, $ = (k - E) * 100 * d.value / s.value[h.value.offset];
      t.wrapElement[h.value.scroll] = $ * t.wrapElement[h.value.scrollSize] / 100;
    }, y = () => {
      a = !1, o.value[h.value.axis] = 0, document.removeEventListener("mousemove", b), document.removeEventListener("mouseup", y), x(), c && (l.value = !1);
    }, v = () => {
      c = !1, l.value = !!e.size;
    }, O = () => {
      c = !0, l.value = a;
    };
    Zn(() => {
      x(), document.removeEventListener("mouseup", y);
    });
    const x = () => {
      document.onselectstart !== u && (document.onselectstart = u);
    };
    return bi(Yi(t, "scrollbarElement"), "mousemove", v), bi(Yi(t, "scrollbarElement"), "mouseleave", O), (S, C) => (R(), oe(br, {
      name: w(i).b("fade"),
      persisted: ""
    }, {
      default: se(() => [
        tt(W("div", {
          ref_key: "instance",
          ref: s,
          class: B([w(i).e("bar"), w(i).is(w(h).key)]),
          onMousedown: g
        }, [
          W("div", {
            ref_key: "thumb",
            ref: r,
            class: B(w(i).e("thumb")),
            style: Ye(w(f)),
            onMousedown: p
          }, null, 38)
        ], 34), [
          [Ht, S.always || l.value]
        ])
      ]),
      _: 1
    }, 8, ["name"]));
  }
});
var Q1 = /* @__PURE__ */ Ce(S6, [["__file", "thumb.vue"]]);
const C6 = Ae({
  always: {
    type: Boolean,
    default: !0
  },
  minSize: {
    type: Number,
    required: !0
  }
}), k6 = /* @__PURE__ */ Z({
  __name: "bar",
  props: C6,
  setup(n, { expose: e }) {
    const t = n, i = ye(Nv), s = L(0), r = L(0), o = L(""), l = L(""), a = L(1), c = L(1);
    return e({
      handleScroll: (f) => {
        if (f) {
          const d = f.offsetHeight - ra, p = f.offsetWidth - ra;
          r.value = f.scrollTop * 100 / d * a.value, s.value = f.scrollLeft * 100 / p * c.value;
        }
      },
      update: () => {
        const f = i == null ? void 0 : i.wrapElement;
        if (!f)
          return;
        const d = f.offsetHeight - ra, p = f.offsetWidth - ra, g = d ** 2 / f.scrollHeight, m = p ** 2 / f.scrollWidth, b = Math.max(g, t.minSize), y = Math.max(m, t.minSize);
        a.value = g / (d - g) / (b / (d - b)), c.value = m / (p - m) / (y / (p - y)), l.value = b + ra < d ? `${b}px` : "", o.value = y + ra < p ? `${y}px` : "";
      }
    }), (f, d) => (R(), F(sn, null, [
      ne(Q1, {
        move: s.value,
        ratio: c.value,
        size: o.value,
        always: f.always
      }, null, 8, ["move", "ratio", "size", "always"]),
      ne(Q1, {
        move: r.value,
        ratio: a.value,
        size: l.value,
        vertical: "",
        always: f.always
      }, null, 8, ["move", "ratio", "size", "always"])
    ], 64));
  }
});
var P6 = /* @__PURE__ */ Ce(k6, [["__file", "bar.vue"]]);
const A6 = Ae({
  height: {
    type: [String, Number],
    default: ""
  },
  maxHeight: {
    type: [String, Number],
    default: ""
  },
  native: {
    type: Boolean,
    default: !1
  },
  wrapStyle: {
    type: be([String, Object, Array]),
    default: ""
  },
  wrapClass: {
    type: [String, Array],
    default: ""
  },
  viewClass: {
    type: [String, Array],
    default: ""
  },
  viewStyle: {
    type: [String, Array, Object],
    default: ""
  },
  noresize: Boolean,
  tag: {
    type: String,
    default: "div"
  },
  always: Boolean,
  minSize: {
    type: Number,
    default: 20
  },
  id: String,
  role: String,
  ariaLabel: String,
  ariaOrientation: {
    type: String,
    values: ["horizontal", "vertical"]
  }
}), E6 = {
  scroll: ({
    scrollTop: n,
    scrollLeft: e
  }) => [n, e].every(ze)
}, v0 = "ElScrollbar", $6 = Z({
  name: v0
}), T6 = /* @__PURE__ */ Z({
  ...$6,
  props: A6,
  emits: E6,
  setup(n, { expose: e, emit: t }) {
    const i = n, s = ve("scrollbar");
    let r, o;
    const l = L(), a = L(), c = L(), u = L(), h = _(() => {
      const v = {};
      return i.height && (v.height = Qi(i.height)), i.maxHeight && (v.maxHeight = Qi(i.maxHeight)), [i.wrapStyle, v];
    }), f = _(() => [
      i.wrapClass,
      s.e("wrap"),
      { [s.em("wrap", "hidden-default")]: !i.native }
    ]), d = _(() => [s.e("view"), i.viewClass]), p = () => {
      var v;
      a.value && ((v = u.value) == null || v.handleScroll(a.value), t("scroll", {
        scrollTop: a.value.scrollTop,
        scrollLeft: a.value.scrollLeft
      }));
    };
    function g(v, O) {
      Qn(v) ? a.value.scrollTo(v) : ze(v) && ze(O) && a.value.scrollTo(v, O);
    }
    const m = (v) => {
      if (!ze(v)) {
        rt(v0, "value must be a number");
        return;
      }
      a.value.scrollTop = v;
    }, b = (v) => {
      if (!ze(v)) {
        rt(v0, "value must be a number");
        return;
      }
      a.value.scrollLeft = v;
    }, y = () => {
      var v;
      (v = u.value) == null || v.update();
    };
    return ee(() => i.noresize, (v) => {
      v ? (r == null || r(), o == null || o()) : ({ stop: r } = Jn(c, y), o = bi("resize", y));
    }, { immediate: !0 }), ee(() => [i.maxHeight, i.height], () => {
      i.native || Qe(() => {
        var v;
        y(), a.value && ((v = u.value) == null || v.handleScroll(a.value));
      });
    }), ht(Nv, Hn({
      scrollbarElement: l,
      wrapElement: a
    })), Be(() => {
      i.native || Qe(() => {
        y();
      });
    }), Mh(() => y()), e({
      wrapRef: a,
      update: y,
      scrollTo: g,
      setScrollTop: m,
      setScrollLeft: b,
      handleScroll: p
    }), (v, O) => (R(), F("div", {
      ref_key: "scrollbarRef",
      ref: l,
      class: B(w(s).b())
    }, [
      W("div", {
        ref_key: "wrapRef",
        ref: a,
        class: B(w(f)),
        style: Ye(w(h)),
        onScroll: p
      }, [
        (R(), oe(Ot(v.tag), {
          id: v.id,
          ref_key: "resizeRef",
          ref: c,
          class: B(w(d)),
          style: Ye(v.viewStyle),
          role: v.role,
          "aria-label": v.ariaLabel,
          "aria-orientation": v.ariaOrientation
        }, {
          default: se(() => [
            pe(v.$slots, "default")
          ]),
          _: 3
        }, 8, ["id", "class", "style", "role", "aria-label", "aria-orientation"]))
      ], 38),
      v.native ? te("v-if", !0) : (R(), oe(P6, {
        key: 0,
        ref_key: "barRef",
        ref: u,
        always: v.always,
        "min-size": v.minSize
      }, null, 8, ["always", "min-size"]))
    ], 2));
  }
});
var _6 = /* @__PURE__ */ Ce(T6, [["__file", "scrollbar.vue"]]);
const Iv = Bt(_6), Qv = Symbol("popper"), tP = Symbol("popperContent"), M6 = [
  "dialog",
  "grid",
  "group",
  "listbox",
  "menu",
  "navigation",
  "tooltip",
  "tree"
], nP = Ae({
  role: {
    type: String,
    values: M6,
    default: "tooltip"
  }
}), R6 = Z({
  name: "ElPopper",
  inheritAttrs: !1
}), D6 = /* @__PURE__ */ Z({
  ...R6,
  props: nP,
  setup(n, { expose: e }) {
    const t = n, i = L(), s = L(), r = L(), o = L(), l = _(() => t.role), a = {
      triggerRef: i,
      popperInstanceRef: s,
      contentRef: r,
      referenceRef: o,
      role: l
    };
    return e(a), ht(Qv, a), (c, u) => pe(c.$slots, "default");
  }
});
var L6 = /* @__PURE__ */ Ce(D6, [["__file", "popper.vue"]]);
const iP = Ae({
  arrowOffset: {
    type: Number,
    default: 5
  }
}), N6 = Z({
  name: "ElPopperArrow",
  inheritAttrs: !1
}), I6 = /* @__PURE__ */ Z({
  ...N6,
  props: iP,
  setup(n, { expose: e }) {
    const t = n, i = ve("popper"), { arrowOffset: s, arrowRef: r, arrowStyle: o } = ye(tP, void 0);
    return ee(() => t.arrowOffset, (l) => {
      s.value = l;
    }), Zn(() => {
      r.value = void 0;
    }), e({
      arrowRef: r
    }), (l, a) => (R(), F("span", {
      ref_key: "arrowRef",
      ref: r,
      class: B(w(i).e("arrow")),
      style: Ye(w(o)),
      "data-popper-arrow": ""
    }, null, 6));
  }
});
var Q6 = /* @__PURE__ */ Ce(I6, [["__file", "arrow.vue"]]);
const Xg = "ElOnlyChild", B6 = Z({
  name: Xg,
  setup(n, {
    slots: e,
    attrs: t
  }) {
    var i;
    const s = ye(Y2), r = Iz((i = s == null ? void 0 : s.setForwardRef) != null ? i : Lr);
    return () => {
      var o;
      const l = (o = e.default) == null ? void 0 : o.call(e, t);
      if (!l)
        return null;
      if (l.length > 1)
        return rt(Xg, "requires exact only one valid child."), null;
      const a = sP(l);
      return a ? tt(rR(a, t), [[r]]) : (rt(Xg, "no valid child node found"), null);
    };
  }
});
function sP(n) {
  if (!n)
    return null;
  const e = n;
  for (const t of e) {
    if (Qn(t))
      switch (t.type) {
        case zC:
          continue;
        case jC:
        case "svg":
          return B1(t);
        case sn:
          return sP(t.children);
        default:
          return t;
      }
    return B1(t);
  }
  return null;
}
function B1(n) {
  const e = ve("only-child");
  return ne("span", {
    class: e.e("content")
  }, [n]);
}
const rP = Ae({
  virtualRef: {
    type: be(Object)
  },
  virtualTriggering: Boolean,
  onMouseenter: {
    type: be(Function)
  },
  onMouseleave: {
    type: be(Function)
  },
  onClick: {
    type: be(Function)
  },
  onKeydown: {
    type: be(Function)
  },
  onFocus: {
    type: be(Function)
  },
  onBlur: {
    type: be(Function)
  },
  onContextmenu: {
    type: be(Function)
  },
  id: String,
  open: Boolean
}), j6 = Z({
  name: "ElPopperTrigger",
  inheritAttrs: !1
}), z6 = /* @__PURE__ */ Z({
  ...j6,
  props: rP,
  setup(n, { expose: e }) {
    const t = n, { role: i, triggerRef: s } = ye(Qv, void 0);
    Nz(s);
    const r = _(() => l.value ? t.id : void 0), o = _(() => {
      if (i && i.value === "tooltip")
        return t.open && t.id ? t.id : void 0;
    }), l = _(() => {
      if (i && i.value !== "tooltip")
        return i.value;
    }), a = _(() => l.value ? `${t.open}` : void 0);
    let c;
    return Be(() => {
      ee(() => t.virtualRef, (u) => {
        u && (s.value = Rr(u));
      }, {
        immediate: !0
      }), ee(s, (u, h) => {
        c == null || c(), c = void 0, As(u) && ([
          "onMouseenter",
          "onMouseleave",
          "onClick",
          "onKeydown",
          "onFocus",
          "onBlur",
          "onContextmenu"
        ].forEach((f) => {
          var d;
          const p = t[f];
          p && (u.addEventListener(f.slice(2).toLowerCase(), p), (d = h == null ? void 0 : h.removeEventListener) == null || d.call(h, f.slice(2).toLowerCase(), p));
        }), c = ee([r, o, l, a], (f) => {
          [
            "aria-controls",
            "aria-describedby",
            "aria-haspopup",
            "aria-expanded"
          ].forEach((d, p) => {
            Ii(f[p]) ? u.removeAttribute(d) : u.setAttribute(d, f[p]);
          });
        }, { immediate: !0 })), As(h) && [
          "aria-controls",
          "aria-describedby",
          "aria-haspopup",
          "aria-expanded"
        ].forEach((f) => h.removeAttribute(f));
      }, {
        immediate: !0
      });
    }), Zn(() => {
      c == null || c(), c = void 0;
    }), e({
      triggerRef: s
    }), (u, h) => u.virtualTriggering ? te("v-if", !0) : (R(), oe(w(B6), Gi({ key: 0 }, u.$attrs, {
      "aria-controls": w(r),
      "aria-describedby": w(o),
      "aria-expanded": w(a),
      "aria-haspopup": w(l)
    }), {
      default: se(() => [
        pe(u.$slots, "default")
      ]),
      _: 3
    }, 16, ["aria-controls", "aria-describedby", "aria-expanded", "aria-haspopup"]));
  }
});
var Z6 = /* @__PURE__ */ Ce(z6, [["__file", "trigger.vue"]]);
const Yg = "focus-trap.focus-after-trapped", Hg = "focus-trap.focus-after-released", F6 = "focus-trap.focusout-prevented", j1 = {
  cancelable: !0,
  bubbles: !1
}, V6 = {
  cancelable: !0,
  bubbles: !1
}, z1 = "focusAfterTrapped", Z1 = "focusAfterReleased", oP = Symbol("elFocusTrap"), Bv = L(), Yp = L(0), jv = L(0);
let pf = 0;
const lP = (n) => {
  const e = [], t = document.createTreeWalker(n, NodeFilter.SHOW_ELEMENT, {
    acceptNode: (i) => {
      const s = i.tagName === "INPUT" && i.type === "hidden";
      return i.disabled || i.hidden || s ? NodeFilter.FILTER_SKIP : i.tabIndex >= 0 || i === document.activeElement ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
    }
  });
  for (; t.nextNode(); )
    e.push(t.currentNode);
  return e;
}, F1 = (n, e) => {
  for (const t of n)
    if (!q6(t, e))
      return t;
}, q6 = (n, e) => {
  if (process.env.NODE_ENV === "test")
    return !1;
  if (getComputedStyle(n).visibility === "hidden")
    return !0;
  for (; n; ) {
    if (e && n === e)
      return !1;
    if (getComputedStyle(n).display === "none")
      return !0;
    n = n.parentElement;
  }
  return !1;
}, W6 = (n) => {
  const e = lP(n), t = F1(e, n), i = F1(e.reverse(), n);
  return [t, i];
}, X6 = (n) => n instanceof HTMLInputElement && "select" in n, to = (n, e) => {
  if (n && n.focus) {
    const t = document.activeElement;
    n.focus({ preventScroll: !0 }), jv.value = window.performance.now(), n !== t && X6(n) && e && n.select();
  }
};
function V1(n, e) {
  const t = [...n], i = n.indexOf(e);
  return i !== -1 && t.splice(i, 1), t;
}
const Y6 = () => {
  let n = [];
  return {
    push: (i) => {
      const s = n[0];
      s && i !== s && s.pause(), n = V1(n, i), n.unshift(i);
    },
    remove: (i) => {
      var s, r;
      n = V1(n, i), (r = (s = n[0]) == null ? void 0 : s.resume) == null || r.call(s);
    }
  };
}, H6 = (n, e = !1) => {
  const t = document.activeElement;
  for (const i of n)
    if (to(i, e), document.activeElement !== t)
      return;
}, q1 = Y6(), G6 = () => Yp.value > jv.value, gf = () => {
  Bv.value = "pointer", Yp.value = window.performance.now();
}, W1 = () => {
  Bv.value = "keyboard", Yp.value = window.performance.now();
}, U6 = () => (Be(() => {
  pf === 0 && (document.addEventListener("mousedown", gf), document.addEventListener("touchstart", gf), document.addEventListener("keydown", W1)), pf++;
}), Zn(() => {
  pf--, pf <= 0 && (document.removeEventListener("mousedown", gf), document.removeEventListener("touchstart", gf), document.removeEventListener("keydown", W1));
}), {
  focusReason: Bv,
  lastUserFocusTimestamp: Yp,
  lastAutomatedFocusTimestamp: jv
}), mf = (n) => new CustomEvent(F6, {
  ...V6,
  detail: n
}), K6 = Z({
  name: "ElFocusTrap",
  inheritAttrs: !1,
  props: {
    loop: Boolean,
    trapped: Boolean,
    focusTrapEl: Object,
    focusStartEl: {
      type: [Object, String],
      default: "first"
    }
  },
  emits: [
    z1,
    Z1,
    "focusin",
    "focusout",
    "focusout-prevented",
    "release-requested"
  ],
  setup(n, { emit: e }) {
    const t = L();
    let i, s;
    const { focusReason: r } = U6();
    _z((p) => {
      n.trapped && !o.paused && e("release-requested", p);
    });
    const o = {
      paused: !1,
      pause() {
        this.paused = !0;
      },
      resume() {
        this.paused = !1;
      }
    }, l = (p) => {
      if (!n.loop && !n.trapped || o.paused)
        return;
      const { key: g, altKey: m, ctrlKey: b, metaKey: y, currentTarget: v, shiftKey: O } = p, { loop: x } = n, S = g === jn.tab && !m && !b && !y, C = document.activeElement;
      if (S && C) {
        const k = v, [E, $] = W6(k);
        if (E && $) {
          if (!O && C === $) {
            const M = mf({
              focusReason: r.value
            });
            e("focusout-prevented", M), M.defaultPrevented || (p.preventDefault(), x && to(E, !0));
          } else if (O && [E, k].includes(C)) {
            const M = mf({
              focusReason: r.value
            });
            e("focusout-prevented", M), M.defaultPrevented || (p.preventDefault(), x && to($, !0));
          }
        } else if (C === k) {
          const M = mf({
            focusReason: r.value
          });
          e("focusout-prevented", M), M.defaultPrevented || p.preventDefault();
        }
      }
    };
    ht(oP, {
      focusTrapRef: t,
      onKeydown: l
    }), ee(() => n.focusTrapEl, (p) => {
      p && (t.value = p);
    }, { immediate: !0 }), ee([t], ([p], [g]) => {
      p && (p.addEventListener("keydown", l), p.addEventListener("focusin", u), p.addEventListener("focusout", h)), g && (g.removeEventListener("keydown", l), g.removeEventListener("focusin", u), g.removeEventListener("focusout", h));
    });
    const a = (p) => {
      e(z1, p);
    }, c = (p) => e(Z1, p), u = (p) => {
      const g = w(t);
      if (!g)
        return;
      const m = p.target, b = p.relatedTarget, y = m && g.contains(m);
      n.trapped || b && g.contains(b) || (i = b), y && e("focusin", p), !o.paused && n.trapped && (y ? s = m : to(s, !0));
    }, h = (p) => {
      const g = w(t);
      if (!(o.paused || !g))
        if (n.trapped) {
          const m = p.relatedTarget;
          !Ii(m) && !g.contains(m) && setTimeout(() => {
            if (!o.paused && n.trapped) {
              const b = mf({
                focusReason: r.value
              });
              e("focusout-prevented", b), b.defaultPrevented || to(s, !0);
            }
          }, 0);
        } else {
          const m = p.target;
          m && g.contains(m) || e("focusout", p);
        }
    };
    async function f() {
      await Qe();
      const p = w(t);
      if (p) {
        q1.push(o);
        const g = p.contains(document.activeElement) ? i : document.activeElement;
        if (i = g, !p.contains(g)) {
          const b = new Event(Yg, j1);
          p.addEventListener(Yg, a), p.dispatchEvent(b), b.defaultPrevented || Qe(() => {
            let y = n.focusStartEl;
            pt(y) || (to(y), document.activeElement !== y && (y = "first")), y === "first" && H6(lP(p), !0), (document.activeElement === g || y === "container") && to(p);
          });
        }
      }
    }
    function d() {
      const p = w(t);
      if (p) {
        p.removeEventListener(Yg, a);
        const g = new CustomEvent(Hg, {
          ...j1,
          detail: {
            focusReason: r.value
          }
        });
        p.addEventListener(Hg, c), p.dispatchEvent(g), !g.defaultPrevented && (r.value == "keyboard" || !G6() || p.contains(document.activeElement)) && to(i ?? document.body), p.removeEventListener(Hg, c), q1.remove(o);
      }
    }
    return Be(() => {
      n.trapped && f(), ee(() => n.trapped, (p) => {
        p ? f() : d();
      });
    }), Zn(() => {
      n.trapped && d();
    }), {
      onKeydown: l
    };
  }
});
function J6(n, e, t, i, s, r) {
  return pe(n.$slots, "default", { handleKeydown: n.onKeydown });
}
var Hp = /* @__PURE__ */ Ce(K6, [["render", J6], ["__file", "focus-trap.vue"]]);
const e8 = ["fixed", "absolute"], t8 = Ae({
  boundariesPadding: {
    type: Number,
    default: 0
  },
  fallbackPlacements: {
    type: be(Array),
    default: void 0
  },
  gpuAcceleration: {
    type: Boolean,
    default: !0
  },
  offset: {
    type: Number,
    default: 12
  },
  placement: {
    type: String,
    values: qp,
    default: "bottom"
  },
  popperOptions: {
    type: be(Object),
    default: () => ({})
  },
  strategy: {
    type: String,
    values: e8,
    default: "absolute"
  }
}), aP = Ae({
  ...t8,
  id: String,
  style: {
    type: be([String, Array, Object])
  },
  className: {
    type: be([String, Array, Object])
  },
  effect: {
    type: String,
    default: "dark"
  },
  visible: Boolean,
  enterable: {
    type: Boolean,
    default: !0
  },
  pure: Boolean,
  focusOnShow: {
    type: Boolean,
    default: !1
  },
  trapping: {
    type: Boolean,
    default: !1
  },
  popperClass: {
    type: be([String, Array, Object])
  },
  popperStyle: {
    type: be([String, Array, Object])
  },
  referenceEl: {
    type: be(Object)
  },
  triggerTargetEl: {
    type: be(Object)
  },
  stopPopperMouseEvent: {
    type: Boolean,
    default: !0
  },
  ariaLabel: {
    type: String,
    default: void 0
  },
  virtualTriggering: Boolean,
  zIndex: Number
}), n8 = {
  mouseenter: (n) => n instanceof MouseEvent,
  mouseleave: (n) => n instanceof MouseEvent,
  focus: () => !0,
  blur: () => !0,
  close: () => !0
}, i8 = (n, e = []) => {
  const { placement: t, strategy: i, popperOptions: s } = n, r = {
    placement: t,
    strategy: i,
    ...s,
    modifiers: [...r8(n), ...e]
  };
  return o8(r, s == null ? void 0 : s.modifiers), r;
}, s8 = (n) => {
  if (ot)
    return Rr(n);
};
function r8(n) {
  const { offset: e, gpuAcceleration: t, fallbackPlacements: i } = n;
  return [
    {
      name: "offset",
      options: {
        offset: [0, e ?? 12]
      }
    },
    {
      name: "preventOverflow",
      options: {
        padding: {
          top: 2,
          bottom: 2,
          left: 5,
          right: 5
        }
      }
    },
    {
      name: "flip",
      options: {
        padding: 5,
        fallbackPlacements: i
      }
    },
    {
      name: "computeStyles",
      options: {
        gpuAcceleration: t
      }
    }
  ];
}
function o8(n, e) {
  e && (n.modifiers = [...n.modifiers, ...e ?? []]);
}
const l8 = 0, a8 = (n) => {
  const { popperInstanceRef: e, contentRef: t, triggerRef: i, role: s } = ye(Qv, void 0), r = L(), o = L(), l = _(() => ({
    name: "eventListeners",
    enabled: !!n.visible
  })), a = _(() => {
    var b;
    const y = w(r), v = (b = w(o)) != null ? b : l8;
    return {
      name: "arrow",
      enabled: !Kk(y),
      options: {
        element: y,
        padding: v
      }
    };
  }), c = _(() => ({
    onFirstUpdate: () => {
      p();
    },
    ...i8(n, [
      w(a),
      w(l)
    ])
  })), u = _(() => s8(n.referenceEl) || w(i)), { attributes: h, state: f, styles: d, update: p, forceUpdate: g, instanceRef: m } = Ez(u, t, c);
  return ee(m, (b) => e.value = b), Be(() => {
    ee(() => {
      var b;
      return (b = w(u)) == null ? void 0 : b.getBoundingClientRect();
    }, () => {
      p();
    });
  }), {
    attributes: h,
    arrowRef: r,
    contentRef: t,
    instanceRef: m,
    state: f,
    styles: d,
    role: s,
    forceUpdate: g,
    update: p
  };
}, c8 = (n, {
  attributes: e,
  styles: t,
  role: i
}) => {
  const { nextZIndex: s } = Rv(), r = ve("popper"), o = _(() => w(e).popper), l = L(ze(n.zIndex) ? n.zIndex : s()), a = _(() => [
    r.b(),
    r.is("pure", n.pure),
    r.is(n.effect),
    n.popperClass
  ]), c = _(() => [
    { zIndex: w(l) },
    w(t).popper,
    n.popperStyle || {}
  ]), u = _(() => i.value === "dialog" ? "false" : void 0), h = _(() => w(t).arrow || {});
  return {
    ariaModal: u,
    arrowStyle: h,
    contentAttrs: o,
    contentClass: a,
    contentStyle: c,
    contentZIndex: l,
    updateZIndex: () => {
      l.value = ze(n.zIndex) ? n.zIndex : s();
    }
  };
}, u8 = (n, e) => {
  const t = L(!1), i = L();
  return {
    focusStartRef: i,
    trapped: t,
    onFocusAfterReleased: (c) => {
      var u;
      ((u = c.detail) == null ? void 0 : u.focusReason) !== "pointer" && (i.value = "first", e("blur"));
    },
    onFocusAfterTrapped: () => {
      e("focus");
    },
    onFocusInTrap: (c) => {
      n.visible && !t.value && (c.target && (i.value = c.target), t.value = !0);
    },
    onFocusoutPrevented: (c) => {
      n.trapping || (c.detail.focusReason === "pointer" && c.preventDefault(), t.value = !1);
    },
    onReleaseRequested: () => {
      t.value = !1, e("close");
    }
  };
}, h8 = Z({
  name: "ElPopperContent"
}), f8 = /* @__PURE__ */ Z({
  ...h8,
  props: aP,
  emits: n8,
  setup(n, { expose: e, emit: t }) {
    const i = n, {
      focusStartRef: s,
      trapped: r,
      onFocusAfterReleased: o,
      onFocusAfterTrapped: l,
      onFocusInTrap: a,
      onFocusoutPrevented: c,
      onReleaseRequested: u
    } = u8(i, t), { attributes: h, arrowRef: f, contentRef: d, styles: p, instanceRef: g, role: m, update: b } = a8(i), {
      ariaModal: y,
      arrowStyle: v,
      contentAttrs: O,
      contentClass: x,
      contentStyle: S,
      updateZIndex: C
    } = c8(i, {
      styles: p,
      attributes: h,
      role: m
    }), k = ye(Ll, void 0), E = L();
    ht(tP, {
      arrowStyle: v,
      arrowRef: f,
      arrowOffset: E
    }), k && (k.addInputId || k.removeInputId) && ht(Ll, {
      ...k,
      addInputId: Lr,
      removeInputId: Lr
    });
    let $;
    const T = (j = !0) => {
      b(), j && C();
    }, M = () => {
      T(!1), i.visible && i.focusOnShow ? r.value = !0 : i.visible === !1 && (r.value = !1);
    };
    return Be(() => {
      ee(() => i.triggerTargetEl, (j, D) => {
        $ == null || $(), $ = void 0;
        const P = w(j || d.value), A = w(D || d.value);
        As(P) && ($ = ee([m, () => i.ariaLabel, y, () => i.id], (Q) => {
          ["role", "aria-label", "aria-modal", "id"].forEach((X, z) => {
            Ii(Q[z]) ? P.removeAttribute(X) : P.setAttribute(X, Q[z]);
          });
        }, { immediate: !0 })), A !== P && As(A) && ["role", "aria-label", "aria-modal", "id"].forEach((Q) => {
          A.removeAttribute(Q);
        });
      }, { immediate: !0 }), ee(() => i.visible, M, { immediate: !0 });
    }), Zn(() => {
      $ == null || $(), $ = void 0;
    }), e({
      popperContentRef: d,
      popperInstanceRef: g,
      updatePopper: T,
      contentStyle: S
    }), (j, D) => (R(), F("div", Gi({
      ref_key: "contentRef",
      ref: d
    }, w(O), {
      style: w(S),
      class: w(x),
      tabindex: "-1",
      onMouseenter: D[0] || (D[0] = (P) => j.$emit("mouseenter", P)),
      onMouseleave: D[1] || (D[1] = (P) => j.$emit("mouseleave", P))
    }), [
      ne(w(Hp), {
        trapped: w(r),
        "trap-on-focus-in": !0,
        "focus-trap-el": w(d),
        "focus-start-el": w(s),
        onFocusAfterTrapped: w(l),
        onFocusAfterReleased: w(o),
        onFocusin: w(a),
        onFocusoutPrevented: w(c),
        onReleaseRequested: w(u)
      }, {
        default: se(() => [
          pe(j.$slots, "default")
        ]),
        _: 3
      }, 8, ["trapped", "focus-trap-el", "focus-start-el", "onFocusAfterTrapped", "onFocusAfterReleased", "onFocusin", "onFocusoutPrevented", "onReleaseRequested"])
    ], 16));
  }
});
var d8 = /* @__PURE__ */ Ce(f8, [["__file", "content.vue"]]);
const p8 = Bt(L6), zv = Symbol("elTooltip"), Ti = Ae({
  ...Dz,
  ...aP,
  appendTo: {
    type: be([String, Object])
  },
  content: {
    type: String,
    default: ""
  },
  rawContent: {
    type: Boolean,
    default: !1
  },
  persistent: Boolean,
  ariaLabel: String,
  visible: {
    type: be(Boolean),
    default: null
  },
  transition: String,
  teleported: {
    type: Boolean,
    default: !0
  },
  disabled: Boolean
}), Xu = Ae({
  ...rP,
  disabled: Boolean,
  trigger: {
    type: be([String, Array]),
    default: "hover"
  },
  triggerKeys: {
    type: be(Array),
    default: () => [jn.enter, jn.space]
  }
}), {
  useModelToggleProps: g8,
  useModelToggleEmits: m8,
  useModelToggle: b8
} = D2("visible"), v8 = Ae({
  ...nP,
  ...g8,
  ...Ti,
  ...Xu,
  ...iP,
  showArrow: {
    type: Boolean,
    default: !0
  }
}), y8 = [
  ...m8,
  "before-show",
  "before-hide",
  "show",
  "hide",
  "open",
  "close"
], O8 = (n, e) => Zt(n) ? n.includes(e) : n === e, oa = (n, e, t) => (i) => {
  O8(w(n), e) && t(i);
}, w8 = Z({
  name: "ElTooltipTrigger"
}), x8 = /* @__PURE__ */ Z({
  ...w8,
  props: Xu,
  setup(n, { expose: e }) {
    const t = n, i = ve("tooltip"), { controlled: s, id: r, open: o, onOpen: l, onClose: a, onToggle: c } = ye(zv, void 0), u = L(null), h = () => {
      if (w(s) || t.disabled)
        return !0;
    }, f = Yi(t, "trigger"), d = Ar(h, oa(f, "hover", l)), p = Ar(h, oa(f, "hover", a)), g = Ar(h, oa(f, "click", (O) => {
      O.button === 0 && c(O);
    })), m = Ar(h, oa(f, "focus", l)), b = Ar(h, oa(f, "focus", a)), y = Ar(h, oa(f, "contextmenu", (O) => {
      O.preventDefault(), c(O);
    })), v = Ar(h, (O) => {
      const { code: x } = O;
      t.triggerKeys.includes(x) && (O.preventDefault(), c(O));
    });
    return e({
      triggerRef: u
    }), (O, x) => (R(), oe(w(Z6), {
      id: w(r),
      "virtual-ref": O.virtualRef,
      open: w(o),
      "virtual-triggering": O.virtualTriggering,
      class: B(w(i).e("trigger")),
      onBlur: w(b),
      onClick: w(g),
      onContextmenu: w(y),
      onFocus: w(m),
      onMouseenter: w(d),
      onMouseleave: w(p),
      onKeydown: w(v)
    }, {
      default: se(() => [
        pe(O.$slots, "default")
      ]),
      _: 3
    }, 8, ["id", "virtual-ref", "open", "virtual-triggering", "class", "onBlur", "onClick", "onContextmenu", "onFocus", "onMouseenter", "onMouseleave", "onKeydown"]));
  }
});
var S8 = /* @__PURE__ */ Ce(x8, [["__file", "trigger.vue"]]);
const C8 = Z({
  name: "ElTooltipContent",
  inheritAttrs: !1
}), k8 = /* @__PURE__ */ Z({
  ...C8,
  props: Ti,
  setup(n, { expose: e }) {
    const t = n, { selector: i } = X2(), s = ve("tooltip"), r = L(null), o = L(!1), {
      controlled: l,
      id: a,
      open: c,
      trigger: u,
      onClose: h,
      onOpen: f,
      onShow: d,
      onHide: p,
      onBeforeShow: g,
      onBeforeHide: m
    } = ye(zv, void 0), b = _(() => t.transition || `${s.namespace.value}-fade-in-linear`), y = _(() => process.env.NODE_ENV === "test" ? !0 : t.persistent);
    Zn(() => {
      o.value = !0;
    });
    const v = _(() => w(y) ? !0 : w(c)), O = _(() => t.disabled ? !1 : w(c)), x = _(() => t.appendTo || i.value), S = _(() => {
      var Q;
      return (Q = t.style) != null ? Q : {};
    }), C = _(() => !w(c)), k = () => {
      p();
    }, E = () => {
      if (w(l))
        return !0;
    }, $ = Ar(E, () => {
      t.enterable && w(u) === "hover" && f();
    }), T = Ar(E, () => {
      w(u) === "hover" && h();
    }), M = () => {
      var Q, X;
      (X = (Q = r.value) == null ? void 0 : Q.updatePopper) == null || X.call(Q), g == null || g();
    }, j = () => {
      m == null || m();
    }, D = () => {
      d(), A = xB(_(() => {
        var Q;
        return (Q = r.value) == null ? void 0 : Q.popperContentRef;
      }), () => {
        if (w(l))
          return;
        w(u) !== "hover" && h();
      });
    }, P = () => {
      t.virtualTriggering || h();
    };
    let A;
    return ee(() => w(c), (Q) => {
      Q || A == null || A();
    }, {
      flush: "post"
    }), ee(() => t.content, () => {
      var Q, X;
      (X = (Q = r.value) == null ? void 0 : Q.updatePopper) == null || X.call(Q);
    }), e({
      contentRef: r
    }), (Q, X) => (R(), oe(_p, {
      disabled: !Q.teleported,
      to: w(x)
    }, [
      ne(br, {
        name: w(b),
        onAfterLeave: k,
        onBeforeEnter: M,
        onAfterEnter: D,
        onBeforeLeave: j
      }, {
        default: se(() => [
          w(v) ? tt((R(), oe(w(d8), Gi({
            key: 0,
            id: w(a),
            ref_key: "contentRef",
            ref: r
          }, Q.$attrs, {
            "aria-label": Q.ariaLabel,
            "aria-hidden": w(C),
            "boundaries-padding": Q.boundariesPadding,
            "fallback-placements": Q.fallbackPlacements,
            "gpu-acceleration": Q.gpuAcceleration,
            offset: Q.offset,
            placement: Q.placement,
            "popper-options": Q.popperOptions,
            strategy: Q.strategy,
            effect: Q.effect,
            enterable: Q.enterable,
            pure: Q.pure,
            "popper-class": Q.popperClass,
            "popper-style": [Q.popperStyle, w(S)],
            "reference-el": Q.referenceEl,
            "trigger-target-el": Q.triggerTargetEl,
            visible: w(O),
            "z-index": Q.zIndex,
            onMouseenter: w($),
            onMouseleave: w(T),
            onBlur: P,
            onClose: w(h)
          }), {
            default: se(() => [
              o.value ? te("v-if", !0) : pe(Q.$slots, "default", { key: 0 })
            ]),
            _: 3
          }, 16, ["id", "aria-label", "aria-hidden", "boundaries-padding", "fallback-placements", "gpu-acceleration", "offset", "placement", "popper-options", "strategy", "effect", "enterable", "pure", "popper-class", "popper-style", "reference-el", "trigger-target-el", "visible", "z-index", "onMouseenter", "onMouseleave", "onClose"])), [
            [Ht, w(O)]
          ]) : te("v-if", !0)
        ]),
        _: 3
      }, 8, ["name"])
    ], 8, ["disabled", "to"]));
  }
});
var P8 = /* @__PURE__ */ Ce(k8, [["__file", "content.vue"]]);
const A8 = ["innerHTML"], E8 = { key: 1 }, $8 = Z({
  name: "ElTooltip"
}), T8 = /* @__PURE__ */ Z({
  ...$8,
  props: v8,
  emits: y8,
  setup(n, { expose: e, emit: t }) {
    const i = n;
    Rz();
    const s = pr(), r = L(), o = L(), l = () => {
      var b;
      const y = w(r);
      y && ((b = y.popperInstanceRef) == null || b.update());
    }, a = L(!1), c = L(), { show: u, hide: h, hasUpdateHandler: f } = b8({
      indicator: a,
      toggleReason: c
    }), { onOpen: d, onClose: p } = Lz({
      showAfter: Yi(i, "showAfter"),
      hideAfter: Yi(i, "hideAfter"),
      autoClose: Yi(i, "autoClose"),
      open: u,
      close: h
    }), g = _(() => Yn(i.visible) && !f.value);
    ht(zv, {
      controlled: g,
      id: s,
      open: iv(a),
      trigger: Yi(i, "trigger"),
      onOpen: (b) => {
        d(b);
      },
      onClose: (b) => {
        p(b);
      },
      onToggle: (b) => {
        w(a) ? p(b) : d(b);
      },
      onShow: () => {
        t("show", c.value);
      },
      onHide: () => {
        t("hide", c.value);
      },
      onBeforeShow: () => {
        t("before-show", c.value);
      },
      onBeforeHide: () => {
        t("before-hide", c.value);
      },
      updatePopper: l
    }), ee(() => i.disabled, (b) => {
      b && a.value && (a.value = !1);
    });
    const m = (b) => {
      var y, v;
      const O = (v = (y = o.value) == null ? void 0 : y.contentRef) == null ? void 0 : v.popperContentRef, x = (b == null ? void 0 : b.relatedTarget) || document.activeElement;
      return O && O.contains(x);
    };
    return oR(() => a.value && h()), e({
      popperRef: r,
      contentRef: o,
      isFocusInsideContent: m,
      updatePopper: l,
      onOpen: d,
      onClose: p,
      hide: h
    }), (b, y) => (R(), oe(w(p8), {
      ref_key: "popperRef",
      ref: r,
      role: b.role
    }, {
      default: se(() => [
        ne(S8, {
          disabled: b.disabled,
          trigger: b.trigger,
          "trigger-keys": b.triggerKeys,
          "virtual-ref": b.virtualRef,
          "virtual-triggering": b.virtualTriggering
        }, {
          default: se(() => [
            b.$slots.default ? pe(b.$slots, "default", { key: 0 }) : te("v-if", !0)
          ]),
          _: 3
        }, 8, ["disabled", "trigger", "trigger-keys", "virtual-ref", "virtual-triggering"]),
        ne(P8, {
          ref_key: "contentRef",
          ref: o,
          "aria-label": b.ariaLabel,
          "boundaries-padding": b.boundariesPadding,
          content: b.content,
          disabled: b.disabled,
          effect: b.effect,
          enterable: b.enterable,
          "fallback-placements": b.fallbackPlacements,
          "hide-after": b.hideAfter,
          "gpu-acceleration": b.gpuAcceleration,
          offset: b.offset,
          persistent: b.persistent,
          "popper-class": b.popperClass,
          "popper-style": b.popperStyle,
          placement: b.placement,
          "popper-options": b.popperOptions,
          pure: b.pure,
          "raw-content": b.rawContent,
          "reference-el": b.referenceEl,
          "trigger-target-el": b.triggerTargetEl,
          "show-after": b.showAfter,
          strategy: b.strategy,
          teleported: b.teleported,
          transition: b.transition,
          "virtual-triggering": b.virtualTriggering,
          "z-index": b.zIndex,
          "append-to": b.appendTo
        }, {
          default: se(() => [
            pe(b.$slots, "content", {}, () => [
              b.rawContent ? (R(), F("span", {
                key: 0,
                innerHTML: b.content
              }, null, 8, A8)) : (R(), F("span", E8, Re(b.content), 1))
            ]),
            b.showArrow ? (R(), oe(w(Q6), {
              key: 0,
              "arrow-offset": b.arrowOffset
            }, null, 8, ["arrow-offset"])) : te("v-if", !0)
          ]),
          _: 3
        }, 8, ["aria-label", "boundaries-padding", "content", "disabled", "effect", "enterable", "fallback-placements", "hide-after", "gpu-acceleration", "offset", "persistent", "popper-class", "popper-style", "placement", "popper-options", "pure", "raw-content", "reference-el", "trigger-target-el", "show-after", "strategy", "teleported", "transition", "virtual-triggering", "z-index", "append-to"])
      ]),
      _: 3
    }, 8, ["role"]));
  }
});
var _8 = /* @__PURE__ */ Ce(T8, [["__file", "tooltip.vue"]]);
const qh = Bt(_8), M8 = Ae({
  value: {
    type: [String, Number],
    default: ""
  },
  max: {
    type: Number,
    default: 99
  },
  isDot: Boolean,
  hidden: Boolean,
  type: {
    type: String,
    values: ["primary", "success", "warning", "info", "danger"],
    default: "danger"
  }
}), R8 = ["textContent"], D8 = Z({
  name: "ElBadge"
}), L8 = /* @__PURE__ */ Z({
  ...D8,
  props: M8,
  setup(n, { expose: e }) {
    const t = n, i = ve("badge"), s = _(() => t.isDot ? "" : ze(t.value) && ze(t.max) ? t.max < t.value ? `${t.max}+` : `${t.value}` : `${t.value}`);
    return e({
      content: s
    }), (r, o) => (R(), F("div", {
      class: B(w(i).b())
    }, [
      pe(r.$slots, "default"),
      ne(br, {
        name: `${w(i).namespace.value}-zoom-in-center`,
        persisted: ""
      }, {
        default: se(() => [
          tt(W("sup", {
            class: B([
              w(i).e("content"),
              w(i).em("content", r.type),
              w(i).is("fixed", !!r.$slots.default),
              w(i).is("dot", r.isDot)
            ]),
            textContent: Re(w(s))
          }, null, 10, R8), [
            [Ht, !r.hidden && (w(s) || r.isDot)]
          ])
        ]),
        _: 1
      }, 8, ["name"])
    ], 2));
  }
});
var N8 = /* @__PURE__ */ Ce(L8, [["__file", "badge.vue"]]);
const I8 = Bt(N8), cP = Symbol("buttonGroupContextKey"), Q8 = (n, e) => {
  Dl({
    from: "type.text",
    replacement: "link",
    version: "3.0.0",
    scope: "props",
    ref: "https://element-plus.org/en-US/component/button.html#button-attributes"
  }, _(() => n.type === "text"));
  const t = ye(cP, void 0), i = Xp("button"), { form: s } = vr(), r = Bi(_(() => t == null ? void 0 : t.size)), o = qo(), l = L(), a = Zo(), c = _(() => n.type || (t == null ? void 0 : t.type) || ""), u = _(() => {
    var p, g, m;
    return (m = (g = n.autoInsertSpace) != null ? g : (p = i.value) == null ? void 0 : p.autoInsertSpace) != null ? m : !1;
  }), h = _(() => n.tag === "button" ? {
    ariaDisabled: o.value || n.loading,
    disabled: o.value || n.loading,
    autofocus: n.autofocus,
    type: n.nativeType
  } : {}), f = _(() => {
    var p;
    const g = (p = a.default) == null ? void 0 : p.call(a);
    if (u.value && (g == null ? void 0 : g.length) === 1) {
      const m = g[0];
      if ((m == null ? void 0 : m.type) === jC) {
        const b = m.children;
        return new RegExp("^\\p{Unified_Ideograph}{2}$", "u").test(b.trim());
      }
    }
    return !1;
  });
  return {
    _disabled: o,
    _size: r,
    _type: c,
    _ref: l,
    _props: h,
    shouldAddSpace: f,
    handleClick: (p) => {
      n.nativeType === "reset" && (s == null || s.resetFields()), e("click", p);
    }
  };
}, B8 = [
  "default",
  "primary",
  "success",
  "warning",
  "info",
  "danger",
  "text",
  ""
], j8 = ["button", "submit", "reset"], y0 = Ae({
  size: Ns,
  disabled: Boolean,
  type: {
    type: String,
    values: B8,
    default: ""
  },
  icon: {
    type: xn
  },
  nativeType: {
    type: String,
    values: j8,
    default: "button"
  },
  loading: Boolean,
  loadingIcon: {
    type: xn,
    default: () => Zp
  },
  plain: Boolean,
  text: Boolean,
  link: Boolean,
  bg: Boolean,
  autofocus: Boolean,
  round: Boolean,
  circle: Boolean,
  color: String,
  dark: Boolean,
  autoInsertSpace: {
    type: Boolean,
    default: void 0
  },
  tag: {
    type: be([String, Object]),
    default: "button"
  }
}), z8 = {
  click: (n) => n instanceof MouseEvent
};
function zn(n, e) {
  Z8(n) && (n = "100%");
  var t = F8(n);
  return n = e === 360 ? n : Math.min(e, Math.max(0, parseFloat(n))), t && (n = parseInt(String(n * e), 10) / 100), Math.abs(n - e) < 1e-6 ? 1 : (e === 360 ? n = (n < 0 ? n % e + e : n % e) / parseFloat(String(e)) : n = n % e / parseFloat(String(e)), n);
}
function bf(n) {
  return Math.min(1, Math.max(0, n));
}
function Z8(n) {
  return typeof n == "string" && n.indexOf(".") !== -1 && parseFloat(n) === 1;
}
function F8(n) {
  return typeof n == "string" && n.indexOf("%") !== -1;
}
function uP(n) {
  return n = parseFloat(n), (isNaN(n) || n < 0 || n > 1) && (n = 1), n;
}
function vf(n) {
  return n <= 1 ? "".concat(Number(n) * 100, "%") : n;
}
function hl(n) {
  return n.length === 1 ? "0" + n : String(n);
}
function V8(n, e, t) {
  return {
    r: zn(n, 255) * 255,
    g: zn(e, 255) * 255,
    b: zn(t, 255) * 255
  };
}
function X1(n, e, t) {
  n = zn(n, 255), e = zn(e, 255), t = zn(t, 255);
  var i = Math.max(n, e, t), s = Math.min(n, e, t), r = 0, o = 0, l = (i + s) / 2;
  if (i === s)
    o = 0, r = 0;
  else {
    var a = i - s;
    switch (o = l > 0.5 ? a / (2 - i - s) : a / (i + s), i) {
      case n:
        r = (e - t) / a + (e < t ? 6 : 0);
        break;
      case e:
        r = (t - n) / a + 2;
        break;
      case t:
        r = (n - e) / a + 4;
        break;
    }
    r /= 6;
  }
  return { h: r, s: o, l };
}
function Gg(n, e, t) {
  return t < 0 && (t += 1), t > 1 && (t -= 1), t < 1 / 6 ? n + (e - n) * (6 * t) : t < 1 / 2 ? e : t < 2 / 3 ? n + (e - n) * (2 / 3 - t) * 6 : n;
}
function q8(n, e, t) {
  var i, s, r;
  if (n = zn(n, 360), e = zn(e, 100), t = zn(t, 100), e === 0)
    s = t, r = t, i = t;
  else {
    var o = t < 0.5 ? t * (1 + e) : t + e - t * e, l = 2 * t - o;
    i = Gg(l, o, n + 1 / 3), s = Gg(l, o, n), r = Gg(l, o, n - 1 / 3);
  }
  return { r: i * 255, g: s * 255, b: r * 255 };
}
function Y1(n, e, t) {
  n = zn(n, 255), e = zn(e, 255), t = zn(t, 255);
  var i = Math.max(n, e, t), s = Math.min(n, e, t), r = 0, o = i, l = i - s, a = i === 0 ? 0 : l / i;
  if (i === s)
    r = 0;
  else {
    switch (i) {
      case n:
        r = (e - t) / l + (e < t ? 6 : 0);
        break;
      case e:
        r = (t - n) / l + 2;
        break;
      case t:
        r = (n - e) / l + 4;
        break;
    }
    r /= 6;
  }
  return { h: r, s: a, v: o };
}
function W8(n, e, t) {
  n = zn(n, 360) * 6, e = zn(e, 100), t = zn(t, 100);
  var i = Math.floor(n), s = n - i, r = t * (1 - e), o = t * (1 - s * e), l = t * (1 - (1 - s) * e), a = i % 6, c = [t, o, r, r, l, t][a], u = [l, t, t, o, r, r][a], h = [r, r, l, t, t, o][a];
  return { r: c * 255, g: u * 255, b: h * 255 };
}
function H1(n, e, t, i) {
  var s = [
    hl(Math.round(n).toString(16)),
    hl(Math.round(e).toString(16)),
    hl(Math.round(t).toString(16))
  ];
  return i && s[0].startsWith(s[0].charAt(1)) && s[1].startsWith(s[1].charAt(1)) && s[2].startsWith(s[2].charAt(1)) ? s[0].charAt(0) + s[1].charAt(0) + s[2].charAt(0) : s.join("");
}
function X8(n, e, t, i, s) {
  var r = [
    hl(Math.round(n).toString(16)),
    hl(Math.round(e).toString(16)),
    hl(Math.round(t).toString(16)),
    hl(Y8(i))
  ];
  return s && r[0].startsWith(r[0].charAt(1)) && r[1].startsWith(r[1].charAt(1)) && r[2].startsWith(r[2].charAt(1)) && r[3].startsWith(r[3].charAt(1)) ? r[0].charAt(0) + r[1].charAt(0) + r[2].charAt(0) + r[3].charAt(0) : r.join("");
}
function Y8(n) {
  return Math.round(parseFloat(n) * 255).toString(16);
}
function G1(n) {
  return Pi(n) / 255;
}
function Pi(n) {
  return parseInt(n, 16);
}
function H8(n) {
  return {
    r: n >> 16,
    g: (n & 65280) >> 8,
    b: n & 255
  };
}
var O0 = {
  aliceblue: "#f0f8ff",
  antiquewhite: "#faebd7",
  aqua: "#00ffff",
  aquamarine: "#7fffd4",
  azure: "#f0ffff",
  beige: "#f5f5dc",
  bisque: "#ffe4c4",
  black: "#000000",
  blanchedalmond: "#ffebcd",
  blue: "#0000ff",
  blueviolet: "#8a2be2",
  brown: "#a52a2a",
  burlywood: "#deb887",
  cadetblue: "#5f9ea0",
  chartreuse: "#7fff00",
  chocolate: "#d2691e",
  coral: "#ff7f50",
  cornflowerblue: "#6495ed",
  cornsilk: "#fff8dc",
  crimson: "#dc143c",
  cyan: "#00ffff",
  darkblue: "#00008b",
  darkcyan: "#008b8b",
  darkgoldenrod: "#b8860b",
  darkgray: "#a9a9a9",
  darkgreen: "#006400",
  darkgrey: "#a9a9a9",
  darkkhaki: "#bdb76b",
  darkmagenta: "#8b008b",
  darkolivegreen: "#556b2f",
  darkorange: "#ff8c00",
  darkorchid: "#9932cc",
  darkred: "#8b0000",
  darksalmon: "#e9967a",
  darkseagreen: "#8fbc8f",
  darkslateblue: "#483d8b",
  darkslategray: "#2f4f4f",
  darkslategrey: "#2f4f4f",
  darkturquoise: "#00ced1",
  darkviolet: "#9400d3",
  deeppink: "#ff1493",
  deepskyblue: "#00bfff",
  dimgray: "#696969",
  dimgrey: "#696969",
  dodgerblue: "#1e90ff",
  firebrick: "#b22222",
  floralwhite: "#fffaf0",
  forestgreen: "#228b22",
  fuchsia: "#ff00ff",
  gainsboro: "#dcdcdc",
  ghostwhite: "#f8f8ff",
  goldenrod: "#daa520",
  gold: "#ffd700",
  gray: "#808080",
  green: "#008000",
  greenyellow: "#adff2f",
  grey: "#808080",
  honeydew: "#f0fff0",
  hotpink: "#ff69b4",
  indianred: "#cd5c5c",
  indigo: "#4b0082",
  ivory: "#fffff0",
  khaki: "#f0e68c",
  lavenderblush: "#fff0f5",
  lavender: "#e6e6fa",
  lawngreen: "#7cfc00",
  lemonchiffon: "#fffacd",
  lightblue: "#add8e6",
  lightcoral: "#f08080",
  lightcyan: "#e0ffff",
  lightgoldenrodyellow: "#fafad2",
  lightgray: "#d3d3d3",
  lightgreen: "#90ee90",
  lightgrey: "#d3d3d3",
  lightpink: "#ffb6c1",
  lightsalmon: "#ffa07a",
  lightseagreen: "#20b2aa",
  lightskyblue: "#87cefa",
  lightslategray: "#778899",
  lightslategrey: "#778899",
  lightsteelblue: "#b0c4de",
  lightyellow: "#ffffe0",
  lime: "#00ff00",
  limegreen: "#32cd32",
  linen: "#faf0e6",
  magenta: "#ff00ff",
  maroon: "#800000",
  mediumaquamarine: "#66cdaa",
  mediumblue: "#0000cd",
  mediumorchid: "#ba55d3",
  mediumpurple: "#9370db",
  mediumseagreen: "#3cb371",
  mediumslateblue: "#7b68ee",
  mediumspringgreen: "#00fa9a",
  mediumturquoise: "#48d1cc",
  mediumvioletred: "#c71585",
  midnightblue: "#191970",
  mintcream: "#f5fffa",
  mistyrose: "#ffe4e1",
  moccasin: "#ffe4b5",
  navajowhite: "#ffdead",
  navy: "#000080",
  oldlace: "#fdf5e6",
  olive: "#808000",
  olivedrab: "#6b8e23",
  orange: "#ffa500",
  orangered: "#ff4500",
  orchid: "#da70d6",
  palegoldenrod: "#eee8aa",
  palegreen: "#98fb98",
  paleturquoise: "#afeeee",
  palevioletred: "#db7093",
  papayawhip: "#ffefd5",
  peachpuff: "#ffdab9",
  peru: "#cd853f",
  pink: "#ffc0cb",
  plum: "#dda0dd",
  powderblue: "#b0e0e6",
  purple: "#800080",
  rebeccapurple: "#663399",
  red: "#ff0000",
  rosybrown: "#bc8f8f",
  royalblue: "#4169e1",
  saddlebrown: "#8b4513",
  salmon: "#fa8072",
  sandybrown: "#f4a460",
  seagreen: "#2e8b57",
  seashell: "#fff5ee",
  sienna: "#a0522d",
  silver: "#c0c0c0",
  skyblue: "#87ceeb",
  slateblue: "#6a5acd",
  slategray: "#708090",
  slategrey: "#708090",
  snow: "#fffafa",
  springgreen: "#00ff7f",
  steelblue: "#4682b4",
  tan: "#d2b48c",
  teal: "#008080",
  thistle: "#d8bfd8",
  tomato: "#ff6347",
  turquoise: "#40e0d0",
  violet: "#ee82ee",
  wheat: "#f5deb3",
  white: "#ffffff",
  whitesmoke: "#f5f5f5",
  yellow: "#ffff00",
  yellowgreen: "#9acd32"
};
function G8(n) {
  var e = { r: 0, g: 0, b: 0 }, t = 1, i = null, s = null, r = null, o = !1, l = !1;
  return typeof n == "string" && (n = J8(n)), typeof n == "object" && (Pr(n.r) && Pr(n.g) && Pr(n.b) ? (e = V8(n.r, n.g, n.b), o = !0, l = String(n.r).substr(-1) === "%" ? "prgb" : "rgb") : Pr(n.h) && Pr(n.s) && Pr(n.v) ? (i = vf(n.s), s = vf(n.v), e = W8(n.h, i, s), o = !0, l = "hsv") : Pr(n.h) && Pr(n.s) && Pr(n.l) && (i = vf(n.s), r = vf(n.l), e = q8(n.h, i, r), o = !0, l = "hsl"), Object.prototype.hasOwnProperty.call(n, "a") && (t = n.a)), t = uP(t), {
    ok: o,
    format: n.format || l,
    r: Math.min(255, Math.max(e.r, 0)),
    g: Math.min(255, Math.max(e.g, 0)),
    b: Math.min(255, Math.max(e.b, 0)),
    a: t
  };
}
var U8 = "[-\\+]?\\d+%?", K8 = "[-\\+]?\\d*\\.\\d+%?", bo = "(?:".concat(K8, ")|(?:").concat(U8, ")"), Ug = "[\\s|\\(]+(".concat(bo, ")[,|\\s]+(").concat(bo, ")[,|\\s]+(").concat(bo, ")\\s*\\)?"), Kg = "[\\s|\\(]+(".concat(bo, ")[,|\\s]+(").concat(bo, ")[,|\\s]+(").concat(bo, ")[,|\\s]+(").concat(bo, ")\\s*\\)?"), ps = {
  CSS_UNIT: new RegExp(bo),
  rgb: new RegExp("rgb" + Ug),
  rgba: new RegExp("rgba" + Kg),
  hsl: new RegExp("hsl" + Ug),
  hsla: new RegExp("hsla" + Kg),
  hsv: new RegExp("hsv" + Ug),
  hsva: new RegExp("hsva" + Kg),
  hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
  hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
  hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
  hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
};
function J8(n) {
  if (n = n.trim().toLowerCase(), n.length === 0)
    return !1;
  var e = !1;
  if (O0[n])
    n = O0[n], e = !0;
  else if (n === "transparent")
    return { r: 0, g: 0, b: 0, a: 0, format: "name" };
  var t = ps.rgb.exec(n);
  return t ? { r: t[1], g: t[2], b: t[3] } : (t = ps.rgba.exec(n), t ? { r: t[1], g: t[2], b: t[3], a: t[4] } : (t = ps.hsl.exec(n), t ? { h: t[1], s: t[2], l: t[3] } : (t = ps.hsla.exec(n), t ? { h: t[1], s: t[2], l: t[3], a: t[4] } : (t = ps.hsv.exec(n), t ? { h: t[1], s: t[2], v: t[3] } : (t = ps.hsva.exec(n), t ? { h: t[1], s: t[2], v: t[3], a: t[4] } : (t = ps.hex8.exec(n), t ? {
    r: Pi(t[1]),
    g: Pi(t[2]),
    b: Pi(t[3]),
    a: G1(t[4]),
    format: e ? "name" : "hex8"
  } : (t = ps.hex6.exec(n), t ? {
    r: Pi(t[1]),
    g: Pi(t[2]),
    b: Pi(t[3]),
    format: e ? "name" : "hex"
  } : (t = ps.hex4.exec(n), t ? {
    r: Pi(t[1] + t[1]),
    g: Pi(t[2] + t[2]),
    b: Pi(t[3] + t[3]),
    a: G1(t[4] + t[4]),
    format: e ? "name" : "hex8"
  } : (t = ps.hex3.exec(n), t ? {
    r: Pi(t[1] + t[1]),
    g: Pi(t[2] + t[2]),
    b: Pi(t[3] + t[3]),
    format: e ? "name" : "hex"
  } : !1)))))))));
}
function Pr(n) {
  return !!ps.CSS_UNIT.exec(String(n));
}
var eZ = (
  /** @class */
  function() {
    function n(e, t) {
      e === void 0 && (e = ""), t === void 0 && (t = {});
      var i;
      if (e instanceof n)
        return e;
      typeof e == "number" && (e = H8(e)), this.originalInput = e;
      var s = G8(e);
      this.originalInput = e, this.r = s.r, this.g = s.g, this.b = s.b, this.a = s.a, this.roundA = Math.round(100 * this.a) / 100, this.format = (i = t.format) !== null && i !== void 0 ? i : s.format, this.gradientType = t.gradientType, this.r < 1 && (this.r = Math.round(this.r)), this.g < 1 && (this.g = Math.round(this.g)), this.b < 1 && (this.b = Math.round(this.b)), this.isValid = s.ok;
    }
    return n.prototype.isDark = function() {
      return this.getBrightness() < 128;
    }, n.prototype.isLight = function() {
      return !this.isDark();
    }, n.prototype.getBrightness = function() {
      var e = this.toRgb();
      return (e.r * 299 + e.g * 587 + e.b * 114) / 1e3;
    }, n.prototype.getLuminance = function() {
      var e = this.toRgb(), t, i, s, r = e.r / 255, o = e.g / 255, l = e.b / 255;
      return r <= 0.03928 ? t = r / 12.92 : t = Math.pow((r + 0.055) / 1.055, 2.4), o <= 0.03928 ? i = o / 12.92 : i = Math.pow((o + 0.055) / 1.055, 2.4), l <= 0.03928 ? s = l / 12.92 : s = Math.pow((l + 0.055) / 1.055, 2.4), 0.2126 * t + 0.7152 * i + 0.0722 * s;
    }, n.prototype.getAlpha = function() {
      return this.a;
    }, n.prototype.setAlpha = function(e) {
      return this.a = uP(e), this.roundA = Math.round(100 * this.a) / 100, this;
    }, n.prototype.isMonochrome = function() {
      var e = this.toHsl().s;
      return e === 0;
    }, n.prototype.toHsv = function() {
      var e = Y1(this.r, this.g, this.b);
      return { h: e.h * 360, s: e.s, v: e.v, a: this.a };
    }, n.prototype.toHsvString = function() {
      var e = Y1(this.r, this.g, this.b), t = Math.round(e.h * 360), i = Math.round(e.s * 100), s = Math.round(e.v * 100);
      return this.a === 1 ? "hsv(".concat(t, ", ").concat(i, "%, ").concat(s, "%)") : "hsva(".concat(t, ", ").concat(i, "%, ").concat(s, "%, ").concat(this.roundA, ")");
    }, n.prototype.toHsl = function() {
      var e = X1(this.r, this.g, this.b);
      return { h: e.h * 360, s: e.s, l: e.l, a: this.a };
    }, n.prototype.toHslString = function() {
      var e = X1(this.r, this.g, this.b), t = Math.round(e.h * 360), i = Math.round(e.s * 100), s = Math.round(e.l * 100);
      return this.a === 1 ? "hsl(".concat(t, ", ").concat(i, "%, ").concat(s, "%)") : "hsla(".concat(t, ", ").concat(i, "%, ").concat(s, "%, ").concat(this.roundA, ")");
    }, n.prototype.toHex = function(e) {
      return e === void 0 && (e = !1), H1(this.r, this.g, this.b, e);
    }, n.prototype.toHexString = function(e) {
      return e === void 0 && (e = !1), "#" + this.toHex(e);
    }, n.prototype.toHex8 = function(e) {
      return e === void 0 && (e = !1), X8(this.r, this.g, this.b, this.a, e);
    }, n.prototype.toHex8String = function(e) {
      return e === void 0 && (e = !1), "#" + this.toHex8(e);
    }, n.prototype.toHexShortString = function(e) {
      return e === void 0 && (e = !1), this.a === 1 ? this.toHexString(e) : this.toHex8String(e);
    }, n.prototype.toRgb = function() {
      return {
        r: Math.round(this.r),
        g: Math.round(this.g),
        b: Math.round(this.b),
        a: this.a
      };
    }, n.prototype.toRgbString = function() {
      var e = Math.round(this.r), t = Math.round(this.g), i = Math.round(this.b);
      return this.a === 1 ? "rgb(".concat(e, ", ").concat(t, ", ").concat(i, ")") : "rgba(".concat(e, ", ").concat(t, ", ").concat(i, ", ").concat(this.roundA, ")");
    }, n.prototype.toPercentageRgb = function() {
      var e = function(t) {
        return "".concat(Math.round(zn(t, 255) * 100), "%");
      };
      return {
        r: e(this.r),
        g: e(this.g),
        b: e(this.b),
        a: this.a
      };
    }, n.prototype.toPercentageRgbString = function() {
      var e = function(t) {
        return Math.round(zn(t, 255) * 100);
      };
      return this.a === 1 ? "rgb(".concat(e(this.r), "%, ").concat(e(this.g), "%, ").concat(e(this.b), "%)") : "rgba(".concat(e(this.r), "%, ").concat(e(this.g), "%, ").concat(e(this.b), "%, ").concat(this.roundA, ")");
    }, n.prototype.toName = function() {
      if (this.a === 0)
        return "transparent";
      if (this.a < 1)
        return !1;
      for (var e = "#" + H1(this.r, this.g, this.b, !1), t = 0, i = Object.entries(O0); t < i.length; t++) {
        var s = i[t], r = s[0], o = s[1];
        if (e === o)
          return r;
      }
      return !1;
    }, n.prototype.toString = function(e) {
      var t = !!e;
      e = e ?? this.format;
      var i = !1, s = this.a < 1 && this.a >= 0, r = !t && s && (e.startsWith("hex") || e === "name");
      return r ? e === "name" && this.a === 0 ? this.toName() : this.toRgbString() : (e === "rgb" && (i = this.toRgbString()), e === "prgb" && (i = this.toPercentageRgbString()), (e === "hex" || e === "hex6") && (i = this.toHexString()), e === "hex3" && (i = this.toHexString(!0)), e === "hex4" && (i = this.toHex8String(!0)), e === "hex8" && (i = this.toHex8String()), e === "name" && (i = this.toName()), e === "hsl" && (i = this.toHslString()), e === "hsv" && (i = this.toHsvString()), i || this.toHexString());
    }, n.prototype.toNumber = function() {
      return (Math.round(this.r) << 16) + (Math.round(this.g) << 8) + Math.round(this.b);
    }, n.prototype.clone = function() {
      return new n(this.toString());
    }, n.prototype.lighten = function(e) {
      e === void 0 && (e = 10);
      var t = this.toHsl();
      return t.l += e / 100, t.l = bf(t.l), new n(t);
    }, n.prototype.brighten = function(e) {
      e === void 0 && (e = 10);
      var t = this.toRgb();
      return t.r = Math.max(0, Math.min(255, t.r - Math.round(255 * -(e / 100)))), t.g = Math.max(0, Math.min(255, t.g - Math.round(255 * -(e / 100)))), t.b = Math.max(0, Math.min(255, t.b - Math.round(255 * -(e / 100)))), new n(t);
    }, n.prototype.darken = function(e) {
      e === void 0 && (e = 10);
      var t = this.toHsl();
      return t.l -= e / 100, t.l = bf(t.l), new n(t);
    }, n.prototype.tint = function(e) {
      return e === void 0 && (e = 10), this.mix("white", e);
    }, n.prototype.shade = function(e) {
      return e === void 0 && (e = 10), this.mix("black", e);
    }, n.prototype.desaturate = function(e) {
      e === void 0 && (e = 10);
      var t = this.toHsl();
      return t.s -= e / 100, t.s = bf(t.s), new n(t);
    }, n.prototype.saturate = function(e) {
      e === void 0 && (e = 10);
      var t = this.toHsl();
      return t.s += e / 100, t.s = bf(t.s), new n(t);
    }, n.prototype.greyscale = function() {
      return this.desaturate(100);
    }, n.prototype.spin = function(e) {
      var t = this.toHsl(), i = (t.h + e) % 360;
      return t.h = i < 0 ? 360 + i : i, new n(t);
    }, n.prototype.mix = function(e, t) {
      t === void 0 && (t = 50);
      var i = this.toRgb(), s = new n(e).toRgb(), r = t / 100, o = {
        r: (s.r - i.r) * r + i.r,
        g: (s.g - i.g) * r + i.g,
        b: (s.b - i.b) * r + i.b,
        a: (s.a - i.a) * r + i.a
      };
      return new n(o);
    }, n.prototype.analogous = function(e, t) {
      e === void 0 && (e = 6), t === void 0 && (t = 30);
      var i = this.toHsl(), s = 360 / t, r = [this];
      for (i.h = (i.h - (s * e >> 1) + 720) % 360; --e; )
        i.h = (i.h + s) % 360, r.push(new n(i));
      return r;
    }, n.prototype.complement = function() {
      var e = this.toHsl();
      return e.h = (e.h + 180) % 360, new n(e);
    }, n.prototype.monochromatic = function(e) {
      e === void 0 && (e = 6);
      for (var t = this.toHsv(), i = t.h, s = t.s, r = t.v, o = [], l = 1 / e; e--; )
        o.push(new n({ h: i, s, v: r })), r = (r + l) % 1;
      return o;
    }, n.prototype.splitcomplement = function() {
      var e = this.toHsl(), t = e.h;
      return [
        this,
        new n({ h: (t + 72) % 360, s: e.s, l: e.l }),
        new n({ h: (t + 216) % 360, s: e.s, l: e.l })
      ];
    }, n.prototype.onBackground = function(e) {
      var t = this.toRgb(), i = new n(e).toRgb(), s = t.a + i.a * (1 - t.a);
      return new n({
        r: (t.r * t.a + i.r * i.a * (1 - t.a)) / s,
        g: (t.g * t.a + i.g * i.a * (1 - t.a)) / s,
        b: (t.b * t.a + i.b * i.a * (1 - t.a)) / s,
        a: s
      });
    }, n.prototype.triad = function() {
      return this.polyad(3);
    }, n.prototype.tetrad = function() {
      return this.polyad(4);
    }, n.prototype.polyad = function(e) {
      for (var t = this.toHsl(), i = t.h, s = [this], r = 360 / e, o = 1; o < e; o++)
        s.push(new n({ h: (i + o * r) % 360, s: t.s, l: t.l }));
      return s;
    }, n.prototype.equals = function(e) {
      return this.toRgbString() === new n(e).toRgbString();
    }, n;
  }()
);
function eo(n, e = 20) {
  return n.mix("#141414", e).toString();
}
function tZ(n) {
  const e = qo(), t = ve("button");
  return _(() => {
    let i = {};
    const s = n.color;
    if (s) {
      const r = new eZ(s), o = n.dark ? r.tint(20).toString() : eo(r, 20);
      if (n.plain)
        i = t.cssVarBlock({
          "bg-color": n.dark ? eo(r, 90) : r.tint(90).toString(),
          "text-color": s,
          "border-color": n.dark ? eo(r, 50) : r.tint(50).toString(),
          "hover-text-color": `var(${t.cssVarName("color-white")})`,
          "hover-bg-color": s,
          "hover-border-color": s,
          "active-bg-color": o,
          "active-text-color": `var(${t.cssVarName("color-white")})`,
          "active-border-color": o
        }), e.value && (i[t.cssVarBlockName("disabled-bg-color")] = n.dark ? eo(r, 90) : r.tint(90).toString(), i[t.cssVarBlockName("disabled-text-color")] = n.dark ? eo(r, 50) : r.tint(50).toString(), i[t.cssVarBlockName("disabled-border-color")] = n.dark ? eo(r, 80) : r.tint(80).toString());
      else {
        const l = n.dark ? eo(r, 30) : r.tint(30).toString(), a = r.isDark() ? `var(${t.cssVarName("color-white")})` : `var(${t.cssVarName("color-black")})`;
        if (i = t.cssVarBlock({
          "bg-color": s,
          "text-color": a,
          "border-color": s,
          "hover-bg-color": l,
          "hover-text-color": a,
          "hover-border-color": l,
          "active-bg-color": o,
          "active-border-color": o
        }), e.value) {
          const c = n.dark ? eo(r, 50) : r.tint(50).toString();
          i[t.cssVarBlockName("disabled-bg-color")] = c, i[t.cssVarBlockName("disabled-text-color")] = n.dark ? "rgba(255, 255, 255, 0.5)" : `var(${t.cssVarName("color-white")})`, i[t.cssVarBlockName("disabled-border-color")] = c;
        }
      }
    }
    return i;
  });
}
const nZ = Z({
  name: "ElButton"
}), iZ = /* @__PURE__ */ Z({
  ...nZ,
  props: y0,
  emits: z8,
  setup(n, { expose: e, emit: t }) {
    const i = n, s = tZ(i), r = ve("button"), { _ref: o, _size: l, _type: a, _disabled: c, _props: u, shouldAddSpace: h, handleClick: f } = Q8(i, t);
    return e({
      ref: o,
      size: l,
      type: a,
      disabled: c,
      shouldAddSpace: h
    }), (d, p) => (R(), oe(Ot(d.tag), Gi({
      ref_key: "_ref",
      ref: o
    }, w(u), {
      class: [
        w(r).b(),
        w(r).m(w(a)),
        w(r).m(w(l)),
        w(r).is("disabled", w(c)),
        w(r).is("loading", d.loading),
        w(r).is("plain", d.plain),
        w(r).is("round", d.round),
        w(r).is("circle", d.circle),
        w(r).is("text", d.text),
        w(r).is("link", d.link),
        w(r).is("has-bg", d.bg)
      ],
      style: w(s),
      onClick: w(f)
    }), {
      default: se(() => [
        d.loading ? (R(), F(sn, { key: 0 }, [
          d.$slots.loading ? pe(d.$slots, "loading", { key: 0 }) : (R(), oe(w(Ue), {
            key: 1,
            class: B(w(r).is("loading"))
          }, {
            default: se(() => [
              (R(), oe(Ot(d.loadingIcon)))
            ]),
            _: 1
          }, 8, ["class"]))
        ], 64)) : d.icon || d.$slots.icon ? (R(), oe(w(Ue), { key: 1 }, {
          default: se(() => [
            d.icon ? (R(), oe(Ot(d.icon), { key: 0 })) : pe(d.$slots, "icon", { key: 1 })
          ]),
          _: 3
        })) : te("v-if", !0),
        d.$slots.default ? (R(), F("span", {
          key: 2,
          class: B({ [w(r).em("text", "expand")]: w(h) })
        }, [
          pe(d.$slots, "default")
        ], 2)) : te("v-if", !0)
      ]),
      _: 3
    }, 16, ["class", "style", "onClick"]));
  }
});
var sZ = /* @__PURE__ */ Ce(iZ, [["__file", "button.vue"]]);
const rZ = {
  size: y0.size,
  type: y0.type
}, oZ = Z({
  name: "ElButtonGroup"
}), lZ = /* @__PURE__ */ Z({
  ...oZ,
  props: rZ,
  setup(n) {
    const e = n;
    ht(cP, Hn({
      size: Yi(e, "size"),
      type: Yi(e, "type")
    }));
    const t = ve("button");
    return (i, s) => (R(), F("div", {
      class: B(`${w(t).b("group")}`)
    }, [
      pe(i.$slots, "default")
    ], 2));
  }
});
var hP = /* @__PURE__ */ Ce(lZ, [["__file", "button-group.vue"]]);
const w0 = Bt(sZ, {
  ButtonGroup: hP
});
Ds(hP);
var aZ = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
function Wh(n) {
  return n && n.__esModule && Object.prototype.hasOwnProperty.call(n, "default") ? n.default : n;
}
function cZ(n) {
  if (n.__esModule)
    return n;
  var e = n.default;
  if (typeof e == "function") {
    var t = function i() {
      return this instanceof i ? Reflect.construct(e, arguments, this.constructor) : e.apply(this, arguments);
    };
    t.prototype = e.prototype;
  } else
    t = {};
  return Object.defineProperty(t, "__esModule", { value: !0 }), Object.keys(n).forEach(function(i) {
    var s = Object.getOwnPropertyDescriptor(n, i);
    Object.defineProperty(t, i, s.get ? s : {
      enumerable: !0,
      get: function() {
        return n[i];
      }
    });
  }), t;
}
const no = /* @__PURE__ */ new Map();
let U1;
ot && (document.addEventListener("mousedown", (n) => U1 = n), document.addEventListener("mouseup", (n) => {
  for (const e of no.values())
    for (const { documentHandler: t } of e)
      t(n, U1);
}));
function K1(n, e) {
  let t = [];
  return Array.isArray(e.arg) ? t = e.arg : As(e.arg) && t.push(e.arg), function(i, s) {
    const r = e.instance.popperRef, o = i.target, l = s == null ? void 0 : s.target, a = !e || !e.instance, c = !o || !l, u = n.contains(o) || n.contains(l), h = n === o, f = t.length && t.some((p) => p == null ? void 0 : p.contains(o)) || t.length && t.includes(l), d = r && (r.contains(o) || r.contains(l));
    a || c || u || h || f || d || e.value(i, s);
  };
}
const Zv = {
  beforeMount(n, e) {
    no.has(n) || no.set(n, []), no.get(n).push({
      documentHandler: K1(n, e),
      bindingFn: e.value
    });
  },
  updated(n, e) {
    no.has(n) || no.set(n, []);
    const t = no.get(n), i = t.findIndex((r) => r.bindingFn === e.oldValue), s = {
      documentHandler: K1(n, e),
      bindingFn: e.value
    };
    i >= 0 ? t.splice(i, 1, s) : t.push(s);
  },
  unmounted(n) {
    no.delete(n);
  }
}, uZ = 100, hZ = 600, J1 = {
  beforeMount(n, e) {
    const t = e.value, { interval: i = uZ, delay: s = hZ } = Mt(t) ? {} : t;
    let r, o;
    const l = () => Mt(t) ? t() : t.handler(), a = () => {
      o && (clearTimeout(o), o = void 0), r && (clearInterval(r), r = void 0);
    };
    n.addEventListener("mousedown", (c) => {
      c.button === 0 && (a(), l(), document.addEventListener("mouseup", () => a(), {
        once: !0
      }), o = setTimeout(() => {
        r = setInterval(() => {
          l();
        }, i);
      }, s));
    });
  }
}, x0 = "_trap-focus-children", fl = [], ew = (n) => {
  var e;
  if (fl.length === 0)
    return;
  const t = fl[fl.length - 1][x0];
  if (t.length > 0 && n.code === jn.tab) {
    if (t.length === 1) {
      n.preventDefault(), document.activeElement !== t[0] && t[0].focus();
      return;
    }
    const i = n.shiftKey, s = n.target === t[0], r = n.target === t[t.length - 1];
    if (s && i && (n.preventDefault(), t[t.length - 1].focus()), r && !i && (n.preventDefault(), t[0].focus()), process.env.NODE_ENV === "test") {
      const o = t.indexOf(n.target);
      o !== -1 && ((e = t[i ? o - 1 : o + 1]) == null || e.focus());
    }
  }
}, fZ = {
  beforeMount(n) {
    n[x0] = o1(n), fl.push(n), fl.length <= 1 && document.addEventListener("keydown", ew);
  },
  updated(n) {
    Qe(() => {
      n[x0] = o1(n);
    });
  },
  unmounted() {
    fl.shift(), fl.length === 0 && document.removeEventListener("keydown", ew);
  }
};
var tw = !1, sl, S0, C0, ld, ad, fP, cd, k0, P0, A0, dP, E0, $0, pP, gP;
function li() {
  if (!tw) {
    tw = !0;
    var n = navigator.userAgent, e = /(?:MSIE.(\d+\.\d+))|(?:(?:Firefox|GranParadiso|Iceweasel).(\d+\.\d+))|(?:Opera(?:.+Version.|.)(\d+\.\d+))|(?:AppleWebKit.(\d+(?:\.\d+)?))|(?:Trident\/\d+\.\d+.*rv:(\d+\.\d+))/.exec(n), t = /(Mac OS X)|(Windows)|(Linux)/.exec(n);
    if (E0 = /\b(iPhone|iP[ao]d)/.exec(n), $0 = /\b(iP[ao]d)/.exec(n), A0 = /Android/i.exec(n), pP = /FBAN\/\w+;/i.exec(n), gP = /Mobile/i.exec(n), dP = !!/Win64/.exec(n), e) {
      sl = e[1] ? parseFloat(e[1]) : e[5] ? parseFloat(e[5]) : NaN, sl && document && document.documentMode && (sl = document.documentMode);
      var i = /(?:Trident\/(\d+.\d+))/.exec(n);
      fP = i ? parseFloat(i[1]) + 4 : sl, S0 = e[2] ? parseFloat(e[2]) : NaN, C0 = e[3] ? parseFloat(e[3]) : NaN, ld = e[4] ? parseFloat(e[4]) : NaN, ld ? (e = /(?:Chrome\/(\d+\.\d+))/.exec(n), ad = e && e[1] ? parseFloat(e[1]) : NaN) : ad = NaN;
    } else
      sl = S0 = C0 = ad = ld = NaN;
    if (t) {
      if (t[1]) {
        var s = /(?:Mac OS X (\d+(?:[._]\d+)?))/.exec(n);
        cd = s ? parseFloat(s[1].replace("_", ".")) : !0;
      } else
        cd = !1;
      k0 = !!t[2], P0 = !!t[3];
    } else
      cd = k0 = P0 = !1;
  }
}
var T0 = { ie: function() {
  return li() || sl;
}, ieCompatibilityMode: function() {
  return li() || fP > sl;
}, ie64: function() {
  return T0.ie() && dP;
}, firefox: function() {
  return li() || S0;
}, opera: function() {
  return li() || C0;
}, webkit: function() {
  return li() || ld;
}, safari: function() {
  return T0.webkit();
}, chrome: function() {
  return li() || ad;
}, windows: function() {
  return li() || k0;
}, osx: function() {
  return li() || cd;
}, linux: function() {
  return li() || P0;
}, iphone: function() {
  return li() || E0;
}, mobile: function() {
  return li() || E0 || $0 || A0 || gP;
}, nativeApp: function() {
  return li() || pP;
}, android: function() {
  return li() || A0;
}, ipad: function() {
  return li() || $0;
} }, dZ = T0, yf = !!(typeof window < "u" && window.document && window.document.createElement), pZ = { canUseDOM: yf, canUseWorkers: typeof Worker < "u", canUseEventListeners: yf && !!(window.addEventListener || window.attachEvent), canUseViewport: yf && !!window.screen, isInWorker: !yf }, mP = pZ, bP;
mP.canUseDOM && (bP = document.implementation && document.implementation.hasFeature && document.implementation.hasFeature("", "") !== !0);
function gZ(n, e) {
  if (!mP.canUseDOM || e && !("addEventListener" in document))
    return !1;
  var t = "on" + n, i = t in document;
  if (!i) {
    var s = document.createElement("div");
    s.setAttribute(t, "return;"), i = typeof s[t] == "function";
  }
  return !i && bP && n === "wheel" && (i = document.implementation.hasFeature("Events.wheel", "3.0")), i;
}
var mZ = gZ, nw = 10, iw = 40, sw = 800;
function vP(n) {
  var e = 0, t = 0, i = 0, s = 0;
  return "detail" in n && (t = n.detail), "wheelDelta" in n && (t = -n.wheelDelta / 120), "wheelDeltaY" in n && (t = -n.wheelDeltaY / 120), "wheelDeltaX" in n && (e = -n.wheelDeltaX / 120), "axis" in n && n.axis === n.HORIZONTAL_AXIS && (e = t, t = 0), i = e * nw, s = t * nw, "deltaY" in n && (s = n.deltaY), "deltaX" in n && (i = n.deltaX), (i || s) && n.deltaMode && (n.deltaMode == 1 ? (i *= iw, s *= iw) : (i *= sw, s *= sw)), i && !e && (e = i < 1 ? -1 : 1), s && !t && (t = s < 1 ? -1 : 1), { spinX: e, spinY: t, pixelX: i, pixelY: s };
}
vP.getEventType = function() {
  return dZ.firefox() ? "DOMMouseScroll" : mZ("wheel") ? "wheel" : "mousewheel";
};
var bZ = vP;
/**
* Checks if an event is supported in the current execution environment.
*
* NOTE: This will not work correctly for non-generic events such as `change`,
* `reset`, `load`, `error`, and `select`.
*
* Borrows from Modernizr.
*
* @param {string} eventNameSuffix Event name, e.g. "click".
* @param {?boolean} capture Check if the capture phase is supported.
* @return {boolean} True if the event is supported.
* @internal
* @license Modernizr 3.0.0pre (Custom Build) | MIT
*/
const vZ = function(n, e) {
  if (n && n.addEventListener) {
    const t = function(i) {
      const s = bZ(i);
      e && Reflect.apply(e, this, [i, s]);
    };
    n.addEventListener("wheel", t, { passive: !0 });
  }
}, yZ = {
  beforeMount(n, e) {
    vZ(n, e.value);
  }
}, yP = {
  modelValue: {
    type: [Number, String, Boolean],
    default: void 0
  },
  label: {
    type: [String, Boolean, Number, Object],
    default: void 0
  },
  indeterminate: Boolean,
  disabled: Boolean,
  checked: Boolean,
  name: {
    type: String,
    default: void 0
  },
  trueLabel: {
    type: [String, Number],
    default: void 0
  },
  falseLabel: {
    type: [String, Number],
    default: void 0
  },
  id: {
    type: String,
    default: void 0
  },
  controls: {
    type: String,
    default: void 0
  },
  border: Boolean,
  size: Ns,
  tabindex: [String, Number],
  validateEvent: {
    type: Boolean,
    default: !0
  }
}, OP = {
  [et]: (n) => pt(n) || ze(n) || Yn(n),
  change: (n) => pt(n) || ze(n) || Yn(n)
}, Tc = Symbol("checkboxGroupContextKey"), OZ = ({
  model: n,
  isChecked: e
}) => {
  const t = ye(Tc, void 0), i = _(() => {
    var r, o;
    const l = (r = t == null ? void 0 : t.max) == null ? void 0 : r.value, a = (o = t == null ? void 0 : t.min) == null ? void 0 : o.value;
    return !Li(l) && n.value.length >= l && !e.value || !Li(a) && n.value.length <= a && e.value;
  });
  return {
    isDisabled: qo(_(() => (t == null ? void 0 : t.disabled.value) || i.value)),
    isLimitDisabled: i
  };
}, wZ = (n, {
  model: e,
  isLimitExceeded: t,
  hasOwnLabel: i,
  isDisabled: s,
  isLabeledByFormItem: r
}) => {
  const o = ye(Tc, void 0), { formItem: l } = vr(), { emit: a } = qe();
  function c(p) {
    var g, m;
    return p === n.trueLabel || p === !0 ? (g = n.trueLabel) != null ? g : !0 : (m = n.falseLabel) != null ? m : !1;
  }
  function u(p, g) {
    a("change", c(p), g);
  }
  function h(p) {
    if (t.value)
      return;
    const g = p.target;
    a("change", c(g.checked), p);
  }
  async function f(p) {
    t.value || !i.value && !s.value && r.value && (p.composedPath().some((b) => b.tagName === "LABEL") || (e.value = c([!1, n.falseLabel].includes(e.value)), await Qe(), u(e.value, p)));
  }
  const d = _(() => (o == null ? void 0 : o.validateEvent) || n.validateEvent);
  return ee(() => n.modelValue, () => {
    d.value && (l == null || l.validate("change").catch((p) => rt(p)));
  }), {
    handleChange: h,
    onClickRoot: f
  };
}, xZ = (n) => {
  const e = L(!1), { emit: t } = qe(), i = ye(Tc, void 0), s = _(() => Li(i) === !1), r = L(!1), o = _({
    get() {
      var l, a;
      return s.value ? (l = i == null ? void 0 : i.modelValue) == null ? void 0 : l.value : (a = n.modelValue) != null ? a : e.value;
    },
    set(l) {
      var a, c;
      s.value && Zt(l) ? (r.value = ((a = i == null ? void 0 : i.max) == null ? void 0 : a.value) !== void 0 && l.length > (i == null ? void 0 : i.max.value) && l.length > o.value.length, r.value === !1 && ((c = i == null ? void 0 : i.changeEvent) == null || c.call(i, l))) : (t(et, l), e.value = l);
    }
  });
  return {
    model: o,
    isGroup: s,
    isLimitExceeded: r
  };
}, SZ = (n, e, { model: t }) => {
  const i = ye(Tc, void 0), s = L(!1), r = _(() => {
    const c = t.value;
    return Yn(c) ? c : Zt(c) ? Qn(n.label) ? c.map(Td).some((u) => Xn(u, n.label)) : c.map(Td).includes(n.label) : c != null ? c === n.trueLabel : !!c;
  }), o = Bi(_(() => {
    var c;
    return (c = i == null ? void 0 : i.size) == null ? void 0 : c.value;
  }), {
    prop: !0
  }), l = Bi(_(() => {
    var c;
    return (c = i == null ? void 0 : i.size) == null ? void 0 : c.value;
  })), a = _(() => !!e.default || !Ii(n.label));
  return {
    checkboxButtonSize: o,
    isChecked: r,
    isFocused: s,
    checkboxSize: l,
    hasOwnLabel: a
  };
}, CZ = (n, { model: e }) => {
  function t() {
    Zt(e.value) && !e.value.includes(n.label) ? e.value.push(n.label) : e.value = n.trueLabel || !0;
  }
  n.checked && t();
}, wP = (n, e) => {
  const { formItem: t } = vr(), { model: i, isGroup: s, isLimitExceeded: r } = xZ(n), {
    isFocused: o,
    isChecked: l,
    checkboxButtonSize: a,
    checkboxSize: c,
    hasOwnLabel: u
  } = SZ(n, e, { model: i }), { isDisabled: h } = OZ({ model: i, isChecked: l }), { inputId: f, isLabeledByFormItem: d } = Ul(n, {
    formItemContext: t,
    disableIdGeneration: u,
    disableIdManagement: s
  }), { handleChange: p, onClickRoot: g } = wZ(n, {
    model: i,
    isLimitExceeded: r,
    hasOwnLabel: u,
    isDisabled: h,
    isLabeledByFormItem: d
  });
  return CZ(n, { model: i }), {
    inputId: f,
    isLabeledByFormItem: d,
    isChecked: l,
    isDisabled: h,
    isFocused: o,
    checkboxButtonSize: a,
    checkboxSize: c,
    hasOwnLabel: u,
    model: i,
    handleChange: p,
    onClickRoot: g
  };
}, kZ = ["id", "indeterminate", "name", "tabindex", "disabled", "true-value", "false-value"], PZ = ["id", "indeterminate", "disabled", "value", "name", "tabindex"], AZ = Z({
  name: "ElCheckbox"
}), EZ = /* @__PURE__ */ Z({
  ...AZ,
  props: yP,
  emits: OP,
  setup(n) {
    const e = n, t = Zo(), {
      inputId: i,
      isLabeledByFormItem: s,
      isChecked: r,
      isDisabled: o,
      isFocused: l,
      checkboxSize: a,
      hasOwnLabel: c,
      model: u,
      handleChange: h,
      onClickRoot: f
    } = wP(e, t), d = ve("checkbox"), p = _(() => [
      d.b(),
      d.m(a.value),
      d.is("disabled", o.value),
      d.is("bordered", e.border),
      d.is("checked", r.value)
    ]), g = _(() => [
      d.e("input"),
      d.is("disabled", o.value),
      d.is("checked", r.value),
      d.is("indeterminate", e.indeterminate),
      d.is("focus", l.value)
    ]);
    return (m, b) => (R(), oe(Ot(!w(c) && w(s) ? "span" : "label"), {
      class: B(w(p)),
      "aria-controls": m.indeterminate ? m.controls : null,
      onClick: w(f)
    }, {
      default: se(() => [
        W("span", {
          class: B(w(g))
        }, [
          m.trueLabel || m.falseLabel ? tt((R(), F("input", {
            key: 0,
            id: w(i),
            "onUpdate:modelValue": b[0] || (b[0] = (y) => hr(u) ? u.value = y : null),
            class: B(w(d).e("original")),
            type: "checkbox",
            indeterminate: m.indeterminate,
            name: m.name,
            tabindex: m.tabindex,
            disabled: w(o),
            "true-value": m.trueLabel,
            "false-value": m.falseLabel,
            onChange: b[1] || (b[1] = (...y) => w(h) && w(h)(...y)),
            onFocus: b[2] || (b[2] = (y) => l.value = !0),
            onBlur: b[3] || (b[3] = (y) => l.value = !1),
            onClick: b[4] || (b[4] = ft(() => {
            }, ["stop"]))
          }, null, 42, kZ)), [
            [_d, w(u)]
          ]) : tt((R(), F("input", {
            key: 1,
            id: w(i),
            "onUpdate:modelValue": b[5] || (b[5] = (y) => hr(u) ? u.value = y : null),
            class: B(w(d).e("original")),
            type: "checkbox",
            indeterminate: m.indeterminate,
            disabled: w(o),
            value: m.label,
            name: m.name,
            tabindex: m.tabindex,
            onChange: b[6] || (b[6] = (...y) => w(h) && w(h)(...y)),
            onFocus: b[7] || (b[7] = (y) => l.value = !0),
            onBlur: b[8] || (b[8] = (y) => l.value = !1),
            onClick: b[9] || (b[9] = ft(() => {
            }, ["stop"]))
          }, null, 42, PZ)), [
            [_d, w(u)]
          ]),
          W("span", {
            class: B(w(d).e("inner"))
          }, null, 2)
        ], 2),
        w(c) ? (R(), F("span", {
          key: 0,
          class: B(w(d).e("label"))
        }, [
          pe(m.$slots, "default"),
          m.$slots.default ? te("v-if", !0) : (R(), F(sn, { key: 0 }, [
            mi(Re(m.label), 1)
          ], 64))
        ], 2)) : te("v-if", !0)
      ]),
      _: 3
    }, 8, ["class", "aria-controls", "onClick"]));
  }
});
var $Z = /* @__PURE__ */ Ce(EZ, [["__file", "checkbox.vue"]]);
const TZ = ["name", "tabindex", "disabled", "true-value", "false-value"], _Z = ["name", "tabindex", "disabled", "value"], MZ = Z({
  name: "ElCheckboxButton"
}), RZ = /* @__PURE__ */ Z({
  ...MZ,
  props: yP,
  emits: OP,
  setup(n) {
    const e = n, t = Zo(), {
      isFocused: i,
      isChecked: s,
      isDisabled: r,
      checkboxButtonSize: o,
      model: l,
      handleChange: a
    } = wP(e, t), c = ye(Tc, void 0), u = ve("checkbox"), h = _(() => {
      var d, p, g, m;
      const b = (p = (d = c == null ? void 0 : c.fill) == null ? void 0 : d.value) != null ? p : "";
      return {
        backgroundColor: b,
        borderColor: b,
        color: (m = (g = c == null ? void 0 : c.textColor) == null ? void 0 : g.value) != null ? m : "",
        boxShadow: b ? `-1px 0 0 0 ${b}` : void 0
      };
    }), f = _(() => [
      u.b("button"),
      u.bm("button", o.value),
      u.is("disabled", r.value),
      u.is("checked", s.value),
      u.is("focus", i.value)
    ]);
    return (d, p) => (R(), F("label", {
      class: B(w(f))
    }, [
      d.trueLabel || d.falseLabel ? tt((R(), F("input", {
        key: 0,
        "onUpdate:modelValue": p[0] || (p[0] = (g) => hr(l) ? l.value = g : null),
        class: B(w(u).be("button", "original")),
        type: "checkbox",
        name: d.name,
        tabindex: d.tabindex,
        disabled: w(r),
        "true-value": d.trueLabel,
        "false-value": d.falseLabel,
        onChange: p[1] || (p[1] = (...g) => w(a) && w(a)(...g)),
        onFocus: p[2] || (p[2] = (g) => i.value = !0),
        onBlur: p[3] || (p[3] = (g) => i.value = !1),
        onClick: p[4] || (p[4] = ft(() => {
        }, ["stop"]))
      }, null, 42, TZ)), [
        [_d, w(l)]
      ]) : tt((R(), F("input", {
        key: 1,
        "onUpdate:modelValue": p[5] || (p[5] = (g) => hr(l) ? l.value = g : null),
        class: B(w(u).be("button", "original")),
        type: "checkbox",
        name: d.name,
        tabindex: d.tabindex,
        disabled: w(r),
        value: d.label,
        onChange: p[6] || (p[6] = (...g) => w(a) && w(a)(...g)),
        onFocus: p[7] || (p[7] = (g) => i.value = !0),
        onBlur: p[8] || (p[8] = (g) => i.value = !1),
        onClick: p[9] || (p[9] = ft(() => {
        }, ["stop"]))
      }, null, 42, _Z)), [
        [_d, w(l)]
      ]),
      d.$slots.default || d.label ? (R(), F("span", {
        key: 2,
        class: B(w(u).be("button", "inner")),
        style: Ye(w(s) ? w(h) : void 0)
      }, [
        pe(d.$slots, "default", {}, () => [
          mi(Re(d.label), 1)
        ])
      ], 6)) : te("v-if", !0)
    ], 2));
  }
});
var xP = /* @__PURE__ */ Ce(RZ, [["__file", "checkbox-button.vue"]]);
const DZ = Ae({
  modelValue: {
    type: be(Array),
    default: () => []
  },
  disabled: Boolean,
  min: Number,
  max: Number,
  size: Ns,
  label: String,
  fill: String,
  textColor: String,
  tag: {
    type: String,
    default: "div"
  },
  validateEvent: {
    type: Boolean,
    default: !0
  }
}), LZ = {
  [et]: (n) => Zt(n),
  change: (n) => Zt(n)
}, NZ = Z({
  name: "ElCheckboxGroup"
}), IZ = /* @__PURE__ */ Z({
  ...NZ,
  props: DZ,
  emits: LZ,
  setup(n, { emit: e }) {
    const t = n, i = ve("checkbox"), { formItem: s } = vr(), { inputId: r, isLabeledByFormItem: o } = Ul(t, {
      formItemContext: s
    }), l = async (c) => {
      e(et, c), await Qe(), e("change", c);
    }, a = _({
      get() {
        return t.modelValue;
      },
      set(c) {
        l(c);
      }
    });
    return ht(Tc, {
      ...l0(zo(t), [
        "size",
        "min",
        "max",
        "disabled",
        "validateEvent",
        "fill",
        "textColor"
      ]),
      modelValue: a,
      changeEvent: l
    }), ee(() => t.modelValue, () => {
      t.validateEvent && (s == null || s.validate("change").catch((c) => rt(c)));
    }), (c, u) => {
      var h;
      return R(), oe(Ot(c.tag), {
        id: w(r),
        class: B(w(i).b("group")),
        role: "group",
        "aria-label": w(o) ? void 0 : c.label || "checkbox-group",
        "aria-labelledby": w(o) ? (h = w(s)) == null ? void 0 : h.labelId : void 0
      }, {
        default: se(() => [
          pe(c.$slots, "default")
        ]),
        _: 3
      }, 8, ["id", "class", "aria-label", "aria-labelledby"]);
    };
  }
});
var SP = /* @__PURE__ */ Ce(IZ, [["__file", "checkbox-group.vue"]]);
const Ya = Bt($Z, {
  CheckboxButton: xP,
  CheckboxGroup: SP
});
Ds(xP);
Ds(SP);
const CP = Ae({
  size: Ns,
  disabled: Boolean,
  label: {
    type: [String, Number, Boolean],
    default: ""
  }
}), QZ = Ae({
  ...CP,
  modelValue: {
    type: [String, Number, Boolean],
    default: ""
  },
  name: {
    type: String,
    default: ""
  },
  border: Boolean
}), kP = {
  [et]: (n) => pt(n) || ze(n) || Yn(n),
  [Es]: (n) => pt(n) || ze(n) || Yn(n)
}, PP = Symbol("radioGroupKey"), AP = (n, e) => {
  const t = L(), i = ye(PP, void 0), s = _(() => !!i), r = _({
    get() {
      return s.value ? i.modelValue : n.modelValue;
    },
    set(u) {
      s.value ? i.changeEvent(u) : e && e(et, u), t.value.checked = n.modelValue === n.label;
    }
  }), o = Bi(_(() => i == null ? void 0 : i.size)), l = qo(_(() => i == null ? void 0 : i.disabled)), a = L(!1), c = _(() => l.value || s.value && r.value !== n.label ? -1 : 0);
  return {
    radioRef: t,
    isGroup: s,
    radioGroup: i,
    focus: a,
    size: o,
    disabled: l,
    tabIndex: c,
    modelValue: r
  };
}, BZ = ["value", "name", "disabled"], jZ = Z({
  name: "ElRadio"
}), zZ = /* @__PURE__ */ Z({
  ...jZ,
  props: QZ,
  emits: kP,
  setup(n, { emit: e }) {
    const t = n, i = ve("radio"), { radioRef: s, radioGroup: r, focus: o, size: l, disabled: a, modelValue: c } = AP(t, e);
    function u() {
      Qe(() => e("change", c.value));
    }
    return (h, f) => {
      var d;
      return R(), F("label", {
        class: B([
          w(i).b(),
          w(i).is("disabled", w(a)),
          w(i).is("focus", w(o)),
          w(i).is("bordered", h.border),
          w(i).is("checked", w(c) === h.label),
          w(i).m(w(l))
        ])
      }, [
        W("span", {
          class: B([
            w(i).e("input"),
            w(i).is("disabled", w(a)),
            w(i).is("checked", w(c) === h.label)
          ])
        }, [
          tt(W("input", {
            ref_key: "radioRef",
            ref: s,
            "onUpdate:modelValue": f[0] || (f[0] = (p) => hr(c) ? c.value = p : null),
            class: B(w(i).e("original")),
            value: h.label,
            name: h.name || ((d = w(r)) == null ? void 0 : d.name),
            disabled: w(a),
            type: "radio",
            onFocus: f[1] || (f[1] = (p) => o.value = !0),
            onBlur: f[2] || (f[2] = (p) => o.value = !1),
            onChange: u,
            onClick: f[3] || (f[3] = ft(() => {
            }, ["stop"]))
          }, null, 42, BZ), [
            [ZC, w(c)]
          ]),
          W("span", {
            class: B(w(i).e("inner"))
          }, null, 2)
        ], 2),
        W("span", {
          class: B(w(i).e("label")),
          onKeydown: f[4] || (f[4] = ft(() => {
          }, ["stop"]))
        }, [
          pe(h.$slots, "default", {}, () => [
            mi(Re(h.label), 1)
          ])
        ], 34)
      ], 2);
    };
  }
});
var ZZ = /* @__PURE__ */ Ce(zZ, [["__file", "radio.vue"]]);
const FZ = Ae({
  ...CP,
  name: {
    type: String,
    default: ""
  }
}), VZ = ["value", "name", "disabled"], qZ = Z({
  name: "ElRadioButton"
}), WZ = /* @__PURE__ */ Z({
  ...qZ,
  props: FZ,
  setup(n) {
    const e = n, t = ve("radio"), { radioRef: i, focus: s, size: r, disabled: o, modelValue: l, radioGroup: a } = AP(e), c = _(() => ({
      backgroundColor: (a == null ? void 0 : a.fill) || "",
      borderColor: (a == null ? void 0 : a.fill) || "",
      boxShadow: a != null && a.fill ? `-1px 0 0 0 ${a.fill}` : "",
      color: (a == null ? void 0 : a.textColor) || ""
    }));
    return (u, h) => {
      var f;
      return R(), F("label", {
        class: B([
          w(t).b("button"),
          w(t).is("active", w(l) === u.label),
          w(t).is("disabled", w(o)),
          w(t).is("focus", w(s)),
          w(t).bm("button", w(r))
        ])
      }, [
        tt(W("input", {
          ref_key: "radioRef",
          ref: i,
          "onUpdate:modelValue": h[0] || (h[0] = (d) => hr(l) ? l.value = d : null),
          class: B(w(t).be("button", "original-radio")),
          value: u.label,
          type: "radio",
          name: u.name || ((f = w(a)) == null ? void 0 : f.name),
          disabled: w(o),
          onFocus: h[1] || (h[1] = (d) => s.value = !0),
          onBlur: h[2] || (h[2] = (d) => s.value = !1),
          onClick: h[3] || (h[3] = ft(() => {
          }, ["stop"]))
        }, null, 42, VZ), [
          [ZC, w(l)]
        ]),
        W("span", {
          class: B(w(t).be("button", "inner")),
          style: Ye(w(l) === u.label ? w(c) : {}),
          onKeydown: h[4] || (h[4] = ft(() => {
          }, ["stop"]))
        }, [
          pe(u.$slots, "default", {}, () => [
            mi(Re(u.label), 1)
          ])
        ], 38)
      ], 2);
    };
  }
});
var EP = /* @__PURE__ */ Ce(WZ, [["__file", "radio-button.vue"]]);
const XZ = Ae({
  id: {
    type: String,
    default: void 0
  },
  size: Ns,
  disabled: Boolean,
  modelValue: {
    type: [String, Number, Boolean],
    default: ""
  },
  fill: {
    type: String,
    default: ""
  },
  label: {
    type: String,
    default: void 0
  },
  textColor: {
    type: String,
    default: ""
  },
  name: {
    type: String,
    default: void 0
  },
  validateEvent: {
    type: Boolean,
    default: !0
  }
}), YZ = kP, HZ = ["id", "aria-label", "aria-labelledby"], GZ = Z({
  name: "ElRadioGroup"
}), UZ = /* @__PURE__ */ Z({
  ...GZ,
  props: XZ,
  emits: YZ,
  setup(n, { emit: e }) {
    const t = n, i = ve("radio"), s = pr(), r = L(), { formItem: o } = vr(), { inputId: l, isLabeledByFormItem: a } = Ul(t, {
      formItemContext: o
    }), c = (h) => {
      e(et, h), Qe(() => e("change", h));
    };
    Be(() => {
      const h = r.value.querySelectorAll("[type=radio]"), f = h[0];
      !Array.from(h).some((d) => d.checked) && f && (f.tabIndex = 0);
    });
    const u = _(() => t.name || s.value);
    return ht(PP, Hn({
      ...zo(t),
      changeEvent: c,
      name: u
    })), ee(() => t.modelValue, () => {
      t.validateEvent && (o == null || o.validate("change").catch((h) => rt(h)));
    }), (h, f) => (R(), F("div", {
      id: w(l),
      ref_key: "radioGroupRef",
      ref: r,
      class: B(w(i).b("group")),
      role: "radiogroup",
      "aria-label": w(a) ? void 0 : h.label || "radio-group",
      "aria-labelledby": w(a) ? w(o).labelId : void 0
    }, [
      pe(h.$slots, "default")
    ], 10, HZ));
  }
});
var $P = /* @__PURE__ */ Ce(UZ, [["__file", "radio-group.vue"]]);
const NZe = Bt(ZZ, {
  RadioButton: EP,
  RadioGroup: $P
}), IZe = Ds($P), QZe = Ds(EP), TP = Ae({
  type: {
    type: String,
    values: ["primary", "success", "info", "warning", "danger"],
    default: "primary"
  },
  closable: Boolean,
  disableTransitions: Boolean,
  hit: Boolean,
  color: String,
  size: {
    type: String,
    values: Hl
  },
  effect: {
    type: String,
    values: ["dark", "light", "plain"],
    default: "light"
  },
  round: Boolean
}), KZ = {
  close: (n) => n instanceof MouseEvent,
  click: (n) => n instanceof MouseEvent
}, JZ = Z({
  name: "ElTag"
}), eF = /* @__PURE__ */ Z({
  ...JZ,
  props: TP,
  emits: KZ,
  setup(n, { emit: e }) {
    const t = n, i = Bi(), s = ve("tag"), r = _(() => {
      const { type: a, hit: c, effect: u, closable: h, round: f } = t;
      return [
        s.b(),
        s.is("closable", h),
        s.m(a || "primary"),
        s.m(i.value),
        s.m(u),
        s.is("hit", c),
        s.is("round", f)
      ];
    }), o = (a) => {
      e("close", a);
    }, l = (a) => {
      e("click", a);
    };
    return (a, c) => a.disableTransitions ? (R(), F("span", {
      key: 0,
      class: B(w(r)),
      style: Ye({ backgroundColor: a.color }),
      onClick: l
    }, [
      W("span", {
        class: B(w(s).e("content"))
      }, [
        pe(a.$slots, "default")
      ], 2),
      a.closable ? (R(), oe(w(Ue), {
        key: 0,
        class: B(w(s).e("close")),
        onClick: ft(o, ["stop"])
      }, {
        default: se(() => [
          ne(w(Rl))
        ]),
        _: 1
      }, 8, ["class", "onClick"])) : te("v-if", !0)
    ], 6)) : (R(), oe(br, {
      key: 1,
      name: `${w(s).namespace.value}-zoom-in-center`,
      appear: ""
    }, {
      default: se(() => [
        W("span", {
          class: B(w(r)),
          style: Ye({ backgroundColor: a.color }),
          onClick: l
        }, [
          W("span", {
            class: B(w(s).e("content"))
          }, [
            pe(a.$slots, "default")
          ], 2),
          a.closable ? (R(), oe(w(Ue), {
            key: 0,
            class: B(w(s).e("close")),
            onClick: ft(o, ["stop"])
          }, {
            default: se(() => [
              ne(w(Rl))
            ]),
            _: 1
          }, 8, ["class", "onClick"])) : te("v-if", !0)
        ], 6)
      ]),
      _: 3
    }, 8, ["name"]));
  }
});
var tF = /* @__PURE__ */ Ce(eF, [["__file", "tag.vue"]]);
const nF = Bt(tF), rw = (n) => ze(n) || pt(n) || Zt(n), iF = Ae({
  accordion: Boolean,
  modelValue: {
    type: be([Array, String, Number]),
    default: () => Gl([])
  }
}), sF = {
  [et]: rw,
  [Es]: rw
}, _P = Symbol("collapseContextKey"), rF = (n, e) => {
  const t = L(ju(n.modelValue)), i = (r) => {
    t.value = r;
    const o = n.accordion ? t.value[0] : t.value;
    e(et, o), e(Es, o);
  }, s = (r) => {
    if (n.accordion)
      i([t.value[0] === r ? "" : r]);
    else {
      const o = [...t.value], l = o.indexOf(r);
      l > -1 ? o.splice(l, 1) : o.push(r), i(o);
    }
  };
  return ee(() => n.modelValue, () => t.value = ju(n.modelValue), { deep: !0 }), ht(_P, {
    activeNames: t,
    handleItemClick: s
  }), {
    activeNames: t,
    setActiveNames: i
  };
}, oF = () => {
  const n = ve("collapse");
  return {
    rootKls: _(() => n.b())
  };
}, lF = Z({
  name: "ElCollapse"
}), aF = /* @__PURE__ */ Z({
  ...lF,
  props: iF,
  emits: sF,
  setup(n, { expose: e, emit: t }) {
    const i = n, { activeNames: s, setActiveNames: r } = rF(i, t), { rootKls: o } = oF();
    return e({
      activeNames: s,
      setActiveNames: r
    }), (l, a) => (R(), F("div", {
      class: B(w(o))
    }, [
      pe(l.$slots, "default")
    ], 2));
  }
});
var cF = /* @__PURE__ */ Ce(aF, [["__file", "collapse.vue"]]);
const uF = Z({
  name: "ElCollapseTransition"
}), hF = /* @__PURE__ */ Z({
  ...uF,
  setup(n) {
    const e = ve("collapse-transition"), t = (s) => {
      s.style.maxHeight = "", s.style.overflow = s.dataset.oldOverflow, s.style.paddingTop = s.dataset.oldPaddingTop, s.style.paddingBottom = s.dataset.oldPaddingBottom;
    }, i = {
      beforeEnter(s) {
        s.dataset || (s.dataset = {}), s.dataset.oldPaddingTop = s.style.paddingTop, s.dataset.oldPaddingBottom = s.style.paddingBottom, s.style.height && (s.dataset.elExistsHeight = s.style.height), s.style.maxHeight = 0, s.style.paddingTop = 0, s.style.paddingBottom = 0;
      },
      enter(s) {
        requestAnimationFrame(() => {
          s.dataset.oldOverflow = s.style.overflow, s.dataset.elExistsHeight ? s.style.maxHeight = s.dataset.elExistsHeight : s.scrollHeight !== 0 ? s.style.maxHeight = `${s.scrollHeight}px` : s.style.maxHeight = 0, s.style.paddingTop = s.dataset.oldPaddingTop, s.style.paddingBottom = s.dataset.oldPaddingBottom, s.style.overflow = "hidden";
        });
      },
      afterEnter(s) {
        s.style.maxHeight = "", s.style.overflow = s.dataset.oldOverflow;
      },
      enterCancelled(s) {
        t(s);
      },
      beforeLeave(s) {
        s.dataset || (s.dataset = {}), s.dataset.oldPaddingTop = s.style.paddingTop, s.dataset.oldPaddingBottom = s.style.paddingBottom, s.dataset.oldOverflow = s.style.overflow, s.style.maxHeight = `${s.scrollHeight}px`, s.style.overflow = "hidden";
      },
      leave(s) {
        s.scrollHeight !== 0 && (s.style.maxHeight = 0, s.style.paddingTop = 0, s.style.paddingBottom = 0);
      },
      afterLeave(s) {
        t(s);
      },
      leaveCancelled(s) {
        t(s);
      }
    };
    return (s, r) => (R(), oe(br, Gi({
      name: w(e).b()
    }, lR(i)), {
      default: se(() => [
        pe(s.$slots, "default")
      ]),
      _: 3
    }, 16, ["name"]));
  }
});
var ud = /* @__PURE__ */ Ce(hF, [["__file", "collapse-transition.vue"]]);
ud.install = (n) => {
  n.component(ud.name, ud);
};
const fF = ud, dF = Ae({
  title: {
    type: String,
    default: ""
  },
  name: {
    type: be([String, Number]),
    default: void 0
  },
  disabled: Boolean
}), pF = (n) => {
  const e = ye(_P), { namespace: t } = ve("collapse"), i = L(!1), s = L(!1), r = Mv(), o = _(() => r.current++), l = _(() => {
    var f;
    return (f = n.name) != null ? f : `${t.value}-id-${r.prefix}-${w(o)}`;
  }), a = _(() => e == null ? void 0 : e.activeNames.value.includes(w(l)));
  return {
    focusing: i,
    id: o,
    isActive: a,
    handleFocus: () => {
      setTimeout(() => {
        s.value ? s.value = !1 : i.value = !0;
      }, 50);
    },
    handleHeaderClick: () => {
      n.disabled || (e == null || e.handleItemClick(w(l)), i.value = !1, s.value = !0);
    },
    handleEnterClick: () => {
      e == null || e.handleItemClick(w(l));
    }
  };
}, gF = (n, { focusing: e, isActive: t, id: i }) => {
  const s = ve("collapse"), r = _(() => [
    s.b("item"),
    s.is("active", w(t)),
    s.is("disabled", n.disabled)
  ]), o = _(() => [
    s.be("item", "header"),
    s.is("active", w(t)),
    { focusing: w(e) && !n.disabled }
  ]), l = _(() => [
    s.be("item", "arrow"),
    s.is("active", w(t))
  ]), a = _(() => s.be("item", "wrap")), c = _(() => s.be("item", "content")), u = _(() => s.b(`content-${w(i)}`)), h = _(() => s.b(`head-${w(i)}`));
  return {
    arrowKls: l,
    headKls: o,
    rootKls: r,
    itemWrapperKls: a,
    itemContentKls: c,
    scopedContentId: u,
    scopedHeadId: h
  };
}, mF = ["id", "aria-expanded", "aria-controls", "aria-describedby", "tabindex"], bF = ["id", "aria-hidden", "aria-labelledby"], vF = Z({
  name: "ElCollapseItem"
}), yF = /* @__PURE__ */ Z({
  ...vF,
  props: dF,
  setup(n, { expose: e }) {
    const t = n, {
      focusing: i,
      id: s,
      isActive: r,
      handleFocus: o,
      handleHeaderClick: l,
      handleEnterClick: a
    } = pF(t), {
      arrowKls: c,
      headKls: u,
      rootKls: h,
      itemWrapperKls: f,
      itemContentKls: d,
      scopedContentId: p,
      scopedHeadId: g
    } = gF(t, { focusing: i, isActive: r, id: s });
    return e({
      isActive: r
    }), (m, b) => (R(), F("div", {
      class: B(w(h))
    }, [
      W("button", {
        id: w(g),
        class: B(w(u)),
        "aria-expanded": w(r),
        "aria-controls": w(p),
        "aria-describedby": w(p),
        tabindex: m.disabled ? -1 : 0,
        type: "button",
        onClick: b[0] || (b[0] = (...y) => w(l) && w(l)(...y)),
        onKeydown: b[1] || (b[1] = On(ft((...y) => w(a) && w(a)(...y), ["stop", "prevent"]), ["space", "enter"])),
        onFocus: b[2] || (b[2] = (...y) => w(o) && w(o)(...y)),
        onBlur: b[3] || (b[3] = (y) => i.value = !1)
      }, [
        pe(m.$slots, "title", {}, () => [
          mi(Re(m.title), 1)
        ]),
        ne(w(Ue), {
          class: B(w(c))
        }, {
          default: se(() => [
            ne(w(Qh))
          ]),
          _: 1
        }, 8, ["class"])
      ], 42, mF),
      ne(w(fF), null, {
        default: se(() => [
          tt(W("div", {
            id: w(p),
            role: "region",
            class: B(w(f)),
            "aria-hidden": !w(r),
            "aria-labelledby": w(g)
          }, [
            W("div", {
              class: B(w(d))
            }, [
              pe(m.$slots, "default")
            ], 2)
          ], 10, bF), [
            [Ht, w(r)]
          ])
        ]),
        _: 3
      })
    ], 2));
  }
});
var MP = /* @__PURE__ */ Ce(yF, [["__file", "collapse-item.vue"]]);
const BZe = Bt(cF, {
  CollapseItem: MP
}), jZe = Ds(MP), OF = Ae({
  color: {
    type: be(Object),
    required: !0
  },
  vertical: {
    type: Boolean,
    default: !1
  }
});
let Jg = !1;
function Yu(n, e) {
  if (!ot)
    return;
  const t = function(r) {
    var o;
    (o = e.drag) == null || o.call(e, r);
  }, i = function(r) {
    var o;
    document.removeEventListener("mousemove", t), document.removeEventListener("mouseup", i), document.removeEventListener("touchmove", t), document.removeEventListener("touchend", i), document.onselectstart = null, document.ondragstart = null, Jg = !1, (o = e.end) == null || o.call(e, r);
  }, s = function(r) {
    var o;
    Jg || (r.preventDefault(), document.onselectstart = () => !1, document.ondragstart = () => !1, document.addEventListener("mousemove", t), document.addEventListener("mouseup", i), document.addEventListener("touchmove", t), document.addEventListener("touchend", i), Jg = !0, (o = e.start) == null || o.call(e, r));
  };
  n.addEventListener("mousedown", s), n.addEventListener("touchstart", s);
}
const wF = (n) => {
  const e = qe(), t = gi(), i = gi();
  function s(o) {
    o.target !== t.value && r(o);
  }
  function r(o) {
    if (!i.value || !t.value)
      return;
    const a = e.vnode.el.getBoundingClientRect(), { clientX: c, clientY: u } = wv(o);
    if (n.vertical) {
      let h = u - a.top;
      h = Math.max(t.value.offsetHeight / 2, h), h = Math.min(h, a.height - t.value.offsetHeight / 2), n.color.set("alpha", Math.round((h - t.value.offsetHeight / 2) / (a.height - t.value.offsetHeight) * 100));
    } else {
      let h = c - a.left;
      h = Math.max(t.value.offsetWidth / 2, h), h = Math.min(h, a.width - t.value.offsetWidth / 2), n.color.set("alpha", Math.round((h - t.value.offsetWidth / 2) / (a.width - t.value.offsetWidth) * 100));
    }
  }
  return {
    thumb: t,
    bar: i,
    handleDrag: r,
    handleClick: s
  };
}, xF = (n, {
  bar: e,
  thumb: t,
  handleDrag: i
}) => {
  const s = qe(), r = ve("color-alpha-slider"), o = L(0), l = L(0), a = L();
  function c() {
    if (!t.value || n.vertical)
      return 0;
    const y = s.vnode.el, v = n.color.get("alpha");
    return y ? Math.round(v * (y.offsetWidth - t.value.offsetWidth / 2) / 100) : 0;
  }
  function u() {
    if (!t.value)
      return 0;
    const y = s.vnode.el;
    if (!n.vertical)
      return 0;
    const v = n.color.get("alpha");
    return y ? Math.round(v * (y.offsetHeight - t.value.offsetHeight / 2) / 100) : 0;
  }
  function h() {
    if (n.color && n.color.value) {
      const { r: y, g: v, b: O } = n.color.toRgb();
      return `linear-gradient(to right, rgba(${y}, ${v}, ${O}, 0) 0%, rgba(${y}, ${v}, ${O}, 1) 100%)`;
    }
    return "";
  }
  function f() {
    o.value = c(), l.value = u(), a.value = h();
  }
  Be(() => {
    if (!e.value || !t.value)
      return;
    const y = {
      drag: (v) => {
        i(v);
      },
      end: (v) => {
        i(v);
      }
    };
    Yu(e.value, y), Yu(t.value, y), f();
  }), ee(() => n.color.get("alpha"), () => f()), ee(() => n.color.value, () => f());
  const d = _(() => [r.b(), r.is("vertical", n.vertical)]), p = _(() => r.e("bar")), g = _(() => r.e("thumb")), m = _(() => ({ background: a.value })), b = _(() => ({
    left: Qi(o.value),
    top: Qi(l.value)
  }));
  return { rootKls: d, barKls: p, barStyle: m, thumbKls: g, thumbStyle: b, update: f };
}, SF = "ElColorAlphaSlider", CF = Z({
  name: SF
}), kF = /* @__PURE__ */ Z({
  ...CF,
  props: OF,
  setup(n, { expose: e }) {
    const t = n, { bar: i, thumb: s, handleDrag: r, handleClick: o } = wF(t), { rootKls: l, barKls: a, barStyle: c, thumbKls: u, thumbStyle: h, update: f } = xF(t, {
      bar: i,
      thumb: s,
      handleDrag: r
    });
    return e({
      update: f,
      bar: i,
      thumb: s
    }), (d, p) => (R(), F("div", {
      class: B(w(l))
    }, [
      W("div", {
        ref_key: "bar",
        ref: i,
        class: B(w(a)),
        style: Ye(w(c)),
        onClick: p[0] || (p[0] = (...g) => w(o) && w(o)(...g))
      }, null, 6),
      W("div", {
        ref_key: "thumb",
        ref: s,
        class: B(w(u)),
        style: Ye(w(h))
      }, null, 6)
    ], 2));
  }
});
var PF = /* @__PURE__ */ Ce(kF, [["__file", "alpha-slider.vue"]]);
const AF = Z({
  name: "ElColorHueSlider",
  props: {
    color: {
      type: Object,
      required: !0
    },
    vertical: Boolean
  },
  setup(n) {
    const e = ve("color-hue-slider"), t = qe(), i = L(), s = L(), r = L(0), o = L(0), l = _(() => n.color.get("hue"));
    ee(() => l.value, () => {
      f();
    });
    function a(d) {
      d.target !== i.value && c(d);
    }
    function c(d) {
      if (!s.value || !i.value)
        return;
      const g = t.vnode.el.getBoundingClientRect(), { clientX: m, clientY: b } = wv(d);
      let y;
      if (n.vertical) {
        let v = b - g.top;
        v = Math.min(v, g.height - i.value.offsetHeight / 2), v = Math.max(i.value.offsetHeight / 2, v), y = Math.round((v - i.value.offsetHeight / 2) / (g.height - i.value.offsetHeight) * 360);
      } else {
        let v = m - g.left;
        v = Math.min(v, g.width - i.value.offsetWidth / 2), v = Math.max(i.value.offsetWidth / 2, v), y = Math.round((v - i.value.offsetWidth / 2) / (g.width - i.value.offsetWidth) * 360);
      }
      n.color.set("hue", y);
    }
    function u() {
      if (!i.value)
        return 0;
      const d = t.vnode.el;
      if (n.vertical)
        return 0;
      const p = n.color.get("hue");
      return d ? Math.round(p * (d.offsetWidth - i.value.offsetWidth / 2) / 360) : 0;
    }
    function h() {
      if (!i.value)
        return 0;
      const d = t.vnode.el;
      if (!n.vertical)
        return 0;
      const p = n.color.get("hue");
      return d ? Math.round(p * (d.offsetHeight - i.value.offsetHeight / 2) / 360) : 0;
    }
    function f() {
      r.value = u(), o.value = h();
    }
    return Be(() => {
      if (!s.value || !i.value)
        return;
      const d = {
        drag: (p) => {
          c(p);
        },
        end: (p) => {
          c(p);
        }
      };
      Yu(s.value, d), Yu(i.value, d), f();
    }), {
      bar: s,
      thumb: i,
      thumbLeft: r,
      thumbTop: o,
      hueValue: l,
      handleClick: a,
      update: f,
      ns: e
    };
  }
});
function EF(n, e, t, i, s, r) {
  return R(), F("div", {
    class: B([n.ns.b(), n.ns.is("vertical", n.vertical)])
  }, [
    W("div", {
      ref: "bar",
      class: B(n.ns.e("bar")),
      onClick: e[0] || (e[0] = (...o) => n.handleClick && n.handleClick(...o))
    }, null, 2),
    W("div", {
      ref: "thumb",
      class: B(n.ns.e("thumb")),
      style: Ye({
        left: n.thumbLeft + "px",
        top: n.thumbTop + "px"
      })
    }, null, 6)
  ], 2);
}
var $F = /* @__PURE__ */ Ce(AF, [["render", EF], ["__file", "hue-slider.vue"]]);
const TF = Ae({
  modelValue: String,
  id: String,
  showAlpha: Boolean,
  colorFormat: String,
  disabled: Boolean,
  size: Ns,
  popperClass: {
    type: String,
    default: ""
  },
  label: {
    type: String,
    default: void 0
  },
  tabindex: {
    type: [String, Number],
    default: 0
  },
  predefine: {
    type: be(Array)
  },
  validateEvent: {
    type: Boolean,
    default: !0
  }
}), _F = {
  [et]: (n) => pt(n) || Ii(n),
  [Es]: (n) => pt(n) || Ii(n),
  activeChange: (n) => pt(n) || Ii(n),
  focus: (n) => n instanceof FocusEvent,
  blur: (n) => n instanceof FocusEvent
}, RP = Symbol("colorPickerContextKey"), ow = function(n, e, t) {
  return [
    n,
    e * t / ((n = (2 - e) * t) < 1 ? n : 2 - n) || 0,
    n / 2
  ];
}, MF = function(n) {
  return typeof n == "string" && n.includes(".") && Number.parseFloat(n) === 1;
}, RF = function(n) {
  return typeof n == "string" && n.includes("%");
}, xa = function(n, e) {
  MF(n) && (n = "100%");
  const t = RF(n);
  return n = Math.min(e, Math.max(0, Number.parseFloat(`${n}`))), t && (n = Number.parseInt(`${n * e}`, 10) / 100), Math.abs(n - e) < 1e-6 ? 1 : n % e / Number.parseFloat(e);
}, lw = {
  10: "A",
  11: "B",
  12: "C",
  13: "D",
  14: "E",
  15: "F"
}, hd = (n) => {
  n = Math.min(Math.round(n), 255);
  const e = Math.floor(n / 16), t = n % 16;
  return `${lw[e] || e}${lw[t] || t}`;
}, aw = function({ r: n, g: e, b: t }) {
  return Number.isNaN(+n) || Number.isNaN(+e) || Number.isNaN(+t) ? "" : `#${hd(n)}${hd(e)}${hd(t)}`;
}, em = {
  A: 10,
  B: 11,
  C: 12,
  D: 13,
  E: 14,
  F: 15
}, Jo = function(n) {
  return n.length === 2 ? (em[n[0].toUpperCase()] || +n[0]) * 16 + (em[n[1].toUpperCase()] || +n[1]) : em[n[1].toUpperCase()] || +n[1];
}, DF = function(n, e, t) {
  e = e / 100, t = t / 100;
  let i = e;
  const s = Math.max(t, 0.01);
  t *= 2, e *= t <= 1 ? t : 2 - t, i *= s <= 1 ? s : 2 - s;
  const r = (t + e) / 2, o = t === 0 ? 2 * i / (s + i) : 2 * e / (t + e);
  return {
    h: n,
    s: o * 100,
    v: r * 100
  };
}, cw = (n, e, t) => {
  n = xa(n, 255), e = xa(e, 255), t = xa(t, 255);
  const i = Math.max(n, e, t), s = Math.min(n, e, t);
  let r;
  const o = i, l = i - s, a = i === 0 ? 0 : l / i;
  if (i === s)
    r = 0;
  else {
    switch (i) {
      case n: {
        r = (e - t) / l + (e < t ? 6 : 0);
        break;
      }
      case e: {
        r = (t - n) / l + 2;
        break;
      }
      case t: {
        r = (n - e) / l + 4;
        break;
      }
    }
    r /= 6;
  }
  return { h: r * 360, s: a * 100, v: o * 100 };
}, Xc = function(n, e, t) {
  n = xa(n, 360) * 6, e = xa(e, 100), t = xa(t, 100);
  const i = Math.floor(n), s = n - i, r = t * (1 - e), o = t * (1 - s * e), l = t * (1 - (1 - s) * e), a = i % 6, c = [t, o, r, r, l, t][a], u = [l, t, t, o, r, r][a], h = [r, r, l, t, t, o][a];
  return {
    r: Math.round(c * 255),
    g: Math.round(u * 255),
    b: Math.round(h * 255)
  };
};
let yu = class {
  constructor(e = {}) {
    this._hue = 0, this._saturation = 100, this._value = 100, this._alpha = 100, this.enableAlpha = !1, this.format = "hex", this.value = "";
    for (const t in e)
      Ps(e, t) && (this[t] = e[t]);
    e.value ? this.fromString(e.value) : this.doOnChange();
  }
  set(e, t) {
    if (arguments.length === 1 && typeof e == "object") {
      for (const i in e)
        Ps(e, i) && this.set(i, e[i]);
      return;
    }
    this[`_${e}`] = t, this.doOnChange();
  }
  get(e) {
    return e === "alpha" ? Math.floor(this[`_${e}`]) : this[`_${e}`];
  }
  toRgb() {
    return Xc(this._hue, this._saturation, this._value);
  }
  fromString(e) {
    if (!e) {
      this._hue = 0, this._saturation = 100, this._value = 100, this.doOnChange();
      return;
    }
    const t = (i, s, r) => {
      this._hue = Math.max(0, Math.min(360, i)), this._saturation = Math.max(0, Math.min(100, s)), this._value = Math.max(0, Math.min(100, r)), this.doOnChange();
    };
    if (e.includes("hsl")) {
      const i = e.replace(/hsla|hsl|\(|\)/gm, "").split(/\s|,/g).filter((s) => s !== "").map((s, r) => r > 2 ? Number.parseFloat(s) : Number.parseInt(s, 10));
      if (i.length === 4 ? this._alpha = Number.parseFloat(i[3]) * 100 : i.length === 3 && (this._alpha = 100), i.length >= 3) {
        const { h: s, s: r, v: o } = DF(i[0], i[1], i[2]);
        t(s, r, o);
      }
    } else if (e.includes("hsv")) {
      const i = e.replace(/hsva|hsv|\(|\)/gm, "").split(/\s|,/g).filter((s) => s !== "").map((s, r) => r > 2 ? Number.parseFloat(s) : Number.parseInt(s, 10));
      i.length === 4 ? this._alpha = Number.parseFloat(i[3]) * 100 : i.length === 3 && (this._alpha = 100), i.length >= 3 && t(i[0], i[1], i[2]);
    } else if (e.includes("rgb")) {
      const i = e.replace(/rgba|rgb|\(|\)/gm, "").split(/\s|,/g).filter((s) => s !== "").map((s, r) => r > 2 ? Number.parseFloat(s) : Number.parseInt(s, 10));
      if (i.length === 4 ? this._alpha = Number.parseFloat(i[3]) * 100 : i.length === 3 && (this._alpha = 100), i.length >= 3) {
        const { h: s, s: r, v: o } = cw(i[0], i[1], i[2]);
        t(s, r, o);
      }
    } else if (e.includes("#")) {
      const i = e.replace("#", "").trim();
      if (!/^[0-9a-fA-F]{3}$|^[0-9a-fA-F]{6}$|^[0-9a-fA-F]{8}$/.test(i))
        return;
      let s, r, o;
      i.length === 3 ? (s = Jo(i[0] + i[0]), r = Jo(i[1] + i[1]), o = Jo(i[2] + i[2])) : (i.length === 6 || i.length === 8) && (s = Jo(i.slice(0, 2)), r = Jo(i.slice(2, 4)), o = Jo(i.slice(4, 6))), i.length === 8 ? this._alpha = Jo(i.slice(6)) / 255 * 100 : (i.length === 3 || i.length === 6) && (this._alpha = 100);
      const { h: l, s: a, v: c } = cw(s, r, o);
      t(l, a, c);
    }
  }
  compare(e) {
    return Math.abs(e._hue - this._hue) < 2 && Math.abs(e._saturation - this._saturation) < 1 && Math.abs(e._value - this._value) < 1 && Math.abs(e._alpha - this._alpha) < 1;
  }
  doOnChange() {
    const { _hue: e, _saturation: t, _value: i, _alpha: s, format: r } = this;
    if (this.enableAlpha)
      switch (r) {
        case "hsl": {
          const o = ow(e, t / 100, i / 100);
          this.value = `hsla(${e}, ${Math.round(o[1] * 100)}%, ${Math.round(o[2] * 100)}%, ${this.get("alpha") / 100})`;
          break;
        }
        case "hsv": {
          this.value = `hsva(${e}, ${Math.round(t)}%, ${Math.round(i)}%, ${this.get("alpha") / 100})`;
          break;
        }
        case "hex": {
          this.value = `${aw(Xc(e, t, i))}${hd(s * 255 / 100)}`;
          break;
        }
        default: {
          const { r: o, g: l, b: a } = Xc(e, t, i);
          this.value = `rgba(${o}, ${l}, ${a}, ${this.get("alpha") / 100})`;
        }
      }
    else
      switch (r) {
        case "hsl": {
          const o = ow(e, t / 100, i / 100);
          this.value = `hsl(${e}, ${Math.round(o[1] * 100)}%, ${Math.round(o[2] * 100)}%)`;
          break;
        }
        case "hsv": {
          this.value = `hsv(${e}, ${Math.round(t)}%, ${Math.round(i)}%)`;
          break;
        }
        case "rgb": {
          const { r: o, g: l, b: a } = Xc(e, t, i);
          this.value = `rgb(${o}, ${l}, ${a})`;
          break;
        }
        default:
          this.value = aw(Xc(e, t, i));
      }
  }
};
const LF = Z({
  props: {
    colors: {
      type: Array,
      required: !0
    },
    color: {
      type: Object,
      required: !0
    }
  },
  setup(n) {
    const e = ve("color-predefine"), { currentColor: t } = ye(RP), i = L(r(n.colors, n.color));
    ee(() => t.value, (o) => {
      const l = new yu();
      l.fromString(o), i.value.forEach((a) => {
        a.selected = l.compare(a);
      });
    }), sr(() => {
      i.value = r(n.colors, n.color);
    });
    function s(o) {
      n.color.fromString(n.colors[o]);
    }
    function r(o, l) {
      return o.map((a) => {
        const c = new yu();
        return c.enableAlpha = !0, c.format = "rgba", c.fromString(a), c.selected = c.value === l.value, c;
      });
    }
    return {
      rgbaColors: i,
      handleSelect: s,
      ns: e
    };
  }
}), NF = ["onClick"];
function IF(n, e, t, i, s, r) {
  return R(), F("div", {
    class: B(n.ns.b())
  }, [
    W("div", {
      class: B(n.ns.e("colors"))
    }, [
      (R(!0), F(sn, null, Tl(n.rgbaColors, (o, l) => (R(), F("div", {
        key: n.colors[l],
        class: B([
          n.ns.e("color-selector"),
          n.ns.is("alpha", o._alpha < 100),
          { selected: o.selected }
        ]),
        onClick: (a) => n.handleSelect(l)
      }, [
        W("div", {
          style: Ye({ backgroundColor: o.value })
        }, null, 4)
      ], 10, NF))), 128))
    ], 2)
  ], 2);
}
var QF = /* @__PURE__ */ Ce(LF, [["render", IF], ["__file", "predefine.vue"]]);
const BF = Z({
  name: "ElSlPanel",
  props: {
    color: {
      type: Object,
      required: !0
    }
  },
  setup(n) {
    const e = ve("color-svpanel"), t = qe(), i = L(0), s = L(0), r = L("hsl(0, 100%, 50%)"), o = _(() => {
      const c = n.color.get("hue"), u = n.color.get("value");
      return { hue: c, value: u };
    });
    function l() {
      const c = n.color.get("saturation"), u = n.color.get("value"), h = t.vnode.el, { clientWidth: f, clientHeight: d } = h;
      s.value = c * f / 100, i.value = (100 - u) * d / 100, r.value = `hsl(${n.color.get("hue")}, 100%, 50%)`;
    }
    function a(c) {
      const h = t.vnode.el.getBoundingClientRect(), { clientX: f, clientY: d } = wv(c);
      let p = f - h.left, g = d - h.top;
      p = Math.max(0, p), p = Math.min(p, h.width), g = Math.max(0, g), g = Math.min(g, h.height), s.value = p, i.value = g, n.color.set({
        saturation: p / h.width * 100,
        value: 100 - g / h.height * 100
      });
    }
    return ee(() => o.value, () => {
      l();
    }), Be(() => {
      Yu(t.vnode.el, {
        drag: (c) => {
          a(c);
        },
        end: (c) => {
          a(c);
        }
      }), l();
    }), {
      cursorTop: i,
      cursorLeft: s,
      background: r,
      colorValue: o,
      handleDrag: a,
      update: l,
      ns: e
    };
  }
}), jF = /* @__PURE__ */ W("div", null, null, -1), zF = [
  jF
];
function ZF(n, e, t, i, s, r) {
  return R(), F("div", {
    class: B(n.ns.b()),
    style: Ye({
      backgroundColor: n.background
    })
  }, [
    W("div", {
      class: B(n.ns.e("white"))
    }, null, 2),
    W("div", {
      class: B(n.ns.e("black"))
    }, null, 2),
    W("div", {
      class: B(n.ns.e("cursor")),
      style: Ye({
        top: n.cursorTop + "px",
        left: n.cursorLeft + "px"
      })
    }, zF, 6)
  ], 6);
}
var FF = /* @__PURE__ */ Ce(BF, [["render", ZF], ["__file", "sv-panel.vue"]]);
const VF = ["onKeydown"], qF = ["id", "aria-label", "aria-labelledby", "aria-description", "aria-disabled", "tabindex"], WF = Z({
  name: "ElColorPicker"
}), XF = /* @__PURE__ */ Z({
  ...WF,
  props: TF,
  emits: _F,
  setup(n, { expose: e, emit: t }) {
    const i = n, { t: s } = ni(), r = ve("color"), { formItem: o } = vr(), l = Bi(), a = qo(), { inputId: c, isLabeledByFormItem: u } = Ul(i, {
      formItemContext: o
    }), h = L(), f = L(), d = L(), p = L(), g = L(), m = L(), {
      isFocused: b,
      handleFocus: y,
      handleBlur: v
    } = Dv(g, {
      beforeBlur(ae) {
        var $e;
        return ($e = p.value) == null ? void 0 : $e.isFocusInsideContent(ae);
      },
      afterBlur() {
        A(!1), q();
      }
    }), O = (ae) => {
      if (a.value)
        return Ne();
      y(ae);
    };
    let x = !0;
    const S = Hn(new yu({
      enableAlpha: i.showAlpha,
      format: i.colorFormat || "",
      value: i.modelValue
    })), C = L(!1), k = L(!1), E = L(""), $ = _(() => !i.modelValue && !k.value ? "transparent" : P(S, i.showAlpha)), T = _(() => !i.modelValue && !k.value ? "" : S.value), M = _(() => u.value ? void 0 : i.label || s("el.colorpicker.defaultLabel")), j = _(() => u.value ? o == null ? void 0 : o.labelId : void 0), D = _(() => [
      r.b("picker"),
      r.is("disabled", a.value),
      r.bm("picker", l.value),
      r.is("focused", b.value)
    ]);
    function P(ae, $e) {
      if (!(ae instanceof yu))
        throw new TypeError("color should be instance of _color Class");
      const { r: lt, g: En, b: ii } = ae.toRgb();
      return $e ? `rgba(${lt}, ${En}, ${ii}, ${ae.get("alpha") / 100})` : `rgb(${lt}, ${En}, ${ii})`;
    }
    function A(ae) {
      C.value = ae;
    }
    const Q = Ml(A, 100, { leading: !0 });
    function X() {
      a.value || A(!0);
    }
    function z() {
      Q(!1), q();
    }
    function q() {
      Qe(() => {
        i.modelValue ? S.fromString(i.modelValue) : (S.value = "", Qe(() => {
          k.value = !1;
        }));
      });
    }
    function re() {
      a.value || Q(!C.value);
    }
    function H() {
      S.fromString(E.value);
    }
    function G() {
      const ae = S.value;
      t(et, ae), t("change", ae), i.validateEvent && (o == null || o.validate("change").catch(($e) => rt($e))), Q(!1), Qe(() => {
        const $e = new yu({
          enableAlpha: i.showAlpha,
          format: i.colorFormat || "",
          value: i.modelValue
        });
        S.compare($e) || q();
      });
    }
    function U() {
      Q(!1), t(et, null), t("change", null), i.modelValue !== null && i.validateEvent && (o == null || o.validate("change").catch((ae) => rt(ae))), q();
    }
    function le(ae) {
      if (C.value && (z(), b.value)) {
        const $e = new FocusEvent("focus", ae);
        v($e);
      }
    }
    function ce(ae) {
      ae.preventDefault(), ae.stopPropagation(), A(!1), q();
    }
    function K(ae) {
      switch (ae.code) {
        case jn.enter:
        case jn.space:
          ae.preventDefault(), ae.stopPropagation(), X(), m.value.focus();
          break;
        case jn.esc:
          ce(ae);
          break;
      }
    }
    function he() {
      g.value.focus();
    }
    function Ne() {
      g.value.blur();
    }
    return Be(() => {
      i.modelValue && (E.value = T.value);
    }), ee(() => i.modelValue, (ae) => {
      ae ? ae && ae !== S.value && (x = !1, S.fromString(ae)) : k.value = !1;
    }), ee(() => T.value, (ae) => {
      E.value = ae, x && t("activeChange", ae), x = !0;
    }), ee(() => S.value, () => {
      !i.modelValue && !k.value && (k.value = !0);
    }), ee(() => C.value, () => {
      Qe(() => {
        var ae, $e, lt;
        (ae = h.value) == null || ae.update(), ($e = f.value) == null || $e.update(), (lt = d.value) == null || lt.update();
      });
    }), ht(RP, {
      currentColor: T
    }), e({
      color: S,
      show: X,
      hide: z,
      focus: he,
      blur: Ne
    }), (ae, $e) => (R(), oe(w(qh), {
      ref_key: "popper",
      ref: p,
      visible: C.value,
      "show-arrow": !1,
      "fallback-placements": ["bottom", "top", "right", "left"],
      offset: 0,
      "gpu-acceleration": !1,
      "popper-class": [w(r).be("picker", "panel"), w(r).b("dropdown"), ae.popperClass],
      "stop-popper-mouse-event": !1,
      effect: "light",
      trigger: "click",
      transition: `${w(r).namespace.value}-zoom-in-top`,
      persistent: "",
      onHide: $e[2] || ($e[2] = (lt) => A(!1))
    }, {
      content: se(() => [
        tt((R(), F("div", {
          onKeydown: On(ce, ["esc"])
        }, [
          W("div", {
            class: B(w(r).be("dropdown", "main-wrapper"))
          }, [
            ne($F, {
              ref_key: "hue",
              ref: h,
              class: "hue-slider",
              color: w(S),
              vertical: ""
            }, null, 8, ["color"]),
            ne(FF, {
              ref_key: "sv",
              ref: f,
              color: w(S)
            }, null, 8, ["color"])
          ], 2),
          ae.showAlpha ? (R(), oe(PF, {
            key: 0,
            ref_key: "alpha",
            ref: d,
            color: w(S)
          }, null, 8, ["color"])) : te("v-if", !0),
          ae.predefine ? (R(), oe(QF, {
            key: 1,
            ref: "predefine",
            color: w(S),
            colors: ae.predefine
          }, null, 8, ["color", "colors"])) : te("v-if", !0),
          W("div", {
            class: B(w(r).be("dropdown", "btns"))
          }, [
            W("span", {
              class: B(w(r).be("dropdown", "value"))
            }, [
              ne(w(Vh), {
                ref_key: "inputRef",
                ref: m,
                modelValue: E.value,
                "onUpdate:modelValue": $e[0] || ($e[0] = (lt) => E.value = lt),
                "validate-event": !1,
                size: "small",
                onKeyup: On(H, ["enter"]),
                onBlur: H
              }, null, 8, ["modelValue", "onKeyup"])
            ], 2),
            ne(w(w0), {
              class: B(w(r).be("dropdown", "link-btn")),
              text: "",
              size: "small",
              onClick: U
            }, {
              default: se(() => [
                mi(Re(w(s)("el.colorpicker.clear")), 1)
              ]),
              _: 1
            }, 8, ["class"]),
            ne(w(w0), {
              plain: "",
              size: "small",
              class: B(w(r).be("dropdown", "btn")),
              onClick: G
            }, {
              default: se(() => [
                mi(Re(w(s)("el.colorpicker.confirm")), 1)
              ]),
              _: 1
            }, 8, ["class"])
          ], 2)
        ], 40, VF)), [
          [w(Zv), le]
        ])
      ]),
      default: se(() => [
        W("div", {
          id: w(c),
          ref_key: "triggerRef",
          ref: g,
          class: B(w(D)),
          role: "button",
          "aria-label": w(M),
          "aria-labelledby": w(j),
          "aria-description": w(s)("el.colorpicker.description", { color: ae.modelValue || "" }),
          "aria-disabled": w(a),
          tabindex: w(a) ? -1 : ae.tabindex,
          onKeydown: K,
          onFocus: O,
          onBlur: $e[1] || ($e[1] = (...lt) => w(v) && w(v)(...lt))
        }, [
          w(a) ? (R(), F("div", {
            key: 0,
            class: B(w(r).be("picker", "mask"))
          }, null, 2)) : te("v-if", !0),
          W("div", {
            class: B(w(r).be("picker", "trigger")),
            onClick: re
          }, [
            W("span", {
              class: B([w(r).be("picker", "color"), w(r).is("alpha", ae.showAlpha)])
            }, [
              W("span", {
                class: B(w(r).be("picker", "color-inner")),
                style: Ye({
                  backgroundColor: w($)
                })
              }, [
                tt(ne(w(Ue), {
                  class: B([w(r).be("picker", "icon"), w(r).is("icon-arrow-down")])
                }, {
                  default: se(() => [
                    ne(w(zp))
                  ]),
                  _: 1
                }, 8, ["class"]), [
                  [Ht, ae.modelValue || k.value]
                ]),
                tt(ne(w(Ue), {
                  class: B([w(r).be("picker", "empty"), w(r).is("icon-close")])
                }, {
                  default: se(() => [
                    ne(w(Rl))
                  ]),
                  _: 1
                }, 8, ["class"]), [
                  [Ht, !ae.modelValue && !k.value]
                ])
              ], 6)
            ], 2)
          ], 2)
        ], 42, qF)
      ]),
      _: 1
    }, 8, ["visible", "popper-class", "transition"]));
  }
});
var YF = /* @__PURE__ */ Ce(XF, [["__file", "color-picker.vue"]]);
const ZZe = Bt(YF), HF = Ae({
  mask: {
    type: Boolean,
    default: !0
  },
  customMaskEvent: {
    type: Boolean,
    default: !1
  },
  overlayClass: {
    type: be([
      String,
      Array,
      Object
    ])
  },
  zIndex: {
    type: be([String, Number])
  }
}), GF = {
  click: (n) => n instanceof MouseEvent
}, UF = "overlay";
var KF = Z({
  name: "ElOverlay",
  props: HF,
  emits: GF,
  setup(n, { slots: e, emit: t }) {
    const i = ve(UF), s = (a) => {
      t("click", a);
    }, { onClick: r, onMousedown: o, onMouseup: l } = _v(n.customMaskEvent ? void 0 : s);
    return () => n.mask ? ne("div", {
      class: [i.b(), n.overlayClass],
      style: {
        zIndex: n.zIndex
      },
      onClick: r,
      onMousedown: o,
      onMouseup: l
    }, [pe(e, "default")], id.STYLE | id.CLASS | id.PROPS, ["onClick", "onMouseup", "onMousedown"]) : _e("div", {
      class: n.overlayClass,
      style: {
        zIndex: n.zIndex,
        position: "fixed",
        top: "0px",
        right: "0px",
        bottom: "0px",
        left: "0px"
      }
    }, [pe(e, "default")]);
  }
});
const Fv = KF, DP = Symbol("dialogInjectionKey"), LP = Ae({
  center: Boolean,
  alignCenter: Boolean,
  closeIcon: {
    type: xn
  },
  draggable: Boolean,
  overflow: Boolean,
  fullscreen: Boolean,
  showClose: {
    type: Boolean,
    default: !0
  },
  title: {
    type: String,
    default: ""
  },
  ariaLevel: {
    type: String,
    default: "2"
  }
}), JF = {
  close: () => !0
}, eV = ["aria-level"], tV = ["aria-label"], nV = ["id"], iV = Z({ name: "ElDialogContent" }), sV = /* @__PURE__ */ Z({
  ...iV,
  props: LP,
  emits: JF,
  setup(n) {
    const e = n, { t } = ni(), { Close: i } = O2, { dialogRef: s, headerRef: r, bodyId: o, ns: l, style: a } = ye(DP), { focusTrapRef: c } = ye(oP), u = _(() => [
      l.b(),
      l.is("fullscreen", e.fullscreen),
      l.is("draggable", e.draggable),
      l.is("align-center", e.alignCenter),
      { [l.m("center")]: e.center }
    ]), h = ej(c, s), f = _(() => e.draggable), d = _(() => e.overflow);
    return P2(s, r, f, d), (p, g) => (R(), F("div", {
      ref: w(h),
      class: B(w(u)),
      style: Ye(w(a)),
      tabindex: "-1"
    }, [
      W("header", {
        ref_key: "headerRef",
        ref: r,
        class: B([w(l).e("header"), { "show-close": p.showClose }])
      }, [
        pe(p.$slots, "header", {}, () => [
          W("span", {
            role: "heading",
            "aria-level": p.ariaLevel,
            class: B(w(l).e("title"))
          }, Re(p.title), 11, eV)
        ]),
        p.showClose ? (R(), F("button", {
          key: 0,
          "aria-label": w(t)("el.dialog.close"),
          class: B(w(l).e("headerbtn")),
          type: "button",
          onClick: g[0] || (g[0] = (m) => p.$emit("close"))
        }, [
          ne(w(Ue), {
            class: B(w(l).e("close"))
          }, {
            default: se(() => [
              (R(), oe(Ot(p.closeIcon || w(i))))
            ]),
            _: 1
          }, 8, ["class"])
        ], 10, tV)) : te("v-if", !0)
      ], 2),
      W("div", {
        id: w(o),
        class: B(w(l).e("body"))
      }, [
        pe(p.$slots, "default")
      ], 10, nV),
      p.$slots.footer ? (R(), F("footer", {
        key: 0,
        class: B(w(l).e("footer"))
      }, [
        pe(p.$slots, "footer")
      ], 2)) : te("v-if", !0)
    ], 6));
  }
});
var rV = /* @__PURE__ */ Ce(sV, [["__file", "dialog-content.vue"]]);
const NP = Ae({
  ...LP,
  appendToBody: Boolean,
  appendTo: {
    type: be(String),
    default: "body"
  },
  beforeClose: {
    type: be(Function)
  },
  destroyOnClose: Boolean,
  closeOnClickModal: {
    type: Boolean,
    default: !0
  },
  closeOnPressEscape: {
    type: Boolean,
    default: !0
  },
  lockScroll: {
    type: Boolean,
    default: !0
  },
  modal: {
    type: Boolean,
    default: !0
  },
  openDelay: {
    type: Number,
    default: 0
  },
  closeDelay: {
    type: Number,
    default: 0
  },
  top: {
    type: String
  },
  modelValue: Boolean,
  modalClass: String,
  width: {
    type: [String, Number]
  },
  zIndex: {
    type: Number
  },
  trapFocus: {
    type: Boolean,
    default: !1
  },
  headerAriaLevel: {
    type: String,
    default: "2"
  }
}), IP = {
  open: () => !0,
  opened: () => !0,
  close: () => !0,
  closed: () => !0,
  [et]: (n) => Yn(n),
  openAutoFocus: () => !0,
  closeAutoFocus: () => !0
}, QP = (n, e) => {
  var t;
  const s = qe().emit, { nextZIndex: r } = Rv();
  let o = "";
  const l = pr(), a = pr(), c = L(!1), u = L(!1), h = L(!1), f = L((t = n.zIndex) != null ? t : r());
  let d, p;
  const g = Xp("namespace", mu), m = _(() => {
    const P = {}, A = `--${g.value}-dialog`;
    return n.fullscreen || (n.top && (P[`${A}-margin-top`] = n.top), n.width && (P[`${A}-width`] = Qi(n.width))), P;
  }), b = _(() => n.alignCenter ? { display: "flex" } : {});
  function y() {
    s("opened");
  }
  function v() {
    s("closed"), s(et, !1), n.destroyOnClose && (h.value = !1);
  }
  function O() {
    s("close");
  }
  function x() {
    p == null || p(), d == null || d(), n.openDelay && n.openDelay > 0 ? { stop: d } = Qd(() => E(), n.openDelay) : E();
  }
  function S() {
    d == null || d(), p == null || p(), n.closeDelay && n.closeDelay > 0 ? { stop: p } = Qd(() => $(), n.closeDelay) : $();
  }
  function C() {
    function P(A) {
      A || (u.value = !0, c.value = !1);
    }
    n.beforeClose ? n.beforeClose(P) : S();
  }
  function k() {
    n.closeOnClickModal && C();
  }
  function E() {
    ot && (c.value = !0);
  }
  function $() {
    c.value = !1;
  }
  function T() {
    s("openAutoFocus");
  }
  function M() {
    s("closeAutoFocus");
  }
  function j(P) {
    var A;
    ((A = P.detail) == null ? void 0 : A.focusReason) === "pointer" && P.preventDefault();
  }
  n.lockScroll && R2(c);
  function D() {
    n.closeOnPressEscape && C();
  }
  return ee(() => n.modelValue, (P) => {
    P ? (u.value = !1, x(), h.value = !0, f.value = Kk(n.zIndex) ? r() : f.value++, Qe(() => {
      s("open"), e.value && (e.value.scrollTop = 0);
    })) : c.value && S();
  }), ee(() => n.fullscreen, (P) => {
    e.value && (P ? (o = e.value.style.transform, e.value.style.transform = "") : e.value.style.transform = o);
  }), Be(() => {
    n.modelValue && (c.value = !0, h.value = !0, x());
  }), {
    afterEnter: y,
    afterLeave: v,
    beforeLeave: O,
    handleClose: C,
    onModalClick: k,
    close: S,
    doClose: $,
    onOpenAutoFocus: T,
    onCloseAutoFocus: M,
    onCloseRequested: D,
    onFocusoutPrevented: j,
    titleId: l,
    bodyId: a,
    closed: u,
    style: m,
    overlayDialogStyle: b,
    rendered: h,
    visible: c,
    zIndex: f
  };
}, oV = ["aria-label", "aria-labelledby", "aria-describedby"], lV = Z({
  name: "ElDialog",
  inheritAttrs: !1
}), aV = /* @__PURE__ */ Z({
  ...lV,
  props: NP,
  emits: IP,
  setup(n, { expose: e }) {
    const t = n, i = Zo();
    Dl({
      scope: "el-dialog",
      from: "the title slot",
      replacement: "the header slot",
      version: "3.0.0",
      ref: "https://element-plus.org/en-US/component/dialog.html#slots"
    }, _(() => !!i.title));
    const s = ve("dialog"), r = L(), o = L(), l = L(), {
      visible: a,
      titleId: c,
      bodyId: u,
      style: h,
      overlayDialogStyle: f,
      rendered: d,
      zIndex: p,
      afterEnter: g,
      afterLeave: m,
      beforeLeave: b,
      handleClose: y,
      onModalClick: v,
      onOpenAutoFocus: O,
      onCloseAutoFocus: x,
      onCloseRequested: S,
      onFocusoutPrevented: C
    } = QP(t, r);
    ht(DP, {
      dialogRef: r,
      headerRef: o,
      bodyId: u,
      ns: s,
      rendered: d,
      style: h
    });
    const k = _v(v), E = _(() => t.draggable && !t.fullscreen);
    return e({
      visible: a,
      dialogContentRef: l
    }), ($, T) => (R(), oe(_p, {
      to: $.appendTo,
      disabled: $.appendTo !== "body" ? !1 : !$.appendToBody
    }, [
      ne(br, {
        name: "dialog-fade",
        onAfterEnter: w(g),
        onAfterLeave: w(m),
        onBeforeLeave: w(b),
        persisted: ""
      }, {
        default: se(() => [
          tt(ne(w(Fv), {
            "custom-mask-event": "",
            mask: $.modal,
            "overlay-class": $.modalClass,
            "z-index": w(p)
          }, {
            default: se(() => [
              W("div", {
                role: "dialog",
                "aria-modal": "true",
                "aria-label": $.title || void 0,
                "aria-labelledby": $.title ? void 0 : w(c),
                "aria-describedby": w(u),
                class: B(`${w(s).namespace.value}-overlay-dialog`),
                style: Ye(w(f)),
                onClick: T[0] || (T[0] = (...M) => w(k).onClick && w(k).onClick(...M)),
                onMousedown: T[1] || (T[1] = (...M) => w(k).onMousedown && w(k).onMousedown(...M)),
                onMouseup: T[2] || (T[2] = (...M) => w(k).onMouseup && w(k).onMouseup(...M))
              }, [
                ne(w(Hp), {
                  loop: "",
                  trapped: w(a),
                  "focus-start-el": "container",
                  onFocusAfterTrapped: w(O),
                  onFocusAfterReleased: w(x),
                  onFocusoutPrevented: w(C),
                  onReleaseRequested: w(S)
                }, {
                  default: se(() => [
                    w(d) ? (R(), oe(rV, Gi({
                      key: 0,
                      ref_key: "dialogContentRef",
                      ref: l
                    }, $.$attrs, {
                      center: $.center,
                      "align-center": $.alignCenter,
                      "close-icon": $.closeIcon,
                      draggable: w(E),
                      overflow: $.overflow,
                      fullscreen: $.fullscreen,
                      "show-close": $.showClose,
                      title: $.title,
                      "aria-level": $.headerAriaLevel,
                      onClose: w(y)
                    }), aR({
                      header: se(() => [
                        $.$slots.title ? pe($.$slots, "title", { key: 1 }) : pe($.$slots, "header", {
                          key: 0,
                          close: w(y),
                          titleId: w(c),
                          titleClass: w(s).e("title")
                        })
                      ]),
                      default: se(() => [
                        pe($.$slots, "default")
                      ]),
                      _: 2
                    }, [
                      $.$slots.footer ? {
                        name: "footer",
                        fn: se(() => [
                          pe($.$slots, "footer")
                        ])
                      } : void 0
                    ]), 1040, ["center", "align-center", "close-icon", "draggable", "overflow", "fullscreen", "show-close", "title", "aria-level", "onClose"])) : te("v-if", !0)
                  ]),
                  _: 3
                }, 8, ["trapped", "onFocusAfterTrapped", "onFocusAfterReleased", "onFocusoutPrevented", "onReleaseRequested"])
              ], 46, oV)
            ]),
            _: 3
          }, 8, ["mask", "overlay-class", "z-index"]), [
            [Ht, w(a)]
          ])
        ]),
        _: 3
      }, 8, ["onAfterEnter", "onAfterLeave", "onBeforeLeave"])
    ], 8, ["to", "disabled"]));
  }
});
var cV = /* @__PURE__ */ Ce(aV, [["__file", "dialog.vue"]]);
const FZe = Bt(cV), uV = Ae({
  direction: {
    type: String,
    values: ["horizontal", "vertical"],
    default: "horizontal"
  },
  contentPosition: {
    type: String,
    values: ["left", "center", "right"],
    default: "center"
  },
  borderStyle: {
    type: be(String),
    default: "solid"
  }
}), hV = Z({
  name: "ElDivider"
}), fV = /* @__PURE__ */ Z({
  ...hV,
  props: uV,
  setup(n) {
    const e = n, t = ve("divider"), i = _(() => t.cssVar({
      "border-style": e.borderStyle
    }));
    return (s, r) => (R(), F("div", {
      class: B([w(t).b(), w(t).m(s.direction)]),
      style: Ye(w(i)),
      role: "separator"
    }, [
      s.$slots.default && s.direction !== "vertical" ? (R(), F("div", {
        key: 0,
        class: B([w(t).e("text"), w(t).is(s.contentPosition)])
      }, [
        pe(s.$slots, "default")
      ], 2)) : te("v-if", !0)
    ], 6));
  }
});
var dV = /* @__PURE__ */ Ce(fV, [["__file", "divider.vue"]]);
const VZe = Bt(dV), pV = Ae({
  ...NP,
  direction: {
    type: String,
    default: "rtl",
    values: ["ltr", "rtl", "ttb", "btt"]
  },
  size: {
    type: [String, Number],
    default: "30%"
  },
  withHeader: {
    type: Boolean,
    default: !0
  },
  modalFade: {
    type: Boolean,
    default: !0
  },
  headerAriaLevel: {
    type: String,
    default: "2"
  }
}), gV = IP, mV = ["aria-label", "aria-labelledby", "aria-describedby"], bV = ["id", "aria-level"], vV = ["aria-label"], yV = ["id"], OV = Z({
  name: "ElDrawer",
  inheritAttrs: !1
}), wV = /* @__PURE__ */ Z({
  ...OV,
  props: pV,
  emits: gV,
  setup(n, { expose: e }) {
    const t = n, i = Zo();
    Dl({
      scope: "el-drawer",
      from: "the title slot",
      replacement: "the header slot",
      version: "3.0.0",
      ref: "https://element-plus.org/en-US/component/drawer.html#slots"
    }, _(() => !!i.title));
    const s = L(), r = L(), o = ve("drawer"), { t: l } = ni(), {
      afterEnter: a,
      afterLeave: c,
      beforeLeave: u,
      visible: h,
      rendered: f,
      titleId: d,
      bodyId: p,
      onModalClick: g,
      onOpenAutoFocus: m,
      onCloseAutoFocus: b,
      onFocusoutPrevented: y,
      onCloseRequested: v,
      handleClose: O
    } = QP(t, s), x = _(() => t.direction === "rtl" || t.direction === "ltr"), S = _(() => Qi(t.size));
    return e({
      handleClose: O,
      afterEnter: a,
      afterLeave: c
    }), (C, k) => (R(), oe(_p, {
      to: "body",
      disabled: !C.appendToBody
    }, [
      ne(br, {
        name: w(o).b("fade"),
        onAfterEnter: w(a),
        onAfterLeave: w(c),
        onBeforeLeave: w(u),
        persisted: ""
      }, {
        default: se(() => [
          tt(ne(w(Fv), {
            mask: C.modal,
            "overlay-class": C.modalClass,
            "z-index": C.zIndex,
            onClick: w(g)
          }, {
            default: se(() => [
              ne(w(Hp), {
                loop: "",
                trapped: w(h),
                "focus-trap-el": s.value,
                "focus-start-el": r.value,
                onFocusAfterTrapped: w(m),
                onFocusAfterReleased: w(b),
                onFocusoutPrevented: w(y),
                onReleaseRequested: w(v)
              }, {
                default: se(() => [
                  W("div", Gi({
                    ref_key: "drawerRef",
                    ref: s,
                    "aria-modal": "true",
                    "aria-label": C.title || void 0,
                    "aria-labelledby": C.title ? void 0 : w(d),
                    "aria-describedby": w(p)
                  }, C.$attrs, {
                    class: [w(o).b(), C.direction, w(h) && "open"],
                    style: w(x) ? "width: " + w(S) : "height: " + w(S),
                    role: "dialog",
                    onClick: k[1] || (k[1] = ft(() => {
                    }, ["stop"]))
                  }), [
                    W("span", {
                      ref_key: "focusStartRef",
                      ref: r,
                      class: B(w(o).e("sr-focus")),
                      tabindex: "-1"
                    }, null, 2),
                    C.withHeader ? (R(), F("header", {
                      key: 0,
                      class: B(w(o).e("header"))
                    }, [
                      C.$slots.title ? pe(C.$slots, "title", { key: 1 }, () => [
                        te(" DEPRECATED SLOT ")
                      ]) : pe(C.$slots, "header", {
                        key: 0,
                        close: w(O),
                        titleId: w(d),
                        titleClass: w(o).e("title")
                      }, () => [
                        C.$slots.title ? te("v-if", !0) : (R(), F("span", {
                          key: 0,
                          id: w(d),
                          role: "heading",
                          "aria-level": C.headerAriaLevel,
                          class: B(w(o).e("title"))
                        }, Re(C.title), 11, bV))
                      ]),
                      C.showClose ? (R(), F("button", {
                        key: 2,
                        "aria-label": w(l)("el.drawer.close"),
                        class: B(w(o).e("close-btn")),
                        type: "button",
                        onClick: k[0] || (k[0] = (...E) => w(O) && w(O)(...E))
                      }, [
                        ne(w(Ue), {
                          class: B(w(o).e("close"))
                        }, {
                          default: se(() => [
                            ne(w(Rl))
                          ]),
                          _: 1
                        }, 8, ["class"])
                      ], 10, vV)) : te("v-if", !0)
                    ], 2)) : te("v-if", !0),
                    w(f) ? (R(), F("div", {
                      key: 1,
                      id: w(p),
                      class: B(w(o).e("body"))
                    }, [
                      pe(C.$slots, "default")
                    ], 10, yV)) : te("v-if", !0),
                    C.$slots.footer ? (R(), F("div", {
                      key: 2,
                      class: B(w(o).e("footer"))
                    }, [
                      pe(C.$slots, "footer")
                    ], 2)) : te("v-if", !0)
                  ], 16, mV)
                ]),
                _: 3
              }, 8, ["trapped", "focus-trap-el", "focus-start-el", "onFocusAfterTrapped", "onFocusAfterReleased", "onFocusoutPrevented", "onReleaseRequested"])
            ]),
            _: 3
          }, 8, ["mask", "overlay-class", "z-index", "onClick"]), [
            [Ht, w(h)]
          ])
        ]),
        _: 3
      }, 8, ["name", "onAfterEnter", "onAfterLeave", "onBeforeLeave"])
    ], 8, ["disabled"]));
  }
});
var xV = /* @__PURE__ */ Ce(wV, [["__file", "drawer.vue"]]);
const qZe = Bt(xV), SV = /* @__PURE__ */ Z({
  inheritAttrs: !1
});
function CV(n, e, t, i, s, r) {
  return pe(n.$slots, "default");
}
var kV = /* @__PURE__ */ Ce(SV, [["render", CV], ["__file", "collection.vue"]]);
const PV = /* @__PURE__ */ Z({
  name: "ElCollectionItem",
  inheritAttrs: !1
});
function AV(n, e, t, i, s, r) {
  return pe(n.$slots, "default");
}
var EV = /* @__PURE__ */ Ce(PV, [["render", AV], ["__file", "collection-item.vue"]]);
const $V = "data-el-collection-item", TV = (n) => {
  const e = `El${n}Collection`, t = `${e}Item`, i = Symbol(e), s = Symbol(t), r = {
    ...kV,
    name: e,
    setup() {
      const l = L(null), a = /* @__PURE__ */ new Map();
      ht(i, {
        itemMap: a,
        getItems: () => {
          const u = w(l);
          if (!u)
            return [];
          const h = Array.from(u.querySelectorAll(`[${$V}]`));
          return [...a.values()].sort((d, p) => h.indexOf(d.ref) - h.indexOf(p.ref));
        },
        collectionRef: l
      });
    }
  }, o = {
    ...EV,
    name: t,
    setup(l, { attrs: a }) {
      const c = L(null), u = ye(i, void 0);
      ht(s, {
        collectionItemRef: c
      }), Be(() => {
        const h = w(c);
        h && u.itemMap.set(h, {
          ref: h,
          ...a
        });
      }), Zn(() => {
        const h = w(c);
        u.itemMap.delete(h);
      });
    }
  };
  return {
    COLLECTION_INJECTION_KEY: i,
    COLLECTION_ITEM_INJECTION_KEY: s,
    ElCollection: r,
    ElCollectionItem: o
  };
}, tm = Ae({
  trigger: Xu.trigger,
  effect: {
    ...Ti.effect,
    default: "light"
  },
  type: {
    type: be(String)
  },
  placement: {
    type: be(String),
    default: "bottom"
  },
  popperOptions: {
    type: be(Object),
    default: () => ({})
  },
  id: String,
  size: {
    type: String,
    default: ""
  },
  splitButton: Boolean,
  hideOnClick: {
    type: Boolean,
    default: !0
  },
  loop: {
    type: Boolean,
    default: !0
  },
  showTimeout: {
    type: Number,
    default: 150
  },
  hideTimeout: {
    type: Number,
    default: 150
  },
  tabindex: {
    type: be([Number, String]),
    default: 0
  },
  maxHeight: {
    type: be([Number, String]),
    default: ""
  },
  popperClass: {
    type: String,
    default: ""
  },
  disabled: {
    type: Boolean,
    default: !1
  },
  role: {
    type: String,
    default: "menu"
  },
  buttonProps: {
    type: be(Object)
  },
  teleported: Ti.teleported
});
Ae({
  command: {
    type: [Object, String, Number],
    default: () => ({})
  },
  disabled: Boolean,
  divided: Boolean,
  textValue: String,
  icon: {
    type: xn
  }
});
Ae({
  onKeydown: { type: be(Function) }
});
TV("Dropdown");
const _V = Ae({
  id: {
    type: String,
    default: void 0
  },
  step: {
    type: Number,
    default: 1
  },
  stepStrictly: Boolean,
  max: {
    type: Number,
    default: Number.POSITIVE_INFINITY
  },
  min: {
    type: Number,
    default: Number.NEGATIVE_INFINITY
  },
  modelValue: Number,
  readonly: Boolean,
  disabled: Boolean,
  size: Ns,
  controls: {
    type: Boolean,
    default: !0
  },
  controlsPosition: {
    type: String,
    default: "",
    values: ["", "right"]
  },
  valueOnClear: {
    type: [String, Number, null],
    validator: (n) => n === null || ze(n) || ["min", "max"].includes(n),
    default: null
  },
  name: String,
  label: String,
  placeholder: String,
  precision: {
    type: Number,
    validator: (n) => n >= 0 && n === Number.parseInt(`${n}`, 10)
  },
  validateEvent: {
    type: Boolean,
    default: !0
  }
}), MV = {
  [Es]: (n, e) => e !== n,
  blur: (n) => n instanceof FocusEvent,
  focus: (n) => n instanceof FocusEvent,
  [Sl]: (n) => ze(n) || Ii(n),
  [et]: (n) => ze(n) || Ii(n)
}, RV = ["aria-label", "onKeydown"], DV = ["aria-label", "onKeydown"], LV = Z({
  name: "ElInputNumber"
}), NV = /* @__PURE__ */ Z({
  ...LV,
  props: _V,
  emits: MV,
  setup(n, { expose: e, emit: t }) {
    const i = n, { t: s } = ni(), r = ve("input-number"), o = L(), l = Hn({
      currentValue: i.modelValue,
      userInput: null
    }), { formItem: a } = vr(), c = _(() => ze(i.modelValue) && i.modelValue <= i.min), u = _(() => ze(i.modelValue) && i.modelValue >= i.max), h = _(() => {
      const P = b(i.step);
      return Li(i.precision) ? Math.max(b(i.modelValue), P) : (P > i.precision && rt("InputNumber", "precision should not be less than the decimal places of step"), i.precision);
    }), f = _(() => i.controls && i.controlsPosition === "right"), d = Bi(), p = qo(), g = _(() => {
      if (l.userInput !== null)
        return l.userInput;
      let P = l.currentValue;
      if (Ii(P))
        return "";
      if (ze(P)) {
        if (Number.isNaN(P))
          return "";
        Li(i.precision) || (P = P.toFixed(i.precision));
      }
      return P;
    }), m = (P, A) => {
      if (Li(A) && (A = h.value), A === 0)
        return Math.round(P);
      let Q = String(P);
      const X = Q.indexOf(".");
      if (X === -1 || !Q.replace(".", "").split("")[X + A])
        return P;
      const re = Q.length;
      return Q.charAt(re - 1) === "5" && (Q = `${Q.slice(0, Math.max(0, re - 1))}6`), Number.parseFloat(Number(Q).toFixed(A));
    }, b = (P) => {
      if (Ii(P))
        return 0;
      const A = P.toString(), Q = A.indexOf(".");
      let X = 0;
      return Q !== -1 && (X = A.length - Q - 1), X;
    }, y = (P, A = 1) => ze(P) ? m(P + i.step * A) : l.currentValue, v = () => {
      if (i.readonly || p.value || u.value)
        return;
      const P = Number(g.value) || 0, A = y(P);
      S(A), t(Sl, l.currentValue), j();
    }, O = () => {
      if (i.readonly || p.value || c.value)
        return;
      const P = Number(g.value) || 0, A = y(P, -1);
      S(A), t(Sl, l.currentValue), j();
    }, x = (P, A) => {
      const { max: Q, min: X, step: z, precision: q, stepStrictly: re, valueOnClear: H } = i;
      Q < X && Yr("InputNumber", "min should not be greater than max.");
      let G = Number(P);
      if (Ii(P) || Number.isNaN(G))
        return null;
      if (P === "") {
        if (H === null)
          return null;
        G = pt(H) ? { min: X, max: Q }[H] : H;
      }
      return re && (G = m(Math.round(G / z) * z, q)), Li(q) || (G = m(G, q)), (G > Q || G < X) && (G = G > Q ? Q : X, A && t(et, G)), G;
    }, S = (P, A = !0) => {
      var Q;
      const X = l.currentValue, z = x(P);
      if (!A) {
        t(et, z);
        return;
      }
      X !== z && (l.userInput = null, t(et, z), t(Es, z, X), i.validateEvent && ((Q = a == null ? void 0 : a.validate) == null || Q.call(a, "change").catch((q) => rt(q))), l.currentValue = z);
    }, C = (P) => {
      l.userInput = P;
      const A = P === "" ? null : Number(P);
      t(Sl, A), S(A, !1);
    }, k = (P) => {
      const A = P !== "" ? Number(P) : "";
      (ze(A) && !Number.isNaN(A) || P === "") && S(A), j(), l.userInput = null;
    }, E = () => {
      var P, A;
      (A = (P = o.value) == null ? void 0 : P.focus) == null || A.call(P);
    }, $ = () => {
      var P, A;
      (A = (P = o.value) == null ? void 0 : P.blur) == null || A.call(P);
    }, T = (P) => {
      t("focus", P);
    }, M = (P) => {
      var A;
      l.userInput = null, t("blur", P), i.validateEvent && ((A = a == null ? void 0 : a.validate) == null || A.call(a, "blur").catch((Q) => rt(Q)));
    }, j = () => {
      l.currentValue !== i.modelValue && (l.currentValue = i.modelValue);
    }, D = (P) => {
      document.activeElement === P.target && P.preventDefault();
    };
    return ee(() => i.modelValue, (P, A) => {
      const Q = x(P, !0);
      l.userInput === null && Q !== A && (l.currentValue = Q);
    }, { immediate: !0 }), Be(() => {
      var P;
      const { min: A, max: Q, modelValue: X } = i, z = (P = o.value) == null ? void 0 : P.input;
      if (z.setAttribute("role", "spinbutton"), Number.isFinite(Q) ? z.setAttribute("aria-valuemax", String(Q)) : z.removeAttribute("aria-valuemax"), Number.isFinite(A) ? z.setAttribute("aria-valuemin", String(A)) : z.removeAttribute("aria-valuemin"), z.setAttribute("aria-valuenow", l.currentValue || l.currentValue === 0 ? String(l.currentValue) : ""), z.setAttribute("aria-disabled", String(p.value)), !ze(X) && X != null) {
        let q = Number(X);
        Number.isNaN(q) && (q = null), t(et, q);
      }
    }), Mh(() => {
      var P, A;
      const Q = (P = o.value) == null ? void 0 : P.input;
      Q == null || Q.setAttribute("aria-valuenow", `${(A = l.currentValue) != null ? A : ""}`);
    }), e({
      focus: E,
      blur: $
    }), (P, A) => (R(), F("div", {
      class: B([
        w(r).b(),
        w(r).m(w(d)),
        w(r).is("disabled", w(p)),
        w(r).is("without-controls", !P.controls),
        w(r).is("controls-right", w(f))
      ]),
      onDragstart: A[0] || (A[0] = ft(() => {
      }, ["prevent"]))
    }, [
      P.controls ? tt((R(), F("span", {
        key: 0,
        role: "button",
        "aria-label": w(s)("el.inputNumber.decrease"),
        class: B([w(r).e("decrease"), w(r).is("disabled", w(c))]),
        onKeydown: On(O, ["enter"])
      }, [
        ne(w(Ue), null, {
          default: se(() => [
            w(f) ? (R(), oe(w(zp), { key: 0 })) : (R(), oe(w(h4), { key: 1 }))
          ]),
          _: 1
        })
      ], 42, RV)), [
        [w(J1), O]
      ]) : te("v-if", !0),
      P.controls ? tt((R(), F("span", {
        key: 1,
        role: "button",
        "aria-label": w(s)("el.inputNumber.increase"),
        class: B([w(r).e("increase"), w(r).is("disabled", w(u))]),
        onKeydown: On(v, ["enter"])
      }, [
        ne(w(Ue), null, {
          default: se(() => [
            w(f) ? (R(), oe(w(o2), { key: 0 })) : (R(), oe(w(c2), { key: 1 }))
          ]),
          _: 1
        })
      ], 42, DV)), [
        [w(J1), v]
      ]) : te("v-if", !0),
      ne(w(Vh), {
        id: P.id,
        ref_key: "input",
        ref: o,
        type: "number",
        step: P.step,
        "model-value": w(g),
        placeholder: P.placeholder,
        readonly: P.readonly,
        disabled: w(p),
        size: w(d),
        max: P.max,
        min: P.min,
        name: P.name,
        label: P.label,
        "validate-event": !1,
        onWheel: D,
        onKeydown: [
          On(ft(v, ["prevent"]), ["up"]),
          On(ft(O, ["prevent"]), ["down"])
        ],
        onBlur: M,
        onFocus: T,
        onInput: C,
        onChange: k
      }, null, 8, ["id", "step", "model-value", "placeholder", "readonly", "disabled", "size", "max", "min", "name", "label", "onKeydown"])
    ], 34));
  }
});
var IV = /* @__PURE__ */ Ce(NV, [["__file", "input-number.vue"]]);
const WZe = Bt(IV), BP = Symbol("elPaginationKey"), QV = Ae({
  disabled: Boolean,
  currentPage: {
    type: Number,
    default: 1
  },
  prevText: {
    type: String
  },
  prevIcon: {
    type: xn
  }
}), BV = {
  click: (n) => n instanceof MouseEvent
}, jV = ["disabled", "aria-label", "aria-disabled"], zV = { key: 0 }, ZV = Z({
  name: "ElPaginationPrev"
}), FV = /* @__PURE__ */ Z({
  ...ZV,
  props: QV,
  emits: BV,
  setup(n) {
    const e = n, { t } = ni(), i = _(() => e.disabled || e.currentPage <= 1);
    return (s, r) => (R(), F("button", {
      type: "button",
      class: "btn-prev",
      disabled: w(i),
      "aria-label": s.prevText || w(t)("el.pagination.prev"),
      "aria-disabled": w(i),
      onClick: r[0] || (r[0] = (o) => s.$emit("click", o))
    }, [
      s.prevText ? (R(), F("span", zV, Re(s.prevText), 1)) : (R(), oe(w(Ue), { key: 1 }, {
        default: se(() => [
          (R(), oe(Ot(s.prevIcon)))
        ]),
        _: 1
      }))
    ], 8, jV));
  }
});
var VV = /* @__PURE__ */ Ce(FV, [["__file", "prev.vue"]]);
const qV = Ae({
  disabled: Boolean,
  currentPage: {
    type: Number,
    default: 1
  },
  pageCount: {
    type: Number,
    default: 50
  },
  nextText: {
    type: String
  },
  nextIcon: {
    type: xn
  }
}), WV = ["disabled", "aria-label", "aria-disabled"], XV = { key: 0 }, YV = Z({
  name: "ElPaginationNext"
}), HV = /* @__PURE__ */ Z({
  ...YV,
  props: qV,
  emits: ["click"],
  setup(n) {
    const e = n, { t } = ni(), i = _(() => e.disabled || e.currentPage === e.pageCount || e.pageCount === 0);
    return (s, r) => (R(), F("button", {
      type: "button",
      class: "btn-next",
      disabled: w(i),
      "aria-label": s.nextText || w(t)("el.pagination.next"),
      "aria-disabled": w(i),
      onClick: r[0] || (r[0] = (o) => s.$emit("click", o))
    }, [
      s.nextText ? (R(), F("span", XV, Re(s.nextText), 1)) : (R(), oe(w(Ue), { key: 1 }, {
        default: se(() => [
          (R(), oe(Ot(s.nextIcon)))
        ]),
        _: 1
      }))
    ], 8, WV));
  }
});
var GV = /* @__PURE__ */ Ce(HV, [["__file", "next.vue"]]);
const jP = Symbol("ElSelectGroup"), Gp = Symbol("ElSelect");
function UV(n, e) {
  const t = ye(Gp), i = ye(jP, { disabled: !1 }), s = _(() => t.props.multiple ? u(t.props.modelValue, n.value) : u([t.props.modelValue], n.value)), r = _(() => {
    if (t.props.multiple) {
      const d = t.props.modelValue || [];
      return !s.value && d.length >= t.props.multipleLimit && t.props.multipleLimit > 0;
    } else
      return !1;
  }), o = _(() => n.label || (Qn(n.value) ? "" : n.value)), l = _(() => n.value || n.label || ""), a = _(() => n.disabled || e.groupDisabled || r.value), c = qe(), u = (d = [], p) => {
    if (Qn(n.value)) {
      const g = t.props.valueKey;
      return d && d.some((m) => Td(Wi(m, g)) === Wi(p, g));
    } else
      return d && d.includes(p);
  }, h = () => {
    !n.disabled && !i.disabled && (t.states.hoveringIndex = t.optionsArray.indexOf(c.proxy));
  }, f = (d) => {
    const p = new RegExp(XB(d), "i");
    e.visible = p.test(o.value) || n.created;
  };
  return ee(() => o.value, () => {
    !n.created && !t.props.remote && t.setSelected();
  }), ee(() => n.value, (d, p) => {
    const { remote: g, valueKey: m } = t.props;
    if (Xn(d, p) || (t.onOptionDestroy(p, c.proxy), t.onOptionCreate(c.proxy)), !n.created && !g) {
      if (m && Qn(d) && Qn(p) && d[m] === p[m])
        return;
      t.setSelected();
    }
  }), ee(() => i.disabled, () => {
    e.groupDisabled = i.disabled;
  }, { immediate: !0 }), {
    select: t,
    currentLabel: o,
    currentValue: l,
    itemSelected: s,
    isDisabled: a,
    hoverItem: h,
    updateOption: f
  };
}
const KV = Z({
  name: "ElOption",
  componentName: "ElOption",
  props: {
    value: {
      required: !0,
      type: [String, Number, Boolean, Object]
    },
    label: [String, Number],
    created: Boolean,
    disabled: Boolean
  },
  setup(n) {
    const e = ve("select"), t = pr(), i = _(() => [
      e.be("dropdown", "item"),
      e.is("disabled", w(l)),
      e.is("selected", w(o)),
      e.is("hovering", w(f))
    ]), s = Hn({
      index: -1,
      groupDisabled: !1,
      visible: !0,
      hover: !1
    }), {
      currentLabel: r,
      itemSelected: o,
      isDisabled: l,
      select: a,
      hoverItem: c,
      updateOption: u
    } = UV(n, s), { visible: h, hover: f } = zo(s), d = qe().proxy;
    a.onOptionCreate(d), Zn(() => {
      const g = d.value, { selected: m } = a.states, y = (a.props.multiple ? m : [m]).some((v) => v.value === d.value);
      Qe(() => {
        a.states.cachedOptions.get(g) === d && !y && a.states.cachedOptions.delete(g);
      }), a.onOptionDestroy(g, d);
    });
    function p() {
      n.disabled !== !0 && s.groupDisabled !== !0 && a.handleOptionSelect(d);
    }
    return {
      ns: e,
      id: t,
      containerKls: i,
      currentLabel: r,
      itemSelected: o,
      isDisabled: l,
      select: a,
      hoverItem: c,
      updateOption: u,
      visible: h,
      hover: f,
      selectOptionClick: p,
      states: s
    };
  }
}), JV = ["id", "aria-disabled", "aria-selected"];
function eq(n, e, t, i, s, r) {
  return tt((R(), F("li", {
    id: n.id,
    class: B(n.containerKls),
    role: "option",
    "aria-disabled": n.isDisabled || void 0,
    "aria-selected": n.itemSelected,
    onMouseenter: e[0] || (e[0] = (...o) => n.hoverItem && n.hoverItem(...o)),
    onClick: e[1] || (e[1] = ft((...o) => n.selectOptionClick && n.selectOptionClick(...o), ["stop"]))
  }, [
    pe(n.$slots, "default", {}, () => [
      W("span", null, Re(n.currentLabel), 1)
    ])
  ], 42, JV)), [
    [Ht, n.visible]
  ]);
}
var Vv = /* @__PURE__ */ Ce(KV, [["render", eq], ["__file", "option.vue"]]);
const tq = Z({
  name: "ElSelectDropdown",
  componentName: "ElSelectDropdown",
  setup() {
    const n = ye(Gp), e = ve("select"), t = _(() => n.props.popperClass), i = _(() => n.props.multiple), s = _(() => n.props.fitInputWidth), r = L("");
    function o() {
      var l;
      r.value = `${(l = n.selectRef) == null ? void 0 : l.offsetWidth}px`;
    }
    return Be(() => {
      o(), Jn(n.selectRef, o);
    }), {
      ns: e,
      minWidth: r,
      popperClass: t,
      isMultiple: i,
      isFitInputWidth: s
    };
  }
});
function nq(n, e, t, i, s, r) {
  return R(), F("div", {
    class: B([n.ns.b("dropdown"), n.ns.is("multiple", n.isMultiple), n.popperClass]),
    style: Ye({ [n.isFitInputWidth ? "width" : "minWidth"]: n.minWidth })
  }, [
    n.$slots.header ? (R(), F("div", {
      key: 0,
      class: B(n.ns.be("dropdown", "header"))
    }, [
      pe(n.$slots, "header")
    ], 2)) : te("v-if", !0),
    pe(n.$slots, "default"),
    n.$slots.footer ? (R(), F("div", {
      key: 1,
      class: B(n.ns.be("dropdown", "footer"))
    }, [
      pe(n.$slots, "footer")
    ], 2)) : te("v-if", !0)
  ], 6);
}
var iq = /* @__PURE__ */ Ce(tq, [["render", nq], ["__file", "select-dropdown.vue"]]);
function sq(n) {
  const e = L(!1);
  return {
    handleCompositionStart: () => {
      e.value = !0;
    },
    handleCompositionUpdate: (r) => {
      const o = r.target.value, l = o[o.length - 1] || "";
      e.value = !k2(l);
    },
    handleCompositionEnd: (r) => {
      e.value && (e.value = !1, Mt(n) && n(r));
    }
  };
}
const rq = 11, oq = (n, e) => {
  const { t } = ni(), i = pr(), s = ve("select"), r = ve("input"), o = Hn({
    inputValue: "",
    options: /* @__PURE__ */ new Map(),
    cachedOptions: /* @__PURE__ */ new Map(),
    disabledOptions: /* @__PURE__ */ new Map(),
    optionValues: [],
    selected: n.multiple ? [] : {},
    selectionWidth: 0,
    calculatorWidth: 0,
    collapseItemWidth: 0,
    selectedLabel: "",
    hoveringIndex: -1,
    previousQuery: null,
    inputHovering: !1,
    menuVisibleOnFocus: !1,
    isBeforeHide: !1
  });
  Dl({
    from: "suffixTransition",
    replacement: "override style scheme",
    version: "2.3.0",
    scope: "props",
    ref: "https://element-plus.org/en-US/component/select.html#select-attributes"
  }, _(() => n.suffixTransition === !1));
  const l = L(null), a = L(null), c = L(null), u = L(null), h = L(null), f = L(null), d = L(null), p = L(null), g = L(null), m = L(null), b = L(null), y = L(null), { wrapperRef: v, isFocused: O, handleFocus: x, handleBlur: S } = Dv(h, {
    afterFocus() {
      n.automaticDropdown && !C.value && (C.value = !0, o.menuVisibleOnFocus = !0);
    },
    beforeBlur(Y) {
      var fe, vt;
      return ((fe = c.value) == null ? void 0 : fe.isFocusInsideContent(Y)) || ((vt = u.value) == null ? void 0 : vt.isFocusInsideContent(Y));
    },
    afterBlur() {
      C.value = !1, o.menuVisibleOnFocus = !1;
    }
  }), C = L(!1), k = L(), { form: E, formItem: $ } = vr(), { inputId: T } = Ul(n, {
    formItemContext: $
  }), M = _(() => n.disabled || (E == null ? void 0 : E.disabled)), j = _(() => n.multiple ? Zt(n.modelValue) && n.modelValue.length > 0 : n.modelValue !== void 0 && n.modelValue !== null && n.modelValue !== ""), D = _(() => n.clearable && !M.value && o.inputHovering && j.value), P = _(() => n.remote && n.filterable && !n.remoteShowSuffix ? "" : n.suffixIcon), A = _(() => s.is("reverse", P.value && C.value && n.suffixTransition)), Q = _(() => ($ == null ? void 0 : $.validateState) || ""), X = _(() => x2[Q.value]), z = _(() => n.remote ? 300 : 0), q = _(() => n.loading ? n.loadingText || t("el.select.loading") : n.remote && !o.inputValue && o.options.size === 0 ? !1 : n.filterable && o.inputValue && o.options.size > 0 && re.value === 0 ? n.noMatchText || t("el.select.noMatch") : o.options.size === 0 ? n.noDataText || t("el.select.noData") : null), re = _(() => H.value.filter((Y) => Y.visible).length), H = _(() => {
    const Y = Array.from(o.options.values()), fe = [];
    return o.optionValues.forEach((vt) => {
      const Wt = Y.findIndex((Jr) => Jr.value === vt);
      Wt > -1 && fe.push(Y[Wt]);
    }), fe.length >= Y.length ? fe : Y;
  }), G = _(() => Array.from(o.cachedOptions.values())), U = _(() => {
    const Y = H.value.filter((fe) => !fe.created).some((fe) => fe.currentLabel === o.inputValue);
    return n.filterable && n.allowCreate && o.inputValue !== "" && !Y;
  }), le = () => {
    n.filterable && Mt(n.filterMethod) || n.filterable && n.remote && Mt(n.remoteMethod) || H.value.forEach((Y) => {
      Y.updateOption(o.inputValue);
    });
  }, ce = Bi(), K = _(() => ["small"].includes(ce.value) ? "small" : "default"), he = _({
    get() {
      return C.value && q.value !== !1;
    },
    set(Y) {
      C.value = Y;
    }
  }), Ne = _(() => Zt(n.modelValue) ? n.modelValue.length === 0 && !o.inputValue : n.filterable ? !o.inputValue : !0), ae = _(() => {
    var Y;
    const fe = (Y = n.placeholder) != null ? Y : t("el.select.placeholder");
    return n.multiple || !j.value ? fe : o.selectedLabel;
  });
  ee(() => n.modelValue, (Y, fe) => {
    n.multiple && n.filterable && !n.reserveKeyword && (o.inputValue = "", $e("")), En(), !Xn(Y, fe) && n.validateEvent && ($ == null || $.validate("change").catch((vt) => rt(vt)));
  }, {
    flush: "post",
    deep: !0
  }), ee(() => C.value, (Y) => {
    Y ? $e(o.inputValue) : (o.inputValue = "", o.previousQuery = null, o.isBeforeHide = !0), e("visible-change", Y);
  }), ee(() => o.options.entries(), () => {
    var Y;
    if (!ot)
      return;
    const fe = ((Y = l.value) == null ? void 0 : Y.querySelectorAll("input")) || [];
    (!n.filterable && !n.defaultFirstOption && !Li(n.modelValue) || !Array.from(fe).includes(document.activeElement)) && En(), n.defaultFirstOption && (n.filterable || n.remote) && re.value && lt();
  }, {
    flush: "post"
  }), ee(() => o.hoveringIndex, (Y) => {
    ze(Y) && Y > -1 ? k.value = H.value[Y] || {} : k.value = {}, H.value.forEach((fe) => {
      fe.hover = k.value === fe;
    });
  }), sr(() => {
    o.isBeforeHide || le();
  });
  const $e = (Y) => {
    o.previousQuery !== Y && (o.previousQuery = Y, n.filterable && Mt(n.filterMethod) ? n.filterMethod(Y) : n.filterable && n.remote && Mt(n.remoteMethod) && n.remoteMethod(Y), n.defaultFirstOption && (n.filterable || n.remote) && re.value ? Qe(lt) : Qe(Si));
  }, lt = () => {
    const Y = H.value.filter((Wt) => Wt.visible && !Wt.disabled && !Wt.states.groupDisabled), fe = Y.find((Wt) => Wt.created), vt = Y[0];
    o.hoveringIndex = Se(H.value, fe || vt);
  }, En = () => {
    if (n.multiple)
      o.selectedLabel = "";
    else {
      const fe = ii(n.modelValue);
      o.selectedLabel = fe.currentLabel, o.selected = fe;
      return;
    }
    const Y = [];
    Zt(n.modelValue) && n.modelValue.forEach((fe) => {
      Y.push(ii(fe));
    }), o.selected = Y;
  }, ii = (Y) => {
    let fe;
    const vt = qg(Y).toLowerCase() === "object", Wt = qg(Y).toLowerCase() === "null", Jr = qg(Y).toLowerCase() === "undefined";
    for (let Uo = o.cachedOptions.size - 1; Uo >= 0; Uo--) {
      const zs = G.value[Uo];
      if (vt ? Wi(zs.value, n.valueKey) === Wi(Y, n.valueKey) : zs.value === Y) {
        fe = {
          value: Y,
          currentLabel: zs.currentLabel,
          isDisabled: zs.isDisabled
        };
        break;
      }
    }
    if (fe)
      return fe;
    const ia = vt ? Y.label : !Wt && !Jr ? Y : "";
    return {
      value: Y,
      currentLabel: ia
    };
  }, Si = () => {
    n.multiple ? o.selected.length > 0 ? o.hoveringIndex = Math.min(...o.selected.map((Y) => H.value.findIndex((fe) => Vc(fe) === Vc(Y)))) : o.hoveringIndex = -1 : o.hoveringIndex = H.value.findIndex((Y) => Vc(Y) === Vc(o.selected));
  }, ls = () => {
    o.selectionWidth = a.value.getBoundingClientRect().width;
  }, as = () => {
    o.calculatorWidth = f.value.getBoundingClientRect().width;
  }, cs = () => {
    o.collapseItemWidth = b.value.getBoundingClientRect().width;
  }, Cr = () => {
    var Y, fe;
    (fe = (Y = c.value) == null ? void 0 : Y.updatePopper) == null || fe.call(Y);
  }, si = () => {
    var Y, fe;
    (fe = (Y = u.value) == null ? void 0 : Y.updatePopper) == null || fe.call(Y);
  }, us = () => {
    o.inputValue.length > 0 && !C.value && (C.value = !0), $e(o.inputValue);
  }, js = (Y) => {
    if (o.inputValue = Y.target.value, n.remote)
      kr();
    else
      return us();
  }, kr = Ml(() => {
    us();
  }, z.value), ri = (Y) => {
    Xn(n.modelValue, Y) || e(Es, Y);
  }, ie = (Y) => WQ(Y, (fe) => !o.disabledOptions.has(fe)), Ze = (Y) => {
    if (n.multiple && Y.code !== jn.delete && Y.target.value.length <= 0) {
      const fe = n.modelValue.slice(), vt = ie(fe);
      if (vt < 0)
        return;
      fe.splice(vt, 1), e(et, fe), ri(fe);
    }
  }, Dt = (Y, fe) => {
    const vt = o.selected.indexOf(fe);
    if (vt > -1 && !M.value) {
      const Wt = n.modelValue.slice();
      Wt.splice(vt, 1), e(et, Wt), ri(Wt), e("remove-tag", fe.value);
    }
    Y.stopPropagation(), ta();
  }, hs = (Y) => {
    Y.stopPropagation();
    const fe = n.multiple ? [] : "";
    if (!pt(fe))
      for (const vt of o.selected)
        vt.isDisabled && fe.push(vt.value);
    e(et, fe), ri(fe), o.hoveringIndex = -1, C.value = !1, e("clear"), ta();
  }, ea = (Y) => {
    if (n.multiple) {
      const fe = (n.modelValue || []).slice(), vt = Se(fe, Y.value);
      vt > -1 ? fe.splice(vt, 1) : (n.multipleLimit <= 0 || fe.length < n.multipleLimit) && fe.push(Y.value), e(et, fe), ri(fe), Y.created && $e(""), n.filterable && !n.reserveKeyword && (o.inputValue = "");
    } else
      e(et, Y.value), ri(Y.value), C.value = !1;
    ta(), !C.value && Qe(() => {
      Le(Y);
    });
  }, Se = (Y = [], fe) => {
    if (!Qn(fe))
      return Y.indexOf(fe);
    const vt = n.valueKey;
    let Wt = -1;
    return Y.some((Jr, ia) => Td(Wi(Jr, vt)) === Wi(fe, vt) ? (Wt = ia, !0) : !1), Wt;
  }, Le = (Y) => {
    var fe, vt, Wt, Jr, ia;
    const of = Zt(Y) ? Y[0] : Y;
    let Uo = null;
    if (of != null && of.value) {
      const zs = H.value.filter((mO) => mO.value === of.value);
      zs.length > 0 && (Uo = zs[0].$el);
    }
    if (c.value && Uo) {
      const zs = (Jr = (Wt = (vt = (fe = c.value) == null ? void 0 : fe.popperRef) == null ? void 0 : vt.contentRef) == null ? void 0 : Wt.querySelector) == null ? void 0 : Jr.call(Wt, `.${s.be("dropdown", "wrap")}`);
      zs && UB(zs, Uo);
    }
    (ia = y.value) == null || ia.handleScroll();
  }, Ke = (Y) => {
    o.options.set(Y.value, Y), o.cachedOptions.set(Y.value, Y), Y.disabled && o.disabledOptions.set(Y.value, Y);
  }, Xe = (Y, fe) => {
    o.options.get(Y) === fe && o.options.delete(Y);
  }, {
    handleCompositionStart: bt,
    handleCompositionUpdate: bn,
    handleCompositionEnd: oi
  } = sq((Y) => js(Y)), Kr = _(() => {
    var Y, fe;
    return (fe = (Y = c.value) == null ? void 0 : Y.popperRef) == null ? void 0 : fe.contentRef;
  }), fs = () => {
    Qe(() => Le(o.selected));
  }, ta = () => {
    var Y;
    (Y = h.value) == null || Y.focus();
  }, Ng = () => {
    na();
  }, Ig = (Y) => {
    hs(Y);
  }, na = (Y) => {
    if (C.value = !1, O.value) {
      const fe = new FocusEvent("focus", Y);
      Qe(() => S(fe));
    }
  }, Qg = () => {
    o.inputValue.length > 0 ? o.inputValue = "" : C.value = !1;
  }, pO = () => {
    M.value || (o.menuVisibleOnFocus ? o.menuVisibleOnFocus = !1 : C.value = !C.value);
  }, WM = () => {
    C.value ? H.value[o.hoveringIndex] && ea(H.value[o.hoveringIndex]) : pO();
  }, Vc = (Y) => Qn(Y.value) ? Wi(Y.value, n.valueKey) : Y.value, XM = _(() => H.value.filter((Y) => Y.visible).every((Y) => Y.disabled)), YM = _(() => n.multiple ? n.collapseTags ? o.selected.slice(0, n.maxCollapseTags) : o.selected : []), HM = _(() => n.multiple ? n.collapseTags ? o.selected.slice(n.maxCollapseTags) : [] : []), gO = (Y) => {
    if (!C.value) {
      C.value = !0;
      return;
    }
    if (!(o.options.size === 0 || re.value === 0) && !XM.value) {
      Y === "next" ? (o.hoveringIndex++, o.hoveringIndex === o.options.size && (o.hoveringIndex = 0)) : Y === "prev" && (o.hoveringIndex--, o.hoveringIndex < 0 && (o.hoveringIndex = o.options.size - 1));
      const fe = H.value[o.hoveringIndex];
      (fe.disabled === !0 || fe.states.groupDisabled === !0 || !fe.visible) && gO(Y), Qe(() => Le(k.value));
    }
  }, GM = () => {
    if (!a.value)
      return 0;
    const Y = window.getComputedStyle(a.value);
    return Number.parseFloat(Y.gap || "6px");
  }, UM = _(() => {
    const Y = GM();
    return { maxWidth: `${b.value && n.maxCollapseTags === 1 ? o.selectionWidth - o.collapseItemWidth - Y : o.selectionWidth}px` };
  }), KM = _(() => ({ maxWidth: `${o.selectionWidth}px` })), JM = _(() => ({
    width: `${Math.max(o.calculatorWidth, rq)}px`
  }));
  return n.multiple && !Zt(n.modelValue) && e(et, []), !n.multiple && Zt(n.modelValue) && e(et, ""), Jn(a, ls), Jn(f, as), Jn(g, Cr), Jn(v, Cr), Jn(m, si), Jn(b, cs), Be(() => {
    En();
  }), {
    inputId: T,
    contentId: i,
    nsSelect: s,
    nsInput: r,
    states: o,
    isFocused: O,
    expanded: C,
    optionsArray: H,
    hoverOption: k,
    selectSize: ce,
    filteredOptionsCount: re,
    resetCalculatorWidth: as,
    updateTooltip: Cr,
    updateTagTooltip: si,
    debouncedOnInputChange: kr,
    onInput: js,
    deletePrevTag: Ze,
    deleteTag: Dt,
    deleteSelected: hs,
    handleOptionSelect: ea,
    scrollToOption: Le,
    hasModelValue: j,
    shouldShowPlaceholder: Ne,
    currentPlaceholder: ae,
    showClose: D,
    iconComponent: P,
    iconReverse: A,
    validateState: Q,
    validateIcon: X,
    showNewOption: U,
    updateOptions: le,
    collapseTagSize: K,
    setSelected: En,
    selectDisabled: M,
    emptyText: q,
    handleCompositionStart: bt,
    handleCompositionUpdate: bn,
    handleCompositionEnd: oi,
    onOptionCreate: Ke,
    onOptionDestroy: Xe,
    handleMenuEnter: fs,
    handleFocus: x,
    focus: ta,
    blur: Ng,
    handleBlur: S,
    handleClearClick: Ig,
    handleClickOutside: na,
    handleEsc: Qg,
    toggleMenu: pO,
    selectOption: WM,
    getValueKey: Vc,
    navigateOptions: gO,
    dropdownMenuVisible: he,
    showTagList: YM,
    collapseTagList: HM,
    tagStyle: UM,
    collapseTagStyle: KM,
    inputStyle: JM,
    popperRef: Kr,
    inputRef: h,
    tooltipRef: c,
    tagTooltipRef: u,
    calculatorRef: f,
    prefixRef: d,
    suffixRef: p,
    selectRef: l,
    wrapperRef: v,
    selectionRef: a,
    scrollbarRef: y,
    menuRef: g,
    tagMenuRef: m,
    collapseItemRef: b
  };
};
var lq = Z({
  name: "ElOptions",
  setup(n, { slots: e }) {
    const t = ye(Gp);
    let i = [];
    return () => {
      var s, r;
      const o = (s = e.default) == null ? void 0 : s.call(e), l = [];
      function a(c) {
        Zt(c) && c.forEach((u) => {
          var h, f, d, p;
          const g = (h = (u == null ? void 0 : u.type) || {}) == null ? void 0 : h.name;
          g === "ElOptionGroup" ? a(!pt(u.children) && !Zt(u.children) && Mt((f = u.children) == null ? void 0 : f.default) ? (d = u.children) == null ? void 0 : d.default() : u.children) : g === "ElOption" ? l.push((p = u.props) == null ? void 0 : p.value) : Zt(u.children) && a(u.children);
        });
      }
      return o.length && a((r = o[0]) == null ? void 0 : r.children), Xn(l, i) || (i = l, t && (t.states.optionValues = l)), o;
    };
  }
});
const aq = Ae({
  name: String,
  id: String,
  modelValue: {
    type: [Array, String, Number, Boolean, Object],
    default: void 0
  },
  autocomplete: {
    type: String,
    default: "off"
  },
  automaticDropdown: Boolean,
  size: Ns,
  effect: {
    type: be(String),
    default: "light"
  },
  disabled: Boolean,
  clearable: Boolean,
  filterable: Boolean,
  allowCreate: Boolean,
  loading: Boolean,
  popperClass: {
    type: String,
    default: ""
  },
  popperOptions: {
    type: be(Object),
    default: () => ({})
  },
  remote: Boolean,
  loadingText: String,
  noMatchText: String,
  noDataText: String,
  remoteMethod: Function,
  filterMethod: Function,
  multiple: Boolean,
  multipleLimit: {
    type: Number,
    default: 0
  },
  placeholder: {
    type: String
  },
  defaultFirstOption: Boolean,
  reserveKeyword: {
    type: Boolean,
    default: !0
  },
  valueKey: {
    type: String,
    default: "value"
  },
  collapseTags: Boolean,
  collapseTagsTooltip: Boolean,
  maxCollapseTags: {
    type: Number,
    default: 1
  },
  teleported: Ti.teleported,
  persistent: {
    type: Boolean,
    default: !0
  },
  clearIcon: {
    type: xn,
    default: Ov
  },
  fitInputWidth: Boolean,
  suffixIcon: {
    type: xn,
    default: zp
  },
  tagType: { ...TP.type, default: "info" },
  validateEvent: {
    type: Boolean,
    default: !0
  },
  remoteShowSuffix: Boolean,
  suffixTransition: {
    type: Boolean,
    default: !0
  },
  placement: {
    type: be(String),
    values: qp,
    default: "bottom-start"
  },
  fallbackPlacements: {
    type: be(Array),
    default: ["bottom-start", "top-start", "right", "left"]
  },
  ariaLabel: {
    type: String,
    default: void 0
  }
}), uw = "ElSelect", cq = Z({
  name: uw,
  componentName: uw,
  components: {
    ElInput: Vh,
    ElSelectMenu: iq,
    ElOption: Vv,
    ElOptions: lq,
    ElTag: nF,
    ElScrollbar: Iv,
    ElTooltip: qh,
    ElIcon: Ue
  },
  directives: { ClickOutside: Zv },
  props: aq,
  emits: [
    et,
    Es,
    "remove-tag",
    "clear",
    "visible-change",
    "focus",
    "blur"
  ],
  setup(n, { emit: e }) {
    const t = oq(n, e);
    return ht(Gp, Hn({
      props: n,
      states: t.states,
      optionsArray: t.optionsArray,
      handleOptionSelect: t.handleOptionSelect,
      onOptionCreate: t.onOptionCreate,
      onOptionDestroy: t.onOptionDestroy,
      selectRef: t.selectRef,
      setSelected: t.setSelected
    })), {
      ...t
    };
  }
}), uq = ["id", "disabled", "autocomplete", "readonly", "aria-activedescendant", "aria-controls", "aria-expanded", "aria-label"], hq = ["textContent"];
function fq(n, e, t, i, s, r) {
  const o = $t("el-tag"), l = $t("el-tooltip"), a = $t("el-icon"), c = $t("el-option"), u = $t("el-options"), h = $t("el-scrollbar"), f = $t("el-select-menu"), d = ov("click-outside");
  return tt((R(), F("div", {
    ref: "selectRef",
    class: B([n.nsSelect.b(), n.nsSelect.m(n.selectSize)]),
    onMouseenter: e[14] || (e[14] = (p) => n.states.inputHovering = !0),
    onMouseleave: e[15] || (e[15] = (p) => n.states.inputHovering = !1),
    onClick: e[16] || (e[16] = ft((...p) => n.toggleMenu && n.toggleMenu(...p), ["stop"]))
  }, [
    ne(l, {
      ref: "tooltipRef",
      visible: n.dropdownMenuVisible,
      placement: n.placement,
      teleported: n.teleported,
      "popper-class": [n.nsSelect.e("popper"), n.popperClass],
      "popper-options": n.popperOptions,
      "fallback-placements": n.fallbackPlacements,
      effect: n.effect,
      pure: "",
      trigger: "click",
      transition: `${n.nsSelect.namespace.value}-zoom-in-top`,
      "stop-popper-mouse-event": !1,
      "gpu-acceleration": !1,
      persistent: n.persistent,
      onBeforeShow: n.handleMenuEnter,
      onHide: e[13] || (e[13] = (p) => n.states.isBeforeHide = !1)
    }, {
      default: se(() => {
        var p;
        return [
          W("div", {
            ref: "wrapperRef",
            class: B([
              n.nsSelect.e("wrapper"),
              n.nsSelect.is("focused", n.isFocused),
              n.nsSelect.is("hovering", n.states.inputHovering),
              n.nsSelect.is("filterable", n.filterable),
              n.nsSelect.is("disabled", n.selectDisabled)
            ])
          }, [
            n.$slots.prefix ? (R(), F("div", {
              key: 0,
              ref: "prefixRef",
              class: B(n.nsSelect.e("prefix"))
            }, [
              pe(n.$slots, "prefix")
            ], 2)) : te("v-if", !0),
            W("div", {
              ref: "selectionRef",
              class: B([
                n.nsSelect.e("selection"),
                n.nsSelect.is("near", n.multiple && !n.$slots.prefix && !!n.states.selected.length)
              ])
            }, [
              n.multiple ? pe(n.$slots, "tag", { key: 0 }, () => [
                (R(!0), F(sn, null, Tl(n.showTagList, (g) => (R(), F("div", {
                  key: n.getValueKey(g),
                  class: B(n.nsSelect.e("selected-item"))
                }, [
                  ne(o, {
                    closable: !n.selectDisabled && !g.isDisabled,
                    size: n.collapseTagSize,
                    type: n.tagType,
                    "disable-transitions": "",
                    style: Ye(n.tagStyle),
                    onClose: (m) => n.deleteTag(m, g)
                  }, {
                    default: se(() => [
                      W("span", {
                        class: B(n.nsSelect.e("tags-text"))
                      }, Re(g.currentLabel), 3)
                    ]),
                    _: 2
                  }, 1032, ["closable", "size", "type", "style", "onClose"])
                ], 2))), 128)),
                n.collapseTags && n.states.selected.length > n.maxCollapseTags ? (R(), oe(l, {
                  key: 0,
                  ref: "tagTooltipRef",
                  disabled: n.dropdownMenuVisible || !n.collapseTagsTooltip,
                  "fallback-placements": ["bottom", "top", "right", "left"],
                  effect: n.effect,
                  placement: "bottom",
                  teleported: n.teleported
                }, {
                  default: se(() => [
                    W("div", {
                      ref: "collapseItemRef",
                      class: B(n.nsSelect.e("selected-item"))
                    }, [
                      ne(o, {
                        closable: !1,
                        size: n.collapseTagSize,
                        type: n.tagType,
                        "disable-transitions": "",
                        style: Ye(n.collapseTagStyle)
                      }, {
                        default: se(() => [
                          W("span", {
                            class: B(n.nsSelect.e("tags-text"))
                          }, " + " + Re(n.states.selected.length - n.maxCollapseTags), 3)
                        ]),
                        _: 1
                      }, 8, ["size", "type", "style"])
                    ], 2)
                  ]),
                  content: se(() => [
                    W("div", {
                      ref: "tagMenuRef",
                      class: B(n.nsSelect.e("selection"))
                    }, [
                      (R(!0), F(sn, null, Tl(n.collapseTagList, (g) => (R(), F("div", {
                        key: n.getValueKey(g),
                        class: B(n.nsSelect.e("selected-item"))
                      }, [
                        ne(o, {
                          class: "in-tooltip",
                          closable: !n.selectDisabled && !g.isDisabled,
                          size: n.collapseTagSize,
                          type: n.tagType,
                          "disable-transitions": "",
                          onClose: (m) => n.deleteTag(m, g)
                        }, {
                          default: se(() => [
                            W("span", {
                              class: B(n.nsSelect.e("tags-text"))
                            }, Re(g.currentLabel), 3)
                          ]),
                          _: 2
                        }, 1032, ["closable", "size", "type", "onClose"])
                      ], 2))), 128))
                    ], 2)
                  ]),
                  _: 1
                }, 8, ["disabled", "effect", "teleported"])) : te("v-if", !0)
              ]) : te("v-if", !0),
              n.selectDisabled ? te("v-if", !0) : (R(), F("div", {
                key: 1,
                class: B([
                  n.nsSelect.e("selected-item"),
                  n.nsSelect.e("input-wrapper"),
                  n.nsSelect.is("hidden", !n.filterable)
                ])
              }, [
                tt(W("input", {
                  id: n.inputId,
                  ref: "inputRef",
                  "onUpdate:modelValue": e[0] || (e[0] = (g) => n.states.inputValue = g),
                  type: "text",
                  class: B([n.nsSelect.e("input"), n.nsSelect.is(n.selectSize)]),
                  disabled: n.selectDisabled,
                  autocomplete: n.autocomplete,
                  style: Ye(n.inputStyle),
                  role: "combobox",
                  readonly: !n.filterable,
                  spellcheck: "false",
                  "aria-activedescendant": ((p = n.hoverOption) == null ? void 0 : p.id) || "",
                  "aria-controls": n.contentId,
                  "aria-expanded": n.dropdownMenuVisible,
                  "aria-label": n.ariaLabel,
                  "aria-autocomplete": "none",
                  "aria-haspopup": "listbox",
                  onFocus: e[1] || (e[1] = (...g) => n.handleFocus && n.handleFocus(...g)),
                  onBlur: e[2] || (e[2] = (...g) => n.handleBlur && n.handleBlur(...g)),
                  onKeydown: [
                    e[3] || (e[3] = On(ft((g) => n.navigateOptions("next"), ["stop", "prevent"]), ["down"])),
                    e[4] || (e[4] = On(ft((g) => n.navigateOptions("prev"), ["stop", "prevent"]), ["up"])),
                    e[5] || (e[5] = On(ft((...g) => n.handleEsc && n.handleEsc(...g), ["stop", "prevent"]), ["esc"])),
                    e[6] || (e[6] = On(ft((...g) => n.selectOption && n.selectOption(...g), ["stop", "prevent"]), ["enter"])),
                    e[7] || (e[7] = On(ft((...g) => n.deletePrevTag && n.deletePrevTag(...g), ["stop"]), ["delete"]))
                  ],
                  onCompositionstart: e[8] || (e[8] = (...g) => n.handleCompositionStart && n.handleCompositionStart(...g)),
                  onCompositionupdate: e[9] || (e[9] = (...g) => n.handleCompositionUpdate && n.handleCompositionUpdate(...g)),
                  onCompositionend: e[10] || (e[10] = (...g) => n.handleCompositionEnd && n.handleCompositionEnd(...g)),
                  onInput: e[11] || (e[11] = (...g) => n.onInput && n.onInput(...g)),
                  onClick: e[12] || (e[12] = ft((...g) => n.toggleMenu && n.toggleMenu(...g), ["stop"]))
                }, null, 46, uq), [
                  [cR, n.states.inputValue]
                ]),
                n.filterable ? (R(), F("span", {
                  key: 0,
                  ref: "calculatorRef",
                  "aria-hidden": "true",
                  class: B(n.nsSelect.e("input-calculator")),
                  textContent: Re(n.states.inputValue)
                }, null, 10, hq)) : te("v-if", !0)
              ], 2)),
              n.shouldShowPlaceholder ? (R(), F("div", {
                key: 2,
                class: B([
                  n.nsSelect.e("selected-item"),
                  n.nsSelect.e("placeholder"),
                  n.nsSelect.is("transparent", !n.hasModelValue || n.expanded && !n.states.inputValue)
                ])
              }, [
                W("span", null, Re(n.currentPlaceholder), 1)
              ], 2)) : te("v-if", !0)
            ], 2),
            W("div", {
              ref: "suffixRef",
              class: B(n.nsSelect.e("suffix"))
            }, [
              n.iconComponent && !n.showClose ? (R(), oe(a, {
                key: 0,
                class: B([n.nsSelect.e("caret"), n.nsSelect.e("icon"), n.iconReverse])
              }, {
                default: se(() => [
                  (R(), oe(Ot(n.iconComponent)))
                ]),
                _: 1
              }, 8, ["class"])) : te("v-if", !0),
              n.showClose && n.clearIcon ? (R(), oe(a, {
                key: 1,
                class: B([n.nsSelect.e("caret"), n.nsSelect.e("icon")]),
                onClick: n.handleClearClick
              }, {
                default: se(() => [
                  (R(), oe(Ot(n.clearIcon)))
                ]),
                _: 1
              }, 8, ["class", "onClick"])) : te("v-if", !0),
              n.validateState && n.validateIcon ? (R(), oe(a, {
                key: 2,
                class: B([n.nsInput.e("icon"), n.nsInput.e("validateIcon")])
              }, {
                default: se(() => [
                  (R(), oe(Ot(n.validateIcon)))
                ]),
                _: 1
              }, 8, ["class"])) : te("v-if", !0)
            ], 2)
          ], 2)
        ];
      }),
      content: se(() => [
        ne(f, { ref: "menuRef" }, {
          default: se(() => [
            n.$slots.header ? (R(), F("div", {
              key: 0,
              class: B(n.nsSelect.be("dropdown", "header"))
            }, [
              pe(n.$slots, "header")
            ], 2)) : te("v-if", !0),
            tt(ne(h, {
              id: n.contentId,
              ref: "scrollbarRef",
              tag: "ul",
              "wrap-class": n.nsSelect.be("dropdown", "wrap"),
              "view-class": n.nsSelect.be("dropdown", "list"),
              class: B([n.nsSelect.is("empty", n.filteredOptionsCount === 0)]),
              role: "listbox",
              "aria-label": n.ariaLabel,
              "aria-orientation": "vertical"
            }, {
              default: se(() => [
                n.showNewOption ? (R(), oe(c, {
                  key: 0,
                  value: n.states.inputValue,
                  created: !0
                }, null, 8, ["value"])) : te("v-if", !0),
                ne(u, null, {
                  default: se(() => [
                    pe(n.$slots, "default")
                  ]),
                  _: 3
                })
              ]),
              _: 3
            }, 8, ["id", "wrap-class", "view-class", "class", "aria-label"]), [
              [Ht, n.states.options.size > 0 && !n.loading]
            ]),
            n.$slots.loading && n.loading ? (R(), F("div", {
              key: 1,
              class: B(n.nsSelect.be("dropdown", "loading"))
            }, [
              pe(n.$slots, "loading")
            ], 2)) : n.loading || n.filteredOptionsCount === 0 ? (R(), F("div", {
              key: 2,
              class: B(n.nsSelect.be("dropdown", "empty"))
            }, [
              pe(n.$slots, "empty", {}, () => [
                W("span", null, Re(n.emptyText), 1)
              ])
            ], 2)) : te("v-if", !0),
            n.$slots.footer ? (R(), F("div", {
              key: 3,
              class: B(n.nsSelect.be("dropdown", "footer"))
            }, [
              pe(n.$slots, "footer")
            ], 2)) : te("v-if", !0)
          ]),
          _: 3
        }, 512)
      ]),
      _: 3
    }, 8, ["visible", "placement", "teleported", "popper-class", "popper-options", "fallback-placements", "effect", "transition", "persistent", "onBeforeShow"])
  ], 34)), [
    [d, n.handleClickOutside, n.popperRef]
  ]);
}
var dq = /* @__PURE__ */ Ce(cq, [["render", fq], ["__file", "select.vue"]]);
const pq = Z({
  name: "ElOptionGroup",
  componentName: "ElOptionGroup",
  props: {
    label: String,
    disabled: Boolean
  },
  setup(n) {
    const e = ve("select"), t = L(null), i = qe(), s = L([]);
    ht(jP, Hn({
      ...zo(n)
    }));
    const r = _(() => s.value.some((a) => a.visible === !0)), o = (a) => {
      const c = [];
      return Zt(a.children) && a.children.forEach((u) => {
        var h, f;
        u.type && u.type.name === "ElOption" && u.component && u.component.proxy ? c.push(u.component.proxy) : (h = u.children) != null && h.length ? c.push(...o(u)) : (f = u.component) != null && f.subTree && c.push(...o(u.component.subTree));
      }), c;
    }, l = () => {
      s.value = o(i.subTree);
    };
    return Be(() => {
      l();
    }), TB(t, l, {
      attributes: !0,
      subtree: !0,
      childList: !0
    }), {
      groupRef: t,
      visible: r,
      ns: e
    };
  }
});
function gq(n, e, t, i, s, r) {
  return tt((R(), F("ul", {
    ref: "groupRef",
    class: B(n.ns.be("group", "wrap"))
  }, [
    W("li", {
      class: B(n.ns.be("group", "title"))
    }, Re(n.label), 3),
    W("li", null, [
      W("ul", {
        class: B(n.ns.b("group"))
      }, [
        pe(n.$slots, "default")
      ], 2)
    ])
  ], 2)), [
    [Ht, n.visible]
  ]);
}
var zP = /* @__PURE__ */ Ce(pq, [["render", gq], ["__file", "option-group.vue"]]);
const mq = Bt(dq, {
  Option: Vv,
  OptionGroup: zP
}), bq = Ds(Vv);
Ds(zP);
const qv = () => ye(BP, {}), vq = Ae({
  pageSize: {
    type: Number,
    required: !0
  },
  pageSizes: {
    type: be(Array),
    default: () => Gl([10, 20, 30, 40, 50, 100])
  },
  popperClass: {
    type: String
  },
  disabled: Boolean,
  teleported: Boolean,
  size: {
    type: String,
    values: Hl
  }
}), yq = Z({
  name: "ElPaginationSizes"
}), Oq = /* @__PURE__ */ Z({
  ...yq,
  props: vq,
  emits: ["page-size-change"],
  setup(n, { emit: e }) {
    const t = n, { t: i } = ni(), s = ve("pagination"), r = qv(), o = L(t.pageSize);
    ee(() => t.pageSizes, (c, u) => {
      if (!Xn(c, u) && Array.isArray(c)) {
        const h = c.includes(t.pageSize) ? t.pageSize : t.pageSizes[0];
        e("page-size-change", h);
      }
    }), ee(() => t.pageSize, (c) => {
      o.value = c;
    });
    const l = _(() => t.pageSizes);
    function a(c) {
      var u;
      c !== o.value && (o.value = c, (u = r.handleSizeChange) == null || u.call(r, Number(c)));
    }
    return (c, u) => (R(), F("span", {
      class: B(w(s).e("sizes"))
    }, [
      ne(w(mq), {
        "model-value": o.value,
        disabled: c.disabled,
        "popper-class": c.popperClass,
        size: c.size,
        teleported: c.teleported,
        "validate-event": !1,
        onChange: a
      }, {
        default: se(() => [
          (R(!0), F(sn, null, Tl(w(l), (h) => (R(), oe(w(bq), {
            key: h,
            value: h,
            label: h + w(i)("el.pagination.pagesize")
          }, null, 8, ["value", "label"]))), 128))
        ]),
        _: 1
      }, 8, ["model-value", "disabled", "popper-class", "size", "teleported"])
    ], 2));
  }
});
var wq = /* @__PURE__ */ Ce(Oq, [["__file", "sizes.vue"]]);
const xq = Ae({
  size: {
    type: String,
    values: Hl
  }
}), Sq = ["disabled"], Cq = Z({
  name: "ElPaginationJumper"
}), kq = /* @__PURE__ */ Z({
  ...Cq,
  props: xq,
  setup(n) {
    const { t: e } = ni(), t = ve("pagination"), { pageCount: i, disabled: s, currentPage: r, changeEvent: o } = qv(), l = L(), a = _(() => {
      var h;
      return (h = l.value) != null ? h : r == null ? void 0 : r.value;
    });
    function c(h) {
      l.value = h ? +h : "";
    }
    function u(h) {
      h = Math.trunc(+h), o == null || o(h), l.value = void 0;
    }
    return (h, f) => (R(), F("span", {
      class: B(w(t).e("jump")),
      disabled: w(s)
    }, [
      W("span", {
        class: B([w(t).e("goto")])
      }, Re(w(e)("el.pagination.goto")), 3),
      ne(w(Vh), {
        size: h.size,
        class: B([w(t).e("editor"), w(t).is("in-pagination")]),
        min: 1,
        max: w(i),
        disabled: w(s),
        "model-value": w(a),
        "validate-event": !1,
        label: w(e)("el.pagination.page"),
        type: "number",
        "onUpdate:modelValue": c,
        onChange: u
      }, null, 8, ["size", "class", "max", "disabled", "model-value", "label"]),
      W("span", {
        class: B([w(t).e("classifier")])
      }, Re(w(e)("el.pagination.pageClassifier")), 3)
    ], 10, Sq));
  }
});
var Pq = /* @__PURE__ */ Ce(kq, [["__file", "jumper.vue"]]);
const Aq = Ae({
  total: {
    type: Number,
    default: 1e3
  }
}), Eq = ["disabled"], $q = Z({
  name: "ElPaginationTotal"
}), Tq = /* @__PURE__ */ Z({
  ...$q,
  props: Aq,
  setup(n) {
    const { t: e } = ni(), t = ve("pagination"), { disabled: i } = qv();
    return (s, r) => (R(), F("span", {
      class: B(w(t).e("total")),
      disabled: w(i)
    }, Re(w(e)("el.pagination.total", {
      total: s.total
    })), 11, Eq));
  }
});
var _q = /* @__PURE__ */ Ce(Tq, [["__file", "total.vue"]]);
const Mq = Ae({
  currentPage: {
    type: Number,
    default: 1
  },
  pageCount: {
    type: Number,
    required: !0
  },
  pagerCount: {
    type: Number,
    default: 7
  },
  disabled: Boolean
}), Rq = ["onKeyup"], Dq = ["aria-current", "aria-label", "tabindex"], Lq = ["tabindex", "aria-label"], Nq = ["aria-current", "aria-label", "tabindex"], Iq = ["tabindex", "aria-label"], Qq = ["aria-current", "aria-label", "tabindex"], Bq = Z({
  name: "ElPaginationPager"
}), jq = /* @__PURE__ */ Z({
  ...Bq,
  props: Mq,
  emits: ["change"],
  setup(n, { emit: e }) {
    const t = n, i = ve("pager"), s = ve("icon"), { t: r } = ni(), o = L(!1), l = L(!1), a = L(!1), c = L(!1), u = L(!1), h = L(!1), f = _(() => {
      const O = t.pagerCount, x = (O - 1) / 2, S = Number(t.currentPage), C = Number(t.pageCount);
      let k = !1, E = !1;
      C > O && (S > O - x && (k = !0), S < C - x && (E = !0));
      const $ = [];
      if (k && !E) {
        const T = C - (O - 2);
        for (let M = T; M < C; M++)
          $.push(M);
      } else if (!k && E)
        for (let T = 2; T < O; T++)
          $.push(T);
      else if (k && E) {
        const T = Math.floor(O / 2) - 1;
        for (let M = S - T; M <= S + T; M++)
          $.push(M);
      } else
        for (let T = 2; T < C; T++)
          $.push(T);
      return $;
    }), d = _(() => [
      "more",
      "btn-quickprev",
      s.b(),
      i.is("disabled", t.disabled)
    ]), p = _(() => [
      "more",
      "btn-quicknext",
      s.b(),
      i.is("disabled", t.disabled)
    ]), g = _(() => t.disabled ? -1 : 0);
    sr(() => {
      const O = (t.pagerCount - 1) / 2;
      o.value = !1, l.value = !1, t.pageCount > t.pagerCount && (t.currentPage > t.pagerCount - O && (o.value = !0), t.currentPage < t.pageCount - O && (l.value = !0));
    });
    function m(O = !1) {
      t.disabled || (O ? a.value = !0 : c.value = !0);
    }
    function b(O = !1) {
      O ? u.value = !0 : h.value = !0;
    }
    function y(O) {
      const x = O.target;
      if (x.tagName.toLowerCase() === "li" && Array.from(x.classList).includes("number")) {
        const S = Number(x.textContent);
        S !== t.currentPage && e("change", S);
      } else
        x.tagName.toLowerCase() === "li" && Array.from(x.classList).includes("more") && v(O);
    }
    function v(O) {
      const x = O.target;
      if (x.tagName.toLowerCase() === "ul" || t.disabled)
        return;
      let S = Number(x.textContent);
      const C = t.pageCount, k = t.currentPage, E = t.pagerCount - 2;
      x.className.includes("more") && (x.className.includes("quickprev") ? S = k - E : x.className.includes("quicknext") && (S = k + E)), Number.isNaN(+S) || (S < 1 && (S = 1), S > C && (S = C)), S !== k && e("change", S);
    }
    return (O, x) => (R(), F("ul", {
      class: B(w(i).b()),
      onClick: v,
      onKeyup: On(y, ["enter"])
    }, [
      O.pageCount > 0 ? (R(), F("li", {
        key: 0,
        class: B([[
          w(i).is("active", O.currentPage === 1),
          w(i).is("disabled", O.disabled)
        ], "number"]),
        "aria-current": O.currentPage === 1,
        "aria-label": w(r)("el.pagination.currentPage", { pager: 1 }),
        tabindex: w(g)
      }, " 1 ", 10, Dq)) : te("v-if", !0),
      o.value ? (R(), F("li", {
        key: 1,
        class: B(w(d)),
        tabindex: w(g),
        "aria-label": w(r)("el.pagination.prevPages", { pager: O.pagerCount - 2 }),
        onMouseenter: x[0] || (x[0] = (S) => m(!0)),
        onMouseleave: x[1] || (x[1] = (S) => a.value = !1),
        onFocus: x[2] || (x[2] = (S) => b(!0)),
        onBlur: x[3] || (x[3] = (S) => u.value = !1)
      }, [
        (a.value || u.value) && !O.disabled ? (R(), oe(w(H5), { key: 0 })) : (R(), oe(w(e1), { key: 1 }))
      ], 42, Lq)) : te("v-if", !0),
      (R(!0), F(sn, null, Tl(w(f), (S) => (R(), F("li", {
        key: S,
        class: B([[
          w(i).is("active", O.currentPage === S),
          w(i).is("disabled", O.disabled)
        ], "number"]),
        "aria-current": O.currentPage === S,
        "aria-label": w(r)("el.pagination.currentPage", { pager: S }),
        tabindex: w(g)
      }, Re(S), 11, Nq))), 128)),
      l.value ? (R(), F("li", {
        key: 2,
        class: B(w(p)),
        tabindex: w(g),
        "aria-label": w(r)("el.pagination.nextPages", { pager: O.pagerCount - 2 }),
        onMouseenter: x[4] || (x[4] = (S) => m()),
        onMouseleave: x[5] || (x[5] = (S) => c.value = !1),
        onFocus: x[6] || (x[6] = (S) => b()),
        onBlur: x[7] || (x[7] = (S) => h.value = !1)
      }, [
        (c.value || h.value) && !O.disabled ? (R(), oe(w(U5), { key: 0 })) : (R(), oe(w(e1), { key: 1 }))
      ], 42, Iq)) : te("v-if", !0),
      O.pageCount > 1 ? (R(), F("li", {
        key: 3,
        class: B([[
          w(i).is("active", O.currentPage === O.pageCount),
          w(i).is("disabled", O.disabled)
        ], "number"]),
        "aria-current": O.currentPage === O.pageCount,
        "aria-label": w(r)("el.pagination.currentPage", { pager: O.pageCount }),
        tabindex: w(g)
      }, Re(O.pageCount), 11, Qq)) : te("v-if", !0)
    ], 42, Rq));
  }
});
var zq = /* @__PURE__ */ Ce(jq, [["__file", "pager.vue"]]);
const Un = (n) => typeof n != "number", Zq = Ae({
  pageSize: Number,
  defaultPageSize: Number,
  total: Number,
  pageCount: Number,
  pagerCount: {
    type: Number,
    validator: (n) => ze(n) && Math.trunc(n) === n && n > 4 && n < 22 && n % 2 === 1,
    default: 7
  },
  currentPage: Number,
  defaultCurrentPage: Number,
  layout: {
    type: String,
    default: ["prev", "pager", "next", "jumper", "->", "total"].join(", ")
  },
  pageSizes: {
    type: be(Array),
    default: () => Gl([10, 20, 30, 40, 50, 100])
  },
  popperClass: {
    type: String,
    default: ""
  },
  prevText: {
    type: String,
    default: ""
  },
  prevIcon: {
    type: xn,
    default: () => r2
  },
  nextText: {
    type: String,
    default: ""
  },
  nextIcon: {
    type: xn,
    default: () => Qh
  },
  teleported: {
    type: Boolean,
    default: !0
  },
  small: Boolean,
  background: Boolean,
  disabled: Boolean,
  hideOnSinglePage: Boolean
}), Fq = {
  "update:current-page": (n) => ze(n),
  "update:page-size": (n) => ze(n),
  "size-change": (n) => ze(n),
  change: (n, e) => ze(n) && ze(e),
  "current-change": (n) => ze(n),
  "prev-click": (n) => ze(n),
  "next-click": (n) => ze(n)
}, hw = "ElPagination";
var Vq = Z({
  name: hw,
  props: Zq,
  emits: Fq,
  setup(n, { emit: e, slots: t }) {
    const { t: i } = ni(), s = ve("pagination"), r = qe().vnode.props || {}, o = "onUpdate:currentPage" in r || "onUpdate:current-page" in r || "onCurrentChange" in r, l = "onUpdate:pageSize" in r || "onUpdate:page-size" in r || "onSizeChange" in r, a = _(() => {
      if (Un(n.total) && Un(n.pageCount) || !Un(n.currentPage) && !o)
        return !1;
      if (n.layout.includes("sizes")) {
        if (Un(n.pageCount)) {
          if (!Un(n.total) && !Un(n.pageSize) && !l)
            return !1;
        } else if (!l)
          return !1;
      }
      return !0;
    }), c = L(Un(n.defaultPageSize) ? 10 : n.defaultPageSize), u = L(Un(n.defaultCurrentPage) ? 1 : n.defaultCurrentPage), h = _({
      get() {
        return Un(n.pageSize) ? c.value : n.pageSize;
      },
      set(v) {
        Un(n.pageSize) && (c.value = v), l && (e("update:page-size", v), e("size-change", v));
      }
    }), f = _(() => {
      let v = 0;
      return Un(n.pageCount) ? Un(n.total) || (v = Math.max(1, Math.ceil(n.total / h.value))) : v = n.pageCount, v;
    }), d = _({
      get() {
        return Un(n.currentPage) ? u.value : n.currentPage;
      },
      set(v) {
        let O = v;
        v < 1 ? O = 1 : v > f.value && (O = f.value), Un(n.currentPage) && (u.value = O), o && (e("update:current-page", O), e("current-change", O));
      }
    });
    ee(f, (v) => {
      d.value > v && (d.value = v);
    }), ee([d, h], (v) => {
      e("change", ...v);
    }, { flush: "post" });
    function p(v) {
      d.value = v;
    }
    function g(v) {
      h.value = v;
      const O = f.value;
      d.value > O && (d.value = O);
    }
    function m() {
      n.disabled || (d.value -= 1, e("prev-click", d.value));
    }
    function b() {
      n.disabled || (d.value += 1, e("next-click", d.value));
    }
    function y(v, O) {
      v && (v.props || (v.props = {}), v.props.class = [v.props.class, O].join(" "));
    }
    return ht(BP, {
      pageCount: f,
      disabled: _(() => n.disabled),
      currentPage: d,
      changeEvent: p,
      handleSizeChange: g
    }), () => {
      var v, O;
      if (!a.value)
        return rt(hw, i("el.pagination.deprecationWarning")), null;
      if (!n.layout || n.hideOnSinglePage && f.value <= 1)
        return null;
      const x = [], S = [], C = _e("div", { class: s.e("rightwrapper") }, S), k = {
        prev: _e(VV, {
          disabled: n.disabled,
          currentPage: d.value,
          prevText: n.prevText,
          prevIcon: n.prevIcon,
          onClick: m
        }),
        jumper: _e(Pq, {
          size: n.small ? "small" : "default"
        }),
        pager: _e(zq, {
          currentPage: d.value,
          pageCount: f.value,
          pagerCount: n.pagerCount,
          onChange: p,
          disabled: n.disabled
        }),
        next: _e(GV, {
          disabled: n.disabled,
          currentPage: d.value,
          pageCount: f.value,
          nextText: n.nextText,
          nextIcon: n.nextIcon,
          onClick: b
        }),
        sizes: _e(wq, {
          pageSize: h.value,
          pageSizes: n.pageSizes,
          popperClass: n.popperClass,
          disabled: n.disabled,
          teleported: n.teleported,
          size: n.small ? "small" : "default"
        }),
        slot: (O = (v = t == null ? void 0 : t.default) == null ? void 0 : v.call(t)) != null ? O : null,
        total: _e(_q, { total: Un(n.total) ? 0 : n.total })
      }, E = n.layout.split(",").map((T) => T.trim());
      let $ = !1;
      return E.forEach((T) => {
        if (T === "->") {
          $ = !0;
          return;
        }
        $ ? S.push(k[T]) : x.push(k[T]);
      }), y(x[0], s.is("first")), y(x[x.length - 1], s.is("last")), $ && S.length > 0 && (y(S[0], s.is("first")), y(S[S.length - 1], s.is("last")), x.push(C)), _e("div", {
        class: [
          s.b(),
          s.is("background", n.background),
          {
            [s.m("small")]: n.small
          }
        ]
      }, x);
    };
  }
});
const XZe = Bt(Vq), qq = Ae({
  trigger: Xu.trigger,
  placement: tm.placement,
  disabled: Xu.disabled,
  visible: Ti.visible,
  transition: Ti.transition,
  popperOptions: tm.popperOptions,
  tabindex: tm.tabindex,
  content: Ti.content,
  popperStyle: Ti.popperStyle,
  popperClass: Ti.popperClass,
  enterable: {
    ...Ti.enterable,
    default: !0
  },
  effect: {
    ...Ti.effect,
    default: "light"
  },
  teleported: Ti.teleported,
  title: String,
  width: {
    type: [String, Number],
    default: 150
  },
  offset: {
    type: Number,
    default: void 0
  },
  showAfter: {
    type: Number,
    default: 0
  },
  hideAfter: {
    type: Number,
    default: 200
  },
  autoClose: {
    type: Number,
    default: 0
  },
  showArrow: {
    type: Boolean,
    default: !0
  },
  persistent: {
    type: Boolean,
    default: !0
  },
  "onUpdate:visible": {
    type: Function
  }
}), Wq = {
  "update:visible": (n) => Yn(n),
  "before-enter": () => !0,
  "before-leave": () => !0,
  "after-enter": () => !0,
  "after-leave": () => !0
}, Xq = "onUpdate:visible", Yq = Z({
  name: "ElPopover"
}), Hq = /* @__PURE__ */ Z({
  ...Yq,
  props: qq,
  emits: Wq,
  setup(n, { expose: e, emit: t }) {
    const i = n, s = _(() => i[Xq]), r = ve("popover"), o = L(), l = _(() => {
      var m;
      return (m = w(o)) == null ? void 0 : m.popperRef;
    }), a = _(() => [
      {
        width: Qi(i.width)
      },
      i.popperStyle
    ]), c = _(() => [r.b(), i.popperClass, { [r.m("plain")]: !!i.content }]), u = _(() => i.transition === `${r.namespace.value}-fade-in-linear`), h = () => {
      var m;
      (m = o.value) == null || m.hide();
    }, f = () => {
      t("before-enter");
    }, d = () => {
      t("before-leave");
    }, p = () => {
      t("after-enter");
    }, g = () => {
      t("update:visible", !1), t("after-leave");
    };
    return e({
      popperRef: l,
      hide: h
    }), (m, b) => (R(), oe(w(qh), Gi({
      ref_key: "tooltipRef",
      ref: o
    }, m.$attrs, {
      trigger: m.trigger,
      placement: m.placement,
      disabled: m.disabled,
      visible: m.visible,
      transition: m.transition,
      "popper-options": m.popperOptions,
      tabindex: m.tabindex,
      content: m.content,
      offset: m.offset,
      "show-after": m.showAfter,
      "hide-after": m.hideAfter,
      "auto-close": m.autoClose,
      "show-arrow": m.showArrow,
      "aria-label": m.title,
      effect: m.effect,
      enterable: m.enterable,
      "popper-class": w(c),
      "popper-style": w(a),
      teleported: m.teleported,
      persistent: m.persistent,
      "gpu-acceleration": w(u),
      "onUpdate:visible": w(s),
      onBeforeShow: f,
      onBeforeHide: d,
      onShow: p,
      onHide: g
    }), {
      content: se(() => [
        m.title ? (R(), F("div", {
          key: 0,
          class: B(w(r).e("title")),
          role: "title"
        }, Re(m.title), 3)) : te("v-if", !0),
        pe(m.$slots, "default", {}, () => [
          mi(Re(m.content), 1)
        ])
      ]),
      default: se(() => [
        m.$slots.reference ? pe(m.$slots, "reference", { key: 0 }) : te("v-if", !0)
      ]),
      _: 3
    }, 16, ["trigger", "placement", "disabled", "visible", "transition", "popper-options", "tabindex", "content", "offset", "show-after", "hide-after", "auto-close", "show-arrow", "aria-label", "effect", "enterable", "popper-class", "popper-style", "teleported", "persistent", "gpu-acceleration", "onUpdate:visible"]));
  }
});
var Gq = /* @__PURE__ */ Ce(Hq, [["__file", "popover.vue"]]);
const fw = (n, e) => {
  const t = e.arg || e.value, i = t == null ? void 0 : t.popperRef;
  i && (i.triggerRef = n);
};
var Uq = {
  mounted(n, e) {
    fw(n, e);
  },
  updated(n, e) {
    fw(n, e);
  }
};
const Kq = "popover", Jq = JB(Uq, Kq), YZe = Bt(Gq, {
  directive: Jq
}), eW = Ae({
  modelValue: {
    type: [Boolean, String, Number],
    default: !1
  },
  disabled: {
    type: Boolean,
    default: !1
  },
  loading: {
    type: Boolean,
    default: !1
  },
  size: {
    type: String,
    validator: C2
  },
  width: {
    type: [String, Number],
    default: ""
  },
  inlinePrompt: {
    type: Boolean,
    default: !1
  },
  inactiveActionIcon: {
    type: xn
  },
  activeActionIcon: {
    type: xn
  },
  activeIcon: {
    type: xn
  },
  inactiveIcon: {
    type: xn
  },
  activeText: {
    type: String,
    default: ""
  },
  inactiveText: {
    type: String,
    default: ""
  },
  activeValue: {
    type: [Boolean, String, Number],
    default: !0
  },
  inactiveValue: {
    type: [Boolean, String, Number],
    default: !1
  },
  activeColor: {
    type: String,
    default: ""
  },
  inactiveColor: {
    type: String,
    default: ""
  },
  borderColor: {
    type: String,
    default: ""
  },
  name: {
    type: String,
    default: ""
  },
  validateEvent: {
    type: Boolean,
    default: !0
  },
  beforeChange: {
    type: be(Function)
  },
  id: String,
  tabindex: {
    type: [String, Number]
  },
  value: {
    type: [Boolean, String, Number],
    default: !1
  },
  label: {
    type: String,
    default: void 0
  }
}), tW = {
  [et]: (n) => Yn(n) || pt(n) || ze(n),
  [Es]: (n) => Yn(n) || pt(n) || ze(n),
  [Sl]: (n) => Yn(n) || pt(n) || ze(n)
}, nW = ["onClick"], iW = ["id", "aria-checked", "aria-disabled", "aria-label", "name", "true-value", "false-value", "disabled", "tabindex", "onKeydown"], sW = ["aria-hidden"], rW = ["aria-hidden"], oW = ["aria-hidden"], fd = "ElSwitch", lW = Z({
  name: fd
}), aW = /* @__PURE__ */ Z({
  ...lW,
  props: eW,
  emits: tW,
  setup(n, { expose: e, emit: t }) {
    const i = n, s = qe(), { formItem: r } = vr(), o = Bi(), l = ve("switch");
    ((k) => {
      k.forEach((E) => {
        Dl({
          from: E[0],
          replacement: E[1],
          scope: fd,
          version: "2.3.0",
          ref: "https://element-plus.org/en-US/component/switch.html#attributes",
          type: "Attribute"
        }, _(() => {
          var $;
          return !!(($ = s.vnode.props) != null && $[E[2]]);
        }));
      });
    })([
      ['"value"', '"model-value" or "v-model"', "value"],
      ['"active-color"', "CSS var `--el-switch-on-color`", "activeColor"],
      ['"inactive-color"', "CSS var `--el-switch-off-color`", "inactiveColor"],
      ['"border-color"', "CSS var `--el-switch-border-color`", "borderColor"]
    ]);
    const { inputId: c } = Ul(i, {
      formItemContext: r
    }), u = qo(_(() => i.loading)), h = L(i.modelValue !== !1), f = L(), d = L(), p = _(() => [
      l.b(),
      l.m(o.value),
      l.is("disabled", u.value),
      l.is("checked", v.value)
    ]), g = _(() => [
      l.e("label"),
      l.em("label", "left"),
      l.is("active", !v.value)
    ]), m = _(() => [
      l.e("label"),
      l.em("label", "right"),
      l.is("active", v.value)
    ]), b = _(() => ({
      width: Qi(i.width)
    }));
    ee(() => i.modelValue, () => {
      h.value = !0;
    }), ee(() => i.value, () => {
      h.value = !1;
    });
    const y = _(() => h.value ? i.modelValue : i.value), v = _(() => y.value === i.activeValue);
    [i.activeValue, i.inactiveValue].includes(y.value) || (t(et, i.inactiveValue), t(Es, i.inactiveValue), t(Sl, i.inactiveValue)), ee(v, (k) => {
      var E;
      f.value.checked = k, i.validateEvent && ((E = r == null ? void 0 : r.validate) == null || E.call(r, "change").catch(($) => rt($)));
    });
    const O = () => {
      const k = v.value ? i.inactiveValue : i.activeValue;
      t(et, k), t(Es, k), t(Sl, k), Qe(() => {
        f.value.checked = v.value;
      });
    }, x = () => {
      if (u.value)
        return;
      const { beforeChange: k } = i;
      if (!k) {
        O();
        return;
      }
      const E = k();
      [
        y1(E),
        Yn(E)
      ].includes(!0) || Yr(fd, "beforeChange must return type `Promise<boolean>` or `boolean`"), y1(E) ? E.then((T) => {
        T && O();
      }).catch((T) => {
        rt(fd, `some error occurred: ${T}`);
      }) : E && O();
    }, S = _(() => l.cssVarBlock({
      ...i.activeColor ? { "on-color": i.activeColor } : null,
      ...i.inactiveColor ? { "off-color": i.inactiveColor } : null,
      ...i.borderColor ? { "border-color": i.borderColor } : null
    })), C = () => {
      var k, E;
      (E = (k = f.value) == null ? void 0 : k.focus) == null || E.call(k);
    };
    return Be(() => {
      f.value.checked = v.value;
    }), e({
      focus: C,
      checked: v
    }), (k, E) => (R(), F("div", {
      class: B(w(p)),
      style: Ye(w(S)),
      onClick: ft(x, ["prevent"])
    }, [
      W("input", {
        id: w(c),
        ref_key: "input",
        ref: f,
        class: B(w(l).e("input")),
        type: "checkbox",
        role: "switch",
        "aria-checked": w(v),
        "aria-disabled": w(u),
        "aria-label": k.label,
        name: k.name,
        "true-value": k.activeValue,
        "false-value": k.inactiveValue,
        disabled: w(u),
        tabindex: k.tabindex,
        onChange: O,
        onKeydown: On(x, ["enter"])
      }, null, 42, iW),
      !k.inlinePrompt && (k.inactiveIcon || k.inactiveText) ? (R(), F("span", {
        key: 0,
        class: B(w(g))
      }, [
        k.inactiveIcon ? (R(), oe(w(Ue), { key: 0 }, {
          default: se(() => [
            (R(), oe(Ot(k.inactiveIcon)))
          ]),
          _: 1
        })) : te("v-if", !0),
        !k.inactiveIcon && k.inactiveText ? (R(), F("span", {
          key: 1,
          "aria-hidden": w(v)
        }, Re(k.inactiveText), 9, sW)) : te("v-if", !0)
      ], 2)) : te("v-if", !0),
      W("span", {
        ref_key: "core",
        ref: d,
        class: B(w(l).e("core")),
        style: Ye(w(b))
      }, [
        k.inlinePrompt ? (R(), F("div", {
          key: 0,
          class: B(w(l).e("inner"))
        }, [
          k.activeIcon || k.inactiveIcon ? (R(), oe(w(Ue), {
            key: 0,
            class: B(w(l).is("icon"))
          }, {
            default: se(() => [
              (R(), oe(Ot(w(v) ? k.activeIcon : k.inactiveIcon)))
            ]),
            _: 1
          }, 8, ["class"])) : k.activeText || k.inactiveText ? (R(), F("span", {
            key: 1,
            class: B(w(l).is("text")),
            "aria-hidden": !w(v)
          }, Re(w(v) ? k.activeText : k.inactiveText), 11, rW)) : te("v-if", !0)
        ], 2)) : te("v-if", !0),
        W("div", {
          class: B(w(l).e("action"))
        }, [
          k.loading ? (R(), oe(w(Ue), {
            key: 0,
            class: B(w(l).is("loading"))
          }, {
            default: se(() => [
              ne(w(Zp))
            ]),
            _: 1
          }, 8, ["class"])) : w(v) ? pe(k.$slots, "active-action", { key: 1 }, () => [
            k.activeActionIcon ? (R(), oe(w(Ue), { key: 0 }, {
              default: se(() => [
                (R(), oe(Ot(k.activeActionIcon)))
              ]),
              _: 1
            })) : te("v-if", !0)
          ]) : w(v) ? te("v-if", !0) : pe(k.$slots, "inactive-action", { key: 2 }, () => [
            k.inactiveActionIcon ? (R(), oe(w(Ue), { key: 0 }, {
              default: se(() => [
                (R(), oe(Ot(k.inactiveActionIcon)))
              ]),
              _: 1
            })) : te("v-if", !0)
          ])
        ], 2)
      ], 6),
      !k.inlinePrompt && (k.activeIcon || k.activeText) ? (R(), F("span", {
        key: 1,
        class: B(w(m))
      }, [
        k.activeIcon ? (R(), oe(w(Ue), { key: 0 }, {
          default: se(() => [
            (R(), oe(Ot(k.activeIcon)))
          ]),
          _: 1
        })) : te("v-if", !0),
        !k.activeIcon && k.activeText ? (R(), F("span", {
          key: 1,
          "aria-hidden": !w(v)
        }, Re(k.activeText), 9, oW)) : te("v-if", !0)
      ], 2)) : te("v-if", !0)
    ], 14, nW));
  }
});
var cW = /* @__PURE__ */ Ce(aW, [["__file", "switch.vue"]]);
const HZe = Bt(cW), nm = function(n) {
  var e;
  return (e = n.target) == null ? void 0 : e.closest("td");
}, uW = function(n, e, t, i, s) {
  if (!e && !i && (!s || Array.isArray(s) && !s.length))
    return n;
  typeof t == "string" ? t = t === "descending" ? -1 : 1 : t = t && t < 0 ? -1 : 1;
  const r = i ? null : function(l, a) {
    return s ? (Array.isArray(s) || (s = [s]), s.map((c) => typeof c == "string" ? Wi(l, c) : c(l, a, n))) : (e !== "$key" && Qn(l) && "$value" in l && (l = l.$value), [Qn(l) ? Wi(l, e) : l]);
  }, o = function(l, a) {
    if (i)
      return i(l.value, a.value);
    for (let c = 0, u = l.key.length; c < u; c++) {
      if (l.key[c] < a.key[c])
        return -1;
      if (l.key[c] > a.key[c])
        return 1;
    }
    return 0;
  };
  return n.map((l, a) => ({
    value: l,
    index: a,
    key: r ? r(l, a) : null
  })).sort((l, a) => {
    let c = o(l, a);
    return c || (c = l.index - a.index), c * +t;
  }).map((l) => l.value);
}, ZP = function(n, e) {
  let t = null;
  return n.columns.forEach((i) => {
    i.id === e && (t = i);
  }), t;
}, hW = function(n, e) {
  let t = null;
  for (let i = 0; i < n.columns.length; i++) {
    const s = n.columns[i];
    if (s.columnKey === e) {
      t = s;
      break;
    }
  }
  return t || Yr("ElTable", `No column matching with column-key: ${e}`), t;
}, dw = function(n, e, t) {
  const i = (e.className || "").match(new RegExp(`${t}-table_[^\\s]+`, "gm"));
  return i ? ZP(n, i[0]) : null;
}, Ln = (n, e) => {
  if (!n)
    throw new Error("Row is required when get row identity");
  if (typeof e == "string") {
    if (!e.includes("."))
      return `${n[e]}`;
    const t = e.split(".");
    let i = n;
    for (const s of t)
      i = i[s];
    return `${i}`;
  } else if (typeof e == "function")
    return e.call(null, n);
}, dl = function(n, e) {
  const t = {};
  return (n || []).forEach((i, s) => {
    t[Ln(i, e)] = { row: i, index: s };
  }), t;
};
function fW(n, e) {
  const t = {};
  let i;
  for (i in n)
    t[i] = n[i];
  for (i in e)
    if (Ps(e, i)) {
      const s = e[i];
      typeof s < "u" && (t[i] = s);
    }
  return t;
}
function Wv(n) {
  return n === "" || n !== void 0 && (n = Number.parseInt(n, 10), Number.isNaN(n) && (n = "")), n;
}
function FP(n) {
  return n === "" || n !== void 0 && (n = Wv(n), Number.isNaN(n) && (n = 80)), n;
}
function dW(n) {
  return typeof n == "number" ? n : typeof n == "string" ? /^\d+(?:px)?$/.test(n) ? Number.parseInt(n, 10) : n : null;
}
function pW(...n) {
  return n.length === 0 ? (e) => e : n.length === 1 ? n[0] : n.reduce((e, t) => (...i) => e(t(...i)));
}
function Ou(n, e, t) {
  let i = !1;
  const s = n.indexOf(e), r = s !== -1, o = (l) => {
    l === "add" ? n.push(e) : n.splice(s, 1), i = !0, Zt(e.children) && e.children.forEach((a) => {
      Ou(n, a, t ?? !r);
    });
  };
  return Yn(t) ? t && !r ? o("add") : !t && r && o("remove") : o(r ? "remove" : "add"), i;
}
function gW(n, e, t = "children", i = "hasChildren") {
  const s = (o) => !(Array.isArray(o) && o.length);
  function r(o, l, a) {
    e(o, l, a), l.forEach((c) => {
      if (c[i]) {
        e(c, null, a + 1);
        return;
      }
      const u = c[t];
      s(u) || r(c, u, a + 1);
    });
  }
  n.forEach((o) => {
    if (o[i]) {
      e(o, null, 0);
      return;
    }
    const l = o[t];
    s(l) || r(o, l, 0);
  });
}
let Zi = null;
function mW(n, e, t, i) {
  if ((Zi == null ? void 0 : Zi.trigger) === t)
    return;
  Zi == null || Zi();
  const s = i == null ? void 0 : i.refs.tableWrapper, r = s == null ? void 0 : s.dataset.prefix, o = {
    strategy: "fixed",
    ...n.popperOptions
  }, l = ne(qh, {
    content: e,
    virtualTriggering: !0,
    virtualRef: t,
    appendTo: s,
    placement: "top",
    transition: "none",
    offset: 0,
    hideAfter: 0,
    ...n,
    popperOptions: o,
    onHide: () => {
      Zi == null || Zi();
    }
  });
  l.appContext = { ...i.appContext, ...i };
  const a = document.createElement("div");
  Ao(l, a), l.component.exposed.onOpen();
  const c = s == null ? void 0 : s.querySelector(`.${r}-scrollbar__wrap`);
  Zi = () => {
    Ao(null, a), c == null || c.removeEventListener("scroll", Zi), Zi = null;
  }, Zi.trigger = t, c == null || c.addEventListener("scroll", Zi);
}
function VP(n) {
  return n.children ? YQ(n.children, VP) : [n];
}
function pw(n, e) {
  return n + e.colSpan;
}
const qP = (n, e, t, i) => {
  let s = 0, r = n;
  const o = t.states.columns.value;
  if (i) {
    const a = VP(i[n]);
    s = o.slice(0, o.indexOf(a[0])).reduce(pw, 0), r = s + a.reduce(pw, 0) - 1;
  } else
    s = n;
  let l;
  switch (e) {
    case "left":
      r < t.states.fixedLeafColumnsLength.value && (l = "left");
      break;
    case "right":
      s >= o.length - t.states.rightFixedLeafColumnsLength.value && (l = "right");
      break;
    default:
      r < t.states.fixedLeafColumnsLength.value ? l = "left" : s >= o.length - t.states.rightFixedLeafColumnsLength.value && (l = "right");
  }
  return l ? {
    direction: l,
    start: s,
    after: r
  } : {};
}, Xv = (n, e, t, i, s, r = 0) => {
  const o = [], { direction: l, start: a, after: c } = qP(e, t, i, s);
  if (l) {
    const u = l === "left";
    o.push(`${n}-fixed-column--${l}`), u && c + r === i.states.fixedLeafColumnsLength.value - 1 ? o.push("is-last-column") : !u && a - r === i.states.columns.value.length - i.states.rightFixedLeafColumnsLength.value && o.push("is-first-column");
  }
  return o;
};
function gw(n, e) {
  return n + (e.realWidth === null || Number.isNaN(e.realWidth) ? Number(e.width) : e.realWidth);
}
const Yv = (n, e, t, i) => {
  const {
    direction: s,
    start: r = 0,
    after: o = 0
  } = qP(n, e, t, i);
  if (!s)
    return;
  const l = {}, a = s === "left", c = t.states.columns.value;
  return a ? l.left = c.slice(0, r).reduce(gw, 0) : l.right = c.slice(o + 1).reverse().reduce(gw, 0), l;
}, Ha = (n, e) => {
  n && (Number.isNaN(n[e]) || (n[e] = `${n[e]}px`));
};
function bW(n) {
  const e = qe(), t = L(!1), i = L([]);
  return {
    updateExpandRows: () => {
      const a = n.data.value || [], c = n.rowKey.value;
      if (t.value)
        i.value = a.slice();
      else if (c) {
        const u = dl(i.value, c);
        i.value = a.reduce((h, f) => {
          const d = Ln(f, c);
          return u[d] && h.push(f), h;
        }, []);
      } else
        i.value = [];
    },
    toggleRowExpansion: (a, c) => {
      Ou(i.value, a, c) && e.emit("expand-change", a, i.value.slice());
    },
    setExpandRowKeys: (a) => {
      e.store.assertRowKey();
      const c = n.data.value || [], u = n.rowKey.value, h = dl(c, u);
      i.value = a.reduce((f, d) => {
        const p = h[d];
        return p && f.push(p.row), f;
      }, []);
    },
    isRowExpanded: (a) => {
      const c = n.rowKey.value;
      return c ? !!dl(i.value, c)[Ln(a, c)] : i.value.includes(a);
    },
    states: {
      expandRows: i,
      defaultExpandAll: t
    }
  };
}
function vW(n) {
  const e = qe(), t = L(null), i = L(null), s = (c) => {
    e.store.assertRowKey(), t.value = c, o(c);
  }, r = () => {
    t.value = null;
  }, o = (c) => {
    const { data: u, rowKey: h } = n;
    let f = null;
    h.value && (f = (w(u) || []).find((d) => Ln(d, h.value) === c)), i.value = f, e.emit("current-change", i.value, null);
  };
  return {
    setCurrentRowKey: s,
    restoreCurrentRowKey: r,
    setCurrentRowByKey: o,
    updateCurrentRow: (c) => {
      const u = i.value;
      if (c && c !== u) {
        i.value = c, e.emit("current-change", i.value, u);
        return;
      }
      !c && u && (i.value = null, e.emit("current-change", null, u));
    },
    updateCurrentRowData: () => {
      const c = n.rowKey.value, u = n.data.value || [], h = i.value;
      if (!u.includes(h) && h) {
        if (c) {
          const f = Ln(h, c);
          o(f);
        } else
          i.value = null;
        i.value === null && e.emit("current-change", null, h);
      } else
        t.value && (o(t.value), r());
    },
    states: {
      _currentRowKey: t,
      currentRow: i
    }
  };
}
function yW(n) {
  const e = L([]), t = L({}), i = L(16), s = L(!1), r = L({}), o = L("hasChildren"), l = L("children"), a = qe(), c = _(() => {
    if (!n.rowKey.value)
      return {};
    const b = n.data.value || [];
    return h(b);
  }), u = _(() => {
    const b = n.rowKey.value, y = Object.keys(r.value), v = {};
    return y.length && y.forEach((O) => {
      if (r.value[O].length) {
        const x = { children: [] };
        r.value[O].forEach((S) => {
          const C = Ln(S, b);
          x.children.push(C), S[o.value] && !v[C] && (v[C] = { children: [] });
        }), v[O] = x;
      }
    }), v;
  }), h = (b) => {
    const y = n.rowKey.value, v = {};
    return gW(b, (O, x, S) => {
      const C = Ln(O, y);
      Array.isArray(x) ? v[C] = {
        children: x.map((k) => Ln(k, y)),
        level: S
      } : s.value && (v[C] = {
        children: [],
        lazy: !0,
        level: S
      });
    }, l.value, o.value), v;
  }, f = (b = !1, y = ((v) => (v = a.store) == null ? void 0 : v.states.defaultExpandAll.value)()) => {
    var v;
    const O = c.value, x = u.value, S = Object.keys(O), C = {};
    if (S.length) {
      const k = w(t), E = [], $ = (M, j) => {
        if (b)
          return e.value ? y || e.value.includes(j) : !!(y || M != null && M.expanded);
        {
          const D = y || e.value && e.value.includes(j);
          return !!(M != null && M.expanded || D);
        }
      };
      S.forEach((M) => {
        const j = k[M], D = { ...O[M] };
        if (D.expanded = $(j, M), D.lazy) {
          const { loaded: P = !1, loading: A = !1 } = j || {};
          D.loaded = !!P, D.loading = !!A, E.push(M);
        }
        C[M] = D;
      });
      const T = Object.keys(x);
      s.value && T.length && E.length && T.forEach((M) => {
        const j = k[M], D = x[M].children;
        if (E.includes(M)) {
          if (C[M].children.length !== 0)
            throw new Error("[ElTable]children must be an empty array.");
          C[M].children = D;
        } else {
          const { loaded: P = !1, loading: A = !1 } = j || {};
          C[M] = {
            lazy: !0,
            loaded: !!P,
            loading: !!A,
            expanded: $(j, M),
            children: D,
            level: ""
          };
        }
      });
    }
    t.value = C, (v = a.store) == null || v.updateTableScrollY();
  };
  ee(() => e.value, () => {
    f(!0);
  }), ee(() => c.value, () => {
    f();
  }), ee(() => u.value, () => {
    f();
  });
  const d = (b) => {
    e.value = b, f();
  }, p = (b, y) => {
    a.store.assertRowKey();
    const v = n.rowKey.value, O = Ln(b, v), x = O && t.value[O];
    if (O && x && "expanded" in x) {
      const S = x.expanded;
      y = typeof y > "u" ? !x.expanded : y, t.value[O].expanded = y, S !== y && a.emit("expand-change", b, y), a.store.updateTableScrollY();
    }
  }, g = (b) => {
    a.store.assertRowKey();
    const y = n.rowKey.value, v = Ln(b, y), O = t.value[v];
    s.value && O && "loaded" in O && !O.loaded ? m(b, v, O) : p(b, void 0);
  }, m = (b, y, v) => {
    const { load: O } = a.props;
    O && !t.value[y].loaded && (t.value[y].loading = !0, O(b, v, (x) => {
      if (!Array.isArray(x))
        throw new TypeError("[ElTable] data must be an array");
      t.value[y].loading = !1, t.value[y].loaded = !0, t.value[y].expanded = !0, x.length && (r.value[y] = x), a.emit("expand-change", b, !0);
    }));
  };
  return {
    loadData: m,
    loadOrToggle: g,
    toggleTreeExpansion: p,
    updateTreeExpandKeys: d,
    updateTreeData: f,
    normalize: h,
    states: {
      expandRowKeys: e,
      treeData: t,
      indent: i,
      lazy: s,
      lazyTreeNodeMap: r,
      lazyColumnIdentifier: o,
      childrenColumnName: l
    }
  };
}
const OW = (n, e) => {
  const t = e.sortingColumn;
  return !t || typeof t.sortable == "string" ? n : uW(n, e.sortProp, e.sortOrder, t.sortMethod, t.sortBy);
}, dd = (n) => {
  const e = [];
  return n.forEach((t) => {
    t.children && t.children.length > 0 ? e.push.apply(e, dd(t.children)) : e.push(t);
  }), e;
};
function wW() {
  var n;
  const e = qe(), { size: t } = zo((n = e.proxy) == null ? void 0 : n.$props), i = L(null), s = L([]), r = L([]), o = L(!1), l = L([]), a = L([]), c = L([]), u = L([]), h = L([]), f = L([]), d = L([]), p = L([]), g = [], m = L(0), b = L(0), y = L(0), v = L(!1), O = L([]), x = L(!1), S = L(!1), C = L(null), k = L({}), E = L(null), $ = L(null), T = L(null), M = L(null), j = L(null);
  ee(s, () => e.state && Q(!1), {
    deep: !0
  });
  const D = () => {
    if (!i.value)
      throw new Error("[ElTable] prop row-key is required");
  }, P = (Se) => {
    var Le;
    (Le = Se.children) == null || Le.forEach((Ke) => {
      Ke.fixed = Se.fixed, P(Ke);
    });
  }, A = () => {
    l.value.forEach((bt) => {
      P(bt);
    }), u.value = l.value.filter((bt) => bt.fixed === !0 || bt.fixed === "left"), h.value = l.value.filter((bt) => bt.fixed === "right"), u.value.length > 0 && l.value[0] && l.value[0].type === "selection" && !l.value[0].fixed && (l.value[0].fixed = !0, u.value.unshift(l.value[0]));
    const Se = l.value.filter((bt) => !bt.fixed);
    a.value = [].concat(u.value).concat(Se).concat(h.value);
    const Le = dd(Se), Ke = dd(u.value), Xe = dd(h.value);
    m.value = Le.length, b.value = Ke.length, y.value = Xe.length, c.value = [].concat(Ke).concat(Le).concat(Xe), o.value = u.value.length > 0 || h.value.length > 0;
  }, Q = (Se, Le = !1) => {
    Se && A(), Le ? e.state.doLayout() : e.state.debouncedUpdateLayout();
  }, X = (Se) => O.value.includes(Se), z = () => {
    v.value = !1, O.value.length && (O.value = [], e.emit("selection-change", []));
  }, q = () => {
    let Se;
    if (i.value) {
      Se = [];
      const Le = dl(O.value, i.value), Ke = dl(s.value, i.value);
      for (const Xe in Le)
        Ps(Le, Xe) && !Ke[Xe] && Se.push(Le[Xe].row);
    } else
      Se = O.value.filter((Le) => !s.value.includes(Le));
    if (Se.length) {
      const Le = O.value.filter((Ke) => !Se.includes(Ke));
      O.value = Le, e.emit("selection-change", Le.slice());
    }
  }, re = () => (O.value || []).slice(), H = (Se, Le = void 0, Ke = !0) => {
    if (Ou(O.value, Se, Le)) {
      const bt = (O.value || []).slice();
      Ke && e.emit("select", bt, Se), e.emit("selection-change", bt);
    }
  }, G = () => {
    var Se, Le;
    const Ke = S.value ? !v.value : !(v.value || O.value.length);
    v.value = Ke;
    let Xe = !1, bt = 0;
    const bn = (Le = (Se = e == null ? void 0 : e.store) == null ? void 0 : Se.states) == null ? void 0 : Le.rowKey.value;
    s.value.forEach((oi, Kr) => {
      const fs = Kr + bt;
      C.value ? C.value.call(null, oi, fs) && Ou(O.value, oi, Ke) && (Xe = !0) : Ou(O.value, oi, Ke) && (Xe = !0), bt += ce(Ln(oi, bn));
    }), Xe && e.emit("selection-change", O.value ? O.value.slice() : []), e.emit("select-all", O.value);
  }, U = () => {
    const Se = dl(O.value, i.value);
    s.value.forEach((Le) => {
      const Ke = Ln(Le, i.value), Xe = Se[Ke];
      Xe && (O.value[Xe.index] = Le);
    });
  }, le = () => {
    var Se, Le, Ke;
    if (((Se = s.value) == null ? void 0 : Se.length) === 0) {
      v.value = !1;
      return;
    }
    let Xe;
    i.value && (Xe = dl(O.value, i.value));
    const bt = function(fs) {
      return Xe ? !!Xe[Ln(fs, i.value)] : O.value.includes(fs);
    };
    let bn = !0, oi = 0, Kr = 0;
    for (let fs = 0, ta = (s.value || []).length; fs < ta; fs++) {
      const Ng = (Ke = (Le = e == null ? void 0 : e.store) == null ? void 0 : Le.states) == null ? void 0 : Ke.rowKey.value, Ig = fs + Kr, na = s.value[fs], Qg = C.value && C.value.call(null, na, Ig);
      if (bt(na))
        oi++;
      else if (!C.value || Qg) {
        bn = !1;
        break;
      }
      Kr += ce(Ln(na, Ng));
    }
    oi === 0 && (bn = !1), v.value = bn;
  }, ce = (Se) => {
    var Le;
    if (!e || !e.store)
      return 0;
    const { treeData: Ke } = e.store.states;
    let Xe = 0;
    const bt = (Le = Ke.value[Se]) == null ? void 0 : Le.children;
    return bt && (Xe += bt.length, bt.forEach((bn) => {
      Xe += ce(bn);
    })), Xe;
  }, K = (Se, Le) => {
    Array.isArray(Se) || (Se = [Se]);
    const Ke = {};
    return Se.forEach((Xe) => {
      k.value[Xe.id] = Le, Ke[Xe.columnKey || Xe.id] = Le;
    }), Ke;
  }, he = (Se, Le, Ke) => {
    $.value && $.value !== Se && ($.value.order = null), $.value = Se, T.value = Le, M.value = Ke;
  }, Ne = () => {
    let Se = w(r);
    Object.keys(k.value).forEach((Le) => {
      const Ke = k.value[Le];
      if (!Ke || Ke.length === 0)
        return;
      const Xe = ZP({
        columns: c.value
      }, Le);
      Xe && Xe.filterMethod && (Se = Se.filter((bt) => Ke.some((bn) => Xe.filterMethod.call(null, bn, bt, Xe))));
    }), E.value = Se;
  }, ae = () => {
    s.value = OW(E.value, {
      sortingColumn: $.value,
      sortProp: T.value,
      sortOrder: M.value
    });
  }, $e = (Se = void 0) => {
    Se && Se.filter || Ne(), ae();
  }, lt = (Se) => {
    const { tableHeaderRef: Le } = e.refs;
    if (!Le)
      return;
    const Ke = Object.assign({}, Le.filterPanels), Xe = Object.keys(Ke);
    if (Xe.length)
      if (typeof Se == "string" && (Se = [Se]), Array.isArray(Se)) {
        const bt = Se.map((bn) => hW({
          columns: c.value
        }, bn));
        Xe.forEach((bn) => {
          const oi = bt.find((Kr) => Kr.id === bn);
          oi && (oi.filteredValue = []);
        }), e.store.commit("filterChange", {
          column: bt,
          values: [],
          silent: !0,
          multi: !0
        });
      } else
        Xe.forEach((bt) => {
          const bn = c.value.find((oi) => oi.id === bt);
          bn && (bn.filteredValue = []);
        }), k.value = {}, e.store.commit("filterChange", {
          column: {},
          values: [],
          silent: !0
        });
  }, En = () => {
    $.value && (he(null, null, null), e.store.commit("changeSortCondition", {
      silent: !0
    }));
  }, {
    setExpandRowKeys: ii,
    toggleRowExpansion: Si,
    updateExpandRows: ls,
    states: as,
    isRowExpanded: cs
  } = bW({
    data: s,
    rowKey: i
  }), {
    updateTreeExpandKeys: Cr,
    toggleTreeExpansion: si,
    updateTreeData: us,
    loadOrToggle: js,
    states: kr
  } = yW({
    data: s,
    rowKey: i
  }), {
    updateCurrentRowData: ri,
    updateCurrentRow: ie,
    setCurrentRowKey: Ze,
    states: Dt
  } = vW({
    data: s,
    rowKey: i
  });
  return {
    assertRowKey: D,
    updateColumns: A,
    scheduleLayout: Q,
    isSelected: X,
    clearSelection: z,
    cleanSelection: q,
    getSelectionRows: re,
    toggleRowSelection: H,
    _toggleAllSelection: G,
    toggleAllSelection: null,
    updateSelectionByRowKey: U,
    updateAllSelected: le,
    updateFilters: K,
    updateCurrentRow: ie,
    updateSort: he,
    execFilter: Ne,
    execSort: ae,
    execQuery: $e,
    clearFilter: lt,
    clearSort: En,
    toggleRowExpansion: Si,
    setExpandRowKeysAdapter: (Se) => {
      ii(Se), Cr(Se);
    },
    setCurrentRowKey: Ze,
    toggleRowExpansionAdapter: (Se, Le) => {
      c.value.some(({ type: Xe }) => Xe === "expand") ? Si(Se, Le) : si(Se, Le);
    },
    isRowExpanded: cs,
    updateExpandRows: ls,
    updateCurrentRowData: ri,
    loadOrToggle: js,
    updateTreeData: us,
    states: {
      tableSize: t,
      rowKey: i,
      data: s,
      _data: r,
      isComplex: o,
      _columns: l,
      originColumns: a,
      columns: c,
      fixedColumns: u,
      rightFixedColumns: h,
      leafColumns: f,
      fixedLeafColumns: d,
      rightFixedLeafColumns: p,
      updateOrderFns: g,
      leafColumnsLength: m,
      fixedLeafColumnsLength: b,
      rightFixedLeafColumnsLength: y,
      isAllSelected: v,
      selection: O,
      reserveSelection: x,
      selectOnIndeterminate: S,
      selectable: C,
      filters: k,
      filteredData: E,
      sortingColumn: $,
      sortProp: T,
      sortOrder: M,
      hoverRow: j,
      ...as,
      ...kr,
      ...Dt
    }
  };
}
function _0(n, e) {
  return n.map((t) => {
    var i;
    return t.id === e.id ? e : ((i = t.children) != null && i.length && (t.children = _0(t.children, e)), t);
  });
}
function M0(n) {
  n.forEach((e) => {
    var t, i;
    e.no = (t = e.getColumnIndex) == null ? void 0 : t.call(e), (i = e.children) != null && i.length && M0(e.children);
  }), n.sort((e, t) => e.no - t.no);
}
function xW() {
  const n = qe(), e = wW();
  return {
    ns: ve("table"),
    ...e,
    mutations: {
      setData(o, l) {
        const a = w(o._data) !== l;
        o.data.value = l, o._data.value = l, n.store.execQuery(), n.store.updateCurrentRowData(), n.store.updateExpandRows(), n.store.updateTreeData(n.store.states.defaultExpandAll.value), w(o.reserveSelection) ? (n.store.assertRowKey(), n.store.updateSelectionByRowKey()) : a ? n.store.clearSelection() : n.store.cleanSelection(), n.store.updateAllSelected(), n.$ready && n.store.scheduleLayout();
      },
      insertColumn(o, l, a, c) {
        const u = w(o._columns);
        let h = [];
        a ? (a && !a.children && (a.children = []), a.children.push(l), h = _0(u, a)) : (u.push(l), h = u), M0(h), o._columns.value = h, o.updateOrderFns.push(c), l.type === "selection" && (o.selectable.value = l.selectable, o.reserveSelection.value = l.reserveSelection), n.$ready && (n.store.updateColumns(), n.store.scheduleLayout());
      },
      updateColumnOrder(o, l) {
        var a;
        ((a = l.getColumnIndex) == null ? void 0 : a.call(l)) !== l.no && (M0(o._columns.value), n.$ready && n.store.updateColumns());
      },
      removeColumn(o, l, a, c) {
        const u = w(o._columns) || [];
        if (a)
          a.children.splice(a.children.findIndex((f) => f.id === l.id), 1), Qe(() => {
            var f;
            ((f = a.children) == null ? void 0 : f.length) === 0 && delete a.children;
          }), o._columns.value = _0(u, a);
        else {
          const f = u.indexOf(l);
          f > -1 && (u.splice(f, 1), o._columns.value = u);
        }
        const h = o.updateOrderFns.indexOf(c);
        h > -1 && o.updateOrderFns.splice(h, 1), n.$ready && (n.store.updateColumns(), n.store.scheduleLayout());
      },
      sort(o, l) {
        const { prop: a, order: c, init: u } = l;
        if (a) {
          const h = w(o.columns).find((f) => f.property === a);
          h && (h.order = c, n.store.updateSort(h, a, c), n.store.commit("changeSortCondition", { init: u }));
        }
      },
      changeSortCondition(o, l) {
        const { sortingColumn: a, sortProp: c, sortOrder: u } = o, h = w(a), f = w(c), d = w(u);
        d === null && (o.sortingColumn.value = null, o.sortProp.value = null);
        const p = { filter: !0 };
        n.store.execQuery(p), (!l || !(l.silent || l.init)) && n.emit("sort-change", {
          column: h,
          prop: f,
          order: d
        }), n.store.updateTableScrollY();
      },
      filterChange(o, l) {
        const { column: a, values: c, silent: u } = l, h = n.store.updateFilters(a, c);
        n.store.execQuery(), u || n.emit("filter-change", h), n.store.updateTableScrollY();
      },
      toggleAllSelection() {
        n.store.toggleAllSelection();
      },
      rowSelectedChanged(o, l) {
        n.store.toggleRowSelection(l), n.store.updateAllSelected();
      },
      setHoverRow(o, l) {
        o.hoverRow.value = l;
      },
      setCurrentRow(o, l) {
        n.store.updateCurrentRow(l);
      }
    },
    commit: function(o, ...l) {
      const a = n.store.mutations;
      if (a[o])
        a[o].apply(n, [n.store.states].concat(l));
      else
        throw new Error(`Action not found: ${o}`);
    },
    updateTableScrollY: function() {
      Qe(() => n.layout.updateScrollY.apply(n.layout));
    }
  };
}
const wu = {
  rowKey: "rowKey",
  defaultExpandAll: "defaultExpandAll",
  selectOnIndeterminate: "selectOnIndeterminate",
  indent: "indent",
  lazy: "lazy",
  data: "data",
  "treeProps.hasChildren": {
    key: "lazyColumnIdentifier",
    default: "hasChildren"
  },
  "treeProps.children": {
    key: "childrenColumnName",
    default: "children"
  }
};
function SW(n, e) {
  if (!n)
    throw new Error("Table is required.");
  const t = xW();
  return t.toggleAllSelection = Ml(t._toggleAllSelection, 10), Object.keys(wu).forEach((i) => {
    WP(XP(e, i), i, t);
  }), CW(t, e), t;
}
function CW(n, e) {
  Object.keys(wu).forEach((t) => {
    ee(() => XP(e, t), (i) => {
      WP(i, t, n);
    });
  });
}
function WP(n, e, t) {
  let i = n, s = wu[e];
  typeof wu[e] == "object" && (s = s.key, i = i || wu[e].default), t.states[s].value = i;
}
function XP(n, e) {
  if (e.includes(".")) {
    const t = e.split(".");
    let i = n;
    return t.forEach((s) => {
      i = i[s];
    }), i;
  } else
    return n[e];
}
class kW {
  constructor(e) {
    this.observers = [], this.table = null, this.store = null, this.columns = [], this.fit = !0, this.showHeader = !0, this.height = L(null), this.scrollX = L(!1), this.scrollY = L(!1), this.bodyWidth = L(null), this.fixedWidth = L(null), this.rightFixedWidth = L(null), this.gutterWidth = 0;
    for (const t in e)
      Ps(e, t) && (hr(this[t]) ? this[t].value = e[t] : this[t] = e[t]);
    if (!this.table)
      throw new Error("Table is required for Table Layout");
    if (!this.store)
      throw new Error("Store is required for Table Layout");
  }
  updateScrollY() {
    if (this.height.value === null)
      return !1;
    const t = this.table.refs.scrollBarRef;
    if (this.table.vnode.el && (t != null && t.wrapRef)) {
      let i = !0;
      const s = this.scrollY.value;
      return i = t.wrapRef.scrollHeight > t.wrapRef.clientHeight, this.scrollY.value = i, s !== i;
    }
    return !1;
  }
  setHeight(e, t = "height") {
    if (!ot)
      return;
    const i = this.table.vnode.el;
    if (e = dW(e), this.height.value = Number(e), !i && (e || e === 0))
      return Qe(() => this.setHeight(e, t));
    typeof e == "number" ? (i.style[t] = `${e}px`, this.updateElsHeight()) : typeof e == "string" && (i.style[t] = e, this.updateElsHeight());
  }
  setMaxHeight(e) {
    this.setHeight(e, "max-height");
  }
  getFlattenColumns() {
    const e = [];
    return this.table.store.states.columns.value.forEach((i) => {
      i.isColumnGroup ? e.push.apply(e, i.columns) : e.push(i);
    }), e;
  }
  updateElsHeight() {
    this.updateScrollY(), this.notifyObservers("scrollable");
  }
  headerDisplayNone(e) {
    if (!e)
      return !0;
    let t = e;
    for (; t.tagName !== "DIV"; ) {
      if (getComputedStyle(t).display === "none")
        return !0;
      t = t.parentElement;
    }
    return !1;
  }
  updateColumnsWidth() {
    if (!ot)
      return;
    const e = this.fit, t = this.table.vnode.el.clientWidth;
    let i = 0;
    const s = this.getFlattenColumns(), r = s.filter((a) => typeof a.width != "number");
    if (s.forEach((a) => {
      typeof a.width == "number" && a.realWidth && (a.realWidth = null);
    }), r.length > 0 && e) {
      if (s.forEach((a) => {
        i += Number(a.width || a.minWidth || 80);
      }), i <= t) {
        this.scrollX.value = !1;
        const a = t - i;
        if (r.length === 1)
          r[0].realWidth = Number(r[0].minWidth || 80) + a;
        else {
          const c = r.reduce((f, d) => f + Number(d.minWidth || 80), 0), u = a / c;
          let h = 0;
          r.forEach((f, d) => {
            if (d === 0)
              return;
            const p = Math.floor(Number(f.minWidth || 80) * u);
            h += p, f.realWidth = Number(f.minWidth || 80) + p;
          }), r[0].realWidth = Number(r[0].minWidth || 80) + a - h;
        }
      } else
        this.scrollX.value = !0, r.forEach((a) => {
          a.realWidth = Number(a.minWidth);
        });
      this.bodyWidth.value = Math.max(i, t), this.table.state.resizeState.value.width = this.bodyWidth.value;
    } else
      s.forEach((a) => {
        !a.width && !a.minWidth ? a.realWidth = 80 : a.realWidth = Number(a.width || a.minWidth), i += a.realWidth;
      }), this.scrollX.value = i > t, this.bodyWidth.value = i;
    const o = this.store.states.fixedColumns.value;
    if (o.length > 0) {
      let a = 0;
      o.forEach((c) => {
        a += Number(c.realWidth || c.width);
      }), this.fixedWidth.value = a;
    }
    const l = this.store.states.rightFixedColumns.value;
    if (l.length > 0) {
      let a = 0;
      l.forEach((c) => {
        a += Number(c.realWidth || c.width);
      }), this.rightFixedWidth.value = a;
    }
    this.notifyObservers("columns");
  }
  addObserver(e) {
    this.observers.push(e);
  }
  removeObserver(e) {
    const t = this.observers.indexOf(e);
    t !== -1 && this.observers.splice(t, 1);
  }
  notifyObservers(e) {
    this.observers.forEach((i) => {
      var s, r;
      switch (e) {
        case "columns":
          (s = i.state) == null || s.onColumnsChange(this);
          break;
        case "scrollable":
          (r = i.state) == null || r.onScrollableChange(this);
          break;
        default:
          throw new Error(`Table Layout don't have event ${e}.`);
      }
    });
  }
}
const { CheckboxGroup: PW } = Ya, AW = Z({
  name: "ElTableFilterPanel",
  components: {
    ElCheckbox: Ya,
    ElCheckboxGroup: PW,
    ElScrollbar: Iv,
    ElTooltip: qh,
    ElIcon: Ue,
    ArrowDown: zp,
    ArrowUp: o2
  },
  directives: { ClickOutside: Zv },
  props: {
    placement: {
      type: String,
      default: "bottom-start"
    },
    store: {
      type: Object
    },
    column: {
      type: Object
    },
    upDataColumn: {
      type: Function
    }
  },
  setup(n) {
    const e = qe(), { t } = ni(), i = ve("table-filter"), s = e == null ? void 0 : e.parent;
    s.filterPanels.value[n.column.id] || (s.filterPanels.value[n.column.id] = e);
    const r = L(!1), o = L(null), l = _(() => n.column && n.column.filters), a = _(() => n.column.filterClassName ? `${i.b()} ${n.column.filterClassName}` : i.b()), c = _({
      get: () => {
        var x;
        return (((x = n.column) == null ? void 0 : x.filteredValue) || [])[0];
      },
      set: (x) => {
        u.value && (typeof x < "u" && x !== null ? u.value.splice(0, 1, x) : u.value.splice(0, 1));
      }
    }), u = _({
      get() {
        return n.column ? n.column.filteredValue || [] : [];
      },
      set(x) {
        n.column && n.upDataColumn("filteredValue", x);
      }
    }), h = _(() => n.column ? n.column.filterMultiple : !0), f = (x) => x.value === c.value, d = () => {
      r.value = !1;
    }, p = (x) => {
      x.stopPropagation(), r.value = !r.value;
    }, g = () => {
      r.value = !1;
    }, m = () => {
      v(u.value), d();
    }, b = () => {
      u.value = [], v(u.value), d();
    }, y = (x) => {
      c.value = x, v(typeof x < "u" && x !== null ? u.value : []), d();
    }, v = (x) => {
      n.store.commit("filterChange", {
        column: n.column,
        values: x
      }), n.store.updateAllSelected();
    };
    ee(r, (x) => {
      n.column && n.upDataColumn("filterOpened", x);
    }, {
      immediate: !0
    });
    const O = _(() => {
      var x, S;
      return (S = (x = o.value) == null ? void 0 : x.popperRef) == null ? void 0 : S.contentRef;
    });
    return {
      tooltipVisible: r,
      multiple: h,
      filterClassName: a,
      filteredValue: u,
      filterValue: c,
      filters: l,
      handleConfirm: m,
      handleReset: b,
      handleSelect: y,
      isActive: f,
      t,
      ns: i,
      showFilterPanel: p,
      hideFilterPanel: g,
      popperPaneRef: O,
      tooltip: o
    };
  }
}), EW = { key: 0 }, $W = ["disabled"], TW = ["label", "onClick"];
function _W(n, e, t, i, s, r) {
  const o = $t("el-checkbox"), l = $t("el-checkbox-group"), a = $t("el-scrollbar"), c = $t("arrow-up"), u = $t("arrow-down"), h = $t("el-icon"), f = $t("el-tooltip"), d = ov("click-outside");
  return R(), oe(f, {
    ref: "tooltip",
    visible: n.tooltipVisible,
    offset: 0,
    placement: n.placement,
    "show-arrow": !1,
    "stop-popper-mouse-event": !1,
    teleported: "",
    effect: "light",
    pure: "",
    "popper-class": n.filterClassName,
    persistent: ""
  }, {
    content: se(() => [
      n.multiple ? (R(), F("div", EW, [
        W("div", {
          class: B(n.ns.e("content"))
        }, [
          ne(a, {
            "wrap-class": n.ns.e("wrap")
          }, {
            default: se(() => [
              ne(l, {
                modelValue: n.filteredValue,
                "onUpdate:modelValue": e[0] || (e[0] = (p) => n.filteredValue = p),
                class: B(n.ns.e("checkbox-group"))
              }, {
                default: se(() => [
                  (R(!0), F(sn, null, Tl(n.filters, (p) => (R(), oe(o, {
                    key: p.value,
                    label: p.value
                  }, {
                    default: se(() => [
                      mi(Re(p.text), 1)
                    ]),
                    _: 2
                  }, 1032, ["label"]))), 128))
                ]),
                _: 1
              }, 8, ["modelValue", "class"])
            ]),
            _: 1
          }, 8, ["wrap-class"])
        ], 2),
        W("div", {
          class: B(n.ns.e("bottom"))
        }, [
          W("button", {
            class: B({ [n.ns.is("disabled")]: n.filteredValue.length === 0 }),
            disabled: n.filteredValue.length === 0,
            type: "button",
            onClick: e[1] || (e[1] = (...p) => n.handleConfirm && n.handleConfirm(...p))
          }, Re(n.t("el.table.confirmFilter")), 11, $W),
          W("button", {
            type: "button",
            onClick: e[2] || (e[2] = (...p) => n.handleReset && n.handleReset(...p))
          }, Re(n.t("el.table.resetFilter")), 1)
        ], 2)
      ])) : (R(), F("ul", {
        key: 1,
        class: B(n.ns.e("list"))
      }, [
        W("li", {
          class: B([
            n.ns.e("list-item"),
            {
              [n.ns.is("active")]: n.filterValue === void 0 || n.filterValue === null
            }
          ]),
          onClick: e[3] || (e[3] = (p) => n.handleSelect(null))
        }, Re(n.t("el.table.clearFilter")), 3),
        (R(!0), F(sn, null, Tl(n.filters, (p) => (R(), F("li", {
          key: p.value,
          class: B([n.ns.e("list-item"), n.ns.is("active", n.isActive(p))]),
          label: p.value,
          onClick: (g) => n.handleSelect(p.value)
        }, Re(p.text), 11, TW))), 128))
      ], 2))
    ]),
    default: se(() => [
      tt((R(), F("span", {
        class: B([
          `${n.ns.namespace.value}-table__column-filter-trigger`,
          `${n.ns.namespace.value}-none-outline`
        ]),
        onClick: e[4] || (e[4] = (...p) => n.showFilterPanel && n.showFilterPanel(...p))
      }, [
        ne(h, null, {
          default: se(() => [
            n.column.filterOpened ? (R(), oe(c, { key: 0 })) : (R(), oe(u, { key: 1 }))
          ]),
          _: 1
        })
      ], 2)), [
        [d, n.hideFilterPanel, n.popperPaneRef]
      ])
    ]),
    _: 1
  }, 8, ["visible", "placement", "popper-class"]);
}
var MW = /* @__PURE__ */ Ce(AW, [["render", _W], ["__file", "filter-panel.vue"]]);
function YP(n) {
  const e = qe();
  rv(() => {
    t.value.addObserver(e);
  }), Be(() => {
    i(t.value), s(t.value);
  }), Mh(() => {
    i(t.value), s(t.value);
  }), _h(() => {
    t.value.removeObserver(e);
  });
  const t = _(() => {
    const r = n.layout;
    if (!r)
      throw new Error("Can not find table layout.");
    return r;
  }), i = (r) => {
    var o;
    const l = ((o = n.vnode.el) == null ? void 0 : o.querySelectorAll("colgroup > col")) || [];
    if (!l.length)
      return;
    const a = r.getFlattenColumns(), c = {};
    a.forEach((u) => {
      c[u.id] = u;
    });
    for (let u = 0, h = l.length; u < h; u++) {
      const f = l[u], d = f.getAttribute("name"), p = c[d];
      p && f.setAttribute("width", p.realWidth || p.width);
    }
  }, s = (r) => {
    var o, l;
    const a = ((o = n.vnode.el) == null ? void 0 : o.querySelectorAll("colgroup > col[name=gutter]")) || [];
    for (let u = 0, h = a.length; u < h; u++)
      a[u].setAttribute("width", r.scrollY.value ? r.gutterWidth : "0");
    const c = ((l = n.vnode.el) == null ? void 0 : l.querySelectorAll("th.gutter")) || [];
    for (let u = 0, h = c.length; u < h; u++) {
      const f = c[u];
      f.style.width = r.scrollY.value ? `${r.gutterWidth}px` : "0", f.style.display = r.scrollY.value ? "" : "none";
    }
  };
  return {
    tableLayout: t.value,
    onColumnsChange: i,
    onScrollableChange: s
  };
}
const yr = Symbol("ElTable");
function RW(n, e) {
  const t = qe(), i = ye(yr), s = (g) => {
    g.stopPropagation();
  }, r = (g, m) => {
    !m.filters && m.sortable ? p(g, m, !1) : m.filterable && !m.sortable && s(g), i == null || i.emit("header-click", m, g);
  }, o = (g, m) => {
    i == null || i.emit("header-contextmenu", m, g);
  }, l = L(null), a = L(!1), c = L({}), u = (g, m) => {
    if (ot && !(m.children && m.children.length > 0) && l.value && n.border) {
      a.value = !0;
      const b = i;
      e("set-drag-visible", !0);
      const v = (b == null ? void 0 : b.vnode.el).getBoundingClientRect().left, O = t.vnode.el.querySelector(`th.${m.id}`), x = O.getBoundingClientRect(), S = x.left - v + 30;
      Vu(O, "noclick"), c.value = {
        startMouseLeft: g.clientX,
        startLeft: x.right - v,
        startColumnLeft: x.left - v,
        tableLeft: v
      };
      const C = b == null ? void 0 : b.refs.resizeProxy;
      C.style.left = `${c.value.startLeft}px`, document.onselectstart = function() {
        return !1;
      }, document.ondragstart = function() {
        return !1;
      };
      const k = ($) => {
        const T = $.clientX - c.value.startMouseLeft, M = c.value.startLeft + T;
        C.style.left = `${Math.max(S, M)}px`;
      }, E = () => {
        if (a.value) {
          const { startColumnLeft: $, startLeft: T } = c.value, j = Number.parseInt(C.style.left, 10) - $;
          m.width = m.realWidth = j, b == null || b.emit("header-dragend", m.width, T - $, m, g), requestAnimationFrame(() => {
            n.store.scheduleLayout(!1, !0);
          }), document.body.style.cursor = "", a.value = !1, l.value = null, c.value = {}, e("set-drag-visible", !1);
        }
        document.removeEventListener("mousemove", k), document.removeEventListener("mouseup", E), document.onselectstart = null, document.ondragstart = null, setTimeout(() => {
          za(O, "noclick");
        }, 0);
      };
      document.addEventListener("mousemove", k), document.addEventListener("mouseup", E);
    }
  }, h = (g, m) => {
    if (m.children && m.children.length > 0)
      return;
    const b = g.target;
    if (!As(b))
      return;
    const y = b == null ? void 0 : b.closest("th");
    if (!(!m || !m.resizable) && !a.value && n.border) {
      const v = y.getBoundingClientRect(), O = document.body.style;
      v.width > 12 && v.right - g.pageX < 8 ? (O.cursor = "col-resize", wa(y, "is-sortable") && (y.style.cursor = "col-resize"), l.value = m) : a.value || (O.cursor = "", wa(y, "is-sortable") && (y.style.cursor = "pointer"), l.value = null);
    }
  }, f = () => {
    ot && (document.body.style.cursor = "");
  }, d = ({ order: g, sortOrders: m }) => {
    if (g === "")
      return m[0];
    const b = m.indexOf(g || null);
    return m[b > m.length - 2 ? 0 : b + 1];
  }, p = (g, m, b) => {
    var y;
    g.stopPropagation();
    const v = m.order === b ? null : b || d(m), O = (y = g.target) == null ? void 0 : y.closest("th");
    if (O && wa(O, "noclick")) {
      za(O, "noclick");
      return;
    }
    if (!m.sortable)
      return;
    const x = n.store.states;
    let S = x.sortProp.value, C;
    const k = x.sortingColumn.value;
    (k !== m || k === m && k.order === null) && (k && (k.order = null), x.sortingColumn.value = m, S = m.property), v ? C = m.order = v : C = m.order = null, x.sortProp.value = S, x.sortOrder.value = C, i == null || i.store.commit("changeSortCondition");
  };
  return {
    handleHeaderClick: r,
    handleHeaderContextMenu: o,
    handleMouseDown: u,
    handleMouseMove: h,
    handleMouseOut: f,
    handleSortClick: p,
    handleFilterClick: s
  };
}
function DW(n) {
  const e = ye(yr), t = ve("table");
  return {
    getHeaderRowStyle: (l) => {
      const a = e == null ? void 0 : e.props.headerRowStyle;
      return typeof a == "function" ? a.call(null, { rowIndex: l }) : a;
    },
    getHeaderRowClass: (l) => {
      const a = [], c = e == null ? void 0 : e.props.headerRowClassName;
      return typeof c == "string" ? a.push(c) : typeof c == "function" && a.push(c.call(null, { rowIndex: l })), a.join(" ");
    },
    getHeaderCellStyle: (l, a, c, u) => {
      var h;
      let f = (h = e == null ? void 0 : e.props.headerCellStyle) != null ? h : {};
      typeof f == "function" && (f = f.call(null, {
        rowIndex: l,
        columnIndex: a,
        row: c,
        column: u
      }));
      const d = Yv(a, u.fixed, n.store, c);
      return Ha(d, "left"), Ha(d, "right"), Object.assign({}, f, d);
    },
    getHeaderCellClass: (l, a, c, u) => {
      const h = Xv(t.b(), a, u.fixed, n.store, c), f = [
        u.id,
        u.order,
        u.headerAlign,
        u.className,
        u.labelClassName,
        ...h
      ];
      u.children || f.push("is-leaf"), u.sortable && f.push("is-sortable");
      const d = e == null ? void 0 : e.props.headerCellClassName;
      return typeof d == "string" ? f.push(d) : typeof d == "function" && f.push(d.call(null, {
        rowIndex: l,
        columnIndex: a,
        row: c,
        column: u
      })), f.push(t.e("cell")), f.filter((p) => !!p).join(" ");
    }
  };
}
const HP = (n) => {
  const e = [];
  return n.forEach((t) => {
    t.children ? (e.push(t), e.push.apply(e, HP(t.children))) : e.push(t);
  }), e;
}, LW = (n) => {
  let e = 1;
  const t = (r, o) => {
    if (o && (r.level = o.level + 1, e < r.level && (e = r.level)), r.children) {
      let l = 0;
      r.children.forEach((a) => {
        t(a, r), l += a.colSpan;
      }), r.colSpan = l;
    } else
      r.colSpan = 1;
  };
  n.forEach((r) => {
    r.level = 1, t(r, void 0);
  });
  const i = [];
  for (let r = 0; r < e; r++)
    i.push([]);
  return HP(n).forEach((r) => {
    r.children ? (r.rowSpan = 1, r.children.forEach((o) => o.isSubColumn = !0)) : r.rowSpan = e - r.level + 1, i[r.level - 1].push(r);
  }), i;
};
function NW(n) {
  const e = ye(yr), t = _(() => LW(n.store.states.originColumns.value));
  return {
    isGroup: _(() => {
      const r = t.value.length > 1;
      return r && e && (e.state.isGroup.value = !0), r;
    }),
    toggleAllSelection: (r) => {
      r.stopPropagation(), e == null || e.store.commit("toggleAllSelection");
    },
    columnRows: t
  };
}
var IW = Z({
  name: "ElTableHeader",
  components: {
    ElCheckbox: Ya
  },
  props: {
    fixed: {
      type: String,
      default: ""
    },
    store: {
      required: !0,
      type: Object
    },
    border: Boolean,
    defaultSort: {
      type: Object,
      default: () => ({
        prop: "",
        order: ""
      })
    }
  },
  setup(n, { emit: e }) {
    const t = qe(), i = ye(yr), s = ve("table"), r = L({}), { onColumnsChange: o, onScrollableChange: l } = YP(i);
    Be(async () => {
      await Qe(), await Qe();
      const { prop: S, order: C } = n.defaultSort;
      i == null || i.store.commit("sort", { prop: S, order: C, init: !0 });
    });
    const {
      handleHeaderClick: a,
      handleHeaderContextMenu: c,
      handleMouseDown: u,
      handleMouseMove: h,
      handleMouseOut: f,
      handleSortClick: d,
      handleFilterClick: p
    } = RW(n, e), {
      getHeaderRowStyle: g,
      getHeaderRowClass: m,
      getHeaderCellStyle: b,
      getHeaderCellClass: y
    } = DW(n), { isGroup: v, toggleAllSelection: O, columnRows: x } = NW(n);
    return t.state = {
      onColumnsChange: o,
      onScrollableChange: l
    }, t.filterPanels = r, {
      ns: s,
      filterPanels: r,
      onColumnsChange: o,
      onScrollableChange: l,
      columnRows: x,
      getHeaderRowClass: m,
      getHeaderRowStyle: g,
      getHeaderCellClass: y,
      getHeaderCellStyle: b,
      handleHeaderClick: a,
      handleHeaderContextMenu: c,
      handleMouseDown: u,
      handleMouseMove: h,
      handleMouseOut: f,
      handleSortClick: d,
      handleFilterClick: p,
      isGroup: v,
      toggleAllSelection: O
    };
  },
  render() {
    const {
      ns: n,
      isGroup: e,
      columnRows: t,
      getHeaderCellStyle: i,
      getHeaderCellClass: s,
      getHeaderRowClass: r,
      getHeaderRowStyle: o,
      handleHeaderClick: l,
      handleHeaderContextMenu: a,
      handleMouseDown: c,
      handleMouseMove: u,
      handleSortClick: h,
      handleMouseOut: f,
      store: d,
      $parent: p
    } = this;
    let g = 1;
    return _e("thead", {
      class: { [n.is("group")]: e }
    }, t.map((m, b) => _e("tr", {
      class: r(b),
      key: b,
      style: o(b)
    }, m.map((y, v) => (y.rowSpan > g && (g = y.rowSpan), _e("th", {
      class: s(b, v, m, y),
      colspan: y.colSpan,
      key: `${y.id}-thead`,
      rowspan: y.rowSpan,
      style: i(b, v, m, y),
      onClick: (O) => l(O, y),
      onContextmenu: (O) => a(O, y),
      onMousedown: (O) => c(O, y),
      onMousemove: (O) => u(O, y),
      onMouseout: f
    }, [
      _e("div", {
        class: [
          "cell",
          y.filteredValue && y.filteredValue.length > 0 ? "highlight" : ""
        ]
      }, [
        y.renderHeader ? y.renderHeader({
          column: y,
          $index: v,
          store: d,
          _self: p
        }) : y.label,
        y.sortable && _e("span", {
          onClick: (O) => h(O, y),
          class: "caret-wrapper"
        }, [
          _e("i", {
            onClick: (O) => h(O, y, "ascending"),
            class: "sort-caret ascending"
          }),
          _e("i", {
            onClick: (O) => h(O, y, "descending"),
            class: "sort-caret descending"
          })
        ]),
        y.filterable && _e(MW, {
          store: d,
          placement: y.filterPlacement || "bottom-start",
          column: y,
          upDataColumn: (O, x) => {
            y[O] = x;
          }
        })
      ])
    ]))))));
  }
});
function QW(n) {
  const e = ye(yr), t = L(""), i = L(_e("div")), s = (p, g, m) => {
    var b;
    const y = e, v = nm(p);
    let O;
    const x = (b = y == null ? void 0 : y.vnode.el) == null ? void 0 : b.dataset.prefix;
    v && (O = dw({
      columns: n.store.states.columns.value
    }, v, x), O && (y == null || y.emit(`cell-${m}`, g, O, v, p))), y == null || y.emit(`row-${m}`, g, O, p);
  }, r = (p, g) => {
    s(p, g, "dblclick");
  }, o = (p, g) => {
    n.store.commit("setCurrentRow", g), s(p, g, "click");
  }, l = (p, g) => {
    s(p, g, "contextmenu");
  }, a = Ml((p) => {
    n.store.commit("setHoverRow", p);
  }, 30), c = Ml(() => {
    n.store.commit("setHoverRow", null);
  }, 30), u = (p) => {
    const g = window.getComputedStyle(p, null), m = Number.parseInt(g.paddingLeft, 10) || 0, b = Number.parseInt(g.paddingRight, 10) || 0, y = Number.parseInt(g.paddingTop, 10) || 0, v = Number.parseInt(g.paddingBottom, 10) || 0;
    return {
      left: m,
      right: b,
      top: y,
      bottom: v
    };
  }, h = (p, g, m) => {
    let b = g.target.parentNode;
    for (; p > 1 && (b = b == null ? void 0 : b.nextSibling, !(!b || b.nodeName !== "TR")); )
      m(b, "hover-row hover-fixed-row"), p--;
  };
  return {
    handleDoubleClick: r,
    handleClick: o,
    handleContextMenu: l,
    handleMouseEnter: a,
    handleMouseLeave: c,
    handleCellMouseEnter: (p, g, m) => {
      var b;
      const y = e, v = nm(p), O = (b = y == null ? void 0 : y.vnode.el) == null ? void 0 : b.dataset.prefix;
      if (v) {
        const Q = dw({
          columns: n.store.states.columns.value
        }, v, O);
        v.rowSpan > 1 && h(v.rowSpan, p, Vu);
        const X = y.hoverState = { cell: v, column: Q, row: g };
        y == null || y.emit("cell-mouse-enter", X.row, X.column, X.cell, p);
      }
      if (!m)
        return;
      const x = p.target.querySelector(".cell");
      if (!(wa(x, `${O}-tooltip`) && x.childNodes.length))
        return;
      const S = document.createRange();
      S.setStart(x, 0), S.setEnd(x, x.childNodes.length);
      let C = S.getBoundingClientRect().width, k = S.getBoundingClientRect().height;
      C - Math.floor(C) < 1e-3 && (C = Math.floor(C)), k - Math.floor(k) < 1e-3 && (k = Math.floor(k));
      const { top: T, left: M, right: j, bottom: D } = u(x), P = M + j, A = T + D;
      (C + P > x.offsetWidth || k + A > x.offsetHeight || x.scrollWidth > x.offsetWidth) && mW(m, v.innerText || v.textContent, v, y);
    },
    handleCellMouseLeave: (p) => {
      const g = nm(p);
      if (!g)
        return;
      g.rowSpan > 1 && h(g.rowSpan, p, za);
      const m = e == null ? void 0 : e.hoverState;
      e == null || e.emit("cell-mouse-leave", m == null ? void 0 : m.row, m == null ? void 0 : m.column, m == null ? void 0 : m.cell, p);
    },
    tooltipContent: t,
    tooltipTrigger: i
  };
}
function BW(n) {
  const e = ye(yr), t = ve("table");
  return {
    getRowStyle: (c, u) => {
      const h = e == null ? void 0 : e.props.rowStyle;
      return typeof h == "function" ? h.call(null, {
        row: c,
        rowIndex: u
      }) : h || null;
    },
    getRowClass: (c, u) => {
      const h = [t.e("row")];
      e != null && e.props.highlightCurrentRow && c === n.store.states.currentRow.value && h.push("current-row"), n.stripe && u % 2 === 1 && h.push(t.em("row", "striped"));
      const f = e == null ? void 0 : e.props.rowClassName;
      return typeof f == "string" ? h.push(f) : typeof f == "function" && h.push(f.call(null, {
        row: c,
        rowIndex: u
      })), h;
    },
    getCellStyle: (c, u, h, f) => {
      const d = e == null ? void 0 : e.props.cellStyle;
      let p = d ?? {};
      typeof d == "function" && (p = d.call(null, {
        rowIndex: c,
        columnIndex: u,
        row: h,
        column: f
      }));
      const g = Yv(u, n == null ? void 0 : n.fixed, n.store);
      return Ha(g, "left"), Ha(g, "right"), Object.assign({}, p, g);
    },
    getCellClass: (c, u, h, f, d) => {
      const p = Xv(t.b(), u, n == null ? void 0 : n.fixed, n.store, void 0, d), g = [f.id, f.align, f.className, ...p], m = e == null ? void 0 : e.props.cellClassName;
      return typeof m == "string" ? g.push(m) : typeof m == "function" && g.push(m.call(null, {
        rowIndex: c,
        columnIndex: u,
        row: h,
        column: f
      })), g.push(t.e("cell")), g.filter((b) => !!b).join(" ");
    },
    getSpan: (c, u, h, f) => {
      let d = 1, p = 1;
      const g = e == null ? void 0 : e.props.spanMethod;
      if (typeof g == "function") {
        const m = g({
          row: c,
          column: u,
          rowIndex: h,
          columnIndex: f
        });
        Array.isArray(m) ? (d = m[0], p = m[1]) : typeof m == "object" && (d = m.rowspan, p = m.colspan);
      }
      return { rowspan: d, colspan: p };
    },
    getColspanRealWidth: (c, u, h) => {
      if (u < 1)
        return c[h].realWidth;
      const f = c.map(({ realWidth: d, width: p }) => d || p).slice(h, h + u);
      return Number(f.reduce((d, p) => Number(d) + Number(p), -1));
    }
  };
}
function jW(n) {
  const e = ye(yr), t = ve("table"), {
    handleDoubleClick: i,
    handleClick: s,
    handleContextMenu: r,
    handleMouseEnter: o,
    handleMouseLeave: l,
    handleCellMouseEnter: a,
    handleCellMouseLeave: c,
    tooltipContent: u,
    tooltipTrigger: h
  } = QW(n), {
    getRowStyle: f,
    getRowClass: d,
    getCellStyle: p,
    getCellClass: g,
    getSpan: m,
    getColspanRealWidth: b
  } = BW(n), y = _(() => n.store.states.columns.value.findIndex(({ type: C }) => C === "default")), v = (C, k) => {
    const E = e.props.rowKey;
    return E ? Ln(C, E) : k;
  }, O = (C, k, E, $ = !1) => {
    const { tooltipEffect: T, tooltipOptions: M, store: j } = n, { indent: D, columns: P } = j.states, A = d(C, k);
    let Q = !0;
    return E && (A.push(t.em("row", `level-${E.level}`)), Q = E.display), _e("tr", {
      style: [Q ? null : {
        display: "none"
      }, f(C, k)],
      class: A,
      key: v(C, k),
      onDblclick: (z) => i(z, C),
      onClick: (z) => s(z, C),
      onContextmenu: (z) => r(z, C),
      onMouseenter: () => o(k),
      onMouseleave: l
    }, P.value.map((z, q) => {
      const { rowspan: re, colspan: H } = m(C, z, k, q);
      if (!re || !H)
        return null;
      const G = Object.assign({}, z);
      G.realWidth = b(P.value, H, q);
      const U = {
        store: n.store,
        _self: n.context || e,
        column: G,
        row: C,
        $index: k,
        cellIndex: q,
        expanded: $
      };
      q === y.value && E && (U.treeNode = {
        indent: E.level * D.value,
        level: E.level
      }, typeof E.expanded == "boolean" && (U.treeNode.expanded = E.expanded, "loading" in E && (U.treeNode.loading = E.loading), "noLazyChildren" in E && (U.treeNode.noLazyChildren = E.noLazyChildren)));
      const le = `${k},${q}`, ce = G.columnKey || G.rawColumnKey || "", K = x(q, z, U), he = z.showOverflowTooltip && Ft({
        effect: T
      }, M, z.showOverflowTooltip);
      return _e("td", {
        style: p(k, q, C, z),
        class: g(k, q, C, z, H - 1),
        key: `${ce}${le}`,
        rowspan: re,
        colspan: H,
        onMouseenter: (Ne) => a(Ne, C, he),
        onMouseleave: c
      }, [K]);
    }));
  }, x = (C, k, E) => k.renderCell(E);
  return {
    wrappedRowRender: (C, k) => {
      const E = n.store, { isRowExpanded: $, assertRowKey: T } = E, { treeData: M, lazyTreeNodeMap: j, childrenColumnName: D, rowKey: P } = E.states, A = E.states.columns.value;
      if (A.some(({ type: X }) => X === "expand")) {
        const X = $(C), z = O(C, k, void 0, X), q = e.renderExpanded;
        return X ? q ? [
          [
            z,
            _e("tr", {
              key: `expanded-row__${z.key}`
            }, [
              _e("td", {
                colspan: A.length,
                class: `${t.e("cell")} ${t.e("expanded-cell")}`
              }, [q({ row: C, $index: k, store: E, expanded: X })])
            ])
          ]
        ] : (console.error("[Element Error]renderExpanded is required."), z) : [[z]];
      } else if (Object.keys(M.value).length) {
        T();
        const X = Ln(C, P.value);
        let z = M.value[X], q = null;
        z && (q = {
          expanded: z.expanded,
          level: z.level,
          display: !0
        }, typeof z.lazy == "boolean" && (typeof z.loaded == "boolean" && z.loaded && (q.noLazyChildren = !(z.children && z.children.length)), q.loading = z.loading));
        const re = [O(C, k, q)];
        if (z) {
          let H = 0;
          const G = (le, ce) => {
            le && le.length && ce && le.forEach((K) => {
              const he = {
                display: ce.display && ce.expanded,
                level: ce.level + 1,
                expanded: !1,
                noLazyChildren: !1,
                loading: !1
              }, Ne = Ln(K, P.value);
              if (Ne == null)
                throw new Error("For nested data item, row-key is required.");
              if (z = { ...M.value[Ne] }, z && (he.expanded = z.expanded, z.level = z.level || he.level, z.display = !!(z.expanded && he.display), typeof z.lazy == "boolean" && (typeof z.loaded == "boolean" && z.loaded && (he.noLazyChildren = !(z.children && z.children.length)), he.loading = z.loading)), H++, re.push(O(K, k + H, he)), z) {
                const ae = j.value[Ne] || K[D.value];
                G(ae, z);
              }
            });
          };
          z.display = !0;
          const U = j.value[X] || C[D.value];
          G(U, z);
        }
        return re;
      } else
        return O(C, k, void 0);
    },
    tooltipContent: u,
    tooltipTrigger: h
  };
}
const zW = {
  store: {
    required: !0,
    type: Object
  },
  stripe: Boolean,
  tooltipEffect: String,
  tooltipOptions: {
    type: Object
  },
  context: {
    default: () => ({}),
    type: Object
  },
  rowClassName: [String, Function],
  rowStyle: [Object, Function],
  fixed: {
    type: String,
    default: ""
  },
  highlight: Boolean
};
var ZW = Z({
  name: "ElTableBody",
  props: zW,
  setup(n) {
    const e = qe(), t = ye(yr), i = ve("table"), { wrappedRowRender: s, tooltipContent: r, tooltipTrigger: o } = jW(n), { onColumnsChange: l, onScrollableChange: a } = YP(t), c = [];
    return ee(n.store.states.hoverRow, (u, h) => {
      var f;
      const d = e == null ? void 0 : e.vnode.el, p = Array.from((d == null ? void 0 : d.children) || []).filter((b) => b == null ? void 0 : b.classList.contains(`${i.e("row")}`));
      let g = u;
      const m = (f = p[g]) == null ? void 0 : f.childNodes;
      m != null && m.length ? Array.from(m).reduce((y, v, O) => {
        var x, S;
        const C = ((x = m[O - 1]) == null ? void 0 : x.colSpan) > 1, k = ((S = m[O + 1]) == null ? void 0 : S.colSpan) > 1;
        return v.nodeName !== "TD" && !C && !k && y.push(O), y;
      }, []).forEach((y) => {
        for (var v; g > 0; ) {
          const O = (v = p[g - 1]) == null ? void 0 : v.childNodes;
          if (O[y] && O[y].nodeName === "TD") {
            Vu(O[y], "hover-cell"), c.push(O[y]);
            break;
          }
          g--;
        }
      }) : (c.forEach((b) => za(b, "hover-cell")), c.length = 0), !(!n.store.states.isComplex.value || !ot) && tj(() => {
        const b = p[h], y = p[u];
        b && !b.classList.contains("hover-fixed-row") && za(b, "hover-row"), y && Vu(y, "hover-row");
      });
    }), _h(() => {
      var u;
      (u = Zi) == null || u();
    }), {
      ns: i,
      onColumnsChange: l,
      onScrollableChange: a,
      wrappedRowRender: s,
      tooltipContent: r,
      tooltipTrigger: o
    };
  },
  render() {
    const { wrappedRowRender: n, store: e } = this, t = e.states.data.value || [];
    return _e("tbody", { tabIndex: -1 }, [
      t.reduce((i, s) => i.concat(n(s, i.length)), [])
    ]);
  }
});
function FW() {
  const n = ye(yr), e = n == null ? void 0 : n.store, t = _(() => e.states.fixedLeafColumnsLength.value), i = _(() => e.states.rightFixedColumns.value.length), s = _(() => e.states.columns.value.length), r = _(() => e.states.fixedColumns.value.length), o = _(() => e.states.rightFixedColumns.value.length);
  return {
    leftFixedLeafCount: t,
    rightFixedLeafCount: i,
    columnsCount: s,
    leftFixedCount: r,
    rightFixedCount: o,
    columns: e.states.columns
  };
}
function VW(n) {
  const { columns: e } = FW(), t = ve("table");
  return {
    getCellClasses: (r, o) => {
      const l = r[o], a = [
        t.e("cell"),
        l.id,
        l.align,
        l.labelClassName,
        ...Xv(t.b(), o, l.fixed, n.store)
      ];
      return l.className && a.push(l.className), l.children || a.push(t.is("leaf")), a;
    },
    getCellStyles: (r, o) => {
      const l = Yv(o, r.fixed, n.store);
      return Ha(l, "left"), Ha(l, "right"), l;
    },
    columns: e
  };
}
var qW = Z({
  name: "ElTableFooter",
  props: {
    fixed: {
      type: String,
      default: ""
    },
    store: {
      required: !0,
      type: Object
    },
    summaryMethod: Function,
    sumText: String,
    border: Boolean,
    defaultSort: {
      type: Object,
      default: () => ({
        prop: "",
        order: ""
      })
    }
  },
  setup(n) {
    const { getCellClasses: e, getCellStyles: t, columns: i } = VW(n);
    return {
      ns: ve("table"),
      getCellClasses: e,
      getCellStyles: t,
      columns: i
    };
  },
  render() {
    const { columns: n, getCellStyles: e, getCellClasses: t, summaryMethod: i, sumText: s } = this, r = this.store.states.data.value;
    let o = [];
    return i ? o = i({
      columns: n,
      data: r
    }) : n.forEach((l, a) => {
      if (a === 0) {
        o[a] = s;
        return;
      }
      const c = r.map((d) => Number(d[l.property])), u = [];
      let h = !0;
      c.forEach((d) => {
        if (!Number.isNaN(+d)) {
          h = !1;
          const p = `${d}`.split(".")[1];
          u.push(p ? p.length : 0);
        }
      });
      const f = Math.max.apply(null, u);
      h ? o[a] = "" : o[a] = c.reduce((d, p) => {
        const g = Number(p);
        return Number.isNaN(+g) ? d : Number.parseFloat((d + p).toFixed(Math.min(f, 20)));
      }, 0);
    }), _e(_e("tfoot", [
      _e("tr", {}, [
        ...n.map((l, a) => _e("td", {
          key: a,
          colspan: l.colSpan,
          rowspan: l.rowSpan,
          class: t(n, a),
          style: e(l, a)
        }, [
          _e("div", {
            class: ["cell", l.labelClassName]
          }, [o[a]])
        ]))
      ])
    ]));
  }
});
function WW(n) {
  return {
    setCurrentRow: (u) => {
      n.commit("setCurrentRow", u);
    },
    getSelectionRows: () => n.getSelectionRows(),
    toggleRowSelection: (u, h) => {
      n.toggleRowSelection(u, h, !1), n.updateAllSelected();
    },
    clearSelection: () => {
      n.clearSelection();
    },
    clearFilter: (u) => {
      n.clearFilter(u);
    },
    toggleAllSelection: () => {
      n.commit("toggleAllSelection");
    },
    toggleRowExpansion: (u, h) => {
      n.toggleRowExpansionAdapter(u, h);
    },
    clearSort: () => {
      n.clearSort();
    },
    sort: (u, h) => {
      n.commit("sort", { prop: u, order: h });
    }
  };
}
function XW(n, e, t, i) {
  const s = L(!1), r = L(null), o = L(!1), l = (z) => {
    o.value = z;
  }, a = L({
    width: null,
    height: null,
    headerHeight: null
  }), c = L(!1), u = {
    display: "inline-block",
    verticalAlign: "middle"
  }, h = L(), f = L(0), d = L(0), p = L(0), g = L(0), m = L(0);
  sr(() => {
    e.setHeight(n.height);
  }), sr(() => {
    e.setMaxHeight(n.maxHeight);
  }), ee(() => [n.currentRowKey, t.states.rowKey], ([z, q]) => {
    !w(q) || !w(z) || t.setCurrentRowKey(`${z}`);
  }, {
    immediate: !0
  }), ee(() => n.data, (z) => {
    i.store.commit("setData", z);
  }, {
    immediate: !0,
    deep: !0
  }), sr(() => {
    n.expandRowKeys && t.setExpandRowKeysAdapter(n.expandRowKeys);
  });
  const b = () => {
    i.store.commit("setHoverRow", null), i.hoverState && (i.hoverState = null);
  }, y = (z, q) => {
    const { pixelX: re, pixelY: H } = q;
    Math.abs(re) >= Math.abs(H) && (i.refs.bodyWrapper.scrollLeft += q.pixelX / 5);
  }, v = _(() => n.height || n.maxHeight || t.states.fixedColumns.value.length > 0 || t.states.rightFixedColumns.value.length > 0), O = _(() => ({
    width: e.bodyWidth.value ? `${e.bodyWidth.value}px` : ""
  })), x = () => {
    v.value && e.updateElsHeight(), e.updateColumnsWidth(), requestAnimationFrame(E);
  };
  Be(async () => {
    await Qe(), t.updateColumns(), $(), requestAnimationFrame(x);
    const z = i.vnode.el, q = i.refs.headerWrapper;
    n.flexible && z && z.parentElement && (z.parentElement.style.minWidth = "0"), a.value = {
      width: h.value = z.offsetWidth,
      height: z.offsetHeight,
      headerHeight: n.showHeader && q ? q.offsetHeight : null
    }, t.states.columns.value.forEach((re) => {
      re.filteredValue && re.filteredValue.length && i.store.commit("filterChange", {
        column: re,
        values: re.filteredValue,
        silent: !0
      });
    }), i.$ready = !0;
  });
  const S = (z, q) => {
    if (!z)
      return;
    const re = Array.from(z.classList).filter((H) => !H.startsWith("is-scrolling-"));
    re.push(e.scrollX.value ? q : "is-scrolling-none"), z.className = re.join(" ");
  }, C = (z) => {
    const { tableWrapper: q } = i.refs;
    S(q, z);
  }, k = (z) => {
    const { tableWrapper: q } = i.refs;
    return !!(q && q.classList.contains(z));
  }, E = function() {
    if (!i.refs.scrollBarRef)
      return;
    if (!e.scrollX.value) {
      const ce = "is-scrolling-none";
      k(ce) || C(ce);
      return;
    }
    const z = i.refs.scrollBarRef.wrapRef;
    if (!z)
      return;
    const { scrollLeft: q, offsetWidth: re, scrollWidth: H } = z, { headerWrapper: G, footerWrapper: U } = i.refs;
    G && (G.scrollLeft = q), U && (U.scrollLeft = q);
    const le = H - re - 1;
    q >= le ? C("is-scrolling-right") : C(q === 0 ? "is-scrolling-left" : "is-scrolling-middle");
  }, $ = () => {
    i.refs.scrollBarRef && (i.refs.scrollBarRef.wrapRef && bi(i.refs.scrollBarRef.wrapRef, "scroll", E, {
      passive: !0
    }), n.fit ? Jn(i.vnode.el, T) : bi(window, "resize", T), Jn(i.refs.bodyWrapper, () => {
      var z, q;
      T(), (q = (z = i.refs) == null ? void 0 : z.scrollBarRef) == null || q.update();
    }));
  }, T = () => {
    var z, q, re, H;
    const G = i.vnode.el;
    if (!i.$ready || !G)
      return;
    let U = !1;
    const {
      width: le,
      height: ce,
      headerHeight: K
    } = a.value, he = h.value = G.offsetWidth;
    le !== he && (U = !0);
    const Ne = G.offsetHeight;
    (n.height || v.value) && ce !== Ne && (U = !0);
    const ae = n.tableLayout === "fixed" ? i.refs.headerWrapper : (z = i.refs.tableHeaderRef) == null ? void 0 : z.$el;
    n.showHeader && (ae == null ? void 0 : ae.offsetHeight) !== K && (U = !0), f.value = ((q = i.refs.tableWrapper) == null ? void 0 : q.scrollHeight) || 0, p.value = (ae == null ? void 0 : ae.scrollHeight) || 0, g.value = ((re = i.refs.footerWrapper) == null ? void 0 : re.offsetHeight) || 0, m.value = ((H = i.refs.appendWrapper) == null ? void 0 : H.offsetHeight) || 0, d.value = f.value - p.value - g.value - m.value, U && (a.value = {
      width: he,
      height: Ne,
      headerHeight: n.showHeader && (ae == null ? void 0 : ae.offsetHeight) || 0
    }, x());
  }, M = Bi(), j = _(() => {
    const { bodyWidth: z, scrollY: q, gutterWidth: re } = e;
    return z.value ? `${z.value - (q.value ? re : 0)}px` : "";
  }), D = _(() => n.maxHeight ? "fixed" : n.tableLayout), P = _(() => {
    if (n.data && n.data.length)
      return null;
    let z = "100%";
    n.height && d.value && (z = `${d.value}px`);
    const q = h.value;
    return {
      width: q ? `${q}px` : "",
      height: z
    };
  }), A = _(() => n.height ? {
    height: Number.isNaN(Number(n.height)) ? n.height : `${n.height}px`
  } : n.maxHeight ? {
    maxHeight: Number.isNaN(Number(n.maxHeight)) ? n.maxHeight : `${n.maxHeight}px`
  } : {}), Q = _(() => n.height ? {
    height: "100%"
  } : n.maxHeight ? Number.isNaN(Number(n.maxHeight)) ? {
    maxHeight: `calc(${n.maxHeight} - ${p.value + g.value}px)`
  } : {
    maxHeight: `${n.maxHeight - p.value - g.value}px`
  } : {});
  return {
    isHidden: s,
    renderExpanded: r,
    setDragVisible: l,
    isGroup: c,
    handleMouseLeave: b,
    handleHeaderFooterMousewheel: y,
    tableSize: M,
    emptyBlockStyle: P,
    handleFixedMousewheel: (z, q) => {
      const re = i.refs.bodyWrapper;
      if (Math.abs(q.spinY) > 0) {
        const H = re.scrollTop;
        q.pixelY < 0 && H !== 0 && z.preventDefault(), q.pixelY > 0 && re.scrollHeight - re.clientHeight > H && z.preventDefault(), re.scrollTop += Math.ceil(q.pixelY / 5);
      } else
        re.scrollLeft += Math.ceil(q.pixelX / 5);
    },
    resizeProxyVisible: o,
    bodyWidth: j,
    resizeState: a,
    doLayout: x,
    tableBodyStyles: O,
    tableLayout: D,
    scrollbarViewStyle: u,
    tableInnerStyle: A,
    scrollbarStyle: Q
  };
}
function YW(n) {
  const e = L(), t = () => {
    const s = n.vnode.el.querySelector(".hidden-columns"), r = { childList: !0, subtree: !0 }, o = n.store.states.updateOrderFns;
    e.value = new MutationObserver(() => {
      o.forEach((l) => l());
    }), e.value.observe(s, r);
  };
  Be(() => {
    t();
  }), _h(() => {
    var i;
    (i = e.value) == null || i.disconnect();
  });
}
var HW = {
  data: {
    type: Array,
    default: () => []
  },
  size: Ns,
  width: [String, Number],
  height: [String, Number],
  maxHeight: [String, Number],
  fit: {
    type: Boolean,
    default: !0
  },
  stripe: Boolean,
  border: Boolean,
  rowKey: [String, Function],
  showHeader: {
    type: Boolean,
    default: !0
  },
  showSummary: Boolean,
  sumText: String,
  summaryMethod: Function,
  rowClassName: [String, Function],
  rowStyle: [Object, Function],
  cellClassName: [String, Function],
  cellStyle: [Object, Function],
  headerRowClassName: [String, Function],
  headerRowStyle: [Object, Function],
  headerCellClassName: [String, Function],
  headerCellStyle: [Object, Function],
  highlightCurrentRow: Boolean,
  currentRowKey: [String, Number],
  emptyText: String,
  expandRowKeys: Array,
  defaultExpandAll: Boolean,
  defaultSort: Object,
  tooltipEffect: String,
  tooltipOptions: Object,
  spanMethod: Function,
  selectOnIndeterminate: {
    type: Boolean,
    default: !0
  },
  indent: {
    type: Number,
    default: 16
  },
  treeProps: {
    type: Object,
    default: () => ({
      hasChildren: "hasChildren",
      children: "children"
    })
  },
  lazy: Boolean,
  load: Function,
  style: {
    type: Object,
    default: () => ({})
  },
  className: {
    type: String,
    default: ""
  },
  tableLayout: {
    type: String,
    default: "fixed"
  },
  scrollbarAlwaysOn: {
    type: Boolean,
    default: !1
  },
  flexible: Boolean,
  showOverflowTooltip: [Boolean, Object]
};
function GP(n) {
  const e = n.tableLayout === "auto";
  let t = n.columns || [];
  e && t.every((s) => s.width === void 0) && (t = []);
  const i = (s) => {
    const r = {
      key: `${n.tableLayout}_${s.id}`,
      style: {},
      name: void 0
    };
    return e ? r.style = {
      width: `${s.width}px`
    } : r.name = s.id, r;
  };
  return _e("colgroup", {}, t.map((s) => _e("col", i(s))));
}
GP.props = ["columns", "tableLayout"];
const GW = () => {
  const n = L(), e = (r, o) => {
    const l = n.value;
    l && l.scrollTo(r, o);
  }, t = (r, o) => {
    const l = n.value;
    l && ze(o) && ["Top", "Left"].includes(r) && l[`setScroll${r}`](o);
  };
  return {
    scrollBarRef: n,
    scrollTo: e,
    setScrollTop: (r) => t("Top", r),
    setScrollLeft: (r) => t("Left", r)
  };
};
let UW = 1;
const KW = Z({
  name: "ElTable",
  directives: {
    Mousewheel: yZ
  },
  components: {
    TableHeader: IW,
    TableBody: ZW,
    TableFooter: qW,
    ElScrollbar: Iv,
    hColgroup: GP
  },
  props: HW,
  emits: [
    "select",
    "select-all",
    "selection-change",
    "cell-mouse-enter",
    "cell-mouse-leave",
    "cell-contextmenu",
    "cell-click",
    "cell-dblclick",
    "row-click",
    "row-contextmenu",
    "row-dblclick",
    "header-click",
    "header-contextmenu",
    "sort-change",
    "filter-change",
    "current-change",
    "header-dragend",
    "expand-change"
  ],
  setup(n) {
    const { t: e } = ni(), t = ve("table"), i = qe();
    ht(yr, i);
    const s = SW(i, n);
    i.store = s;
    const r = new kW({
      store: i.store,
      table: i,
      fit: n.fit,
      showHeader: n.showHeader
    });
    i.layout = r;
    const o = _(() => (s.states.data.value || []).length === 0), {
      setCurrentRow: l,
      getSelectionRows: a,
      toggleRowSelection: c,
      clearSelection: u,
      clearFilter: h,
      toggleAllSelection: f,
      toggleRowExpansion: d,
      clearSort: p,
      sort: g
    } = WW(s), {
      isHidden: m,
      renderExpanded: b,
      setDragVisible: y,
      isGroup: v,
      handleMouseLeave: O,
      handleHeaderFooterMousewheel: x,
      tableSize: S,
      emptyBlockStyle: C,
      handleFixedMousewheel: k,
      resizeProxyVisible: E,
      bodyWidth: $,
      resizeState: T,
      doLayout: M,
      tableBodyStyles: j,
      tableLayout: D,
      scrollbarViewStyle: P,
      tableInnerStyle: A,
      scrollbarStyle: Q
    } = XW(n, r, s, i), { scrollBarRef: X, scrollTo: z, setScrollLeft: q, setScrollTop: re } = GW(), H = Ml(M, 50), G = `${t.namespace.value}-table_${UW++}`;
    i.tableId = G, i.state = {
      isGroup: v,
      resizeState: T,
      doLayout: M,
      debouncedUpdateLayout: H
    };
    const U = _(() => n.sumText || e("el.table.sumText")), le = _(() => n.emptyText || e("el.table.emptyText"));
    return YW(i), {
      ns: t,
      layout: r,
      store: s,
      handleHeaderFooterMousewheel: x,
      handleMouseLeave: O,
      tableId: G,
      tableSize: S,
      isHidden: m,
      isEmpty: o,
      renderExpanded: b,
      resizeProxyVisible: E,
      resizeState: T,
      isGroup: v,
      bodyWidth: $,
      tableBodyStyles: j,
      emptyBlockStyle: C,
      debouncedUpdateLayout: H,
      handleFixedMousewheel: k,
      setCurrentRow: l,
      getSelectionRows: a,
      toggleRowSelection: c,
      clearSelection: u,
      clearFilter: h,
      toggleAllSelection: f,
      toggleRowExpansion: d,
      clearSort: p,
      doLayout: M,
      sort: g,
      t: e,
      setDragVisible: y,
      context: i,
      computedSumText: U,
      computedEmptyText: le,
      tableLayout: D,
      scrollbarViewStyle: P,
      tableInnerStyle: A,
      scrollbarStyle: Q,
      scrollBarRef: X,
      scrollTo: z,
      setScrollLeft: q,
      setScrollTop: re
    };
  }
}), JW = ["data-prefix"], e7 = {
  ref: "hiddenColumns",
  class: "hidden-columns"
};
function t7(n, e, t, i, s, r) {
  const o = $t("hColgroup"), l = $t("table-header"), a = $t("table-body"), c = $t("table-footer"), u = $t("el-scrollbar"), h = ov("mousewheel");
  return R(), F("div", {
    ref: "tableWrapper",
    class: B([
      {
        [n.ns.m("fit")]: n.fit,
        [n.ns.m("striped")]: n.stripe,
        [n.ns.m("border")]: n.border || n.isGroup,
        [n.ns.m("hidden")]: n.isHidden,
        [n.ns.m("group")]: n.isGroup,
        [n.ns.m("fluid-height")]: n.maxHeight,
        [n.ns.m("scrollable-x")]: n.layout.scrollX.value,
        [n.ns.m("scrollable-y")]: n.layout.scrollY.value,
        [n.ns.m("enable-row-hover")]: !n.store.states.isComplex.value,
        [n.ns.m("enable-row-transition")]: (n.store.states.data.value || []).length !== 0 && (n.store.states.data.value || []).length < 100,
        "has-footer": n.showSummary
      },
      n.ns.m(n.tableSize),
      n.className,
      n.ns.b(),
      n.ns.m(`layout-${n.tableLayout}`)
    ]),
    style: Ye(n.style),
    "data-prefix": n.ns.namespace.value,
    onMouseleave: e[0] || (e[0] = (...f) => n.handleMouseLeave && n.handleMouseLeave(...f))
  }, [
    W("div", {
      class: B(n.ns.e("inner-wrapper")),
      style: Ye(n.tableInnerStyle)
    }, [
      W("div", e7, [
        pe(n.$slots, "default")
      ], 512),
      n.showHeader && n.tableLayout === "fixed" ? tt((R(), F("div", {
        key: 0,
        ref: "headerWrapper",
        class: B(n.ns.e("header-wrapper"))
      }, [
        W("table", {
          ref: "tableHeader",
          class: B(n.ns.e("header")),
          style: Ye(n.tableBodyStyles),
          border: "0",
          cellpadding: "0",
          cellspacing: "0"
        }, [
          ne(o, {
            columns: n.store.states.columns.value,
            "table-layout": n.tableLayout
          }, null, 8, ["columns", "table-layout"]),
          ne(l, {
            ref: "tableHeaderRef",
            border: n.border,
            "default-sort": n.defaultSort,
            store: n.store,
            onSetDragVisible: n.setDragVisible
          }, null, 8, ["border", "default-sort", "store", "onSetDragVisible"])
        ], 6)
      ], 2)), [
        [h, n.handleHeaderFooterMousewheel]
      ]) : te("v-if", !0),
      W("div", {
        ref: "bodyWrapper",
        class: B(n.ns.e("body-wrapper"))
      }, [
        ne(u, {
          ref: "scrollBarRef",
          "view-style": n.scrollbarViewStyle,
          "wrap-style": n.scrollbarStyle,
          always: n.scrollbarAlwaysOn
        }, {
          default: se(() => [
            W("table", {
              ref: "tableBody",
              class: B(n.ns.e("body")),
              cellspacing: "0",
              cellpadding: "0",
              border: "0",
              style: Ye({
                width: n.bodyWidth,
                tableLayout: n.tableLayout
              })
            }, [
              ne(o, {
                columns: n.store.states.columns.value,
                "table-layout": n.tableLayout
              }, null, 8, ["columns", "table-layout"]),
              n.showHeader && n.tableLayout === "auto" ? (R(), oe(l, {
                key: 0,
                ref: "tableHeaderRef",
                class: B(n.ns.e("body-header")),
                border: n.border,
                "default-sort": n.defaultSort,
                store: n.store,
                onSetDragVisible: n.setDragVisible
              }, null, 8, ["class", "border", "default-sort", "store", "onSetDragVisible"])) : te("v-if", !0),
              ne(a, {
                context: n.context,
                highlight: n.highlightCurrentRow,
                "row-class-name": n.rowClassName,
                "tooltip-effect": n.tooltipEffect,
                "tooltip-options": n.tooltipOptions,
                "row-style": n.rowStyle,
                store: n.store,
                stripe: n.stripe
              }, null, 8, ["context", "highlight", "row-class-name", "tooltip-effect", "tooltip-options", "row-style", "store", "stripe"]),
              n.showSummary && n.tableLayout === "auto" ? (R(), oe(c, {
                key: 1,
                class: B(n.ns.e("body-footer")),
                border: n.border,
                "default-sort": n.defaultSort,
                store: n.store,
                "sum-text": n.computedSumText,
                "summary-method": n.summaryMethod
              }, null, 8, ["class", "border", "default-sort", "store", "sum-text", "summary-method"])) : te("v-if", !0)
            ], 6),
            n.isEmpty ? (R(), F("div", {
              key: 0,
              ref: "emptyBlock",
              style: Ye(n.emptyBlockStyle),
              class: B(n.ns.e("empty-block"))
            }, [
              W("span", {
                class: B(n.ns.e("empty-text"))
              }, [
                pe(n.$slots, "empty", {}, () => [
                  mi(Re(n.computedEmptyText), 1)
                ])
              ], 2)
            ], 6)) : te("v-if", !0),
            n.$slots.append ? (R(), F("div", {
              key: 1,
              ref: "appendWrapper",
              class: B(n.ns.e("append-wrapper"))
            }, [
              pe(n.$slots, "append")
            ], 2)) : te("v-if", !0)
          ]),
          _: 3
        }, 8, ["view-style", "wrap-style", "always"])
      ], 2),
      n.showSummary && n.tableLayout === "fixed" ? tt((R(), F("div", {
        key: 1,
        ref: "footerWrapper",
        class: B(n.ns.e("footer-wrapper"))
      }, [
        W("table", {
          class: B(n.ns.e("footer")),
          cellspacing: "0",
          cellpadding: "0",
          border: "0",
          style: Ye(n.tableBodyStyles)
        }, [
          ne(o, {
            columns: n.store.states.columns.value,
            "table-layout": n.tableLayout
          }, null, 8, ["columns", "table-layout"]),
          ne(c, {
            border: n.border,
            "default-sort": n.defaultSort,
            store: n.store,
            "sum-text": n.computedSumText,
            "summary-method": n.summaryMethod
          }, null, 8, ["border", "default-sort", "store", "sum-text", "summary-method"])
        ], 6)
      ], 2)), [
        [Ht, !n.isEmpty],
        [h, n.handleHeaderFooterMousewheel]
      ]) : te("v-if", !0),
      n.border || n.isGroup ? (R(), F("div", {
        key: 2,
        class: B(n.ns.e("border-left-patch"))
      }, null, 2)) : te("v-if", !0)
    ], 6),
    tt(W("div", {
      ref: "resizeProxy",
      class: B(n.ns.e("column-resize-proxy"))
    }, null, 2), [
      [Ht, n.resizeProxyVisible]
    ])
  ], 46, JW);
}
var n7 = /* @__PURE__ */ Ce(KW, [["render", t7], ["__file", "table.vue"]]);
const i7 = {
  selection: "table-column--selection",
  expand: "table__expand-column"
}, s7 = {
  default: {
    order: ""
  },
  selection: {
    width: 48,
    minWidth: 48,
    realWidth: 48,
    order: ""
  },
  expand: {
    width: 48,
    minWidth: 48,
    realWidth: 48,
    order: ""
  },
  index: {
    width: 48,
    minWidth: 48,
    realWidth: 48,
    order: ""
  }
}, r7 = (n) => i7[n] || "", o7 = {
  selection: {
    renderHeader({ store: n, column: e }) {
      function t() {
        return n.states.data.value && n.states.data.value.length === 0;
      }
      return _e(Ya, {
        disabled: t(),
        size: n.states.tableSize.value,
        indeterminate: n.states.selection.value.length > 0 && !n.states.isAllSelected.value,
        "onUpdate:modelValue": n.toggleAllSelection,
        modelValue: n.states.isAllSelected.value,
        ariaLabel: e.label
      });
    },
    renderCell({
      row: n,
      column: e,
      store: t,
      $index: i
    }) {
      return _e(Ya, {
        disabled: e.selectable ? !e.selectable.call(null, n, i) : !1,
        size: t.states.tableSize.value,
        onChange: () => {
          t.commit("rowSelectedChanged", n);
        },
        onClick: (s) => s.stopPropagation(),
        modelValue: t.isSelected(n),
        ariaLabel: e.label
      });
    },
    sortable: !1,
    resizable: !1
  },
  index: {
    renderHeader({ column: n }) {
      return n.label || "#";
    },
    renderCell({
      column: n,
      $index: e
    }) {
      let t = e + 1;
      const i = n.index;
      return typeof i == "number" ? t = e + i : typeof i == "function" && (t = i(e)), _e("div", {}, [t]);
    },
    sortable: !1
  },
  expand: {
    renderHeader({ column: n }) {
      return n.label || "";
    },
    renderCell({
      row: n,
      store: e,
      expanded: t
    }) {
      const { ns: i } = e, s = [i.e("expand-icon")];
      return t && s.push(i.em("expand-icon", "expanded")), _e("div", {
        class: s,
        onClick: function(o) {
          o.stopPropagation(), e.toggleRowExpansion(n);
        }
      }, {
        default: () => [
          _e(Ue, null, {
            default: () => [_e(Qh)]
          })
        ]
      });
    },
    sortable: !1,
    resizable: !1
  }
};
function l7({
  row: n,
  column: e,
  $index: t
}) {
  var i;
  const s = e.property, r = s && nd(n, s).value;
  return e && e.formatter ? e.formatter(n, e, r, t) : ((i = r == null ? void 0 : r.toString) == null ? void 0 : i.call(r)) || "";
}
function a7({
  row: n,
  treeNode: e,
  store: t
}, i = !1) {
  const { ns: s } = t;
  if (!e)
    return i ? [
      _e("span", {
        class: s.e("placeholder")
      })
    ] : null;
  const r = [], o = function(l) {
    l.stopPropagation(), !e.loading && t.loadOrToggle(n);
  };
  if (e.indent && r.push(_e("span", {
    class: s.e("indent"),
    style: { "padding-left": `${e.indent}px` }
  })), typeof e.expanded == "boolean" && !e.noLazyChildren) {
    const l = [
      s.e("expand-icon"),
      e.expanded ? s.em("expand-icon", "expanded") : ""
    ];
    let a = Qh;
    e.loading && (a = Zp), r.push(_e("div", {
      class: l,
      onClick: o
    }, {
      default: () => [
        _e(Ue, { class: { [s.is("loading")]: e.loading } }, {
          default: () => [_e(a)]
        })
      ]
    }));
  } else
    r.push(_e("span", {
      class: s.e("placeholder")
    }));
  return r;
}
function mw(n, e) {
  return n.reduce((t, i) => (t[i] = i, t), e);
}
function c7(n, e) {
  const t = qe();
  return {
    registerComplexWatchers: () => {
      const r = ["fixed"], o = {
        realWidth: "width",
        realMinWidth: "minWidth"
      }, l = mw(r, o);
      Object.keys(l).forEach((a) => {
        const c = o[a];
        Ps(e, c) && ee(() => e[c], (u) => {
          let h = u;
          c === "width" && a === "realWidth" && (h = Wv(u)), c === "minWidth" && a === "realMinWidth" && (h = FP(u)), t.columnConfig.value[c] = h, t.columnConfig.value[a] = h;
          const f = c === "fixed";
          n.value.store.scheduleLayout(f);
        });
      });
    },
    registerNormalWatchers: () => {
      const r = [
        "label",
        "filters",
        "filterMultiple",
        "filteredValue",
        "sortable",
        "index",
        "formatter",
        "className",
        "labelClassName",
        "filterClassName",
        "showOverflowTooltip"
      ], o = {
        property: "prop",
        align: "realAlign",
        headerAlign: "realHeaderAlign"
      }, l = mw(r, o);
      Object.keys(l).forEach((a) => {
        const c = o[a];
        Ps(e, c) && ee(() => e[c], (u) => {
          t.columnConfig.value[a] = u;
        });
      });
    }
  };
}
function u7(n, e, t) {
  const i = qe(), s = L(""), r = L(!1), o = L(), l = L(), a = ve("table");
  sr(() => {
    o.value = n.align ? `is-${n.align}` : null, o.value;
  }), sr(() => {
    l.value = n.headerAlign ? `is-${n.headerAlign}` : o.value, l.value;
  });
  const c = _(() => {
    let O = i.vnode.vParent || i.parent;
    for (; O && !O.tableId && !O.columnId; )
      O = O.vnode.vParent || O.parent;
    return O;
  }), u = _(() => {
    const { store: O } = i.parent;
    if (!O)
      return !1;
    const { treeData: x } = O.states, S = x.value;
    return S && Object.keys(S).length > 0;
  }), h = L(Wv(n.width)), f = L(FP(n.minWidth)), d = (O) => (h.value && (O.width = h.value), f.value && (O.minWidth = f.value), !h.value && f.value && (O.width = void 0), O.minWidth || (O.minWidth = 80), O.realWidth = Number(O.width === void 0 ? O.minWidth : O.width), O), p = (O) => {
    const x = O.type, S = o7[x] || {};
    Object.keys(S).forEach((k) => {
      const E = S[k];
      k !== "className" && E !== void 0 && (O[k] = E);
    });
    const C = r7(x);
    if (C) {
      const k = `${w(a.namespace)}-${C}`;
      O.className = O.className ? `${O.className} ${k}` : k;
    }
    return O;
  }, g = (O) => {
    Array.isArray(O) ? O.forEach((S) => x(S)) : x(O);
    function x(S) {
      var C;
      ((C = S == null ? void 0 : S.type) == null ? void 0 : C.name) === "ElTableColumn" && (S.vParent = i);
    }
  };
  return {
    columnId: s,
    realAlign: o,
    isSubColumn: r,
    realHeaderAlign: l,
    columnOrTableParent: c,
    setColumnWidth: d,
    setColumnForcedProps: p,
    setColumnRenders: (O) => {
      n.renderHeader ? rt("TableColumn", "Comparing to render-header, scoped-slot header is easier to use. We recommend users to use scoped-slot header.") : O.type !== "selection" && (O.renderHeader = (S) => (i.columnConfig.value.label, pe(e, "header", S, () => [O.label])));
      let x = O.renderCell;
      return O.type === "expand" ? (O.renderCell = (S) => _e("div", {
        class: "cell"
      }, [x(S)]), t.value.renderExpanded = (S) => e.default ? e.default(S) : e.default) : (x = x || l7, O.renderCell = (S) => {
        let C = null;
        if (e.default) {
          const j = e.default(S);
          C = j.some((D) => D.type !== zC) ? j : x(S);
        } else
          C = x(S);
        const { columns: k } = t.value.store.states, E = k.value.findIndex((j) => j.type === "default"), $ = u.value && S.cellIndex === E, T = a7(S, $), M = {
          class: "cell",
          style: {}
        };
        return O.showOverflowTooltip && (M.class = `${M.class} ${w(a.namespace)}-tooltip`, M.style = {
          width: `${(S.column.realWidth || Number(S.column.width)) - 1}px`
        }), g(C), _e("div", M, [T, C]);
      }), O;
    },
    getPropsData: (...O) => O.reduce((x, S) => (Array.isArray(S) && S.forEach((C) => {
      x[C] = n[C];
    }), x), {}),
    getColumnElIndex: (O, x) => Array.prototype.indexOf.call(O, x),
    updateColumnOrder: () => {
      t.value.store.commit("updateColumnOrder", i.columnConfig.value);
    }
  };
}
var h7 = {
  type: {
    type: String,
    default: "default"
  },
  label: String,
  className: String,
  labelClassName: String,
  property: String,
  prop: String,
  width: {
    type: [String, Number],
    default: ""
  },
  minWidth: {
    type: [String, Number],
    default: ""
  },
  renderHeader: Function,
  sortable: {
    type: [Boolean, String],
    default: !1
  },
  sortMethod: Function,
  sortBy: [String, Function, Array],
  resizable: {
    type: Boolean,
    default: !0
  },
  columnKey: String,
  align: String,
  headerAlign: String,
  showOverflowTooltip: {
    type: [Boolean, Object],
    default: void 0
  },
  fixed: [Boolean, String],
  formatter: Function,
  selectable: Function,
  reserveSelection: Boolean,
  filterMethod: Function,
  filteredValue: Array,
  filters: Array,
  filterPlacement: String,
  filterMultiple: {
    type: Boolean,
    default: !0
  },
  filterClassName: String,
  index: [Number, Function],
  sortOrders: {
    type: Array,
    default: () => ["ascending", "descending", null],
    validator: (n) => n.every((e) => ["ascending", "descending", null].includes(e))
  }
};
let f7 = 1;
var UP = Z({
  name: "ElTableColumn",
  components: {
    ElCheckbox: Ya
  },
  props: h7,
  setup(n, { slots: e }) {
    const t = qe(), i = L({}), s = _(() => {
      let v = t.parent;
      for (; v && !v.tableId; )
        v = v.parent;
      return v;
    }), { registerNormalWatchers: r, registerComplexWatchers: o } = c7(s, n), {
      columnId: l,
      isSubColumn: a,
      realHeaderAlign: c,
      columnOrTableParent: u,
      setColumnWidth: h,
      setColumnForcedProps: f,
      setColumnRenders: d,
      getPropsData: p,
      getColumnElIndex: g,
      realAlign: m,
      updateColumnOrder: b
    } = u7(n, e, s), y = u.value;
    l.value = `${y.tableId || y.columnId}_column_${f7++}`, rv(() => {
      a.value = s.value !== y;
      const v = n.type || "default", O = n.sortable === "" ? !0 : n.sortable, x = Li(n.showOverflowTooltip) ? y.props.showOverflowTooltip : n.showOverflowTooltip, S = {
        ...s7[v],
        id: l.value,
        type: v,
        property: n.prop || n.property,
        align: m,
        headerAlign: c,
        showOverflowTooltip: x,
        filterable: n.filters || n.filterMethod,
        filteredValue: [],
        filterPlacement: "",
        filterClassName: "",
        isColumnGroup: !1,
        isSubColumn: !1,
        filterOpened: !1,
        sortable: O,
        index: n.index,
        rawColumnKey: t.vnode.key
      };
      let T = p([
        "columnKey",
        "label",
        "className",
        "labelClassName",
        "type",
        "renderHeader",
        "formatter",
        "fixed",
        "resizable"
      ], ["sortMethod", "sortBy", "sortOrders"], ["selectable", "reserveSelection"], [
        "filterMethod",
        "filters",
        "filterMultiple",
        "filterOpened",
        "filteredValue",
        "filterPlacement",
        "filterClassName"
      ]);
      T = fW(S, T), T = pW(d, h, f)(T), i.value = T, r(), o();
    }), Be(() => {
      var v;
      const O = u.value, x = a.value ? O.vnode.el.children : (v = O.refs.hiddenColumns) == null ? void 0 : v.children, S = () => g(x || [], t.vnode.el);
      i.value.getColumnIndex = S, S() > -1 && s.value.store.commit("insertColumn", i.value, a.value ? O.columnConfig.value : null, b);
    }), Zn(() => {
      s.value.store.commit("removeColumn", i.value, a.value ? y.columnConfig.value : null, b);
    }), t.columnId = l.value, t.columnConfig = i;
  },
  render() {
    var n, e, t;
    try {
      const i = (e = (n = this.$slots).default) == null ? void 0 : e.call(n, {
        row: {},
        column: {},
        $index: -1
      }), s = [];
      if (Array.isArray(i))
        for (const o of i)
          ((t = o.type) == null ? void 0 : t.name) === "ElTableColumn" || o.shapeFlag & 2 ? s.push(o) : o.type === sn && Array.isArray(o.children) && o.children.forEach((l) => {
            (l == null ? void 0 : l.patchFlag) !== 1024 && !pt(l == null ? void 0 : l.children) && s.push(l);
          });
      return _e("div", s);
    } catch {
      return _e("div", []);
    }
  }
});
const GZe = Bt(n7, {
  TableColumn: UP
}), UZe = Ds(UP), Up = Symbol("tabsRootContextKey"), d7 = Ae({
  tabs: {
    type: be(Array),
    default: () => Gl([])
  }
}), KP = "ElTabBar", p7 = Z({
  name: KP
}), g7 = /* @__PURE__ */ Z({
  ...p7,
  props: d7,
  setup(n, { expose: e }) {
    const t = n, i = qe(), s = ye(Up);
    s || Yr(KP, "<el-tabs><el-tab-bar /></el-tabs>");
    const r = ve("tabs"), o = L(), l = L(), a = () => {
      let u = 0, h = 0;
      const f = ["top", "bottom"].includes(s.props.tabPosition) ? "width" : "height", d = f === "width" ? "x" : "y", p = d === "x" ? "left" : "top";
      return t.tabs.every((g) => {
        var m, b;
        const y = (b = (m = i.parent) == null ? void 0 : m.refs) == null ? void 0 : b[`tab-${g.uid}`];
        if (!y)
          return !1;
        if (!g.active)
          return !0;
        u = y[`offset${fo(p)}`], h = y[`client${fo(f)}`];
        const v = window.getComputedStyle(y);
        return f === "width" && (t.tabs.length > 1 && (h -= Number.parseFloat(v.paddingLeft) + Number.parseFloat(v.paddingRight)), u += Number.parseFloat(v.paddingLeft)), !1;
      }), {
        [f]: `${h}px`,
        transform: `translate${fo(d)}(${u}px)`
      };
    }, c = () => l.value = a();
    return ee(() => t.tabs, async () => {
      await Qe(), c();
    }, { immediate: !0 }), Jn(o, () => c()), e({
      ref: o,
      update: c
    }), (u, h) => (R(), F("div", {
      ref_key: "barRef",
      ref: o,
      class: B([w(r).e("active-bar"), w(r).is(w(s).props.tabPosition)]),
      style: Ye(l.value)
    }, null, 6));
  }
});
var m7 = /* @__PURE__ */ Ce(g7, [["__file", "tab-bar.vue"]]);
const b7 = Ae({
  panes: {
    type: be(Array),
    default: () => Gl([])
  },
  currentName: {
    type: [String, Number],
    default: ""
  },
  editable: Boolean,
  type: {
    type: String,
    values: ["card", "border-card", ""],
    default: ""
  },
  stretch: Boolean
}), v7 = {
  tabClick: (n, e, t) => t instanceof Event,
  tabRemove: (n, e) => e instanceof Event
}, bw = "ElTabNav", y7 = Z({
  name: bw,
  props: b7,
  emits: v7,
  setup(n, {
    expose: e,
    emit: t
  }) {
    const i = qe(), s = ye(Up);
    s || Yr(bw, "<el-tabs><tab-nav /></el-tabs>");
    const r = ve("tabs"), o = SB(), l = NB(), a = L(), c = L(), u = L(), h = L(), f = L(!1), d = L(0), p = L(!1), g = L(!0), m = _(() => ["top", "bottom"].includes(s.props.tabPosition) ? "width" : "height"), b = _(() => ({
      transform: `translate${m.value === "width" ? "X" : "Y"}(-${d.value}px)`
    })), y = () => {
      if (!a.value)
        return;
      const E = a.value[`offset${fo(m.value)}`], $ = d.value;
      if (!$)
        return;
      const T = $ > E ? $ - E : 0;
      d.value = T;
    }, v = () => {
      if (!a.value || !c.value)
        return;
      const E = c.value[`offset${fo(m.value)}`], $ = a.value[`offset${fo(m.value)}`], T = d.value;
      if (E - T <= $)
        return;
      const M = E - T > $ * 2 ? T + $ : E - $;
      d.value = M;
    }, O = async () => {
      const E = c.value;
      if (!f.value || !u.value || !a.value || !E)
        return;
      await Qe();
      const $ = u.value.querySelector(".is-active");
      if (!$)
        return;
      const T = a.value, M = ["top", "bottom"].includes(s.props.tabPosition), j = $.getBoundingClientRect(), D = T.getBoundingClientRect(), P = M ? E.offsetWidth - D.width : E.offsetHeight - D.height, A = d.value;
      let Q = A;
      M ? (j.left < D.left && (Q = A - (D.left - j.left)), j.right > D.right && (Q = A + j.right - D.right)) : (j.top < D.top && (Q = A - (D.top - j.top)), j.bottom > D.bottom && (Q = A + (j.bottom - D.bottom))), Q = Math.max(Q, 0), d.value = Math.min(Q, P);
    }, x = () => {
      var E;
      if (!c.value || !a.value)
        return;
      n.stretch && ((E = h.value) == null || E.update());
      const $ = c.value[`offset${fo(m.value)}`], T = a.value[`offset${fo(m.value)}`], M = d.value;
      T < $ ? (f.value = f.value || {}, f.value.prev = M, f.value.next = M + T < $, $ - M < T && (d.value = $ - T)) : (f.value = !1, M > 0 && (d.value = 0));
    }, S = (E) => {
      const $ = E.code, {
        up: T,
        down: M,
        left: j,
        right: D
      } = jn;
      if (![T, M, j, D].includes($))
        return;
      const P = Array.from(E.currentTarget.querySelectorAll("[role=tab]:not(.is-disabled)")), A = P.indexOf(E.target);
      let Q;
      $ === j || $ === T ? A === 0 ? Q = P.length - 1 : Q = A - 1 : A < P.length - 1 ? Q = A + 1 : Q = 0, P[Q].focus({
        preventScroll: !0
      }), P[Q].click(), C();
    }, C = () => {
      g.value && (p.value = !0);
    }, k = () => p.value = !1;
    return ee(o, (E) => {
      E === "hidden" ? g.value = !1 : E === "visible" && setTimeout(() => g.value = !0, 50);
    }), ee(l, (E) => {
      E ? setTimeout(() => g.value = !0, 50) : g.value = !1;
    }), Jn(u, x), Be(() => setTimeout(() => O(), 0)), Mh(() => x()), e({
      scrollToActiveTab: O,
      removeFocus: k
    }), ee(() => n.panes, () => i.update(), {
      flush: "post",
      deep: !0
    }), () => {
      const E = f.value ? [ne("span", {
        class: [r.e("nav-prev"), r.is("disabled", !f.value.prev)],
        onClick: y
      }, [ne(Ue, null, {
        default: () => [ne(r2, null, null)]
      })]), ne("span", {
        class: [r.e("nav-next"), r.is("disabled", !f.value.next)],
        onClick: v
      }, [ne(Ue, null, {
        default: () => [ne(Qh, null, null)]
      })])] : null, $ = n.panes.map((T, M) => {
        var j, D, P, A;
        const Q = T.uid, X = T.props.disabled, z = (D = (j = T.props.name) != null ? j : T.index) != null ? D : `${M}`, q = !X && (T.isClosable || n.editable);
        T.index = `${M}`;
        const re = q ? ne(Ue, {
          class: "is-icon-close",
          onClick: (U) => t("tabRemove", T, U)
        }, {
          default: () => [ne(Rl, null, null)]
        }) : null, H = ((A = (P = T.slots).label) == null ? void 0 : A.call(P)) || T.props.label, G = !X && T.active ? 0 : -1;
        return ne("div", {
          ref: `tab-${Q}`,
          class: [r.e("item"), r.is(s.props.tabPosition), r.is("active", T.active), r.is("disabled", X), r.is("closable", q), r.is("focus", p.value)],
          id: `tab-${z}`,
          key: `tab-${Q}`,
          "aria-controls": `pane-${z}`,
          role: "tab",
          "aria-selected": T.active,
          tabindex: G,
          onFocus: () => C(),
          onBlur: () => k(),
          onClick: (U) => {
            k(), t("tabClick", T, z, U);
          },
          onKeydown: (U) => {
            q && (U.code === jn.delete || U.code === jn.backspace) && t("tabRemove", T, U);
          }
        }, [H, re]);
      });
      return ne("div", {
        ref: u,
        class: [r.e("nav-wrap"), r.is("scrollable", !!f.value), r.is(s.props.tabPosition)]
      }, [E, ne("div", {
        class: r.e("nav-scroll"),
        ref: a
      }, [ne("div", {
        class: [r.e("nav"), r.is(s.props.tabPosition), r.is("stretch", n.stretch && ["top", "bottom"].includes(s.props.tabPosition))],
        ref: c,
        style: b.value,
        role: "tablist",
        onKeydown: S
      }, [n.type ? null : ne(m7, {
        ref: h,
        tabs: [...n.panes]
      }, null), $])])]);
    };
  }
}), O7 = Ae({
  type: {
    type: String,
    values: ["card", "border-card", ""],
    default: ""
  },
  activeName: {
    type: [String, Number]
  },
  closable: Boolean,
  addable: Boolean,
  modelValue: {
    type: [String, Number]
  },
  editable: Boolean,
  tabPosition: {
    type: String,
    values: ["top", "right", "bottom", "left"],
    default: "top"
  },
  beforeLeave: {
    type: be(Function),
    default: () => !0
  },
  stretch: Boolean
}), im = (n) => pt(n) || ze(n), w7 = {
  [et]: (n) => im(n),
  tabClick: (n, e) => e instanceof Event,
  tabChange: (n) => im(n),
  edit: (n, e) => ["remove", "add"].includes(e),
  tabRemove: (n) => im(n),
  tabAdd: () => !0
}, x7 = Z({
  name: "ElTabs",
  props: O7,
  emits: w7,
  setup(n, {
    emit: e,
    slots: t,
    expose: i
  }) {
    var s, r;
    const o = ve("tabs"), {
      children: l,
      addChild: a,
      removeChild: c
    } = jz(qe(), "ElTabPane"), u = L(), h = L((r = (s = n.modelValue) != null ? s : n.activeName) != null ? r : "0"), f = async (m, b = !1) => {
      var y, v, O;
      if (!(h.value === m || Li(m)))
        try {
          await ((y = n.beforeLeave) == null ? void 0 : y.call(n, m, h.value)) !== !1 && (h.value = m, b && (e(et, m), e("tabChange", m)), (O = (v = u.value) == null ? void 0 : v.removeFocus) == null || O.call(v));
        } catch {
        }
    }, d = (m, b, y) => {
      m.props.disabled || (f(b, !0), e("tabClick", m, y));
    }, p = (m, b) => {
      m.props.disabled || Li(m.props.name) || (b.stopPropagation(), e("edit", m.props.name, "remove"), e("tabRemove", m.props.name));
    }, g = () => {
      e("edit", void 0, "add"), e("tabAdd");
    };
    return Dl({
      from: '"activeName"',
      replacement: '"model-value" or "v-model"',
      scope: "ElTabs",
      version: "2.3.0",
      ref: "https://element-plus.org/en-US/component/tabs.html#attributes",
      type: "Attribute"
    }, _(() => !!n.activeName)), Dl({
      from: '"addIcon"',
      replacement: '"add-icon"',
      scope: "ElTabs",
      version: "2.6.0",
      ref: "https://element-plus.org/en-US/component/tabs.html#slots",
      type: "Slot"
    }, _(() => !!t.addIcon)), ee(() => n.activeName, (m) => f(m)), ee(() => n.modelValue, (m) => f(m)), ee(h, async () => {
      var m;
      await Qe(), (m = u.value) == null || m.scrollToActiveTab();
    }), ht(Up, {
      props: n,
      currentName: h,
      registerPane: a,
      unregisterPane: c
    }), i({
      currentName: h
    }), () => {
      const m = t["add-icon"] || t.addIcon, b = m && t.addIcon, y = n.editable || n.addable ? ne("span", {
        class: o.e("new-tab"),
        tabindex: "0",
        onClick: g,
        onKeydown: (x) => {
          x.code === jn.enter && g();
        }
      }, [m ? pe(t, b ? "addIcon" : "add-icon") : ne(Ue, {
        class: o.is("icon-plus")
      }, {
        default: () => [ne(c2, null, null)]
      })]) : null, v = ne("div", {
        class: [o.e("header"), o.is(n.tabPosition)]
      }, [y, ne(y7, {
        ref: u,
        currentName: h.value,
        editable: n.editable,
        type: n.type,
        panes: l.value,
        stretch: n.stretch,
        onTabClick: d,
        onTabRemove: p
      }, null)]), O = ne("div", {
        class: o.e("content")
      }, [pe(t, "default")]);
      return ne("div", {
        class: [o.b(), o.m(n.tabPosition), {
          [o.m("card")]: n.type === "card",
          [o.m("border-card")]: n.type === "border-card"
        }]
      }, [...n.tabPosition !== "bottom" ? [v, O] : [O, v]]);
    };
  }
}), S7 = Ae({
  label: {
    type: String,
    default: ""
  },
  name: {
    type: [String, Number]
  },
  closable: Boolean,
  disabled: Boolean,
  lazy: Boolean
}), C7 = ["id", "aria-hidden", "aria-labelledby"], JP = "ElTabPane", k7 = Z({
  name: JP
}), P7 = /* @__PURE__ */ Z({
  ...k7,
  props: S7,
  setup(n) {
    const e = n, t = qe(), i = Zo(), s = ye(Up);
    s || Yr(JP, "usage: <el-tabs><el-tab-pane /></el-tabs/>");
    const r = ve("tab-pane"), o = L(), l = _(() => e.closable || s.props.closable), a = c1(() => {
      var d;
      return s.currentName.value === ((d = e.name) != null ? d : o.value);
    }), c = L(a.value), u = _(() => {
      var d;
      return (d = e.name) != null ? d : o.value;
    }), h = c1(() => !e.lazy || c.value || a.value);
    ee(a, (d) => {
      d && (c.value = !0);
    });
    const f = Hn({
      uid: t.uid,
      slots: i,
      props: e,
      paneName: u,
      active: a,
      index: o,
      isClosable: l
    });
    return Be(() => {
      s.registerPane(f);
    }), _h(() => {
      s.unregisterPane(f.uid);
    }), (d, p) => w(h) ? tt((R(), F("div", {
      key: 0,
      id: `pane-${w(u)}`,
      class: B(w(r).b()),
      role: "tabpanel",
      "aria-hidden": !w(a),
      "aria-labelledby": `tab-${w(u)}`
    }, [
      pe(d.$slots, "default")
    ], 10, C7)), [
      [Ht, w(a)]
    ]) : te("v-if", !0);
  }
});
var eA = /* @__PURE__ */ Ce(P7, [["__file", "tab-pane.vue"]]);
const KZe = Bt(x7, {
  TabPane: eA
}), JZe = Ds(eA), tA = ["success", "info", "warning", "error"], ai = Gl({
  customClass: "",
  center: !1,
  dangerouslyUseHTMLString: !1,
  duration: 3e3,
  icon: void 0,
  id: "",
  message: "",
  onClose: void 0,
  showClose: !1,
  type: "info",
  offset: 16,
  zIndex: 0,
  grouping: !1,
  repeatNum: 1,
  appendTo: ot ? document.body : void 0
}), A7 = Ae({
  customClass: {
    type: String,
    default: ai.customClass
  },
  center: {
    type: Boolean,
    default: ai.center
  },
  dangerouslyUseHTMLString: {
    type: Boolean,
    default: ai.dangerouslyUseHTMLString
  },
  duration: {
    type: Number,
    default: ai.duration
  },
  icon: {
    type: xn,
    default: ai.icon
  },
  id: {
    type: String,
    default: ai.id
  },
  message: {
    type: be([
      String,
      Object,
      Function
    ]),
    default: ai.message
  },
  onClose: {
    type: be(Function),
    required: !1
  },
  showClose: {
    type: Boolean,
    default: ai.showClose
  },
  type: {
    type: String,
    values: tA,
    default: ai.type
  },
  offset: {
    type: Number,
    default: ai.offset
  },
  zIndex: {
    type: Number,
    default: ai.zIndex
  },
  grouping: {
    type: Boolean,
    default: ai.grouping
  },
  repeatNum: {
    type: Number,
    default: ai.repeatNum
  }
}), E7 = {
  destroy: () => !0
}, xs = uR([]), $7 = (n) => {
  const e = xs.findIndex((s) => s.id === n), t = xs[e];
  let i;
  return e > 0 && (i = xs[e - 1]), { current: t, prev: i };
}, T7 = (n) => {
  const { prev: e } = $7(n);
  return e ? e.vm.exposed.bottom.value : 0;
}, _7 = (n, e) => xs.findIndex((i) => i.id === n) > 0 ? 20 : e, M7 = ["id"], R7 = ["innerHTML"], D7 = Z({
  name: "ElMessage"
}), L7 = /* @__PURE__ */ Z({
  ...D7,
  props: A7,
  emits: E7,
  setup(n, { expose: e }) {
    const t = n, { Close: i } = w2, { ns: s, zIndex: r } = Lv("message"), { currentZIndex: o, nextZIndex: l } = r, a = L(), c = L(!1), u = L(0);
    let h;
    const f = _(() => t.type ? t.type === "error" ? "danger" : t.type : "info"), d = _(() => {
      const C = t.type;
      return { [s.bm("icon", C)]: C && Za[C] };
    }), p = _(() => t.icon || Za[t.type] || ""), g = _(() => T7(t.id)), m = _(() => _7(t.id, t.offset) + g.value), b = _(() => u.value + m.value), y = _(() => ({
      top: `${m.value}px`,
      zIndex: o.value
    }));
    function v() {
      t.duration !== 0 && ({ stop: h } = Qd(() => {
        x();
      }, t.duration));
    }
    function O() {
      h == null || h();
    }
    function x() {
      c.value = !1;
    }
    function S({ code: C }) {
      C === jn.esc && x();
    }
    return Be(() => {
      v(), l(), c.value = !0;
    }), ee(() => t.repeatNum, () => {
      O(), v();
    }), bi(document, "keydown", S), Jn(a, () => {
      u.value = a.value.getBoundingClientRect().height;
    }), e({
      visible: c,
      bottom: b,
      close: x
    }), (C, k) => (R(), oe(br, {
      name: w(s).b("fade"),
      onBeforeLeave: C.onClose,
      onAfterLeave: k[0] || (k[0] = (E) => C.$emit("destroy")),
      persisted: ""
    }, {
      default: se(() => [
        tt(W("div", {
          id: C.id,
          ref_key: "messageRef",
          ref: a,
          class: B([
            w(s).b(),
            { [w(s).m(C.type)]: C.type },
            w(s).is("center", C.center),
            w(s).is("closable", C.showClose),
            C.customClass
          ]),
          style: Ye(w(y)),
          role: "alert",
          onMouseenter: O,
          onMouseleave: v
        }, [
          C.repeatNum > 1 ? (R(), oe(w(I8), {
            key: 0,
            value: C.repeatNum,
            type: w(f),
            class: B(w(s).e("badge"))
          }, null, 8, ["value", "type", "class"])) : te("v-if", !0),
          w(p) ? (R(), oe(w(Ue), {
            key: 1,
            class: B([w(s).e("icon"), w(d)])
          }, {
            default: se(() => [
              (R(), oe(Ot(w(p))))
            ]),
            _: 1
          }, 8, ["class"])) : te("v-if", !0),
          pe(C.$slots, "default", {}, () => [
            C.dangerouslyUseHTMLString ? (R(), F(sn, { key: 1 }, [
              te(" Caution here, message could've been compromised, never use user's input as message "),
              W("p", {
                class: B(w(s).e("content")),
                innerHTML: C.message
              }, null, 10, R7)
            ], 2112)) : (R(), F("p", {
              key: 0,
              class: B(w(s).e("content"))
            }, Re(C.message), 3))
          ]),
          C.showClose ? (R(), oe(w(Ue), {
            key: 2,
            class: B(w(s).e("closeBtn")),
            onClick: ft(x, ["stop"])
          }, {
            default: se(() => [
              ne(w(i))
            ]),
            _: 1
          }, 8, ["class", "onClick"])) : te("v-if", !0)
        ], 46, M7), [
          [Ht, c.value]
        ])
      ]),
      _: 3
    }, 8, ["name", "onBeforeLeave"]));
  }
});
var N7 = /* @__PURE__ */ Ce(L7, [["__file", "message.vue"]]);
let I7 = 1;
const nA = (n) => {
  const e = !n || pt(n) || ur(n) || Mt(n) ? { message: n } : n, t = {
    ...ai,
    ...e
  };
  if (!t.appendTo)
    t.appendTo = document.body;
  else if (pt(t.appendTo)) {
    let i = document.querySelector(t.appendTo);
    As(i) || (rt("ElMessage", "the appendTo option is not an HTMLElement. Falling back to document.body."), i = document.body), t.appendTo = i;
  }
  return t;
}, Q7 = (n) => {
  const e = xs.indexOf(n);
  if (e === -1)
    return;
  xs.splice(e, 1);
  const { handler: t } = n;
  t.close();
}, B7 = ({ appendTo: n, ...e }, t) => {
  const i = `message_${I7++}`, s = e.onClose, r = document.createElement("div"), o = {
    ...e,
    id: i,
    onClose: () => {
      s == null || s(), Q7(u);
    },
    onDestroy: () => {
      Ao(null, r);
    }
  }, l = ne(N7, o, Mt(o.message) || ur(o.message) ? {
    default: Mt(o.message) ? o.message : () => o.message
  } : null);
  l.appContext = t || Ga._context, Ao(l, r), n.appendChild(r.firstElementChild);
  const a = l.component, u = {
    id: i,
    vnode: l,
    vm: a,
    handler: {
      close: () => {
        a.exposed.visible.value = !1;
      }
    },
    props: l.component.props
  };
  return u;
}, Ga = (n = {}, e) => {
  if (!ot)
    return { close: () => {
    } };
  if (ze(b0.max) && xs.length >= b0.max)
    return { close: () => {
    } };
  const t = nA(n);
  if (t.grouping && xs.length) {
    const s = xs.find(({ vnode: r }) => {
      var o;
      return ((o = r.props) == null ? void 0 : o.message) === t.message;
    });
    if (s)
      return s.props.repeatNum += 1, s.props.type = t.type, s.handler;
  }
  const i = B7(t, e);
  return xs.push(i), i.handler;
};
tA.forEach((n) => {
  Ga[n] = (e = {}, t) => {
    const i = nA(e);
    return Ga({ ...i, type: n }, t);
  };
});
function j7(n) {
  for (const e of xs)
    (!n || n === e.props.type) && e.handler.close();
}
Ga.closeAll = j7;
Ga._context = null;
const eFe = S2(Ga, "$message"), z7 = Z({
  name: "ElMessageBox",
  directives: {
    TrapFocus: fZ
  },
  components: {
    ElButton: w0,
    ElFocusTrap: Hp,
    ElInput: Vh,
    ElOverlay: Fv,
    ElIcon: Ue,
    ...w2
  },
  inheritAttrs: !1,
  props: {
    buttonSize: {
      type: String,
      validator: C2
    },
    modal: {
      type: Boolean,
      default: !0
    },
    lockScroll: {
      type: Boolean,
      default: !0
    },
    showClose: {
      type: Boolean,
      default: !0
    },
    closeOnClickModal: {
      type: Boolean,
      default: !0
    },
    closeOnPressEscape: {
      type: Boolean,
      default: !0
    },
    closeOnHashChange: {
      type: Boolean,
      default: !0
    },
    center: Boolean,
    draggable: Boolean,
    overflow: Boolean,
    roundButton: {
      default: !1,
      type: Boolean
    },
    container: {
      type: String,
      default: "body"
    },
    boxType: {
      type: String,
      default: ""
    }
  },
  emits: ["vanish", "action"],
  setup(n, { emit: e }) {
    const {
      locale: t,
      zIndex: i,
      ns: s,
      size: r
    } = Lv("message-box", _(() => n.buttonSize)), { t: o } = t, { nextZIndex: l } = i, a = L(!1), c = Hn({
      autofocus: !0,
      beforeClose: null,
      callback: null,
      cancelButtonText: "",
      cancelButtonClass: "",
      confirmButtonText: "",
      confirmButtonClass: "",
      customClass: "",
      customStyle: {},
      dangerouslyUseHTMLString: !1,
      distinguishCancelAndClose: !1,
      icon: "",
      inputPattern: null,
      inputPlaceholder: "",
      inputType: "text",
      inputValue: null,
      inputValidator: null,
      inputErrorMessage: "",
      message: null,
      modalFade: !0,
      modalClass: "",
      showCancelButton: !1,
      showConfirmButton: !0,
      type: "",
      title: void 0,
      showInput: !1,
      action: "",
      confirmButtonLoading: !1,
      cancelButtonLoading: !1,
      confirmButtonDisabled: !1,
      editorErrorMessage: "",
      validateError: !1,
      zIndex: l()
    }), u = _(() => {
      const A = c.type;
      return { [s.bm("icon", A)]: A && Za[A] };
    }), h = pr(), f = pr(), d = _(() => c.icon || Za[c.type] || ""), p = _(() => !!c.message), g = L(), m = L(), b = L(), y = L(), v = L(), O = _(() => c.confirmButtonClass);
    ee(() => c.inputValue, async (A) => {
      await Qe(), n.boxType === "prompt" && A !== null && M();
    }, { immediate: !0 }), ee(() => a.value, (A) => {
      var Q, X;
      A && (n.boxType !== "prompt" && (c.autofocus ? b.value = (X = (Q = v.value) == null ? void 0 : Q.$el) != null ? X : g.value : b.value = g.value), c.zIndex = l()), n.boxType === "prompt" && (A ? Qe().then(() => {
        var z;
        y.value && y.value.$el && (c.autofocus ? b.value = (z = j()) != null ? z : g.value : b.value = g.value);
      }) : (c.editorErrorMessage = "", c.validateError = !1));
    });
    const x = _(() => n.draggable), S = _(() => n.overflow);
    P2(g, m, x, S), Be(async () => {
      await Qe(), n.closeOnHashChange && window.addEventListener("hashchange", C);
    }), Zn(() => {
      n.closeOnHashChange && window.removeEventListener("hashchange", C);
    });
    function C() {
      a.value && (a.value = !1, Qe(() => {
        c.action && e("action", c.action);
      }));
    }
    const k = () => {
      n.closeOnClickModal && T(c.distinguishCancelAndClose ? "close" : "cancel");
    }, E = _v(k), $ = (A) => {
      if (c.inputType !== "textarea")
        return A.preventDefault(), T("confirm");
    }, T = (A) => {
      var Q;
      n.boxType === "prompt" && A === "confirm" && !M() || (c.action = A, c.beforeClose ? (Q = c.beforeClose) == null || Q.call(c, A, c, C) : C());
    }, M = () => {
      if (n.boxType === "prompt") {
        const A = c.inputPattern;
        if (A && !A.test(c.inputValue || ""))
          return c.editorErrorMessage = c.inputErrorMessage || o("el.messagebox.error"), c.validateError = !0, !1;
        const Q = c.inputValidator;
        if (typeof Q == "function") {
          const X = Q(c.inputValue);
          if (X === !1)
            return c.editorErrorMessage = c.inputErrorMessage || o("el.messagebox.error"), c.validateError = !0, !1;
          if (typeof X == "string")
            return c.editorErrorMessage = X, c.validateError = !0, !1;
        }
      }
      return c.editorErrorMessage = "", c.validateError = !1, !0;
    }, j = () => {
      const A = y.value.$refs;
      return A.input || A.textarea;
    }, D = () => {
      T("close");
    }, P = () => {
      n.closeOnPressEscape && D();
    };
    return n.lockScroll && R2(a), {
      ...zo(c),
      ns: s,
      overlayEvent: E,
      visible: a,
      hasMessage: p,
      typeClass: u,
      contentId: h,
      inputId: f,
      btnSize: r,
      iconComponent: d,
      confirmButtonClasses: O,
      rootRef: g,
      focusStartRef: b,
      headerRef: m,
      inputRef: y,
      confirmRef: v,
      doClose: C,
      handleClose: D,
      onCloseRequested: P,
      handleWrapperClick: k,
      handleInputEnter: $,
      handleAction: T,
      t: o
    };
  }
}), Z7 = ["aria-label", "aria-describedby"], F7 = ["aria-label"], V7 = ["id"];
function q7(n, e, t, i, s, r) {
  const o = $t("el-icon"), l = $t("close"), a = $t("el-input"), c = $t("el-button"), u = $t("el-focus-trap"), h = $t("el-overlay");
  return R(), oe(br, {
    name: "fade-in-linear",
    onAfterLeave: e[11] || (e[11] = (f) => n.$emit("vanish")),
    persisted: ""
  }, {
    default: se(() => [
      tt(ne(h, {
        "z-index": n.zIndex,
        "overlay-class": [n.ns.is("message-box"), n.modalClass],
        mask: n.modal
      }, {
        default: se(() => [
          W("div", {
            role: "dialog",
            "aria-label": n.title,
            "aria-modal": "true",
            "aria-describedby": n.showInput ? void 0 : n.contentId,
            class: B(`${n.ns.namespace.value}-overlay-message-box`),
            onClick: e[8] || (e[8] = (...f) => n.overlayEvent.onClick && n.overlayEvent.onClick(...f)),
            onMousedown: e[9] || (e[9] = (...f) => n.overlayEvent.onMousedown && n.overlayEvent.onMousedown(...f)),
            onMouseup: e[10] || (e[10] = (...f) => n.overlayEvent.onMouseup && n.overlayEvent.onMouseup(...f))
          }, [
            ne(u, {
              loop: "",
              trapped: n.visible,
              "focus-trap-el": n.rootRef,
              "focus-start-el": n.focusStartRef,
              onReleaseRequested: n.onCloseRequested
            }, {
              default: se(() => [
                W("div", {
                  ref: "rootRef",
                  class: B([
                    n.ns.b(),
                    n.customClass,
                    n.ns.is("draggable", n.draggable),
                    { [n.ns.m("center")]: n.center }
                  ]),
                  style: Ye(n.customStyle),
                  tabindex: "-1",
                  onClick: e[7] || (e[7] = ft(() => {
                  }, ["stop"]))
                }, [
                  n.title !== null && n.title !== void 0 ? (R(), F("div", {
                    key: 0,
                    ref: "headerRef",
                    class: B([n.ns.e("header"), { "show-close": n.showClose }])
                  }, [
                    W("div", {
                      class: B(n.ns.e("title"))
                    }, [
                      n.iconComponent && n.center ? (R(), oe(o, {
                        key: 0,
                        class: B([n.ns.e("status"), n.typeClass])
                      }, {
                        default: se(() => [
                          (R(), oe(Ot(n.iconComponent)))
                        ]),
                        _: 1
                      }, 8, ["class"])) : te("v-if", !0),
                      W("span", null, Re(n.title), 1)
                    ], 2),
                    n.showClose ? (R(), F("button", {
                      key: 0,
                      type: "button",
                      class: B(n.ns.e("headerbtn")),
                      "aria-label": n.t("el.messagebox.close"),
                      onClick: e[0] || (e[0] = (f) => n.handleAction(n.distinguishCancelAndClose ? "close" : "cancel")),
                      onKeydown: e[1] || (e[1] = On(ft((f) => n.handleAction(n.distinguishCancelAndClose ? "close" : "cancel"), ["prevent"]), ["enter"]))
                    }, [
                      ne(o, {
                        class: B(n.ns.e("close"))
                      }, {
                        default: se(() => [
                          ne(l)
                        ]),
                        _: 1
                      }, 8, ["class"])
                    ], 42, F7)) : te("v-if", !0)
                  ], 2)) : te("v-if", !0),
                  W("div", {
                    id: n.contentId,
                    class: B(n.ns.e("content"))
                  }, [
                    W("div", {
                      class: B(n.ns.e("container"))
                    }, [
                      n.iconComponent && !n.center && n.hasMessage ? (R(), oe(o, {
                        key: 0,
                        class: B([n.ns.e("status"), n.typeClass])
                      }, {
                        default: se(() => [
                          (R(), oe(Ot(n.iconComponent)))
                        ]),
                        _: 1
                      }, 8, ["class"])) : te("v-if", !0),
                      n.hasMessage ? (R(), F("div", {
                        key: 1,
                        class: B(n.ns.e("message"))
                      }, [
                        pe(n.$slots, "default", {}, () => [
                          n.dangerouslyUseHTMLString ? (R(), oe(Ot(n.showInput ? "label" : "p"), {
                            key: 1,
                            for: n.showInput ? n.inputId : void 0,
                            innerHTML: n.message
                          }, null, 8, ["for", "innerHTML"])) : (R(), oe(Ot(n.showInput ? "label" : "p"), {
                            key: 0,
                            for: n.showInput ? n.inputId : void 0
                          }, {
                            default: se(() => [
                              mi(Re(n.dangerouslyUseHTMLString ? "" : n.message), 1)
                            ]),
                            _: 1
                          }, 8, ["for"]))
                        ])
                      ], 2)) : te("v-if", !0)
                    ], 2),
                    tt(W("div", {
                      class: B(n.ns.e("input"))
                    }, [
                      ne(a, {
                        id: n.inputId,
                        ref: "inputRef",
                        modelValue: n.inputValue,
                        "onUpdate:modelValue": e[2] || (e[2] = (f) => n.inputValue = f),
                        type: n.inputType,
                        placeholder: n.inputPlaceholder,
                        "aria-invalid": n.validateError,
                        class: B({ invalid: n.validateError }),
                        onKeydown: On(n.handleInputEnter, ["enter"])
                      }, null, 8, ["id", "modelValue", "type", "placeholder", "aria-invalid", "class", "onKeydown"]),
                      W("div", {
                        class: B(n.ns.e("errormsg")),
                        style: Ye({
                          visibility: n.editorErrorMessage ? "visible" : "hidden"
                        })
                      }, Re(n.editorErrorMessage), 7)
                    ], 2), [
                      [Ht, n.showInput]
                    ])
                  ], 10, V7),
                  W("div", {
                    class: B(n.ns.e("btns"))
                  }, [
                    n.showCancelButton ? (R(), oe(c, {
                      key: 0,
                      loading: n.cancelButtonLoading,
                      class: B([n.cancelButtonClass]),
                      round: n.roundButton,
                      size: n.btnSize,
                      onClick: e[3] || (e[3] = (f) => n.handleAction("cancel")),
                      onKeydown: e[4] || (e[4] = On(ft((f) => n.handleAction("cancel"), ["prevent"]), ["enter"]))
                    }, {
                      default: se(() => [
                        mi(Re(n.cancelButtonText || n.t("el.messagebox.cancel")), 1)
                      ]),
                      _: 1
                    }, 8, ["loading", "class", "round", "size"])) : te("v-if", !0),
                    tt(ne(c, {
                      ref: "confirmRef",
                      type: "primary",
                      loading: n.confirmButtonLoading,
                      class: B([n.confirmButtonClasses]),
                      round: n.roundButton,
                      disabled: n.confirmButtonDisabled,
                      size: n.btnSize,
                      onClick: e[5] || (e[5] = (f) => n.handleAction("confirm")),
                      onKeydown: e[6] || (e[6] = On(ft((f) => n.handleAction("confirm"), ["prevent"]), ["enter"]))
                    }, {
                      default: se(() => [
                        mi(Re(n.confirmButtonText || n.t("el.messagebox.confirm")), 1)
                      ]),
                      _: 1
                    }, 8, ["loading", "class", "round", "disabled", "size"]), [
                      [Ht, n.showConfirmButton]
                    ])
                  ], 2)
                ], 6)
              ]),
              _: 3
            }, 8, ["trapped", "focus-trap-el", "focus-start-el", "onReleaseRequested"])
          ], 42, Z7)
        ]),
        _: 3
      }, 8, ["z-index", "overlay-class", "mask"]), [
        [Ht, n.visible]
      ])
    ]),
    _: 3
  });
}
var W7 = /* @__PURE__ */ Ce(z7, [["render", q7], ["__file", "index.vue"]]);
const Hu = /* @__PURE__ */ new Map(), X7 = (n) => {
  let e = document.body;
  return n.appendTo && (pt(n.appendTo) && (e = document.querySelector(n.appendTo)), As(n.appendTo) && (e = n.appendTo), As(e) || (rt("ElMessageBox", "the appendTo option is not an HTMLElement. Falling back to document.body."), e = document.body)), e;
}, Y7 = (n, e, t = null) => {
  const i = ne(W7, n, Mt(n.message) || ur(n.message) ? {
    default: Mt(n.message) ? n.message : () => n.message
  } : null);
  return i.appContext = t, Ao(i, e), X7(n).appendChild(e.firstElementChild), i.component;
}, H7 = () => document.createElement("div"), G7 = (n, e) => {
  const t = H7();
  n.onVanish = () => {
    Ao(null, t), Hu.delete(s);
  }, n.onAction = (r) => {
    const o = Hu.get(s);
    let l;
    n.showInput ? l = { value: s.inputValue, action: r } : l = r, n.callback ? n.callback(l, i.proxy) : r === "cancel" || r === "close" ? n.distinguishCancelAndClose && r !== "cancel" ? o.reject("close") : o.reject("cancel") : o.resolve(l);
  };
  const i = Y7(n, t, e), s = i.proxy;
  for (const r in n)
    Ps(n, r) && !Ps(s.$props, r) && (s[r] = n[r]);
  return s.visible = !0, s;
};
function _c(n, e = null) {
  if (!ot)
    return Promise.reject();
  let t;
  return pt(n) || ur(n) ? n = {
    message: n
  } : t = n.callback, new Promise((i, s) => {
    const r = G7(n, e ?? _c._context);
    Hu.set(r, {
      options: n,
      callback: t,
      resolve: i,
      reject: s
    });
  });
}
const U7 = ["alert", "confirm", "prompt"], K7 = {
  alert: { closeOnPressEscape: !1, closeOnClickModal: !1 },
  confirm: { showCancelButton: !0 },
  prompt: { showCancelButton: !0, showInput: !0 }
};
U7.forEach((n) => {
  _c[n] = J7(n);
});
function J7(n) {
  return (e, t, i, s) => {
    let r = "";
    return Qn(t) ? (i = t, r = "") : Li(t) ? r = "" : r = t, _c(Object.assign({
      title: r,
      message: e,
      type: "",
      ...K7[n]
    }, i, {
      boxType: n
    }), s);
  };
}
_c.close = () => {
  Hu.forEach((n, e) => {
    e.doClose();
  }), Hu.clear();
};
_c._context = null;
const io = _c;
io.install = (n) => {
  io._context = n._context, n.config.globalProperties.$msgbox = io, n.config.globalProperties.$messageBox = io, n.config.globalProperties.$alert = io.alert, n.config.globalProperties.$confirm = io.confirm, n.config.globalProperties.$prompt = io.prompt;
};
const tFe = io, iA = [
  "success",
  "info",
  "warning",
  "error"
], e9 = Ae({
  customClass: {
    type: String,
    default: ""
  },
  dangerouslyUseHTMLString: {
    type: Boolean,
    default: !1
  },
  duration: {
    type: Number,
    default: 4500
  },
  icon: {
    type: xn
  },
  id: {
    type: String,
    default: ""
  },
  message: {
    type: be([String, Object]),
    default: ""
  },
  offset: {
    type: Number,
    default: 0
  },
  onClick: {
    type: be(Function),
    default: () => {
    }
  },
  onClose: {
    type: be(Function),
    required: !0
  },
  position: {
    type: String,
    values: ["top-right", "top-left", "bottom-right", "bottom-left"],
    default: "top-right"
  },
  showClose: {
    type: Boolean,
    default: !0
  },
  title: {
    type: String,
    default: ""
  },
  type: {
    type: String,
    values: [...iA, ""],
    default: ""
  },
  zIndex: Number
}), t9 = {
  destroy: () => !0
}, n9 = ["id"], i9 = ["textContent"], s9 = { key: 0 }, r9 = ["innerHTML"], o9 = Z({
  name: "ElNotification"
}), l9 = /* @__PURE__ */ Z({
  ...o9,
  props: e9,
  emits: t9,
  setup(n, { expose: e }) {
    const t = n, { ns: i, zIndex: s } = Lv("notification"), { nextZIndex: r, currentZIndex: o } = s, { Close: l } = O2, a = L(!1);
    let c;
    const u = _(() => {
      const v = t.type;
      return v && Za[t.type] ? i.m(v) : "";
    }), h = _(() => t.type && Za[t.type] || t.icon), f = _(() => t.position.endsWith("right") ? "right" : "left"), d = _(() => t.position.startsWith("top") ? "top" : "bottom"), p = _(() => {
      var v;
      return {
        [d.value]: `${t.offset}px`,
        zIndex: (v = t.zIndex) != null ? v : o.value
      };
    });
    function g() {
      t.duration > 0 && ({ stop: c } = Qd(() => {
        a.value && b();
      }, t.duration));
    }
    function m() {
      c == null || c();
    }
    function b() {
      a.value = !1;
    }
    function y({ code: v }) {
      v === jn.delete || v === jn.backspace ? m() : v === jn.esc ? a.value && b() : g();
    }
    return Be(() => {
      g(), r(), a.value = !0;
    }), bi(document, "keydown", y), e({
      visible: a,
      close: b
    }), (v, O) => (R(), oe(br, {
      name: w(i).b("fade"),
      onBeforeLeave: v.onClose,
      onAfterLeave: O[1] || (O[1] = (x) => v.$emit("destroy")),
      persisted: ""
    }, {
      default: se(() => [
        tt(W("div", {
          id: v.id,
          class: B([w(i).b(), v.customClass, w(f)]),
          style: Ye(w(p)),
          role: "alert",
          onMouseenter: m,
          onMouseleave: g,
          onClick: O[0] || (O[0] = (...x) => v.onClick && v.onClick(...x))
        }, [
          w(h) ? (R(), oe(w(Ue), {
            key: 0,
            class: B([w(i).e("icon"), w(u)])
          }, {
            default: se(() => [
              (R(), oe(Ot(w(h))))
            ]),
            _: 1
          }, 8, ["class"])) : te("v-if", !0),
          W("div", {
            class: B(w(i).e("group"))
          }, [
            W("h2", {
              class: B(w(i).e("title")),
              textContent: Re(v.title)
            }, null, 10, i9),
            tt(W("div", {
              class: B(w(i).e("content")),
              style: Ye(v.title ? void 0 : { margin: 0 })
            }, [
              pe(v.$slots, "default", {}, () => [
                v.dangerouslyUseHTMLString ? (R(), F(sn, { key: 1 }, [
                  te(" Caution here, message could've been compromised, never use user's input as message "),
                  W("p", { innerHTML: v.message }, null, 8, r9)
                ], 2112)) : (R(), F("p", s9, Re(v.message), 1))
              ])
            ], 6), [
              [Ht, v.message]
            ]),
            v.showClose ? (R(), oe(w(Ue), {
              key: 0,
              class: B(w(i).e("closeBtn")),
              onClick: ft(b, ["stop"])
            }, {
              default: se(() => [
                ne(w(l))
              ]),
              _: 1
            }, 8, ["class", "onClick"])) : te("v-if", !0)
          ], 2)
        ], 46, n9), [
          [Ht, a.value]
        ])
      ]),
      _: 3
    }, 8, ["name", "onBeforeLeave"]));
  }
});
var a9 = /* @__PURE__ */ Ce(l9, [["__file", "notification.vue"]]);
const zd = {
  "top-left": [],
  "top-right": [],
  "bottom-left": [],
  "bottom-right": []
}, R0 = 16;
let c9 = 1;
const Ua = function(n = {}, e = null) {
  if (!ot)
    return { close: () => {
    } };
  (typeof n == "string" || ur(n)) && (n = { message: n });
  const t = n.position || "top-right";
  let i = n.offset || 0;
  zd[t].forEach(({ vm: u }) => {
    var h;
    i += (((h = u.el) == null ? void 0 : h.offsetHeight) || 0) + R0;
  }), i += R0;
  const s = `notification_${c9++}`, r = n.onClose, o = {
    ...n,
    offset: i,
    id: s,
    onClose: () => {
      u9(s, t, r);
    }
  };
  let l = document.body;
  As(n.appendTo) ? l = n.appendTo : pt(n.appendTo) && (l = document.querySelector(n.appendTo)), As(l) || (rt("ElNotification", "the appendTo option is not an HTMLElement. Falling back to document.body."), l = document.body);
  const a = document.createElement("div"), c = ne(a9, o, ur(o.message) ? {
    default: () => o.message
  } : null);
  return c.appContext = e ?? Ua._context, c.props.onDestroy = () => {
    Ao(null, a);
  }, Ao(c, a), zd[t].push({ vm: c }), l.appendChild(a.firstElementChild), {
    close: () => {
      c.component.exposed.visible.value = !1;
    }
  };
};
iA.forEach((n) => {
  Ua[n] = (e = {}) => ((typeof e == "string" || ur(e)) && (e = {
    message: e
  }), Ua({
    ...e,
    type: n
  }));
});
function u9(n, e, t) {
  const i = zd[e], s = i.findIndex(({ vm: c }) => {
    var u;
    return ((u = c.component) == null ? void 0 : u.props.id) === n;
  });
  if (s === -1)
    return;
  const { vm: r } = i[s];
  if (!r)
    return;
  t == null || t(r);
  const o = r.el.offsetHeight, l = e.split("-")[0];
  i.splice(s, 1);
  const a = i.length;
  if (!(a < 1))
    for (let c = s; c < a; c++) {
      const { el: u, component: h } = i[c].vm, f = Number.parseInt(u.style[l], 10) - o - R0;
      h.props.offset = f;
    }
}
function h9() {
  for (const n of Object.values(zd))
    n.forEach(({ vm: e }) => {
      e.component.exposed.visible.value = !1;
    });
}
Ua.closeAll = h9;
Ua._context = null;
const nFe = S2(Ua, "$notify");
function sA(n) {
  return BC() ? (sv(n), !0) : !1;
}
function f9(n, e) {
  if (typeof Symbol < "u") {
    const t = { ...n };
    return Object.defineProperty(t, Symbol.iterator, {
      enumerable: !1,
      value() {
        let i = 0;
        return {
          next: () => ({
            value: e[i++],
            done: i > e.length
          })
        };
      }
    }), t;
  } else
    return Object.assign([...e], n);
}
function ws(n) {
  return typeof n == "function" ? n() : w(n);
}
const d9 = typeof window < "u" && typeof document < "u";
typeof WorkerGlobalScope < "u" && globalThis instanceof WorkerGlobalScope;
const p9 = Object.prototype.toString, g9 = (n) => p9.call(n) === "[object Object]", Nl = () => {
};
function Hv(n, e) {
  function t(...i) {
    return new Promise((s, r) => {
      Promise.resolve(n(() => e.apply(this, i), { fn: e, thisArg: this, args: i })).then(s).catch(r);
    });
  }
  return t;
}
const m9 = (n) => n();
function rA(n, e = {}) {
  let t, i, s = Nl;
  const r = (l) => {
    clearTimeout(l), s(), s = Nl;
  };
  return (l) => {
    const a = ws(n), c = ws(e.maxWait);
    return t && r(t), a <= 0 || c !== void 0 && c <= 0 ? (i && (r(i), i = null), Promise.resolve(l())) : new Promise((u, h) => {
      s = e.rejectOnCancel ? h : u, c && !i && (i = setTimeout(() => {
        t && r(t), i = null, u(l());
      }, c)), t = setTimeout(() => {
        i && r(i), i = null, u(l());
      }, a);
    });
  };
}
function b9(...n) {
  let e = 0, t, i = !0, s = Nl, r, o, l, a, c;
  !hr(n[0]) && typeof n[0] == "object" ? { delay: o, trailing: l = !0, leading: a = !0, rejectOnCancel: c = !1 } = n[0] : [o, l = !0, a = !0, c = !1] = n;
  const u = () => {
    t && (clearTimeout(t), t = void 0, s(), s = Nl);
  };
  return (f) => {
    const d = ws(o), p = Date.now() - e, g = () => r = f();
    return u(), d <= 0 ? (e = Date.now(), g()) : (p > d && (a || !i) ? (e = Date.now(), g()) : l && (r = new Promise((m, b) => {
      s = c ? b : m, t = setTimeout(() => {
        e = Date.now(), i = !0, m(g()), u();
      }, Math.max(0, d - p));
    })), !a && !t && (t = setTimeout(() => i = !0, d)), i = !1, r);
  };
}
function v9(n) {
  const e = /* @__PURE__ */ Object.create(null);
  return (t) => e[t] || (e[t] = n(t));
}
const y9 = /-(\w)/g, O9 = v9((n) => n.replace(y9, (e, t) => t ? t.toUpperCase() : ""));
function w9(n) {
  return n || qe();
}
function oA(n, e = 200, t = {}) {
  return Hv(
    rA(e, t),
    n
  );
}
function iFe(n, e = 200, t = {}) {
  const i = L(n.value), s = oA(() => {
    i.value = n.value;
  }, e, t);
  return ee(n, () => s()), i;
}
function x9(n, e = 200, t = !1, i = !0, s = !1) {
  return Hv(
    b9(e, t, i, s),
    n
  );
}
function S9(n, e, t = {}) {
  const {
    eventFilter: i = m9,
    ...s
  } = t;
  return ee(
    n,
    Hv(
      i,
      e
    ),
    s
  );
}
function lA(n, e = !0, t) {
  w9() ? Be(n, t) : e ? n() : Qe(n);
}
function sFe(n, e, t = {}) {
  const {
    debounce: i = 0,
    maxWait: s = void 0,
    ...r
  } = t;
  return S9(
    n,
    e,
    {
      ...r,
      eventFilter: rA(i, { maxWait: s })
    }
  );
}
function rFe(n = {}) {
  const {
    inheritAttrs: e = !0
  } = n, t = gi(), i = /* @__PURE__ */ Z({
    setup(r, { slots: o }) {
      return () => {
        t.value = o.default;
      };
    }
  }), s = /* @__PURE__ */ Z({
    inheritAttrs: e,
    setup(r, { attrs: o, slots: l }) {
      return () => {
        var a;
        if (!t.value && process.env.NODE_ENV !== "production")
          throw new Error("[VueUse] Failed to find the definition of reusable template");
        const c = (a = t.value) == null ? void 0 : a.call(t, { ...C9(o), $slots: l });
        return e && (c == null ? void 0 : c.length) === 1 ? c[0] : c;
      };
    }
  });
  return f9(
    { define: i, reuse: s },
    [i, s]
  );
}
function C9(n) {
  const e = {};
  for (const t in n)
    e[O9(t)] = n[t];
  return e;
}
function vo(n) {
  var e;
  const t = ws(n);
  return (e = t == null ? void 0 : t.$el) != null ? e : t;
}
const Kp = d9 ? window : void 0;
function vw(...n) {
  let e, t, i, s;
  if (typeof n[0] == "string" || Array.isArray(n[0]) ? ([t, i, s] = n, e = Kp) : [e, t, i, s] = n, !e)
    return Nl;
  Array.isArray(t) || (t = [t]), Array.isArray(i) || (i = [i]);
  const r = [], o = () => {
    r.forEach((u) => u()), r.length = 0;
  }, l = (u, h, f, d) => (u.addEventListener(h, f, d), () => u.removeEventListener(h, f, d)), a = ee(
    () => [vo(e), ws(s)],
    ([u, h]) => {
      if (o(), !u)
        return;
      const f = g9(h) ? { ...h } : h;
      r.push(
        ...t.flatMap((d) => i.map((p) => l(u, d, p, f)))
      );
    },
    { immediate: !0, flush: "post" }
  ), c = () => {
    a(), o();
  };
  return sA(c), c;
}
function k9() {
  const n = L(!1), e = qe();
  return e && Be(() => {
    n.value = !0;
  }, e), n;
}
function P9(n) {
  const e = k9();
  return _(() => (e.value, !!n()));
}
function A9(n, e, t = {}) {
  const { window: i = Kp, ...s } = t;
  let r;
  const o = P9(() => i && "ResizeObserver" in i), l = () => {
    r && (r.disconnect(), r = void 0);
  }, a = _(() => Array.isArray(n) ? n.map((h) => vo(h)) : [vo(n)]), c = ee(
    a,
    (h) => {
      if (l(), o.value && i) {
        r = new ResizeObserver(e);
        for (const f of h)
          f && r.observe(f, s);
      }
    },
    { immediate: !0, flush: "post" }
  ), u = () => {
    l(), c();
  };
  return sA(u), {
    isSupported: o,
    stop: u
  };
}
function oFe(n, e = { width: 0, height: 0 }, t = {}) {
  const { window: i = Kp, box: s = "content-box" } = t, r = _(() => {
    var h, f;
    return (f = (h = vo(n)) == null ? void 0 : h.namespaceURI) == null ? void 0 : f.includes("svg");
  }), o = L(e.width), l = L(e.height), { stop: a } = A9(
    n,
    ([h]) => {
      const f = s === "border-box" ? h.borderBoxSize : s === "content-box" ? h.contentBoxSize : h.devicePixelContentBoxSize;
      if (i && r.value) {
        const d = vo(n);
        if (d) {
          const p = i.getComputedStyle(d);
          o.value = Number.parseFloat(p.width), l.value = Number.parseFloat(p.height);
        }
      } else if (f) {
        const d = Array.isArray(f) ? f : [f];
        o.value = d.reduce((p, { inlineSize: g }) => p + g, 0), l.value = d.reduce((p, { blockSize: g }) => p + g, 0);
      } else
        o.value = h.contentRect.width, l.value = h.contentRect.height;
    },
    t
  );
  lA(() => {
    const h = vo(n);
    h && (o.value = "offsetWidth" in h ? h.offsetWidth : e.width, l.value = "offsetHeight" in h ? h.offsetHeight : e.height);
  });
  const c = ee(
    () => vo(n),
    (h) => {
      o.value = h ? e.width : 0, l.value = h ? e.height : 0;
    }
  );
  function u() {
    a(), c();
  }
  return {
    width: o,
    height: l,
    stop: u
  };
}
const yw = 1;
function lFe(n, e = {}) {
  const {
    throttle: t = 0,
    idle: i = 200,
    onStop: s = Nl,
    onScroll: r = Nl,
    offset: o = {
      left: 0,
      right: 0,
      top: 0,
      bottom: 0
    },
    eventListenerOptions: l = {
      capture: !1,
      passive: !0
    },
    behavior: a = "auto",
    window: c = Kp,
    onError: u = (C) => {
      console.error(C);
    }
  } = e, h = L(0), f = L(0), d = _({
    get() {
      return h.value;
    },
    set(C) {
      g(C, void 0);
    }
  }), p = _({
    get() {
      return f.value;
    },
    set(C) {
      g(void 0, C);
    }
  });
  function g(C, k) {
    var E, $, T;
    if (!c)
      return;
    const M = ws(n);
    M && ((T = M instanceof Document ? c.document.body : M) == null || T.scrollTo({
      top: (E = ws(k)) != null ? E : p.value,
      left: ($ = ws(C)) != null ? $ : d.value,
      behavior: ws(a)
    }));
  }
  const m = L(!1), b = Hn({
    left: !0,
    right: !1,
    top: !0,
    bottom: !1
  }), y = Hn({
    left: !1,
    right: !1,
    top: !1,
    bottom: !1
  }), v = (C) => {
    m.value && (m.value = !1, y.left = !1, y.right = !1, y.top = !1, y.bottom = !1, s(C));
  }, O = oA(v, t + i), x = (C) => {
    var k;
    if (!c)
      return;
    const E = ((k = C == null ? void 0 : C.document) == null ? void 0 : k.documentElement) || (C == null ? void 0 : C.documentElement) || vo(C), { display: $, flexDirection: T } = getComputedStyle(E), M = E.scrollLeft;
    y.left = M < h.value, y.right = M > h.value;
    const j = Math.abs(M) <= (o.left || 0), D = Math.abs(M) + E.clientWidth >= E.scrollWidth - (o.right || 0) - yw;
    $ === "flex" && T === "row-reverse" ? (b.left = D, b.right = j) : (b.left = j, b.right = D), h.value = M;
    let P = E.scrollTop;
    C === c.document && !P && (P = c.document.body.scrollTop), y.top = P < f.value, y.bottom = P > f.value;
    const A = Math.abs(P) <= (o.top || 0), Q = Math.abs(P) + E.clientHeight >= E.scrollHeight - (o.bottom || 0) - yw;
    $ === "flex" && T === "column-reverse" ? (b.top = Q, b.bottom = A) : (b.top = A, b.bottom = Q), f.value = P;
  }, S = (C) => {
    var k;
    if (!c)
      return;
    const E = (k = C.target.documentElement) != null ? k : C.target;
    x(E), m.value = !0, O(C), r(C);
  };
  return vw(
    n,
    "scroll",
    t ? x9(S, t, !0, !1) : S,
    l
  ), lA(() => {
    try {
      const C = ws(n);
      if (!C)
        return;
      x(C);
    } catch (C) {
      u(C);
    }
  }), vw(
    n,
    "scrollend",
    v,
    l
  ), {
    x: d,
    y: p,
    isScrolling: m,
    arrivedState: b,
    directions: y,
    measure() {
      const C = ws(n);
      c && C && x(C);
    }
  };
}
var aA = { exports: {} };
/*!
 * clipboard.js v2.0.11
 * https://clipboardjs.com/
 *
 * Licensed MIT © Zeno Rocha
 */
(function(n, e) {
  (function(i, s) {
    n.exports = s();
  })(aZ, function() {
    return (
      /******/
      function() {
        var t = {
          /***/
          686: (
            /***/
            function(r, o, l) {
              l.d(o, {
                default: function() {
                  return (
                    /* binding */
                    re
                  );
                }
              });
              var a = l(279), c = /* @__PURE__ */ l.n(a), u = l(370), h = /* @__PURE__ */ l.n(u), f = l(817), d = /* @__PURE__ */ l.n(f);
              function p(H) {
                try {
                  return document.execCommand(H);
                } catch {
                  return !1;
                }
              }
              var g = function(G) {
                var U = d()(G);
                return p("cut"), U;
              }, m = g;
              function b(H) {
                var G = document.documentElement.getAttribute("dir") === "rtl", U = document.createElement("textarea");
                U.style.fontSize = "12pt", U.style.border = "0", U.style.padding = "0", U.style.margin = "0", U.style.position = "absolute", U.style[G ? "right" : "left"] = "-9999px";
                var le = window.pageYOffset || document.documentElement.scrollTop;
                return U.style.top = "".concat(le, "px"), U.setAttribute("readonly", ""), U.value = H, U;
              }
              var y = function(G, U) {
                var le = b(G);
                U.container.appendChild(le);
                var ce = d()(le);
                return p("copy"), le.remove(), ce;
              }, v = function(G) {
                var U = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
                  container: document.body
                }, le = "";
                return typeof G == "string" ? le = y(G, U) : G instanceof HTMLInputElement && !["text", "search", "url", "tel", "password"].includes(G == null ? void 0 : G.type) ? le = y(G.value, U) : (le = d()(G), p("copy")), le;
              }, O = v;
              function x(H) {
                "@babel/helpers - typeof";
                return typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? x = function(U) {
                  return typeof U;
                } : x = function(U) {
                  return U && typeof Symbol == "function" && U.constructor === Symbol && U !== Symbol.prototype ? "symbol" : typeof U;
                }, x(H);
              }
              var S = function() {
                var G = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, U = G.action, le = U === void 0 ? "copy" : U, ce = G.container, K = G.target, he = G.text;
                if (le !== "copy" && le !== "cut")
                  throw new Error('Invalid "action" value, use either "copy" or "cut"');
                if (K !== void 0)
                  if (K && x(K) === "object" && K.nodeType === 1) {
                    if (le === "copy" && K.hasAttribute("disabled"))
                      throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');
                    if (le === "cut" && (K.hasAttribute("readonly") || K.hasAttribute("disabled")))
                      throw new Error(`Invalid "target" attribute. You can't cut text from elements with "readonly" or "disabled" attributes`);
                  } else
                    throw new Error('Invalid "target" value, use a valid Element');
                if (he)
                  return O(he, {
                    container: ce
                  });
                if (K)
                  return le === "cut" ? m(K) : O(K, {
                    container: ce
                  });
              }, C = S;
              function k(H) {
                "@babel/helpers - typeof";
                return typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? k = function(U) {
                  return typeof U;
                } : k = function(U) {
                  return U && typeof Symbol == "function" && U.constructor === Symbol && U !== Symbol.prototype ? "symbol" : typeof U;
                }, k(H);
              }
              function E(H, G) {
                if (!(H instanceof G))
                  throw new TypeError("Cannot call a class as a function");
              }
              function $(H, G) {
                for (var U = 0; U < G.length; U++) {
                  var le = G[U];
                  le.enumerable = le.enumerable || !1, le.configurable = !0, "value" in le && (le.writable = !0), Object.defineProperty(H, le.key, le);
                }
              }
              function T(H, G, U) {
                return G && $(H.prototype, G), U && $(H, U), H;
              }
              function M(H, G) {
                if (typeof G != "function" && G !== null)
                  throw new TypeError("Super expression must either be null or a function");
                H.prototype = Object.create(G && G.prototype, { constructor: { value: H, writable: !0, configurable: !0 } }), G && j(H, G);
              }
              function j(H, G) {
                return j = Object.setPrototypeOf || function(le, ce) {
                  return le.__proto__ = ce, le;
                }, j(H, G);
              }
              function D(H) {
                var G = Q();
                return function() {
                  var le = X(H), ce;
                  if (G) {
                    var K = X(this).constructor;
                    ce = Reflect.construct(le, arguments, K);
                  } else
                    ce = le.apply(this, arguments);
                  return P(this, ce);
                };
              }
              function P(H, G) {
                return G && (k(G) === "object" || typeof G == "function") ? G : A(H);
              }
              function A(H) {
                if (H === void 0)
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                return H;
              }
              function Q() {
                if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
                  return !1;
                if (typeof Proxy == "function")
                  return !0;
                try {
                  return Date.prototype.toString.call(Reflect.construct(Date, [], function() {
                  })), !0;
                } catch {
                  return !1;
                }
              }
              function X(H) {
                return X = Object.setPrototypeOf ? Object.getPrototypeOf : function(U) {
                  return U.__proto__ || Object.getPrototypeOf(U);
                }, X(H);
              }
              function z(H, G) {
                var U = "data-clipboard-".concat(H);
                if (G.hasAttribute(U))
                  return G.getAttribute(U);
              }
              var q = /* @__PURE__ */ function(H) {
                M(U, H);
                var G = D(U);
                function U(le, ce) {
                  var K;
                  return E(this, U), K = G.call(this), K.resolveOptions(ce), K.listenClick(le), K;
                }
                return T(U, [{
                  key: "resolveOptions",
                  value: function() {
                    var ce = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
                    this.action = typeof ce.action == "function" ? ce.action : this.defaultAction, this.target = typeof ce.target == "function" ? ce.target : this.defaultTarget, this.text = typeof ce.text == "function" ? ce.text : this.defaultText, this.container = k(ce.container) === "object" ? ce.container : document.body;
                  }
                  /**
                   * Adds a click event listener to the passed trigger.
                   * @param {String|HTMLElement|HTMLCollection|NodeList} trigger
                   */
                }, {
                  key: "listenClick",
                  value: function(ce) {
                    var K = this;
                    this.listener = h()(ce, "click", function(he) {
                      return K.onClick(he);
                    });
                  }
                  /**
                   * Defines a new `ClipboardAction` on each click event.
                   * @param {Event} e
                   */
                }, {
                  key: "onClick",
                  value: function(ce) {
                    var K = ce.delegateTarget || ce.currentTarget, he = this.action(K) || "copy", Ne = C({
                      action: he,
                      container: this.container,
                      target: this.target(K),
                      text: this.text(K)
                    });
                    this.emit(Ne ? "success" : "error", {
                      action: he,
                      text: Ne,
                      trigger: K,
                      clearSelection: function() {
                        K && K.focus(), window.getSelection().removeAllRanges();
                      }
                    });
                  }
                  /**
                   * Default `action` lookup function.
                   * @param {Element} trigger
                   */
                }, {
                  key: "defaultAction",
                  value: function(ce) {
                    return z("action", ce);
                  }
                  /**
                   * Default `target` lookup function.
                   * @param {Element} trigger
                   */
                }, {
                  key: "defaultTarget",
                  value: function(ce) {
                    var K = z("target", ce);
                    if (K)
                      return document.querySelector(K);
                  }
                  /**
                   * Allow fire programmatically a copy action
                   * @param {String|HTMLElement} target
                   * @param {Object} options
                   * @returns Text copied.
                   */
                }, {
                  key: "defaultText",
                  /**
                   * Default `text` lookup function.
                   * @param {Element} trigger
                   */
                  value: function(ce) {
                    return z("text", ce);
                  }
                  /**
                   * Destroy lifecycle.
                   */
                }, {
                  key: "destroy",
                  value: function() {
                    this.listener.destroy();
                  }
                }], [{
                  key: "copy",
                  value: function(ce) {
                    var K = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
                      container: document.body
                    };
                    return O(ce, K);
                  }
                  /**
                   * Allow fire programmatically a cut action
                   * @param {String|HTMLElement} target
                   * @returns Text cutted.
                   */
                }, {
                  key: "cut",
                  value: function(ce) {
                    return m(ce);
                  }
                  /**
                   * Returns the support of the given action, or all actions if no action is
                   * given.
                   * @param {String} [action]
                   */
                }, {
                  key: "isSupported",
                  value: function() {
                    var ce = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : ["copy", "cut"], K = typeof ce == "string" ? [ce] : ce, he = !!document.queryCommandSupported;
                    return K.forEach(function(Ne) {
                      he = he && !!document.queryCommandSupported(Ne);
                    }), he;
                  }
                }]), U;
              }(c()), re = q;
            }
          ),
          /***/
          828: (
            /***/
            function(r) {
              var o = 9;
              if (typeof Element < "u" && !Element.prototype.matches) {
                var l = Element.prototype;
                l.matches = l.matchesSelector || l.mozMatchesSelector || l.msMatchesSelector || l.oMatchesSelector || l.webkitMatchesSelector;
              }
              function a(c, u) {
                for (; c && c.nodeType !== o; ) {
                  if (typeof c.matches == "function" && c.matches(u))
                    return c;
                  c = c.parentNode;
                }
              }
              r.exports = a;
            }
          ),
          /***/
          438: (
            /***/
            function(r, o, l) {
              var a = l(828);
              function c(f, d, p, g, m) {
                var b = h.apply(this, arguments);
                return f.addEventListener(p, b, m), {
                  destroy: function() {
                    f.removeEventListener(p, b, m);
                  }
                };
              }
              function u(f, d, p, g, m) {
                return typeof f.addEventListener == "function" ? c.apply(null, arguments) : typeof p == "function" ? c.bind(null, document).apply(null, arguments) : (typeof f == "string" && (f = document.querySelectorAll(f)), Array.prototype.map.call(f, function(b) {
                  return c(b, d, p, g, m);
                }));
              }
              function h(f, d, p, g) {
                return function(m) {
                  m.delegateTarget = a(m.target, d), m.delegateTarget && g.call(f, m);
                };
              }
              r.exports = u;
            }
          ),
          /***/
          879: (
            /***/
            function(r, o) {
              o.node = function(l) {
                return l !== void 0 && l instanceof HTMLElement && l.nodeType === 1;
              }, o.nodeList = function(l) {
                var a = Object.prototype.toString.call(l);
                return l !== void 0 && (a === "[object NodeList]" || a === "[object HTMLCollection]") && "length" in l && (l.length === 0 || o.node(l[0]));
              }, o.string = function(l) {
                return typeof l == "string" || l instanceof String;
              }, o.fn = function(l) {
                var a = Object.prototype.toString.call(l);
                return a === "[object Function]";
              };
            }
          ),
          /***/
          370: (
            /***/
            function(r, o, l) {
              var a = l(879), c = l(438);
              function u(p, g, m) {
                if (!p && !g && !m)
                  throw new Error("Missing required arguments");
                if (!a.string(g))
                  throw new TypeError("Second argument must be a String");
                if (!a.fn(m))
                  throw new TypeError("Third argument must be a Function");
                if (a.node(p))
                  return h(p, g, m);
                if (a.nodeList(p))
                  return f(p, g, m);
                if (a.string(p))
                  return d(p, g, m);
                throw new TypeError("First argument must be a String, HTMLElement, HTMLCollection, or NodeList");
              }
              function h(p, g, m) {
                return p.addEventListener(g, m), {
                  destroy: function() {
                    p.removeEventListener(g, m);
                  }
                };
              }
              function f(p, g, m) {
                return Array.prototype.forEach.call(p, function(b) {
                  b.addEventListener(g, m);
                }), {
                  destroy: function() {
                    Array.prototype.forEach.call(p, function(b) {
                      b.removeEventListener(g, m);
                    });
                  }
                };
              }
              function d(p, g, m) {
                return c(document.body, p, g, m);
              }
              r.exports = u;
            }
          ),
          /***/
          817: (
            /***/
            function(r) {
              function o(l) {
                var a;
                if (l.nodeName === "SELECT")
                  l.focus(), a = l.value;
                else if (l.nodeName === "INPUT" || l.nodeName === "TEXTAREA") {
                  var c = l.hasAttribute("readonly");
                  c || l.setAttribute("readonly", ""), l.select(), l.setSelectionRange(0, l.value.length), c || l.removeAttribute("readonly"), a = l.value;
                } else {
                  l.hasAttribute("contenteditable") && l.focus();
                  var u = window.getSelection(), h = document.createRange();
                  h.selectNodeContents(l), u.removeAllRanges(), u.addRange(h), a = u.toString();
                }
                return a;
              }
              r.exports = o;
            }
          ),
          /***/
          279: (
            /***/
            function(r) {
              function o() {
              }
              o.prototype = {
                on: function(l, a, c) {
                  var u = this.e || (this.e = {});
                  return (u[l] || (u[l] = [])).push({
                    fn: a,
                    ctx: c
                  }), this;
                },
                once: function(l, a, c) {
                  var u = this;
                  function h() {
                    u.off(l, h), a.apply(c, arguments);
                  }
                  return h._ = a, this.on(l, h, c);
                },
                emit: function(l) {
                  var a = [].slice.call(arguments, 1), c = ((this.e || (this.e = {}))[l] || []).slice(), u = 0, h = c.length;
                  for (u; u < h; u++)
                    c[u].fn.apply(c[u].ctx, a);
                  return this;
                },
                off: function(l, a) {
                  var c = this.e || (this.e = {}), u = c[l], h = [];
                  if (u && a)
                    for (var f = 0, d = u.length; f < d; f++)
                      u[f].fn !== a && u[f].fn._ !== a && h.push(u[f]);
                  return h.length ? c[l] = h : delete c[l], this;
                }
              }, r.exports = o, r.exports.TinyEmitter = o;
            }
          )
          /******/
        }, i = {};
        function s(r) {
          if (i[r])
            return i[r].exports;
          var o = i[r] = {
            /******/
            // no module.id needed
            /******/
            // no module.loaded needed
            /******/
            exports: {}
            /******/
          };
          return t[r](o, o.exports, s), o.exports;
        }
        return function() {
          s.n = function(r) {
            var o = r && r.__esModule ? (
              /******/
              function() {
                return r.default;
              }
            ) : (
              /******/
              function() {
                return r;
              }
            );
            return s.d(o, { a: o }), o;
          };
        }(), function() {
          s.d = function(r, o) {
            for (var l in o)
              s.o(o, l) && !s.o(r, l) && Object.defineProperty(r, l, { enumerable: !0, get: o[l] });
          };
        }(), function() {
          s.o = function(r, o) {
            return Object.prototype.hasOwnProperty.call(r, o);
          };
        }(), s(686);
      }().default
    );
  });
})(aA);
var E9 = aA.exports;
const aFe = /* @__PURE__ */ Wh(E9), mt = "md-editor", $9 = "md-editor-v3", T9 = "https://at.alicdn.com/t/c/font_2605852_prouiefeic.js", _9 = "https://at.alicdn.com/t/c/font_2605852_prouiefeic.css", Jt = "https://cdnjs.cloudflare.com/ajax/libs", M9 = `${Jt}/highlight.js/11.8.0/highlight.min.js`, R9 = [
  "bold",
  "underline",
  "italic",
  "strikeThrough",
  "-",
  "title",
  "sub",
  "sup",
  "quote",
  "unorderedList",
  "orderedList",
  "task",
  "-",
  "codeRow",
  "code",
  "link",
  "image",
  "table",
  "mermaid",
  "katex",
  "-",
  "revoke",
  "next",
  "save",
  "=",
  "prettier",
  "pageFullscreen",
  "fullscreen",
  "preview",
  "htmlPreview",
  "catalog",
  "github"
], D9 = ["markdownTotal", "=", "scrollSwitch"], Ow = {
  "zh-CN": {
    toolbarTips: {
      bold: "加粗",
      underline: "下划线",
      italic: "斜体",
      strikeThrough: "删除线",
      title: "标题",
      sub: "下标",
      sup: "上标",
      quote: "引用",
      unorderedList: "无序列表",
      orderedList: "有序列表",
      task: "任务列表",
      codeRow: "行内代码",
      code: "块级代码",
      link: "链接",
      image: "图片",
      table: "表格",
      mermaid: "mermaid图",
      katex: "katex公式",
      revoke: "后退",
      next: "前进",
      save: "保存",
      prettier: "美化",
      pageFullscreen: "浏览器全屏",
      fullscreen: "屏幕全屏",
      preview: "预览",
      htmlPreview: "html代码预览",
      catalog: "目录",
      github: "源码地址"
    },
    titleItem: {
      h1: "一级标题",
      h2: "二级标题",
      h3: "三级标题",
      h4: "四级标题",
      h5: "五级标题",
      h6: "六级标题"
    },
    imgTitleItem: {
      link: "添加链接",
      upload: "上传图片",
      clip2upload: "裁剪上传"
    },
    linkModalTips: {
      linkTitle: "添加链接",
      imageTitle: "添加图片",
      descLabel: "链接描述：",
      descLabelPlaceHolder: "请输入描述...",
      urlLabel: "链接地址：",
      urlLabelPlaceHolder: "请输入链接...",
      buttonOK: "确定"
    },
    clipModalTips: {
      title: "裁剪图片上传",
      buttonUpload: "上传"
    },
    copyCode: {
      text: "复制代码",
      successTips: "已复制！",
      failTips: "复制失败！"
    },
    mermaid: {
      flow: "流程图",
      sequence: "时序图",
      gantt: "甘特图",
      class: "类图",
      state: "状态图",
      pie: "饼图",
      relationship: "关系图",
      journey: "旅程图"
    },
    katex: {
      inline: "行内公式",
      block: "块级公式"
    },
    footer: {
      markdownTotal: "字数",
      scrollAuto: "同步滚动"
    }
  },
  "en-US": {
    toolbarTips: {
      bold: "bold",
      underline: "underline",
      italic: "italic",
      strikeThrough: "strikeThrough",
      title: "title",
      sub: "subscript",
      sup: "superscript",
      quote: "quote",
      unorderedList: "unordered list",
      orderedList: "ordered list",
      task: "task list",
      codeRow: "inline code",
      code: "block-level code",
      link: "link",
      image: "image",
      table: "table",
      mermaid: "mermaid",
      katex: "formula",
      revoke: "revoke",
      next: "undo revoke",
      save: "save",
      prettier: "prettier",
      pageFullscreen: "fullscreen in page",
      fullscreen: "fullscreen",
      preview: "preview",
      htmlPreview: "html preview",
      catalog: "catalog",
      github: "source code"
    },
    titleItem: {
      h1: "Lv1 Heading",
      h2: "Lv2 Heading",
      h3: "Lv3 Heading",
      h4: "Lv4 Heading",
      h5: "Lv5 Heading",
      h6: "Lv6 Heading"
    },
    imgTitleItem: {
      link: "Add Img Link",
      upload: "Upload Img",
      clip2upload: "Clip Upload"
    },
    linkModalTips: {
      linkTitle: "Add Link",
      imageTitle: "Add Image",
      descLabel: "Desc:",
      descLabelPlaceHolder: "Enter a description...",
      urlLabel: "Link:",
      urlLabelPlaceHolder: "Enter a link...",
      buttonOK: "OK"
    },
    clipModalTips: {
      title: "Crop Image",
      buttonUpload: "Upload"
    },
    copyCode: {
      text: "Copy",
      successTips: "Copied!",
      failTips: "Copy failed!"
    },
    mermaid: {
      flow: "flow",
      sequence: "sequence",
      gantt: "gantt",
      class: "class",
      state: "state",
      pie: "pie",
      relationship: "relationship",
      journey: "journey"
    },
    katex: {
      inline: "inline",
      block: "block"
    },
    footer: {
      markdownTotal: "Character Count",
      scrollAuto: "Scroll Auto"
    }
  }
}, L9 = `${Jt}/mermaid/10.6.1/mermaid.esm.min.mjs`, ww = {
  js: `${Jt}/KaTeX/0.16.9/katex.min.js`,
  css: `${Jt}/KaTeX/0.16.9/katex.min.css`
}, xw = {
  a11y: {
    light: `${Jt}/highlight.js/11.8.0/styles/a11y-light.min.css`,
    dark: `${Jt}/highlight.js/11.8.0/styles/a11y-dark.min.css`
  },
  atom: {
    light: `${Jt}/highlight.js/11.8.0/styles/atom-one-light.min.css`,
    dark: `${Jt}/highlight.js/11.8.0/styles/atom-one-dark.min.css`
  },
  github: {
    light: `${Jt}/highlight.js/11.8.0/styles/github.min.css`,
    dark: `${Jt}/highlight.js/11.8.0/styles/github-dark.min.css`
  },
  gradient: {
    light: `${Jt}/highlight.js/11.8.0/styles/gradient-light.min.css`,
    dark: `${Jt}/highlight.js/11.8.0/styles/gradient-dark.min.css`
  },
  kimbie: {
    light: `${Jt}/highlight.js/11.8.0/styles/kimbie-light.min.css`,
    dark: `${Jt}/highlight.js/11.8.0/styles/kimbie-dark.min.css`
  },
  paraiso: {
    light: `${Jt}/highlight.js/11.8.0/styles/paraiso-light.min.css`,
    dark: `${Jt}/highlight.js/11.8.0/styles/paraiso-dark.min.css`
  },
  qtcreator: {
    light: `${Jt}/highlight.js/11.8.0/styles/qtcreator-light.min.css`,
    dark: `${Jt}/highlight.js/11.8.0/styles/qtcreator-dark.min.css`
  },
  stackoverflow: {
    light: `${Jt}/highlight.js/11.8.0/styles/stackoverflow-light.min.css`,
    dark: `${Jt}/highlight.js/11.8.0/styles/stackoverflow-dark.min.css`
  }
}, or = {
  editorExtensions: {},
  editorConfig: {},
  codeMirrorExtensions: (n, e) => e,
  markdownItConfig: () => {
  },
  markdownItPlugins: (n) => n,
  iconfontType: "svg",
  mermaidConfig: (n) => n
}, Gv = (n, e = 200) => {
  let t = 0;
  return (...i) => new Promise((s) => {
    t && (clearTimeout(t), s("cancel")), t = window.setTimeout(() => {
      n.apply(void 0, i), t = 0, s("done");
    }, e);
  });
}, D0 = () => `${Date.now().toString(36)}${Math.random().toString(36).substring(2)}`;
var N9 = Object.defineProperty, I9 = (n, e, t) => e in n ? N9(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t, Q9 = (n, e, t) => (I9(n, typeof e != "symbol" ? e + "" : e, t), t);
let B9 = class {
  constructor() {
    Q9(this, "pools", {});
  }
  // 移除事件监听
  remove(e, t, i) {
    const s = this.pools[e] && this.pools[e][t];
    s && (this.pools[e][t] = s.filter((r) => r !== i));
  }
  // 清空全部事件，由于单一实例，多次注册会被共享内容
  clear(e) {
    this.pools[e] = {};
  }
  // 注册事件监听
  on(e, t) {
    return this.pools[e] || (this.pools[e] = {}), this.pools[e][t.name] || (this.pools[e][t.name] = []), this.pools[e][t.name].push(t.callback), this.pools[e][t.name].includes(t.callback);
  }
  // 触发事件
  emit(e, t, ...i) {
    this.pools[e] || (this.pools[e] = {});
    const s = this.pools[e][t];
    s && s.forEach((r) => {
      try {
        r(...i);
      } catch (o) {
        console.error(`${t} monitor event exception！`, o);
      }
    });
  }
};
const rl = new B9(), j9 = "buildFinished", Sw = "catalogChanged", z9 = "pushCatalog", cA = "rerender", Z9 = (n) => {
  if (!n)
    return n;
  const e = n.split(`
`), t = ['<span rn-wrapper aria-hidden="true">'];
  return e.forEach(() => {
    t.push("<span></span>");
  }), t.push("</span>"), `<span class="code-block">${n}</span>${t.join("")}`;
}, Il = (n, e = "") => {
  const t = document.getElementById(n.id), i = n.onload;
  n.onload = null;
  const s = function(r) {
    typeof i == "function" && i.bind(this)(r), n.removeEventListener("load", s);
  };
  t ? e !== "" && (t.addEventListener("load", s), Reflect.get(window, e) && t.dispatchEvent(new Event("load"))) : (n.addEventListener("load", s), document.head.appendChild(n));
}, F9 = Gv((n, e, t) => {
  const i = document.getElementById(n);
  i && i.setAttribute(e, t);
}, 10);
class ut {
  /**
  Get the line description around the given position.
  */
  lineAt(e) {
    if (e < 0 || e > this.length)
      throw new RangeError(`Invalid position ${e} in document of length ${this.length}`);
    return this.lineInner(e, !1, 1, 0);
  }
  /**
  Get the description for the given (1-based) line number.
  */
  line(e) {
    if (e < 1 || e > this.lines)
      throw new RangeError(`Invalid line number ${e} in ${this.lines}-line document`);
    return this.lineInner(e, !0, 1, 0);
  }
  /**
  Replace a range of the text with the given content.
  */
  replace(e, t, i) {
    [e, t] = Ka(this, e, t);
    let s = [];
    return this.decompose(
      0,
      e,
      s,
      2
      /* Open.To */
    ), i.length && i.decompose(
      0,
      i.length,
      s,
      3
      /* Open.To */
    ), this.decompose(
      t,
      this.length,
      s,
      1
      /* Open.From */
    ), Us.from(s, this.length - (t - e) + i.length);
  }
  /**
  Append another document to this one.
  */
  append(e) {
    return this.replace(this.length, this.length, e);
  }
  /**
  Retrieve the text between the given points.
  */
  slice(e, t = this.length) {
    [e, t] = Ka(this, e, t);
    let i = [];
    return this.decompose(e, t, i, 0), Us.from(i, t - e);
  }
  /**
  Test whether this text is equal to another instance.
  */
  eq(e) {
    if (e == this)
      return !0;
    if (e.length != this.length || e.lines != this.lines)
      return !1;
    let t = this.scanIdentical(e, 1), i = this.length - this.scanIdentical(e, -1), s = new xu(this), r = new xu(e);
    for (let o = t, l = t; ; ) {
      if (s.next(o), r.next(o), o = 0, s.lineBreak != r.lineBreak || s.done != r.done || s.value != r.value)
        return !1;
      if (l += s.value.length, s.done || l >= i)
        return !0;
    }
  }
  /**
  Iterate over the text. When `dir` is `-1`, iteration happens
  from end to start. This will return lines and the breaks between
  them as separate strings.
  */
  iter(e = 1) {
    return new xu(this, e);
  }
  /**
  Iterate over a range of the text. When `from` > `to`, the
  iterator will run in reverse.
  */
  iterRange(e, t = this.length) {
    return new uA(this, e, t);
  }
  /**
  Return a cursor that iterates over the given range of lines,
  _without_ returning the line breaks between, and yielding empty
  strings for empty lines.
  
  When `from` and `to` are given, they should be 1-based line numbers.
  */
  iterLines(e, t) {
    let i;
    if (e == null)
      i = this.iter();
    else {
      t == null && (t = this.lines + 1);
      let s = this.line(e).from;
      i = this.iterRange(s, Math.max(s, t == this.lines + 1 ? this.length : t <= 1 ? 0 : this.line(t - 1).to));
    }
    return new hA(i);
  }
  /**
  Return the document as a string, using newline characters to
  separate lines.
  */
  toString() {
    return this.sliceString(0);
  }
  /**
  Convert the document to an array of lines (which can be
  deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).
  */
  toJSON() {
    let e = [];
    return this.flatten(e), e;
  }
  /**
  @internal
  */
  constructor() {
  }
  /**
  Create a `Text` instance for the given array of lines.
  */
  static of(e) {
    if (e.length == 0)
      throw new RangeError("A document must have at least one line");
    return e.length == 1 && !e[0] ? ut.empty : e.length <= 32 ? new Xt(e) : Us.from(Xt.split(e, []));
  }
}
class Xt extends ut {
  constructor(e, t = V9(e)) {
    super(), this.text = e, this.length = t;
  }
  get lines() {
    return this.text.length;
  }
  get children() {
    return null;
  }
  lineInner(e, t, i, s) {
    for (let r = 0; ; r++) {
      let o = this.text[r], l = s + o.length;
      if ((t ? i : l) >= e)
        return new q9(s, l, i, o);
      s = l + 1, i++;
    }
  }
  decompose(e, t, i, s) {
    let r = e <= 0 && t >= this.length ? this : new Xt(Cw(this.text, e, t), Math.min(t, this.length) - Math.max(0, e));
    if (s & 1) {
      let o = i.pop(), l = pd(r.text, o.text.slice(), 0, r.length);
      if (l.length <= 32)
        i.push(new Xt(l, o.length + r.length));
      else {
        let a = l.length >> 1;
        i.push(new Xt(l.slice(0, a)), new Xt(l.slice(a)));
      }
    } else
      i.push(r);
  }
  replace(e, t, i) {
    if (!(i instanceof Xt))
      return super.replace(e, t, i);
    [e, t] = Ka(this, e, t);
    let s = pd(this.text, pd(i.text, Cw(this.text, 0, e)), t), r = this.length + i.length - (t - e);
    return s.length <= 32 ? new Xt(s, r) : Us.from(Xt.split(s, []), r);
  }
  sliceString(e, t = this.length, i = `
`) {
    [e, t] = Ka(this, e, t);
    let s = "";
    for (let r = 0, o = 0; r <= t && o < this.text.length; o++) {
      let l = this.text[o], a = r + l.length;
      r > e && o && (s += i), e < a && t > r && (s += l.slice(Math.max(0, e - r), t - r)), r = a + 1;
    }
    return s;
  }
  flatten(e) {
    for (let t of this.text)
      e.push(t);
  }
  scanIdentical() {
    return 0;
  }
  static split(e, t) {
    let i = [], s = -1;
    for (let r of e)
      i.push(r), s += r.length + 1, i.length == 32 && (t.push(new Xt(i, s)), i = [], s = -1);
    return s > -1 && t.push(new Xt(i, s)), t;
  }
}
class Us extends ut {
  constructor(e, t) {
    super(), this.children = e, this.length = t, this.lines = 0;
    for (let i of e)
      this.lines += i.lines;
  }
  lineInner(e, t, i, s) {
    for (let r = 0; ; r++) {
      let o = this.children[r], l = s + o.length, a = i + o.lines - 1;
      if ((t ? a : l) >= e)
        return o.lineInner(e, t, i, s);
      s = l + 1, i = a + 1;
    }
  }
  decompose(e, t, i, s) {
    for (let r = 0, o = 0; o <= t && r < this.children.length; r++) {
      let l = this.children[r], a = o + l.length;
      if (e <= a && t >= o) {
        let c = s & ((o <= e ? 1 : 0) | (a >= t ? 2 : 0));
        o >= e && a <= t && !c ? i.push(l) : l.decompose(e - o, t - o, i, c);
      }
      o = a + 1;
    }
  }
  replace(e, t, i) {
    if ([e, t] = Ka(this, e, t), i.lines < this.lines)
      for (let s = 0, r = 0; s < this.children.length; s++) {
        let o = this.children[s], l = r + o.length;
        if (e >= r && t <= l) {
          let a = o.replace(e - r, t - r, i), c = this.lines - o.lines + a.lines;
          if (a.lines < c >> 4 && a.lines > c >> 6) {
            let u = this.children.slice();
            return u[s] = a, new Us(u, this.length - (t - e) + i.length);
          }
          return super.replace(r, l, a);
        }
        r = l + 1;
      }
    return super.replace(e, t, i);
  }
  sliceString(e, t = this.length, i = `
`) {
    [e, t] = Ka(this, e, t);
    let s = "";
    for (let r = 0, o = 0; r < this.children.length && o <= t; r++) {
      let l = this.children[r], a = o + l.length;
      o > e && r && (s += i), e < a && t > o && (s += l.sliceString(e - o, t - o, i)), o = a + 1;
    }
    return s;
  }
  flatten(e) {
    for (let t of this.children)
      t.flatten(e);
  }
  scanIdentical(e, t) {
    if (!(e instanceof Us))
      return 0;
    let i = 0, [s, r, o, l] = t > 0 ? [0, 0, this.children.length, e.children.length] : [this.children.length - 1, e.children.length - 1, -1, -1];
    for (; ; s += t, r += t) {
      if (s == o || r == l)
        return i;
      let a = this.children[s], c = e.children[r];
      if (a != c)
        return i + a.scanIdentical(c, t);
      i += a.length + 1;
    }
  }
  static from(e, t = e.reduce((i, s) => i + s.length + 1, -1)) {
    let i = 0;
    for (let d of e)
      i += d.lines;
    if (i < 32) {
      let d = [];
      for (let p of e)
        p.flatten(d);
      return new Xt(d, t);
    }
    let s = Math.max(
      32,
      i >> 5
      /* Tree.BranchShift */
    ), r = s << 1, o = s >> 1, l = [], a = 0, c = -1, u = [];
    function h(d) {
      let p;
      if (d.lines > r && d instanceof Us)
        for (let g of d.children)
          h(g);
      else
        d.lines > o && (a > o || !a) ? (f(), l.push(d)) : d instanceof Xt && a && (p = u[u.length - 1]) instanceof Xt && d.lines + p.lines <= 32 ? (a += d.lines, c += d.length + 1, u[u.length - 1] = new Xt(p.text.concat(d.text), p.length + 1 + d.length)) : (a + d.lines > s && f(), a += d.lines, c += d.length + 1, u.push(d));
    }
    function f() {
      a != 0 && (l.push(u.length == 1 ? u[0] : Us.from(u, c)), c = -1, a = u.length = 0);
    }
    for (let d of e)
      h(d);
    return f(), l.length == 1 ? l[0] : new Us(l, t);
  }
}
ut.empty = /* @__PURE__ */ new Xt([""], 0);
function V9(n) {
  let e = -1;
  for (let t of n)
    e += t.length + 1;
  return e;
}
function pd(n, e, t = 0, i = 1e9) {
  for (let s = 0, r = 0, o = !0; r < n.length && s <= i; r++) {
    let l = n[r], a = s + l.length;
    a >= t && (a > i && (l = l.slice(0, i - s)), s < t && (l = l.slice(t - s)), o ? (e[e.length - 1] += l, o = !1) : e.push(l)), s = a + 1;
  }
  return e;
}
function Cw(n, e, t) {
  return pd(n, [""], e, t);
}
class xu {
  constructor(e, t = 1) {
    this.dir = t, this.done = !1, this.lineBreak = !1, this.value = "", this.nodes = [e], this.offsets = [t > 0 ? 1 : (e instanceof Xt ? e.text.length : e.children.length) << 1];
  }
  nextInner(e, t) {
    for (this.done = this.lineBreak = !1; ; ) {
      let i = this.nodes.length - 1, s = this.nodes[i], r = this.offsets[i], o = r >> 1, l = s instanceof Xt ? s.text.length : s.children.length;
      if (o == (t > 0 ? l : 0)) {
        if (i == 0)
          return this.done = !0, this.value = "", this;
        t > 0 && this.offsets[i - 1]++, this.nodes.pop(), this.offsets.pop();
      } else if ((r & 1) == (t > 0 ? 0 : 1)) {
        if (this.offsets[i] += t, e == 0)
          return this.lineBreak = !0, this.value = `
`, this;
        e--;
      } else if (s instanceof Xt) {
        let a = s.text[o + (t < 0 ? -1 : 0)];
        if (this.offsets[i] += t, a.length > Math.max(0, e))
          return this.value = e == 0 ? a : t > 0 ? a.slice(e) : a.slice(0, a.length - e), this;
        e -= a.length;
      } else {
        let a = s.children[o + (t < 0 ? -1 : 0)];
        e > a.length ? (e -= a.length, this.offsets[i] += t) : (t < 0 && this.offsets[i]--, this.nodes.push(a), this.offsets.push(t > 0 ? 1 : (a instanceof Xt ? a.text.length : a.children.length) << 1));
      }
    }
  }
  next(e = 0) {
    return e < 0 && (this.nextInner(-e, -this.dir), e = this.value.length), this.nextInner(e, this.dir);
  }
}
class uA {
  constructor(e, t, i) {
    this.value = "", this.done = !1, this.cursor = new xu(e, t > i ? -1 : 1), this.pos = t > i ? e.length : 0, this.from = Math.min(t, i), this.to = Math.max(t, i);
  }
  nextInner(e, t) {
    if (t < 0 ? this.pos <= this.from : this.pos >= this.to)
      return this.value = "", this.done = !0, this;
    e += Math.max(0, t < 0 ? this.pos - this.to : this.from - this.pos);
    let i = t < 0 ? this.pos - this.from : this.to - this.pos;
    e > i && (e = i), i -= e;
    let { value: s } = this.cursor.next(e);
    return this.pos += (s.length + e) * t, this.value = s.length <= i ? s : t < 0 ? s.slice(s.length - i) : s.slice(0, i), this.done = !this.value, this;
  }
  next(e = 0) {
    return e < 0 ? e = Math.max(e, this.from - this.pos) : e > 0 && (e = Math.min(e, this.to - this.pos)), this.nextInner(e, this.cursor.dir);
  }
  get lineBreak() {
    return this.cursor.lineBreak && this.value != "";
  }
}
class hA {
  constructor(e) {
    this.inner = e, this.afterBreak = !0, this.value = "", this.done = !1;
  }
  next(e = 0) {
    let { done: t, lineBreak: i, value: s } = this.inner.next(e);
    return t && this.afterBreak ? (this.value = "", this.afterBreak = !1) : t ? (this.done = !0, this.value = "") : i ? this.afterBreak ? this.value = "" : (this.afterBreak = !0, this.next()) : (this.value = s, this.afterBreak = !1), this;
  }
  get lineBreak() {
    return !1;
  }
}
typeof Symbol < "u" && (ut.prototype[Symbol.iterator] = function() {
  return this.iter();
}, xu.prototype[Symbol.iterator] = uA.prototype[Symbol.iterator] = hA.prototype[Symbol.iterator] = function() {
  return this;
});
let q9 = class {
  /**
  @internal
  */
  constructor(e, t, i, s) {
    this.from = e, this.to = t, this.number = i, this.text = s;
  }
  /**
  The length of the line (not including any line break after it).
  */
  get length() {
    return this.to - this.from;
  }
};
function Ka(n, e, t) {
  return e = Math.max(0, Math.min(n.length, e)), [e, Math.max(e, Math.min(n.length, t))];
}
let Sa = /* @__PURE__ */ "lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map((n) => n ? parseInt(n, 36) : 1);
for (let n = 1; n < Sa.length; n++)
  Sa[n] += Sa[n - 1];
function W9(n) {
  for (let e = 1; e < Sa.length; e += 2)
    if (Sa[e] > n)
      return Sa[e - 1] <= n;
  return !1;
}
function kw(n) {
  return n >= 127462 && n <= 127487;
}
const Pw = 8205;
function Bn(n, e, t = !0, i = !0) {
  return (t ? fA : X9)(n, e, i);
}
function fA(n, e, t) {
  if (e == n.length)
    return e;
  e && dA(n.charCodeAt(e)) && pA(n.charCodeAt(e - 1)) && e--;
  let i = Mn(n, e);
  for (e += Xi(i); e < n.length; ) {
    let s = Mn(n, e);
    if (i == Pw || s == Pw || t && W9(s))
      e += Xi(s), i = s;
    else if (kw(s)) {
      let r = 0, o = e - 2;
      for (; o >= 0 && kw(Mn(n, o)); )
        r++, o -= 2;
      if (r % 2 == 0)
        break;
      e += 2;
    } else
      break;
  }
  return e;
}
function X9(n, e, t) {
  for (; e > 0; ) {
    let i = fA(n, e - 2, t);
    if (i < e)
      return i;
    e--;
  }
  return 0;
}
function dA(n) {
  return n >= 56320 && n < 57344;
}
function pA(n) {
  return n >= 55296 && n < 56320;
}
function Mn(n, e) {
  let t = n.charCodeAt(e);
  if (!pA(t) || e + 1 == n.length)
    return t;
  let i = n.charCodeAt(e + 1);
  return dA(i) ? (t - 55296 << 10) + (i - 56320) + 65536 : t;
}
function Uv(n) {
  return n <= 65535 ? String.fromCharCode(n) : (n -= 65536, String.fromCharCode((n >> 10) + 55296, (n & 1023) + 56320));
}
function Xi(n) {
  return n < 65536 ? 1 : 2;
}
const L0 = /\r\n?|\n/;
var Nn = /* @__PURE__ */ function(n) {
  return n[n.Simple = 0] = "Simple", n[n.TrackDel = 1] = "TrackDel", n[n.TrackBefore = 2] = "TrackBefore", n[n.TrackAfter = 3] = "TrackAfter", n;
}(Nn || (Nn = {}));
class lr {
  // Sections are encoded as pairs of integers. The first is the
  // length in the current document, and the second is -1 for
  // unaffected sections, and the length of the replacement content
  // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
  // 0), and a replacement two positive numbers.
  /**
  @internal
  */
  constructor(e) {
    this.sections = e;
  }
  /**
  The length of the document before the change.
  */
  get length() {
    let e = 0;
    for (let t = 0; t < this.sections.length; t += 2)
      e += this.sections[t];
    return e;
  }
  /**
  The length of the document after the change.
  */
  get newLength() {
    let e = 0;
    for (let t = 0; t < this.sections.length; t += 2) {
      let i = this.sections[t + 1];
      e += i < 0 ? this.sections[t] : i;
    }
    return e;
  }
  /**
  False when there are actual changes in this set.
  */
  get empty() {
    return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0;
  }
  /**
  Iterate over the unchanged parts left by these changes. `posA`
  provides the position of the range in the old document, `posB`
  the new position in the changed document.
  */
  iterGaps(e) {
    for (let t = 0, i = 0, s = 0; t < this.sections.length; ) {
      let r = this.sections[t++], o = this.sections[t++];
      o < 0 ? (e(i, s, r), s += r) : s += o, i += r;
    }
  }
  /**
  Iterate over the ranges changed by these changes. (See
  [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
  variant that also provides you with the inserted text.)
  `fromA`/`toA` provides the extent of the change in the starting
  document, `fromB`/`toB` the extent of the replacement in the
  changed document.
  
  When `individual` is true, adjacent changes (which are kept
  separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
  reported separately.
  */
  iterChangedRanges(e, t = !1) {
    N0(this, e, t);
  }
  /**
  Get a description of the inverted form of these changes.
  */
  get invertedDesc() {
    let e = [];
    for (let t = 0; t < this.sections.length; ) {
      let i = this.sections[t++], s = this.sections[t++];
      s < 0 ? e.push(i, s) : e.push(s, i);
    }
    return new lr(e);
  }
  /**
  Compute the combined effect of applying another set of changes
  after this one. The length of the document after this set should
  match the length before `other`.
  */
  composeDesc(e) {
    return this.empty ? e : e.empty ? this : gA(this, e);
  }
  /**
  Map this description, which should start with the same document
  as `other`, over another set of changes, so that it can be
  applied after it. When `before` is true, map as if the changes
  in `other` happened before the ones in `this`.
  */
  mapDesc(e, t = !1) {
    return e.empty ? this : I0(this, e, t);
  }
  mapPos(e, t = -1, i = Nn.Simple) {
    let s = 0, r = 0;
    for (let o = 0; o < this.sections.length; ) {
      let l = this.sections[o++], a = this.sections[o++], c = s + l;
      if (a < 0) {
        if (c > e)
          return r + (e - s);
        r += l;
      } else {
        if (i != Nn.Simple && c >= e && (i == Nn.TrackDel && s < e && c > e || i == Nn.TrackBefore && s < e || i == Nn.TrackAfter && c > e))
          return null;
        if (c > e || c == e && t < 0 && !l)
          return e == s || t < 0 ? r : r + a;
        r += a;
      }
      s = c;
    }
    if (e > s)
      throw new RangeError(`Position ${e} is out of range for changeset of length ${s}`);
    return r;
  }
  /**
  Check whether these changes touch a given range. When one of the
  changes entirely covers the range, the string `"cover"` is
  returned.
  */
  touchesRange(e, t = e) {
    for (let i = 0, s = 0; i < this.sections.length && s <= t; ) {
      let r = this.sections[i++], o = this.sections[i++], l = s + r;
      if (o >= 0 && s <= t && l >= e)
        return s < e && l > t ? "cover" : !0;
      s = l;
    }
    return !1;
  }
  /**
  @internal
  */
  toString() {
    let e = "";
    for (let t = 0; t < this.sections.length; ) {
      let i = this.sections[t++], s = this.sections[t++];
      e += (e ? " " : "") + i + (s >= 0 ? ":" + s : "");
    }
    return e;
  }
  /**
  Serialize this change desc to a JSON-representable value.
  */
  toJSON() {
    return this.sections;
  }
  /**
  Create a change desc from its JSON representation (as produced
  by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
  */
  static fromJSON(e) {
    if (!Array.isArray(e) || e.length % 2 || e.some((t) => typeof t != "number"))
      throw new RangeError("Invalid JSON representation of ChangeDesc");
    return new lr(e);
  }
  /**
  @internal
  */
  static create(e) {
    return new lr(e);
  }
}
class dn extends lr {
  constructor(e, t) {
    super(e), this.inserted = t;
  }
  /**
  Apply the changes to a document, returning the modified
  document.
  */
  apply(e) {
    if (this.length != e.length)
      throw new RangeError("Applying change set to a document with the wrong length");
    return N0(this, (t, i, s, r, o) => e = e.replace(s, s + (i - t), o), !1), e;
  }
  mapDesc(e, t = !1) {
    return I0(this, e, t, !0);
  }
  /**
  Given the document as it existed _before_ the changes, return a
  change set that represents the inverse of this set, which could
  be used to go from the document created by the changes back to
  the document as it existed before the changes.
  */
  invert(e) {
    let t = this.sections.slice(), i = [];
    for (let s = 0, r = 0; s < t.length; s += 2) {
      let o = t[s], l = t[s + 1];
      if (l >= 0) {
        t[s] = l, t[s + 1] = o;
        let a = s >> 1;
        for (; i.length < a; )
          i.push(ut.empty);
        i.push(o ? e.slice(r, r + o) : ut.empty);
      }
      r += o;
    }
    return new dn(t, i);
  }
  /**
  Combine two subsequent change sets into a single set. `other`
  must start in the document produced by `this`. If `this` goes
  `docA` → `docB` and `other` represents `docB` → `docC`, the
  returned value will represent the change `docA` → `docC`.
  */
  compose(e) {
    return this.empty ? e : e.empty ? this : gA(this, e, !0);
  }
  /**
  Given another change set starting in the same document, maps this
  change set over the other, producing a new change set that can be
  applied to the document produced by applying `other`. When
  `before` is `true`, order changes as if `this` comes before
  `other`, otherwise (the default) treat `other` as coming first.
  
  Given two changes `A` and `B`, `A.compose(B.map(A))` and
  `B.compose(A.map(B, true))` will produce the same document. This
  provides a basic form of [operational
  transformation](https://en.wikipedia.org/wiki/Operational_transformation),
  and can be used for collaborative editing.
  */
  map(e, t = !1) {
    return e.empty ? this : I0(this, e, t, !0);
  }
  /**
  Iterate over the changed ranges in the document, calling `f` for
  each, with the range in the original document (`fromA`-`toA`)
  and the range that replaces it in the new document
  (`fromB`-`toB`).
  
  When `individual` is true, adjacent changes are reported
  separately.
  */
  iterChanges(e, t = !1) {
    N0(this, e, t);
  }
  /**
  Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
  set.
  */
  get desc() {
    return lr.create(this.sections);
  }
  /**
  @internal
  */
  filter(e) {
    let t = [], i = [], s = [], r = new Gu(this);
    e:
      for (let o = 0, l = 0; ; ) {
        let a = o == e.length ? 1e9 : e[o++];
        for (; l < a || l == a && r.len == 0; ) {
          if (r.done)
            break e;
          let u = Math.min(r.len, a - l);
          Vn(s, u, -1);
          let h = r.ins == -1 ? -1 : r.off == 0 ? r.ins : 0;
          Vn(t, u, h), h > 0 && yo(i, t, r.text), r.forward(u), l += u;
        }
        let c = e[o++];
        for (; l < c; ) {
          if (r.done)
            break e;
          let u = Math.min(r.len, c - l);
          Vn(t, u, -1), Vn(s, u, r.ins == -1 ? -1 : r.off == 0 ? r.ins : 0), r.forward(u), l += u;
        }
      }
    return {
      changes: new dn(t, i),
      filtered: lr.create(s)
    };
  }
  /**
  Serialize this change set to a JSON-representable value.
  */
  toJSON() {
    let e = [];
    for (let t = 0; t < this.sections.length; t += 2) {
      let i = this.sections[t], s = this.sections[t + 1];
      s < 0 ? e.push(i) : s == 0 ? e.push([i]) : e.push([i].concat(this.inserted[t >> 1].toJSON()));
    }
    return e;
  }
  /**
  Create a change set for the given changes, for a document of the
  given length, using `lineSep` as line separator.
  */
  static of(e, t, i) {
    let s = [], r = [], o = 0, l = null;
    function a(u = !1) {
      if (!u && !s.length)
        return;
      o < t && Vn(s, t - o, -1);
      let h = new dn(s, r);
      l = l ? l.compose(h.map(l)) : h, s = [], r = [], o = 0;
    }
    function c(u) {
      if (Array.isArray(u))
        for (let h of u)
          c(h);
      else if (u instanceof dn) {
        if (u.length != t)
          throw new RangeError(`Mismatched change set length (got ${u.length}, expected ${t})`);
        a(), l = l ? l.compose(u.map(l)) : u;
      } else {
        let { from: h, to: f = h, insert: d } = u;
        if (h > f || h < 0 || f > t)
          throw new RangeError(`Invalid change range ${h} to ${f} (in doc of length ${t})`);
        let p = d ? typeof d == "string" ? ut.of(d.split(i || L0)) : d : ut.empty, g = p.length;
        if (h == f && g == 0)
          return;
        h < o && a(), h > o && Vn(s, h - o, -1), Vn(s, f - h, g), yo(r, s, p), o = f;
      }
    }
    return c(e), a(!l), l;
  }
  /**
  Create an empty changeset of the given length.
  */
  static empty(e) {
    return new dn(e ? [e, -1] : [], []);
  }
  /**
  Create a changeset from its JSON representation (as produced by
  [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
  */
  static fromJSON(e) {
    if (!Array.isArray(e))
      throw new RangeError("Invalid JSON representation of ChangeSet");
    let t = [], i = [];
    for (let s = 0; s < e.length; s++) {
      let r = e[s];
      if (typeof r == "number")
        t.push(r, -1);
      else {
        if (!Array.isArray(r) || typeof r[0] != "number" || r.some((o, l) => l && typeof o != "string"))
          throw new RangeError("Invalid JSON representation of ChangeSet");
        if (r.length == 1)
          t.push(r[0], 0);
        else {
          for (; i.length < s; )
            i.push(ut.empty);
          i[s] = ut.of(r.slice(1)), t.push(r[0], i[s].length);
        }
      }
    }
    return new dn(t, i);
  }
  /**
  @internal
  */
  static createSet(e, t) {
    return new dn(e, t);
  }
}
function Vn(n, e, t, i = !1) {
  if (e == 0 && t <= 0)
    return;
  let s = n.length - 2;
  s >= 0 && t <= 0 && t == n[s + 1] ? n[s] += e : e == 0 && n[s] == 0 ? n[s + 1] += t : i ? (n[s] += e, n[s + 1] += t) : n.push(e, t);
}
function yo(n, e, t) {
  if (t.length == 0)
    return;
  let i = e.length - 2 >> 1;
  if (i < n.length)
    n[n.length - 1] = n[n.length - 1].append(t);
  else {
    for (; n.length < i; )
      n.push(ut.empty);
    n.push(t);
  }
}
function N0(n, e, t) {
  let i = n.inserted;
  for (let s = 0, r = 0, o = 0; o < n.sections.length; ) {
    let l = n.sections[o++], a = n.sections[o++];
    if (a < 0)
      s += l, r += l;
    else {
      let c = s, u = r, h = ut.empty;
      for (; c += l, u += a, a && i && (h = h.append(i[o - 2 >> 1])), !(t || o == n.sections.length || n.sections[o + 1] < 0); )
        l = n.sections[o++], a = n.sections[o++];
      e(s, c, r, u, h), s = c, r = u;
    }
  }
}
function I0(n, e, t, i = !1) {
  let s = [], r = i ? [] : null, o = new Gu(n), l = new Gu(e);
  for (let a = -1; ; )
    if (o.ins == -1 && l.ins == -1) {
      let c = Math.min(o.len, l.len);
      Vn(s, c, -1), o.forward(c), l.forward(c);
    } else if (l.ins >= 0 && (o.ins < 0 || a == o.i || o.off == 0 && (l.len < o.len || l.len == o.len && !t))) {
      let c = l.len;
      for (Vn(s, l.ins, -1); c; ) {
        let u = Math.min(o.len, c);
        o.ins >= 0 && a < o.i && o.len <= u && (Vn(s, 0, o.ins), r && yo(r, s, o.text), a = o.i), o.forward(u), c -= u;
      }
      l.next();
    } else if (o.ins >= 0) {
      let c = 0, u = o.len;
      for (; u; )
        if (l.ins == -1) {
          let h = Math.min(u, l.len);
          c += h, u -= h, l.forward(h);
        } else if (l.ins == 0 && l.len < u)
          u -= l.len, l.next();
        else
          break;
      Vn(s, c, a < o.i ? o.ins : 0), r && a < o.i && yo(r, s, o.text), a = o.i, o.forward(o.len - u);
    } else {
      if (o.done && l.done)
        return r ? dn.createSet(s, r) : lr.create(s);
      throw new Error("Mismatched change set lengths");
    }
}
function gA(n, e, t = !1) {
  let i = [], s = t ? [] : null, r = new Gu(n), o = new Gu(e);
  for (let l = !1; ; ) {
    if (r.done && o.done)
      return s ? dn.createSet(i, s) : lr.create(i);
    if (r.ins == 0)
      Vn(i, r.len, 0, l), r.next();
    else if (o.len == 0 && !o.done)
      Vn(i, 0, o.ins, l), s && yo(s, i, o.text), o.next();
    else {
      if (r.done || o.done)
        throw new Error("Mismatched change set lengths");
      {
        let a = Math.min(r.len2, o.len), c = i.length;
        if (r.ins == -1) {
          let u = o.ins == -1 ? -1 : o.off ? 0 : o.ins;
          Vn(i, a, u, l), s && u && yo(s, i, o.text);
        } else
          o.ins == -1 ? (Vn(i, r.off ? 0 : r.len, a, l), s && yo(s, i, r.textBit(a))) : (Vn(i, r.off ? 0 : r.len, o.off ? 0 : o.ins, l), s && !o.off && yo(s, i, o.text));
        l = (r.ins > a || o.ins >= 0 && o.len > a) && (l || i.length > c), r.forward2(a), o.forward(a);
      }
    }
  }
}
class Gu {
  constructor(e) {
    this.set = e, this.i = 0, this.next();
  }
  next() {
    let { sections: e } = this.set;
    this.i < e.length ? (this.len = e[this.i++], this.ins = e[this.i++]) : (this.len = 0, this.ins = -2), this.off = 0;
  }
  get done() {
    return this.ins == -2;
  }
  get len2() {
    return this.ins < 0 ? this.len : this.ins;
  }
  get text() {
    let { inserted: e } = this.set, t = this.i - 2 >> 1;
    return t >= e.length ? ut.empty : e[t];
  }
  textBit(e) {
    let { inserted: t } = this.set, i = this.i - 2 >> 1;
    return i >= t.length && !e ? ut.empty : t[i].slice(this.off, e == null ? void 0 : this.off + e);
  }
  forward(e) {
    e == this.len ? this.next() : (this.len -= e, this.off += e);
  }
  forward2(e) {
    this.ins == -1 ? this.forward(e) : e == this.ins ? this.next() : (this.ins -= e, this.off += e);
  }
}
class pl {
  constructor(e, t, i) {
    this.from = e, this.to = t, this.flags = i;
  }
  /**
  The anchor of the range—the side that doesn't move when you
  extend it.
  */
  get anchor() {
    return this.flags & 32 ? this.to : this.from;
  }
  /**
  The head of the range, which is moved when the range is
  [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
  */
  get head() {
    return this.flags & 32 ? this.from : this.to;
  }
  /**
  True when `anchor` and `head` are at the same position.
  */
  get empty() {
    return this.from == this.to;
  }
  /**
  If this is a cursor that is explicitly associated with the
  character on one of its sides, this returns the side. -1 means
  the character before its position, 1 the character after, and 0
  means no association.
  */
  get assoc() {
    return this.flags & 8 ? -1 : this.flags & 16 ? 1 : 0;
  }
  /**
  The bidirectional text level associated with this cursor, if
  any.
  */
  get bidiLevel() {
    let e = this.flags & 7;
    return e == 7 ? null : e;
  }
  /**
  The goal column (stored vertical offset) associated with a
  cursor. This is used to preserve the vertical position when
  [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
  lines of different length.
  */
  get goalColumn() {
    let e = this.flags >> 6;
    return e == 16777215 ? void 0 : e;
  }
  /**
  Map this range through a change, producing a valid range in the
  updated document.
  */
  map(e, t = -1) {
    let i, s;
    return this.empty ? i = s = e.mapPos(this.from, t) : (i = e.mapPos(this.from, 1), s = e.mapPos(this.to, -1)), i == this.from && s == this.to ? this : new pl(i, s, this.flags);
  }
  /**
  Extend this range to cover at least `from` to `to`.
  */
  extend(e, t = e) {
    if (e <= this.anchor && t >= this.anchor)
      return J.range(e, t);
    let i = Math.abs(e - this.anchor) > Math.abs(t - this.anchor) ? e : t;
    return J.range(this.anchor, i);
  }
  /**
  Compare this range to another range.
  */
  eq(e, t = !1) {
    return this.anchor == e.anchor && this.head == e.head && (!t || !this.empty || this.assoc == e.assoc);
  }
  /**
  Return a JSON-serializable object representing the range.
  */
  toJSON() {
    return { anchor: this.anchor, head: this.head };
  }
  /**
  Convert a JSON representation of a range to a `SelectionRange`
  instance.
  */
  static fromJSON(e) {
    if (!e || typeof e.anchor != "number" || typeof e.head != "number")
      throw new RangeError("Invalid JSON representation for SelectionRange");
    return J.range(e.anchor, e.head);
  }
  /**
  @internal
  */
  static create(e, t, i) {
    return new pl(e, t, i);
  }
}
class J {
  constructor(e, t) {
    this.ranges = e, this.mainIndex = t;
  }
  /**
  Map a selection through a change. Used to adjust the selection
  position for changes.
  */
  map(e, t = -1) {
    return e.empty ? this : J.create(this.ranges.map((i) => i.map(e, t)), this.mainIndex);
  }
  /**
  Compare this selection to another selection. By default, ranges
  are compared only by position. When `includeAssoc` is true,
  cursor ranges must also have the same
  [`assoc`](https://codemirror.net/6/docs/ref/#state.SelectionRange.assoc) value.
  */
  eq(e, t = !1) {
    if (this.ranges.length != e.ranges.length || this.mainIndex != e.mainIndex)
      return !1;
    for (let i = 0; i < this.ranges.length; i++)
      if (!this.ranges[i].eq(e.ranges[i], t))
        return !1;
    return !0;
  }
  /**
  Get the primary selection range. Usually, you should make sure
  your code applies to _all_ ranges, by using methods like
  [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
  */
  get main() {
    return this.ranges[this.mainIndex];
  }
  /**
  Make sure the selection only has one range. Returns a selection
  holding only the main range from this selection.
  */
  asSingle() {
    return this.ranges.length == 1 ? this : new J([this.main], 0);
  }
  /**
  Extend this selection with an extra range.
  */
  addRange(e, t = !0) {
    return J.create([e].concat(this.ranges), t ? 0 : this.mainIndex + 1);
  }
  /**
  Replace a given range with another range, and then normalize the
  selection to merge and sort ranges if necessary.
  */
  replaceRange(e, t = this.mainIndex) {
    let i = this.ranges.slice();
    return i[t] = e, J.create(i, this.mainIndex);
  }
  /**
  Convert this selection to an object that can be serialized to
  JSON.
  */
  toJSON() {
    return { ranges: this.ranges.map((e) => e.toJSON()), main: this.mainIndex };
  }
  /**
  Create a selection from a JSON representation.
  */
  static fromJSON(e) {
    if (!e || !Array.isArray(e.ranges) || typeof e.main != "number" || e.main >= e.ranges.length)
      throw new RangeError("Invalid JSON representation for EditorSelection");
    return new J(e.ranges.map((t) => pl.fromJSON(t)), e.main);
  }
  /**
  Create a selection holding a single range.
  */
  static single(e, t = e) {
    return new J([J.range(e, t)], 0);
  }
  /**
  Sort and merge the given set of ranges, creating a valid
  selection.
  */
  static create(e, t = 0) {
    if (e.length == 0)
      throw new RangeError("A selection needs at least one range");
    for (let i = 0, s = 0; s < e.length; s++) {
      let r = e[s];
      if (r.empty ? r.from <= i : r.from < i)
        return J.normalized(e.slice(), t);
      i = r.to;
    }
    return new J(e, t);
  }
  /**
  Create a cursor selection range at the given position. You can
  safely ignore the optional arguments in most situations.
  */
  static cursor(e, t = 0, i, s) {
    return pl.create(e, e, (t == 0 ? 0 : t < 0 ? 8 : 16) | (i == null ? 7 : Math.min(6, i)) | (s ?? 16777215) << 6);
  }
  /**
  Create a selection range.
  */
  static range(e, t, i, s) {
    let r = (i ?? 16777215) << 6 | (s == null ? 7 : Math.min(6, s));
    return t < e ? pl.create(t, e, 48 | r) : pl.create(e, t, (t > e ? 8 : 0) | r);
  }
  /**
  @internal
  */
  static normalized(e, t = 0) {
    let i = e[t];
    e.sort((s, r) => s.from - r.from), t = e.indexOf(i);
    for (let s = 1; s < e.length; s++) {
      let r = e[s], o = e[s - 1];
      if (r.empty ? r.from <= o.to : r.from < o.to) {
        let l = o.from, a = Math.max(r.to, o.to);
        s <= t && t--, e.splice(--s, 2, r.anchor > r.head ? J.range(a, l) : J.range(l, a));
      }
    }
    return new J(e, t);
  }
}
function mA(n, e) {
  for (let t of n.ranges)
    if (t.to > e)
      throw new RangeError("Selection points outside of document");
}
let Kv = 0;
class we {
  constructor(e, t, i, s, r) {
    this.combine = e, this.compareInput = t, this.compare = i, this.isStatic = s, this.id = Kv++, this.default = e([]), this.extensions = typeof r == "function" ? r(this) : r;
  }
  /**
  Returns a facet reader for this facet, which can be used to
  [read](https://codemirror.net/6/docs/ref/#state.EditorState.facet) it but not to define values for it.
  */
  get reader() {
    return this;
  }
  /**
  Define a new facet.
  */
  static define(e = {}) {
    return new we(e.combine || ((t) => t), e.compareInput || ((t, i) => t === i), e.compare || (e.combine ? (t, i) => t === i : Jv), !!e.static, e.enables);
  }
  /**
  Returns an extension that adds the given value to this facet.
  */
  of(e) {
    return new gd([], this, 0, e);
  }
  /**
  Create an extension that computes a value for the facet from a
  state. You must take care to declare the parts of the state that
  this value depends on, since your function is only called again
  for a new state when one of those parts changed.
  
  In cases where your value depends only on a single field, you'll
  want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.
  */
  compute(e, t) {
    if (this.isStatic)
      throw new Error("Can't compute a static facet");
    return new gd(e, this, 1, t);
  }
  /**
  Create an extension that computes zero or more values for this
  facet from a state.
  */
  computeN(e, t) {
    if (this.isStatic)
      throw new Error("Can't compute a static facet");
    return new gd(e, this, 2, t);
  }
  from(e, t) {
    return t || (t = (i) => i), this.compute([e], (i) => t(i.field(e)));
  }
}
function Jv(n, e) {
  return n == e || n.length == e.length && n.every((t, i) => t === e[i]);
}
class gd {
  constructor(e, t, i, s) {
    this.dependencies = e, this.facet = t, this.type = i, this.value = s, this.id = Kv++;
  }
  dynamicSlot(e) {
    var t;
    let i = this.value, s = this.facet.compareInput, r = this.id, o = e[r] >> 1, l = this.type == 2, a = !1, c = !1, u = [];
    for (let h of this.dependencies)
      h == "doc" ? a = !0 : h == "selection" ? c = !0 : ((t = e[h.id]) !== null && t !== void 0 ? t : 1) & 1 || u.push(e[h.id]);
    return {
      create(h) {
        return h.values[o] = i(h), 1;
      },
      update(h, f) {
        if (a && f.docChanged || c && (f.docChanged || f.selection) || Q0(h, u)) {
          let d = i(h);
          if (l ? !Aw(d, h.values[o], s) : !s(d, h.values[o]))
            return h.values[o] = d, 1;
        }
        return 0;
      },
      reconfigure: (h, f) => {
        let d, p = f.config.address[r];
        if (p != null) {
          let g = Fd(f, p);
          if (this.dependencies.every((m) => m instanceof we ? f.facet(m) === h.facet(m) : m instanceof Pn ? f.field(m, !1) == h.field(m, !1) : !0) || (l ? Aw(d = i(h), g, s) : s(d = i(h), g)))
            return h.values[o] = g, 0;
        } else
          d = i(h);
        return h.values[o] = d, 1;
      }
    };
  }
}
function Aw(n, e, t) {
  if (n.length != e.length)
    return !1;
  for (let i = 0; i < n.length; i++)
    if (!t(n[i], e[i]))
      return !1;
  return !0;
}
function Q0(n, e) {
  let t = !1;
  for (let i of e)
    Su(n, i) & 1 && (t = !0);
  return t;
}
function Y9(n, e, t) {
  let i = t.map((a) => n[a.id]), s = t.map((a) => a.type), r = i.filter((a) => !(a & 1)), o = n[e.id] >> 1;
  function l(a) {
    let c = [];
    for (let u = 0; u < i.length; u++) {
      let h = Fd(a, i[u]);
      if (s[u] == 2)
        for (let f of h)
          c.push(f);
      else
        c.push(h);
    }
    return e.combine(c);
  }
  return {
    create(a) {
      for (let c of i)
        Su(a, c);
      return a.values[o] = l(a), 1;
    },
    update(a, c) {
      if (!Q0(a, r))
        return 0;
      let u = l(a);
      return e.compare(u, a.values[o]) ? 0 : (a.values[o] = u, 1);
    },
    reconfigure(a, c) {
      let u = Q0(a, i), h = c.config.facets[e.id], f = c.facet(e);
      if (h && !u && Jv(t, h))
        return a.values[o] = f, 0;
      let d = l(a);
      return e.compare(d, f) ? (a.values[o] = f, 0) : (a.values[o] = d, 1);
    }
  };
}
const Ew = /* @__PURE__ */ we.define({ static: !0 });
class Pn {
  constructor(e, t, i, s, r) {
    this.id = e, this.createF = t, this.updateF = i, this.compareF = s, this.spec = r, this.provides = void 0;
  }
  /**
  Define a state field.
  */
  static define(e) {
    let t = new Pn(Kv++, e.create, e.update, e.compare || ((i, s) => i === s), e);
    return e.provide && (t.provides = e.provide(t)), t;
  }
  create(e) {
    let t = e.facet(Ew).find((i) => i.field == this);
    return ((t == null ? void 0 : t.create) || this.createF)(e);
  }
  /**
  @internal
  */
  slot(e) {
    let t = e[this.id] >> 1;
    return {
      create: (i) => (i.values[t] = this.create(i), 1),
      update: (i, s) => {
        let r = i.values[t], o = this.updateF(r, s);
        return this.compareF(r, o) ? 0 : (i.values[t] = o, 1);
      },
      reconfigure: (i, s) => s.config.address[this.id] != null ? (i.values[t] = s.field(this), 0) : (i.values[t] = this.create(i), 1)
    };
  }
  /**
  Returns an extension that enables this field and overrides the
  way it is initialized. Can be useful when you need to provide a
  non-default starting value for the field.
  */
  init(e) {
    return [this, Ew.of({ field: this, create: e })];
  }
  /**
  State field instances can be used as
  [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
  given state.
  */
  get extension() {
    return this;
  }
}
const ol = { lowest: 4, low: 3, default: 2, high: 1, highest: 0 };
function Yc(n) {
  return (e) => new bA(e, n);
}
const Kl = {
  /**
  The highest precedence level, for extensions that should end up
  near the start of the precedence ordering.
  */
  highest: /* @__PURE__ */ Yc(ol.highest),
  /**
  A higher-than-default precedence, for extensions that should
  come before those with default precedence.
  */
  high: /* @__PURE__ */ Yc(ol.high),
  /**
  The default precedence, which is also used for extensions
  without an explicit precedence.
  */
  default: /* @__PURE__ */ Yc(ol.default),
  /**
  A lower-than-default precedence.
  */
  low: /* @__PURE__ */ Yc(ol.low),
  /**
  The lowest precedence level. Meant for things that should end up
  near the end of the extension order.
  */
  lowest: /* @__PURE__ */ Yc(ol.lowest)
};
class bA {
  constructor(e, t) {
    this.inner = e, this.prec = t;
  }
}
class Jp {
  /**
  Create an instance of this compartment to add to your [state
  configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
  */
  of(e) {
    return new B0(this, e);
  }
  /**
  Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
  reconfigures this compartment.
  */
  reconfigure(e) {
    return Jp.reconfigure.of({ compartment: this, extension: e });
  }
  /**
  Get the current content of the compartment in the state, or
  `undefined` if it isn't present.
  */
  get(e) {
    return e.config.compartments.get(this);
  }
}
class B0 {
  constructor(e, t) {
    this.compartment = e, this.inner = t;
  }
}
class Zd {
  constructor(e, t, i, s, r, o) {
    for (this.base = e, this.compartments = t, this.dynamicSlots = i, this.address = s, this.staticValues = r, this.facets = o, this.statusTemplate = []; this.statusTemplate.length < i.length; )
      this.statusTemplate.push(
        0
        /* SlotStatus.Unresolved */
      );
  }
  staticFacet(e) {
    let t = this.address[e.id];
    return t == null ? e.default : this.staticValues[t >> 1];
  }
  static resolve(e, t, i) {
    let s = [], r = /* @__PURE__ */ Object.create(null), o = /* @__PURE__ */ new Map();
    for (let f of H9(e, t, o))
      f instanceof Pn ? s.push(f) : (r[f.facet.id] || (r[f.facet.id] = [])).push(f);
    let l = /* @__PURE__ */ Object.create(null), a = [], c = [];
    for (let f of s)
      l[f.id] = c.length << 1, c.push((d) => f.slot(d));
    let u = i == null ? void 0 : i.config.facets;
    for (let f in r) {
      let d = r[f], p = d[0].facet, g = u && u[f] || [];
      if (d.every(
        (m) => m.type == 0
        /* Provider.Static */
      ))
        if (l[p.id] = a.length << 1 | 1, Jv(g, d))
          a.push(i.facet(p));
        else {
          let m = p.combine(d.map((b) => b.value));
          a.push(i && p.compare(m, i.facet(p)) ? i.facet(p) : m);
        }
      else {
        for (let m of d)
          m.type == 0 ? (l[m.id] = a.length << 1 | 1, a.push(m.value)) : (l[m.id] = c.length << 1, c.push((b) => m.dynamicSlot(b)));
        l[p.id] = c.length << 1, c.push((m) => Y9(m, p, d));
      }
    }
    let h = c.map((f) => f(l));
    return new Zd(e, o, h, l, a, r);
  }
}
function H9(n, e, t) {
  let i = [[], [], [], [], []], s = /* @__PURE__ */ new Map();
  function r(o, l) {
    let a = s.get(o);
    if (a != null) {
      if (a <= l)
        return;
      let c = i[a].indexOf(o);
      c > -1 && i[a].splice(c, 1), o instanceof B0 && t.delete(o.compartment);
    }
    if (s.set(o, l), Array.isArray(o))
      for (let c of o)
        r(c, l);
    else if (o instanceof B0) {
      if (t.has(o.compartment))
        throw new RangeError("Duplicate use of compartment in extensions");
      let c = e.get(o.compartment) || o.inner;
      t.set(o.compartment, c), r(c, l);
    } else if (o instanceof bA)
      r(o.inner, o.prec);
    else if (o instanceof Pn)
      i[l].push(o), o.provides && r(o.provides, l);
    else if (o instanceof gd)
      i[l].push(o), o.facet.extensions && r(o.facet.extensions, ol.default);
    else {
      let c = o.extension;
      if (!c)
        throw new Error(`Unrecognized extension value in extension set (${o}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);
      r(c, l);
    }
  }
  return r(n, ol.default), i.reduce((o, l) => o.concat(l));
}
function Su(n, e) {
  if (e & 1)
    return 2;
  let t = e >> 1, i = n.status[t];
  if (i == 4)
    throw new Error("Cyclic dependency between fields and/or facets");
  if (i & 2)
    return i;
  n.status[t] = 4;
  let s = n.computeSlot(n, n.config.dynamicSlots[t]);
  return n.status[t] = 2 | s;
}
function Fd(n, e) {
  return e & 1 ? n.config.staticValues[e >> 1] : n.values[e >> 1];
}
const vA = /* @__PURE__ */ we.define(), j0 = /* @__PURE__ */ we.define({
  combine: (n) => n.some((e) => e),
  static: !0
}), yA = /* @__PURE__ */ we.define({
  combine: (n) => n.length ? n[0] : void 0,
  static: !0
}), OA = /* @__PURE__ */ we.define(), wA = /* @__PURE__ */ we.define(), xA = /* @__PURE__ */ we.define(), SA = /* @__PURE__ */ we.define({
  combine: (n) => n.length ? n[0] : !1
});
class Hr {
  /**
  @internal
  */
  constructor(e, t) {
    this.type = e, this.value = t;
  }
  /**
  Define a new type of annotation.
  */
  static define() {
    return new G9();
  }
}
class G9 {
  /**
  Create an instance of this annotation.
  */
  of(e) {
    return new Hr(this, e);
  }
}
class U9 {
  /**
  @internal
  */
  constructor(e) {
    this.map = e;
  }
  /**
  Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
  type.
  */
  of(e) {
    return new Ve(this, e);
  }
}
class Ve {
  /**
  @internal
  */
  constructor(e, t) {
    this.type = e, this.value = t;
  }
  /**
  Map this effect through a position mapping. Will return
  `undefined` when that ends up deleting the effect.
  */
  map(e) {
    let t = this.type.map(this.value, e);
    return t === void 0 ? void 0 : t == this.value ? this : new Ve(this.type, t);
  }
  /**
  Tells you whether this effect object is of a given
  [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
  */
  is(e) {
    return this.type == e;
  }
  /**
  Define a new effect type. The type parameter indicates the type
  of values that his effect holds. It should be a type that
  doesn't include `undefined`, since that is used in
  [mapping](https://codemirror.net/6/docs/ref/#state.StateEffect.map) to indicate that an effect is
  removed.
  */
  static define(e = {}) {
    return new U9(e.map || ((t) => t));
  }
  /**
  Map an array of effects through a change set.
  */
  static mapEffects(e, t) {
    if (!e.length)
      return e;
    let i = [];
    for (let s of e) {
      let r = s.map(t);
      r && i.push(r);
    }
    return i;
  }
}
Ve.reconfigure = /* @__PURE__ */ Ve.define();
Ve.appendConfig = /* @__PURE__ */ Ve.define();
class en {
  constructor(e, t, i, s, r, o) {
    this.startState = e, this.changes = t, this.selection = i, this.effects = s, this.annotations = r, this.scrollIntoView = o, this._doc = null, this._state = null, i && mA(i, t.newLength), r.some((l) => l.type == en.time) || (this.annotations = r.concat(en.time.of(Date.now())));
  }
  /**
  @internal
  */
  static create(e, t, i, s, r, o) {
    return new en(e, t, i, s, r, o);
  }
  /**
  The new document produced by the transaction. Contrary to
  [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
  force the entire new state to be computed right away, so it is
  recommended that [transaction
  filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
  when they need to look at the new document.
  */
  get newDoc() {
    return this._doc || (this._doc = this.changes.apply(this.startState.doc));
  }
  /**
  The new selection produced by the transaction. If
  [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
  this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
  current selection through the changes made by the transaction.
  */
  get newSelection() {
    return this.selection || this.startState.selection.map(this.changes);
  }
  /**
  The new state created by the transaction. Computed on demand
  (but retained for subsequent access), so it is recommended not to
  access it in [transaction
  filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
  */
  get state() {
    return this._state || this.startState.applyTransaction(this), this._state;
  }
  /**
  Get the value of the given annotation type, if any.
  */
  annotation(e) {
    for (let t of this.annotations)
      if (t.type == e)
        return t.value;
  }
  /**
  Indicates whether the transaction changed the document.
  */
  get docChanged() {
    return !this.changes.empty;
  }
  /**
  Indicates whether this transaction reconfigures the state
  (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
  with a top-level configuration
  [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
  */
  get reconfigured() {
    return this.startState.config != this.state.config;
  }
  /**
  Returns true if the transaction has a [user
  event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to
  or more specific than `event`. For example, if the transaction
  has `"select.pointer"` as user event, `"select"` and
  `"select.pointer"` will match it.
  */
  isUserEvent(e) {
    let t = this.annotation(en.userEvent);
    return !!(t && (t == e || t.length > e.length && t.slice(0, e.length) == e && t[e.length] == "."));
  }
}
en.time = /* @__PURE__ */ Hr.define();
en.userEvent = /* @__PURE__ */ Hr.define();
en.addToHistory = /* @__PURE__ */ Hr.define();
en.remote = /* @__PURE__ */ Hr.define();
function K9(n, e) {
  let t = [];
  for (let i = 0, s = 0; ; ) {
    let r, o;
    if (i < n.length && (s == e.length || e[s] >= n[i]))
      r = n[i++], o = n[i++];
    else if (s < e.length)
      r = e[s++], o = e[s++];
    else
      return t;
    !t.length || t[t.length - 1] < r ? t.push(r, o) : t[t.length - 1] < o && (t[t.length - 1] = o);
  }
}
function CA(n, e, t) {
  var i;
  let s, r, o;
  return t ? (s = e.changes, r = dn.empty(e.changes.length), o = n.changes.compose(e.changes)) : (s = e.changes.map(n.changes), r = n.changes.mapDesc(e.changes, !0), o = n.changes.compose(s)), {
    changes: o,
    selection: e.selection ? e.selection.map(r) : (i = n.selection) === null || i === void 0 ? void 0 : i.map(s),
    effects: Ve.mapEffects(n.effects, s).concat(Ve.mapEffects(e.effects, r)),
    annotations: n.annotations.length ? n.annotations.concat(e.annotations) : e.annotations,
    scrollIntoView: n.scrollIntoView || e.scrollIntoView
  };
}
function z0(n, e, t) {
  let i = e.selection, s = Ca(e.annotations);
  return e.userEvent && (s = s.concat(en.userEvent.of(e.userEvent))), {
    changes: e.changes instanceof dn ? e.changes : dn.of(e.changes || [], t, n.facet(yA)),
    selection: i && (i instanceof J ? i : J.single(i.anchor, i.head)),
    effects: Ca(e.effects),
    annotations: s,
    scrollIntoView: !!e.scrollIntoView
  };
}
function kA(n, e, t) {
  let i = z0(n, e.length ? e[0] : {}, n.doc.length);
  e.length && e[0].filter === !1 && (t = !1);
  for (let r = 1; r < e.length; r++) {
    e[r].filter === !1 && (t = !1);
    let o = !!e[r].sequential;
    i = CA(i, z0(n, e[r], o ? i.changes.newLength : n.doc.length), o);
  }
  let s = en.create(n, i.changes, i.selection, i.effects, i.annotations, i.scrollIntoView);
  return eX(t ? J9(s) : s);
}
function J9(n) {
  let e = n.startState, t = !0;
  for (let s of e.facet(OA)) {
    let r = s(n);
    if (r === !1) {
      t = !1;
      break;
    }
    Array.isArray(r) && (t = t === !0 ? r : K9(t, r));
  }
  if (t !== !0) {
    let s, r;
    if (t === !1)
      r = n.changes.invertedDesc, s = dn.empty(e.doc.length);
    else {
      let o = n.changes.filter(t);
      s = o.changes, r = o.filtered.mapDesc(o.changes).invertedDesc;
    }
    n = en.create(e, s, n.selection && n.selection.map(r), Ve.mapEffects(n.effects, r), n.annotations, n.scrollIntoView);
  }
  let i = e.facet(wA);
  for (let s = i.length - 1; s >= 0; s--) {
    let r = i[s](n);
    r instanceof en ? n = r : Array.isArray(r) && r.length == 1 && r[0] instanceof en ? n = r[0] : n = kA(e, Ca(r), !1);
  }
  return n;
}
function eX(n) {
  let e = n.startState, t = e.facet(xA), i = n;
  for (let s = t.length - 1; s >= 0; s--) {
    let r = t[s](n);
    r && Object.keys(r).length && (i = CA(i, z0(e, r, n.changes.newLength), !0));
  }
  return i == n ? n : en.create(e, n.changes, n.selection, i.effects, i.annotations, i.scrollIntoView);
}
const tX = [];
function Ca(n) {
  return n == null ? tX : Array.isArray(n) ? n : [n];
}
var Nt = /* @__PURE__ */ function(n) {
  return n[n.Word = 0] = "Word", n[n.Space = 1] = "Space", n[n.Other = 2] = "Other", n;
}(Nt || (Nt = {}));
const nX = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
let Z0;
try {
  Z0 = /* @__PURE__ */ new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
} catch {
}
function iX(n) {
  if (Z0)
    return Z0.test(n);
  for (let e = 0; e < n.length; e++) {
    let t = n[e];
    if (/\w/.test(t) || t > "" && (t.toUpperCase() != t.toLowerCase() || nX.test(t)))
      return !0;
  }
  return !1;
}
function sX(n) {
  return (e) => {
    if (!/\S/.test(e))
      return Nt.Space;
    if (iX(e))
      return Nt.Word;
    for (let t = 0; t < n.length; t++)
      if (e.indexOf(n[t]) > -1)
        return Nt.Word;
    return Nt.Other;
  };
}
class at {
  constructor(e, t, i, s, r, o) {
    this.config = e, this.doc = t, this.selection = i, this.values = s, this.status = e.statusTemplate.slice(), this.computeSlot = r, o && (o._state = this);
    for (let l = 0; l < this.config.dynamicSlots.length; l++)
      Su(this, l << 1);
    this.computeSlot = null;
  }
  field(e, t = !0) {
    let i = this.config.address[e.id];
    if (i == null) {
      if (t)
        throw new RangeError("Field is not present in this state");
      return;
    }
    return Su(this, i), Fd(this, i);
  }
  /**
  Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
  state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
  can be passed. Unless
  [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
  [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
  are assumed to start in the _current_ document (not the document
  produced by previous specs), and its
  [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
  [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
  to the document created by its _own_ changes. The resulting
  transaction contains the combined effect of all the different
  specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
  specs take precedence over earlier ones.
  */
  update(...e) {
    return kA(this, e, !0);
  }
  /**
  @internal
  */
  applyTransaction(e) {
    let t = this.config, { base: i, compartments: s } = t;
    for (let l of e.effects)
      l.is(Jp.reconfigure) ? (t && (s = /* @__PURE__ */ new Map(), t.compartments.forEach((a, c) => s.set(c, a)), t = null), s.set(l.value.compartment, l.value.extension)) : l.is(Ve.reconfigure) ? (t = null, i = l.value) : l.is(Ve.appendConfig) && (t = null, i = Ca(i).concat(l.value));
    let r;
    t ? r = e.startState.values.slice() : (t = Zd.resolve(i, s, this), r = new at(t, this.doc, this.selection, t.dynamicSlots.map(() => null), (a, c) => c.reconfigure(a, this), null).values);
    let o = e.startState.facet(j0) ? e.newSelection : e.newSelection.asSingle();
    new at(t, e.newDoc, o, r, (l, a) => a.update(l, e), e);
  }
  /**
  Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
  replaces every selection range with the given content.
  */
  replaceSelection(e) {
    return typeof e == "string" && (e = this.toText(e)), this.changeByRange((t) => ({
      changes: { from: t.from, to: t.to, insert: e },
      range: J.cursor(t.from + e.length)
    }));
  }
  /**
  Create a set of changes and a new selection by running the given
  function for each range in the active selection. The function
  can return an optional set of changes (in the coordinate space
  of the start document), plus an updated range (in the coordinate
  space of the document produced by the call's own changes). This
  method will merge all the changes and ranges into a single
  changeset and selection, and return it as a [transaction
  spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
  [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
  */
  changeByRange(e) {
    let t = this.selection, i = e(t.ranges[0]), s = this.changes(i.changes), r = [i.range], o = Ca(i.effects);
    for (let l = 1; l < t.ranges.length; l++) {
      let a = e(t.ranges[l]), c = this.changes(a.changes), u = c.map(s);
      for (let f = 0; f < l; f++)
        r[f] = r[f].map(u);
      let h = s.mapDesc(c, !0);
      r.push(a.range.map(h)), s = s.compose(u), o = Ve.mapEffects(o, u).concat(Ve.mapEffects(Ca(a.effects), h));
    }
    return {
      changes: s,
      selection: J.create(r, t.mainIndex),
      effects: o
    };
  }
  /**
  Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
  description, taking the state's document length and line
  separator into account.
  */
  changes(e = []) {
    return e instanceof dn ? e : dn.of(e, this.doc.length, this.facet(at.lineSeparator));
  }
  /**
  Using the state's [line
  separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
  [`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.
  */
  toText(e) {
    return ut.of(e.split(this.facet(at.lineSeparator) || L0));
  }
  /**
  Return the given range of the document as a string.
  */
  sliceDoc(e = 0, t = this.doc.length) {
    return this.doc.sliceString(e, t, this.lineBreak);
  }
  /**
  Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
  */
  facet(e) {
    let t = this.config.address[e.id];
    return t == null ? e.default : (Su(this, t), Fd(this, t));
  }
  /**
  Convert this state to a JSON-serializable object. When custom
  fields should be serialized, you can pass them in as an object
  mapping property names (in the resulting object, which should
  not use `doc` or `selection`) to fields.
  */
  toJSON(e) {
    let t = {
      doc: this.sliceDoc(),
      selection: this.selection.toJSON()
    };
    if (e)
      for (let i in e) {
        let s = e[i];
        s instanceof Pn && this.config.address[s.id] != null && (t[i] = s.spec.toJSON(this.field(e[i]), this));
      }
    return t;
  }
  /**
  Deserialize a state from its JSON representation. When custom
  fields should be deserialized, pass the same object you passed
  to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
  third argument.
  */
  static fromJSON(e, t = {}, i) {
    if (!e || typeof e.doc != "string")
      throw new RangeError("Invalid JSON representation for EditorState");
    let s = [];
    if (i) {
      for (let r in i)
        if (Object.prototype.hasOwnProperty.call(e, r)) {
          let o = i[r], l = e[r];
          s.push(o.init((a) => o.spec.fromJSON(l, a)));
        }
    }
    return at.create({
      doc: e.doc,
      selection: J.fromJSON(e.selection),
      extensions: t.extensions ? s.concat([t.extensions]) : s
    });
  }
  /**
  Create a new state. You'll usually only need this when
  initializing an editor—updated states are created by applying
  transactions.
  */
  static create(e = {}) {
    let t = Zd.resolve(e.extensions || [], /* @__PURE__ */ new Map()), i = e.doc instanceof ut ? e.doc : ut.of((e.doc || "").split(t.staticFacet(at.lineSeparator) || L0)), s = e.selection ? e.selection instanceof J ? e.selection : J.single(e.selection.anchor, e.selection.head) : J.single(0);
    return mA(s, i.length), t.staticFacet(j0) || (s = s.asSingle()), new at(t, i, s, t.dynamicSlots.map(() => null), (r, o) => o.create(r), null);
  }
  /**
  The size (in columns) of a tab in the document, determined by
  the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
  */
  get tabSize() {
    return this.facet(at.tabSize);
  }
  /**
  Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
  string for this state.
  */
  get lineBreak() {
    return this.facet(at.lineSeparator) || `
`;
  }
  /**
  Returns true when the editor is
  [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.
  */
  get readOnly() {
    return this.facet(SA);
  }
  /**
  Look up a translation for the given phrase (via the
  [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
  original string if no translation is found.
  
  If additional arguments are passed, they will be inserted in
  place of markers like `$1` (for the first value) and `$2`, etc.
  A single `$` is equivalent to `$1`, and `$$` will produce a
  literal dollar sign.
  */
  phrase(e, ...t) {
    for (let i of this.facet(at.phrases))
      if (Object.prototype.hasOwnProperty.call(i, e)) {
        e = i[e];
        break;
      }
    return t.length && (e = e.replace(/\$(\$|\d*)/g, (i, s) => {
      if (s == "$")
        return "$";
      let r = +(s || 1);
      return !r || r > t.length ? i : t[r - 1];
    })), e;
  }
  /**
  Find the values for a given language data field, provided by the
  the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
  
  Examples of language data fields are...
  
  - [`"commentTokens"`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) for specifying
    comment syntax.
  - [`"autocomplete"`](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion^config.override)
    for providing language-specific completion sources.
  - [`"wordChars"`](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) for adding
    characters that should be considered part of words in this
    language.
  - [`"closeBrackets"`](https://codemirror.net/6/docs/ref/#autocomplete.CloseBracketConfig) controls
    bracket closing behavior.
  */
  languageDataAt(e, t, i = -1) {
    let s = [];
    for (let r of this.facet(vA))
      for (let o of r(this, t, i))
        Object.prototype.hasOwnProperty.call(o, e) && s.push(o[e]);
    return s;
  }
  /**
  Return a function that can categorize strings (expected to
  represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))
  into one of:
  
   - Word (contains an alphanumeric character or a character
     explicitly listed in the local language's `"wordChars"`
     language data, which should be a string)
   - Space (contains only whitespace)
   - Other (anything else)
  */
  charCategorizer(e) {
    return sX(this.languageDataAt("wordChars", e).join(""));
  }
  /**
  Find the word at the given position, meaning the range
  containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
  around it. If no word characters are adjacent to the position,
  this returns null.
  */
  wordAt(e) {
    let { text: t, from: i, length: s } = this.doc.lineAt(e), r = this.charCategorizer(e), o = e - i, l = e - i;
    for (; o > 0; ) {
      let a = Bn(t, o, !1);
      if (r(t.slice(a, o)) != Nt.Word)
        break;
      o = a;
    }
    for (; l < s; ) {
      let a = Bn(t, l);
      if (r(t.slice(l, a)) != Nt.Word)
        break;
      l = a;
    }
    return o == l ? null : J.range(o + i, l + i);
  }
}
at.allowMultipleSelections = j0;
at.tabSize = /* @__PURE__ */ we.define({
  combine: (n) => n.length ? n[0] : 4
});
at.lineSeparator = yA;
at.readOnly = SA;
at.phrases = /* @__PURE__ */ we.define({
  compare(n, e) {
    let t = Object.keys(n), i = Object.keys(e);
    return t.length == i.length && t.every((s) => n[s] == e[s]);
  }
});
at.languageData = vA;
at.changeFilter = OA;
at.transactionFilter = wA;
at.transactionExtender = xA;
Jp.reconfigure = /* @__PURE__ */ Ve.define();
function Or(n, e, t = {}) {
  let i = {};
  for (let s of n)
    for (let r of Object.keys(s)) {
      let o = s[r], l = i[r];
      if (l === void 0)
        i[r] = o;
      else if (!(l === o || o === void 0))
        if (Object.hasOwnProperty.call(t, r))
          i[r] = t[r](l, o);
        else
          throw new Error("Config merge conflict for field " + r);
    }
  for (let s in e)
    i[s] === void 0 && (i[s] = e[s]);
  return i;
}
class Ql {
  /**
  Compare this value with another value. Used when comparing
  rangesets. The default implementation compares by identity.
  Unless you are only creating a fixed number of unique instances
  of your value type, it is a good idea to implement this
  properly.
  */
  eq(e) {
    return this == e;
  }
  /**
  Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.
  */
  range(e, t = e) {
    return F0.create(e, t, this);
  }
}
Ql.prototype.startSide = Ql.prototype.endSide = 0;
Ql.prototype.point = !1;
Ql.prototype.mapMode = Nn.TrackDel;
let F0 = class PA {
  constructor(e, t, i) {
    this.from = e, this.to = t, this.value = i;
  }
  /**
  @internal
  */
  static create(e, t, i) {
    return new PA(e, t, i);
  }
};
function V0(n, e) {
  return n.from - e.from || n.value.startSide - e.value.startSide;
}
class ey {
  constructor(e, t, i, s) {
    this.from = e, this.to = t, this.value = i, this.maxPoint = s;
  }
  get length() {
    return this.to[this.to.length - 1];
  }
  // Find the index of the given position and side. Use the ranges'
  // `from` pos when `end == false`, `to` when `end == true`.
  findIndex(e, t, i, s = 0) {
    let r = i ? this.to : this.from;
    for (let o = s, l = r.length; ; ) {
      if (o == l)
        return o;
      let a = o + l >> 1, c = r[a] - e || (i ? this.value[a].endSide : this.value[a].startSide) - t;
      if (a == o)
        return c >= 0 ? o : l;
      c >= 0 ? l = a : o = a + 1;
    }
  }
  between(e, t, i, s) {
    for (let r = this.findIndex(t, -1e9, !0), o = this.findIndex(i, 1e9, !1, r); r < o; r++)
      if (s(this.from[r] + e, this.to[r] + e, this.value[r]) === !1)
        return !1;
  }
  map(e, t) {
    let i = [], s = [], r = [], o = -1, l = -1;
    for (let a = 0; a < this.value.length; a++) {
      let c = this.value[a], u = this.from[a] + e, h = this.to[a] + e, f, d;
      if (u == h) {
        let p = t.mapPos(u, c.startSide, c.mapMode);
        if (p == null || (f = d = p, c.startSide != c.endSide && (d = t.mapPos(u, c.endSide), d < f)))
          continue;
      } else if (f = t.mapPos(u, c.startSide), d = t.mapPos(h, c.endSide), f > d || f == d && c.startSide > 0 && c.endSide <= 0)
        continue;
      (d - f || c.endSide - c.startSide) < 0 || (o < 0 && (o = f), c.point && (l = Math.max(l, d - f)), i.push(c), s.push(f - o), r.push(d - o));
    }
    return { mapped: i.length ? new ey(s, r, i, l) : null, pos: o };
  }
}
class it {
  constructor(e, t, i, s) {
    this.chunkPos = e, this.chunk = t, this.nextLayer = i, this.maxPoint = s;
  }
  /**
  @internal
  */
  static create(e, t, i, s) {
    return new it(e, t, i, s);
  }
  /**
  @internal
  */
  get length() {
    let e = this.chunk.length - 1;
    return e < 0 ? 0 : Math.max(this.chunkEnd(e), this.nextLayer.length);
  }
  /**
  The number of ranges in the set.
  */
  get size() {
    if (this.isEmpty)
      return 0;
    let e = this.nextLayer.size;
    for (let t of this.chunk)
      e += t.value.length;
    return e;
  }
  /**
  @internal
  */
  chunkEnd(e) {
    return this.chunkPos[e] + this.chunk[e].length;
  }
  /**
  Update the range set, optionally adding new ranges or filtering
  out existing ones.
  
  (Note: The type parameter is just there as a kludge to work
  around TypeScript variance issues that prevented `RangeSet<X>`
  from being a subtype of `RangeSet<Y>` when `X` is a subtype of
  `Y`.)
  */
  update(e) {
    let { add: t = [], sort: i = !1, filterFrom: s = 0, filterTo: r = this.length } = e, o = e.filter;
    if (t.length == 0 && !o)
      return this;
    if (i && (t = t.slice().sort(V0)), this.isEmpty)
      return t.length ? it.of(t) : this;
    let l = new AA(this, null, -1).goto(0), a = 0, c = [], u = new Eo();
    for (; l.value || a < t.length; )
      if (a < t.length && (l.from - t[a].from || l.startSide - t[a].value.startSide) >= 0) {
        let h = t[a++];
        u.addInner(h.from, h.to, h.value) || c.push(h);
      } else
        l.rangeIndex == 1 && l.chunkIndex < this.chunk.length && (a == t.length || this.chunkEnd(l.chunkIndex) < t[a].from) && (!o || s > this.chunkEnd(l.chunkIndex) || r < this.chunkPos[l.chunkIndex]) && u.addChunk(this.chunkPos[l.chunkIndex], this.chunk[l.chunkIndex]) ? l.nextChunk() : ((!o || s > l.to || r < l.from || o(l.from, l.to, l.value)) && (u.addInner(l.from, l.to, l.value) || c.push(F0.create(l.from, l.to, l.value))), l.next());
    return u.finishInner(this.nextLayer.isEmpty && !c.length ? it.empty : this.nextLayer.update({ add: c, filter: o, filterFrom: s, filterTo: r }));
  }
  /**
  Map this range set through a set of changes, return the new set.
  */
  map(e) {
    if (e.empty || this.isEmpty)
      return this;
    let t = [], i = [], s = -1;
    for (let o = 0; o < this.chunk.length; o++) {
      let l = this.chunkPos[o], a = this.chunk[o], c = e.touchesRange(l, l + a.length);
      if (c === !1)
        s = Math.max(s, a.maxPoint), t.push(a), i.push(e.mapPos(l));
      else if (c === !0) {
        let { mapped: u, pos: h } = a.map(l, e);
        u && (s = Math.max(s, u.maxPoint), t.push(u), i.push(h));
      }
    }
    let r = this.nextLayer.map(e);
    return t.length == 0 ? r : new it(i, t, r || it.empty, s);
  }
  /**
  Iterate over the ranges that touch the region `from` to `to`,
  calling `f` for each. There is no guarantee that the ranges will
  be reported in any specific order. When the callback returns
  `false`, iteration stops.
  */
  between(e, t, i) {
    if (!this.isEmpty) {
      for (let s = 0; s < this.chunk.length; s++) {
        let r = this.chunkPos[s], o = this.chunk[s];
        if (t >= r && e <= r + o.length && o.between(r, e - r, t - r, i) === !1)
          return;
      }
      this.nextLayer.between(e, t, i);
    }
  }
  /**
  Iterate over the ranges in this set, in order, including all
  ranges that end at or after `from`.
  */
  iter(e = 0) {
    return Uu.from([this]).goto(e);
  }
  /**
  @internal
  */
  get isEmpty() {
    return this.nextLayer == this;
  }
  /**
  Iterate over the ranges in a collection of sets, in order,
  starting from `from`.
  */
  static iter(e, t = 0) {
    return Uu.from(e).goto(t);
  }
  /**
  Iterate over two groups of sets, calling methods on `comparator`
  to notify it of possible differences.
  */
  static compare(e, t, i, s, r = -1) {
    let o = e.filter((h) => h.maxPoint > 0 || !h.isEmpty && h.maxPoint >= r), l = t.filter((h) => h.maxPoint > 0 || !h.isEmpty && h.maxPoint >= r), a = $w(o, l, i), c = new Hc(o, a, r), u = new Hc(l, a, r);
    i.iterGaps((h, f, d) => Tw(c, h, u, f, d, s)), i.empty && i.length == 0 && Tw(c, 0, u, 0, 0, s);
  }
  /**
  Compare the contents of two groups of range sets, returning true
  if they are equivalent in the given range.
  */
  static eq(e, t, i = 0, s) {
    s == null && (s = 999999999);
    let r = e.filter((u) => !u.isEmpty && t.indexOf(u) < 0), o = t.filter((u) => !u.isEmpty && e.indexOf(u) < 0);
    if (r.length != o.length)
      return !1;
    if (!r.length)
      return !0;
    let l = $w(r, o), a = new Hc(r, l, 0).goto(i), c = new Hc(o, l, 0).goto(i);
    for (; ; ) {
      if (a.to != c.to || !q0(a.active, c.active) || a.point && (!c.point || !a.point.eq(c.point)))
        return !1;
      if (a.to > s)
        return !0;
      a.next(), c.next();
    }
  }
  /**
  Iterate over a group of range sets at the same time, notifying
  the iterator about the ranges covering every given piece of
  content. Returns the open count (see
  [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end
  of the iteration.
  */
  static spans(e, t, i, s, r = -1) {
    let o = new Hc(e, null, r).goto(t), l = t, a = o.openStart;
    for (; ; ) {
      let c = Math.min(o.to, i);
      if (o.point) {
        let u = o.activeForPoint(o.to), h = o.pointFrom < t ? u.length + 1 : o.point.startSide < 0 ? u.length : Math.min(u.length, a);
        s.point(l, c, o.point, u, h, o.pointRank), a = Math.min(o.openEnd(c), u.length);
      } else
        c > l && (s.span(l, c, o.active, a), a = o.openEnd(c));
      if (o.to > i)
        return a + (o.point && o.to > i ? 1 : 0);
      l = o.to, o.next();
    }
  }
  /**
  Create a range set for the given range or array of ranges. By
  default, this expects the ranges to be _sorted_ (by start
  position and, if two start at the same position,
  `value.startSide`). You can pass `true` as second argument to
  cause the method to sort them.
  */
  static of(e, t = !1) {
    let i = new Eo();
    for (let s of e instanceof F0 ? [e] : t ? rX(e) : e)
      i.add(s.from, s.to, s.value);
    return i.finish();
  }
  /**
  Join an array of range sets into a single set.
  */
  static join(e) {
    if (!e.length)
      return it.empty;
    let t = e[e.length - 1];
    for (let i = e.length - 2; i >= 0; i--)
      for (let s = e[i]; s != it.empty; s = s.nextLayer)
        t = new it(s.chunkPos, s.chunk, t, Math.max(s.maxPoint, t.maxPoint));
    return t;
  }
}
it.empty = /* @__PURE__ */ new it([], [], null, -1);
function rX(n) {
  if (n.length > 1)
    for (let e = n[0], t = 1; t < n.length; t++) {
      let i = n[t];
      if (V0(e, i) > 0)
        return n.slice().sort(V0);
      e = i;
    }
  return n;
}
it.empty.nextLayer = it.empty;
class Eo {
  finishChunk(e) {
    this.chunks.push(new ey(this.from, this.to, this.value, this.maxPoint)), this.chunkPos.push(this.chunkStart), this.chunkStart = -1, this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint), this.maxPoint = -1, e && (this.from = [], this.to = [], this.value = []);
  }
  /**
  Create an empty builder.
  */
  constructor() {
    this.chunks = [], this.chunkPos = [], this.chunkStart = -1, this.last = null, this.lastFrom = -1e9, this.lastTo = -1e9, this.from = [], this.to = [], this.value = [], this.maxPoint = -1, this.setMaxPoint = -1, this.nextLayer = null;
  }
  /**
  Add a range. Ranges should be added in sorted (by `from` and
  `value.startSide`) order.
  */
  add(e, t, i) {
    this.addInner(e, t, i) || (this.nextLayer || (this.nextLayer = new Eo())).add(e, t, i);
  }
  /**
  @internal
  */
  addInner(e, t, i) {
    let s = e - this.lastTo || i.startSide - this.last.endSide;
    if (s <= 0 && (e - this.lastFrom || i.startSide - this.last.startSide) < 0)
      throw new Error("Ranges must be added sorted by `from` position and `startSide`");
    return s < 0 ? !1 : (this.from.length == 250 && this.finishChunk(!0), this.chunkStart < 0 && (this.chunkStart = e), this.from.push(e - this.chunkStart), this.to.push(t - this.chunkStart), this.last = i, this.lastFrom = e, this.lastTo = t, this.value.push(i), i.point && (this.maxPoint = Math.max(this.maxPoint, t - e)), !0);
  }
  /**
  @internal
  */
  addChunk(e, t) {
    if ((e - this.lastTo || t.value[0].startSide - this.last.endSide) < 0)
      return !1;
    this.from.length && this.finishChunk(!0), this.setMaxPoint = Math.max(this.setMaxPoint, t.maxPoint), this.chunks.push(t), this.chunkPos.push(e);
    let i = t.value.length - 1;
    return this.last = t.value[i], this.lastFrom = t.from[i] + e, this.lastTo = t.to[i] + e, !0;
  }
  /**
  Finish the range set. Returns the new set. The builder can't be
  used anymore after this has been called.
  */
  finish() {
    return this.finishInner(it.empty);
  }
  /**
  @internal
  */
  finishInner(e) {
    if (this.from.length && this.finishChunk(!1), this.chunks.length == 0)
      return e;
    let t = it.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(e) : e, this.setMaxPoint);
    return this.from = null, t;
  }
}
function $w(n, e, t) {
  let i = /* @__PURE__ */ new Map();
  for (let r of n)
    for (let o = 0; o < r.chunk.length; o++)
      r.chunk[o].maxPoint <= 0 && i.set(r.chunk[o], r.chunkPos[o]);
  let s = /* @__PURE__ */ new Set();
  for (let r of e)
    for (let o = 0; o < r.chunk.length; o++) {
      let l = i.get(r.chunk[o]);
      l != null && (t ? t.mapPos(l) : l) == r.chunkPos[o] && !(t != null && t.touchesRange(l, l + r.chunk[o].length)) && s.add(r.chunk[o]);
    }
  return s;
}
class AA {
  constructor(e, t, i, s = 0) {
    this.layer = e, this.skip = t, this.minPoint = i, this.rank = s;
  }
  get startSide() {
    return this.value ? this.value.startSide : 0;
  }
  get endSide() {
    return this.value ? this.value.endSide : 0;
  }
  goto(e, t = -1e9) {
    return this.chunkIndex = this.rangeIndex = 0, this.gotoInner(e, t, !1), this;
  }
  gotoInner(e, t, i) {
    for (; this.chunkIndex < this.layer.chunk.length; ) {
      let s = this.layer.chunk[this.chunkIndex];
      if (!(this.skip && this.skip.has(s) || this.layer.chunkEnd(this.chunkIndex) < e || s.maxPoint < this.minPoint))
        break;
      this.chunkIndex++, i = !1;
    }
    if (this.chunkIndex < this.layer.chunk.length) {
      let s = this.layer.chunk[this.chunkIndex].findIndex(e - this.layer.chunkPos[this.chunkIndex], t, !0);
      (!i || this.rangeIndex < s) && this.setRangeIndex(s);
    }
    this.next();
  }
  forward(e, t) {
    (this.to - e || this.endSide - t) < 0 && this.gotoInner(e, t, !0);
  }
  next() {
    for (; ; )
      if (this.chunkIndex == this.layer.chunk.length) {
        this.from = this.to = 1e9, this.value = null;
        break;
      } else {
        let e = this.layer.chunkPos[this.chunkIndex], t = this.layer.chunk[this.chunkIndex], i = e + t.from[this.rangeIndex];
        if (this.from = i, this.to = e + t.to[this.rangeIndex], this.value = t.value[this.rangeIndex], this.setRangeIndex(this.rangeIndex + 1), this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)
          break;
      }
  }
  setRangeIndex(e) {
    if (e == this.layer.chunk[this.chunkIndex].value.length) {
      if (this.chunkIndex++, this.skip)
        for (; this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]); )
          this.chunkIndex++;
      this.rangeIndex = 0;
    } else
      this.rangeIndex = e;
  }
  nextChunk() {
    this.chunkIndex++, this.rangeIndex = 0, this.next();
  }
  compare(e) {
    return this.from - e.from || this.startSide - e.startSide || this.rank - e.rank || this.to - e.to || this.endSide - e.endSide;
  }
}
class Uu {
  constructor(e) {
    this.heap = e;
  }
  static from(e, t = null, i = -1) {
    let s = [];
    for (let r = 0; r < e.length; r++)
      for (let o = e[r]; !o.isEmpty; o = o.nextLayer)
        o.maxPoint >= i && s.push(new AA(o, t, i, r));
    return s.length == 1 ? s[0] : new Uu(s);
  }
  get startSide() {
    return this.value ? this.value.startSide : 0;
  }
  goto(e, t = -1e9) {
    for (let i of this.heap)
      i.goto(e, t);
    for (let i = this.heap.length >> 1; i >= 0; i--)
      sm(this.heap, i);
    return this.next(), this;
  }
  forward(e, t) {
    for (let i of this.heap)
      i.forward(e, t);
    for (let i = this.heap.length >> 1; i >= 0; i--)
      sm(this.heap, i);
    (this.to - e || this.value.endSide - t) < 0 && this.next();
  }
  next() {
    if (this.heap.length == 0)
      this.from = this.to = 1e9, this.value = null, this.rank = -1;
    else {
      let e = this.heap[0];
      this.from = e.from, this.to = e.to, this.value = e.value, this.rank = e.rank, e.value && e.next(), sm(this.heap, 0);
    }
  }
}
function sm(n, e) {
  for (let t = n[e]; ; ) {
    let i = (e << 1) + 1;
    if (i >= n.length)
      break;
    let s = n[i];
    if (i + 1 < n.length && s.compare(n[i + 1]) >= 0 && (s = n[i + 1], i++), t.compare(s) < 0)
      break;
    n[i] = t, n[e] = s, e = i;
  }
}
class Hc {
  constructor(e, t, i) {
    this.minPoint = i, this.active = [], this.activeTo = [], this.activeRank = [], this.minActive = -1, this.point = null, this.pointFrom = 0, this.pointRank = 0, this.to = -1e9, this.endSide = 0, this.openStart = -1, this.cursor = Uu.from(e, t, i);
  }
  goto(e, t = -1e9) {
    return this.cursor.goto(e, t), this.active.length = this.activeTo.length = this.activeRank.length = 0, this.minActive = -1, this.to = e, this.endSide = t, this.openStart = -1, this.next(), this;
  }
  forward(e, t) {
    for (; this.minActive > -1 && (this.activeTo[this.minActive] - e || this.active[this.minActive].endSide - t) < 0; )
      this.removeActive(this.minActive);
    this.cursor.forward(e, t);
  }
  removeActive(e) {
    Of(this.active, e), Of(this.activeTo, e), Of(this.activeRank, e), this.minActive = _w(this.active, this.activeTo);
  }
  addActive(e) {
    let t = 0, { value: i, to: s, rank: r } = this.cursor;
    for (; t < this.activeRank.length && (r - this.activeRank[t] || s - this.activeTo[t]) > 0; )
      t++;
    wf(this.active, t, i), wf(this.activeTo, t, s), wf(this.activeRank, t, r), e && wf(e, t, this.cursor.from), this.minActive = _w(this.active, this.activeTo);
  }
  // After calling this, if `this.point` != null, the next range is a
  // point. Otherwise, it's a regular range, covered by `this.active`.
  next() {
    let e = this.to, t = this.point;
    this.point = null;
    let i = this.openStart < 0 ? [] : null;
    for (; ; ) {
      let s = this.minActive;
      if (s > -1 && (this.activeTo[s] - this.cursor.from || this.active[s].endSide - this.cursor.startSide) < 0) {
        if (this.activeTo[s] > e) {
          this.to = this.activeTo[s], this.endSide = this.active[s].endSide;
          break;
        }
        this.removeActive(s), i && Of(i, s);
      } else if (this.cursor.value)
        if (this.cursor.from > e) {
          this.to = this.cursor.from, this.endSide = this.cursor.startSide;
          break;
        } else {
          let r = this.cursor.value;
          if (!r.point)
            this.addActive(i), this.cursor.next();
          else if (t && this.cursor.to == this.to && this.cursor.from < this.cursor.to)
            this.cursor.next();
          else {
            this.point = r, this.pointFrom = this.cursor.from, this.pointRank = this.cursor.rank, this.to = this.cursor.to, this.endSide = r.endSide, this.cursor.next(), this.forward(this.to, this.endSide);
            break;
          }
        }
      else {
        this.to = this.endSide = 1e9;
        break;
      }
    }
    if (i) {
      this.openStart = 0;
      for (let s = i.length - 1; s >= 0 && i[s] < e; s--)
        this.openStart++;
    }
  }
  activeForPoint(e) {
    if (!this.active.length)
      return this.active;
    let t = [];
    for (let i = this.active.length - 1; i >= 0 && !(this.activeRank[i] < this.pointRank); i--)
      (this.activeTo[i] > e || this.activeTo[i] == e && this.active[i].endSide >= this.point.endSide) && t.push(this.active[i]);
    return t.reverse();
  }
  openEnd(e) {
    let t = 0;
    for (let i = this.activeTo.length - 1; i >= 0 && this.activeTo[i] > e; i--)
      t++;
    return t;
  }
}
function Tw(n, e, t, i, s, r) {
  n.goto(e), t.goto(i);
  let o = i + s, l = i, a = i - e;
  for (; ; ) {
    let c = n.to + a - t.to || n.endSide - t.endSide, u = c < 0 ? n.to + a : t.to, h = Math.min(u, o);
    if (n.point || t.point ? n.point && t.point && (n.point == t.point || n.point.eq(t.point)) && q0(n.activeForPoint(n.to), t.activeForPoint(t.to)) || r.comparePoint(l, h, n.point, t.point) : h > l && !q0(n.active, t.active) && r.compareRange(l, h, n.active, t.active), u > o)
      break;
    l = u, c <= 0 && n.next(), c >= 0 && t.next();
  }
}
function q0(n, e) {
  if (n.length != e.length)
    return !1;
  for (let t = 0; t < n.length; t++)
    if (n[t] != e[t] && !n[t].eq(e[t]))
      return !1;
  return !0;
}
function Of(n, e) {
  for (let t = e, i = n.length - 1; t < i; t++)
    n[t] = n[t + 1];
  n.pop();
}
function wf(n, e, t) {
  for (let i = n.length - 1; i >= e; i--)
    n[i + 1] = n[i];
  n[e] = t;
}
function _w(n, e) {
  let t = -1, i = 1e9;
  for (let s = 0; s < e.length; s++)
    (e[s] - i || n[s].endSide - n[t].endSide) < 0 && (t = s, i = e[s]);
  return t;
}
function Mc(n, e, t = n.length) {
  let i = 0;
  for (let s = 0; s < t; )
    n.charCodeAt(s) == 9 ? (i += e - i % e, s++) : (i++, s = Bn(n, s));
  return i;
}
function W0(n, e, t, i) {
  for (let s = 0, r = 0; ; ) {
    if (r >= e)
      return s;
    if (s == n.length)
      break;
    r += n.charCodeAt(s) == 9 ? t - r % t : 1, s = Bn(n, s);
  }
  return i === !0 ? -1 : n.length;
}
const X0 = "ͼ", Mw = typeof Symbol > "u" ? "__" + X0 : Symbol.for(X0), Y0 = typeof Symbol > "u" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet"), Rw = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : {};
class $o {
  // :: (Object<Style>, ?{finish: ?(string) → string})
  // Create a style module from the given spec.
  //
  // When `finish` is given, it is called on regular (non-`@`)
  // selectors (after `&` expansion) to compute the final selector.
  constructor(e, t) {
    this.rules = [];
    let { finish: i } = t || {};
    function s(o) {
      return /^@/.test(o) ? [o] : o.split(/,\s*/);
    }
    function r(o, l, a, c) {
      let u = [], h = /^@(\w+)\b/.exec(o[0]), f = h && h[1] == "keyframes";
      if (h && l == null)
        return a.push(o[0] + ";");
      for (let d in l) {
        let p = l[d];
        if (/&/.test(d))
          r(
            d.split(/,\s*/).map((g) => o.map((m) => g.replace(/&/, m))).reduce((g, m) => g.concat(m)),
            p,
            a
          );
        else if (p && typeof p == "object") {
          if (!h)
            throw new RangeError("The value of a property (" + d + ") should be a primitive value.");
          r(s(d), p, u, f);
        } else
          p != null && u.push(d.replace(/_.*/, "").replace(/[A-Z]/g, (g) => "-" + g.toLowerCase()) + ": " + p + ";");
      }
      (u.length || f) && a.push((i && !h && !c ? o.map(i) : o).join(", ") + " {" + u.join(" ") + "}");
    }
    for (let o in e)
      r(s(o), e[o], this.rules);
  }
  // :: () → string
  // Returns a string containing the module's CSS rules.
  getRules() {
    return this.rules.join(`
`);
  }
  // :: () → string
  // Generate a new unique CSS class name.
  static newName() {
    let e = Rw[Mw] || 1;
    return Rw[Mw] = e + 1, X0 + e.toString(36);
  }
  // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>, ?{nonce: ?string})
  //
  // Mount the given set of modules in the given DOM root, which ensures
  // that the CSS rules defined by the module are available in that
  // context.
  //
  // Rules are only added to the document once per root.
  //
  // Rule order will follow the order of the modules, so that rules from
  // modules later in the array take precedence of those from earlier
  // modules. If you call this function multiple times for the same root
  // in a way that changes the order of already mounted modules, the old
  // order will be changed.
  //
  // If a Content Security Policy nonce is provided, it is added to
  // the `<style>` tag generated by the library.
  static mount(e, t, i) {
    let s = e[Y0], r = i && i.nonce;
    s ? r && s.setNonce(r) : s = new oX(e, r), s.mount(Array.isArray(t) ? t : [t]);
  }
}
let Dw = /* @__PURE__ */ new Map();
class oX {
  constructor(e, t) {
    let i = e.ownerDocument || e, s = i.defaultView;
    if (!e.head && e.adoptedStyleSheets && s.CSSStyleSheet) {
      let r = Dw.get(i);
      if (r)
        return e.adoptedStyleSheets = [r.sheet, ...e.adoptedStyleSheets], e[Y0] = r;
      this.sheet = new s.CSSStyleSheet(), e.adoptedStyleSheets = [this.sheet, ...e.adoptedStyleSheets], Dw.set(i, this);
    } else {
      this.styleTag = i.createElement("style"), t && this.styleTag.setAttribute("nonce", t);
      let r = e.head || e;
      r.insertBefore(this.styleTag, r.firstChild);
    }
    this.modules = [], e[Y0] = this;
  }
  mount(e) {
    let t = this.sheet, i = 0, s = 0;
    for (let r = 0; r < e.length; r++) {
      let o = e[r], l = this.modules.indexOf(o);
      if (l < s && l > -1 && (this.modules.splice(l, 1), s--, l = -1), l == -1) {
        if (this.modules.splice(s++, 0, o), t)
          for (let a = 0; a < o.rules.length; a++)
            t.insertRule(o.rules[a], i++);
      } else {
        for (; s < l; )
          i += this.modules[s++].rules.length;
        i += o.rules.length, s++;
      }
    }
    if (!t) {
      let r = "";
      for (let o = 0; o < this.modules.length; o++)
        r += this.modules[o].getRules() + `
`;
      this.styleTag.textContent = r;
    }
  }
  setNonce(e) {
    this.styleTag && this.styleTag.getAttribute("nonce") != e && this.styleTag.setAttribute("nonce", e);
  }
}
var To = {
  8: "Backspace",
  9: "Tab",
  10: "Enter",
  12: "NumLock",
  13: "Enter",
  16: "Shift",
  17: "Control",
  18: "Alt",
  20: "CapsLock",
  27: "Escape",
  32: " ",
  33: "PageUp",
  34: "PageDown",
  35: "End",
  36: "Home",
  37: "ArrowLeft",
  38: "ArrowUp",
  39: "ArrowRight",
  40: "ArrowDown",
  44: "PrintScreen",
  45: "Insert",
  46: "Delete",
  59: ";",
  61: "=",
  91: "Meta",
  92: "Meta",
  106: "*",
  107: "+",
  108: ",",
  109: "-",
  110: ".",
  111: "/",
  144: "NumLock",
  145: "ScrollLock",
  160: "Shift",
  161: "Shift",
  162: "Control",
  163: "Control",
  164: "Alt",
  165: "Alt",
  173: "-",
  186: ";",
  187: "=",
  188: ",",
  189: "-",
  190: ".",
  191: "/",
  192: "`",
  219: "[",
  220: "\\",
  221: "]",
  222: "'"
}, Ku = {
  48: ")",
  49: "!",
  50: "@",
  51: "#",
  52: "$",
  53: "%",
  54: "^",
  55: "&",
  56: "*",
  57: "(",
  59: ":",
  61: "+",
  173: "_",
  186: ":",
  187: "+",
  188: "<",
  189: "_",
  190: ">",
  191: "?",
  192: "~",
  219: "{",
  220: "|",
  221: "}",
  222: '"'
}, lX = typeof navigator < "u" && /Mac/.test(navigator.platform), aX = typeof navigator < "u" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
for (var Rn = 0; Rn < 10; Rn++)
  To[48 + Rn] = To[96 + Rn] = String(Rn);
for (var Rn = 1; Rn <= 24; Rn++)
  To[Rn + 111] = "F" + Rn;
for (var Rn = 65; Rn <= 90; Rn++)
  To[Rn] = String.fromCharCode(Rn + 32), Ku[Rn] = String.fromCharCode(Rn);
for (var rm in To)
  Ku.hasOwnProperty(rm) || (Ku[rm] = To[rm]);
function cX(n) {
  var e = lX && n.metaKey && n.shiftKey && !n.ctrlKey && !n.altKey || aX && n.shiftKey && n.key && n.key.length == 1 || n.key == "Unidentified", t = !e && n.key || (n.shiftKey ? Ku : To)[n.keyCode] || n.key || "Unidentified";
  return t == "Esc" && (t = "Escape"), t == "Del" && (t = "Delete"), t == "Left" && (t = "ArrowLeft"), t == "Up" && (t = "ArrowUp"), t == "Right" && (t = "ArrowRight"), t == "Down" && (t = "ArrowDown"), t;
}
function Vd(n) {
  let e;
  return n.nodeType == 11 ? e = n.getSelection ? n : n.ownerDocument : e = n, e.getSelection();
}
function H0(n, e) {
  return e ? n == e || n.contains(e.nodeType != 1 ? e.parentNode : e) : !1;
}
function uX(n) {
  let e = n.activeElement;
  for (; e && e.shadowRoot; )
    e = e.shadowRoot.activeElement;
  return e;
}
function md(n, e) {
  if (!e.anchorNode)
    return !1;
  try {
    return H0(n, e.anchorNode);
  } catch {
    return !1;
  }
}
function Ju(n) {
  return n.nodeType == 3 ? Bl(n, 0, n.nodeValue.length).getClientRects() : n.nodeType == 1 ? n.getClientRects() : [];
}
function Cu(n, e, t, i) {
  return t ? Lw(n, e, t, i, -1) || Lw(n, e, t, i, 1) : !1;
}
function eh(n) {
  for (var e = 0; ; e++)
    if (n = n.previousSibling, !n)
      return e;
}
function Lw(n, e, t, i, s) {
  for (; ; ) {
    if (n == t && e == i)
      return !0;
    if (e == (s < 0 ? 0 : Qr(n))) {
      if (n.nodeName == "DIV")
        return !1;
      let r = n.parentNode;
      if (!r || r.nodeType != 1)
        return !1;
      e = eh(n) + (s < 0 ? 0 : 1), n = r;
    } else if (n.nodeType == 1) {
      if (n = n.childNodes[e + (s < 0 ? -1 : 0)], n.nodeType == 1 && n.contentEditable == "false")
        return !1;
      e = s < 0 ? Qr(n) : 0;
    } else
      return !1;
  }
}
function Qr(n) {
  return n.nodeType == 3 ? n.nodeValue.length : n.childNodes.length;
}
function ty(n, e) {
  let t = e ? n.left : n.right;
  return { left: t, right: t, top: n.top, bottom: n.bottom };
}
function hX(n) {
  return {
    left: 0,
    right: n.innerWidth,
    top: 0,
    bottom: n.innerHeight
  };
}
function EA(n, e) {
  let t = e.width / n.offsetWidth, i = e.height / n.offsetHeight;
  return (t > 0.995 && t < 1.005 || !isFinite(t) || Math.abs(e.width - n.offsetWidth) < 1) && (t = 1), (i > 0.995 && i < 1.005 || !isFinite(i) || Math.abs(e.height - n.offsetHeight) < 1) && (i = 1), { scaleX: t, scaleY: i };
}
function fX(n, e, t, i, s, r, o, l) {
  let a = n.ownerDocument, c = a.defaultView || window;
  for (let u = n, h = !1; u && !h; )
    if (u.nodeType == 1) {
      let f, d = u == a.body, p = 1, g = 1;
      if (d)
        f = hX(c);
      else {
        if (/^(fixed|sticky)$/.test(getComputedStyle(u).position) && (h = !0), u.scrollHeight <= u.clientHeight && u.scrollWidth <= u.clientWidth) {
          u = u.assignedSlot || u.parentNode;
          continue;
        }
        let y = u.getBoundingClientRect();
        ({ scaleX: p, scaleY: g } = EA(u, y)), f = {
          left: y.left,
          right: y.left + u.clientWidth * p,
          top: y.top,
          bottom: y.top + u.clientHeight * g
        };
      }
      let m = 0, b = 0;
      if (s == "nearest")
        e.top < f.top ? (b = -(f.top - e.top + o), t > 0 && e.bottom > f.bottom + b && (b = e.bottom - f.bottom + b + o)) : e.bottom > f.bottom && (b = e.bottom - f.bottom + o, t < 0 && e.top - b < f.top && (b = -(f.top + b - e.top + o)));
      else {
        let y = e.bottom - e.top, v = f.bottom - f.top;
        b = (s == "center" && y <= v ? e.top + y / 2 - v / 2 : s == "start" || s == "center" && t < 0 ? e.top - o : e.bottom - v + o) - f.top;
      }
      if (i == "nearest" ? e.left < f.left ? (m = -(f.left - e.left + r), t > 0 && e.right > f.right + m && (m = e.right - f.right + m + r)) : e.right > f.right && (m = e.right - f.right + r, t < 0 && e.left < f.left + m && (m = -(f.left + m - e.left + r))) : m = (i == "center" ? e.left + (e.right - e.left) / 2 - (f.right - f.left) / 2 : i == "start" == l ? e.left - r : e.right - (f.right - f.left) + r) - f.left, m || b)
        if (d)
          c.scrollBy(m, b);
        else {
          let y = 0, v = 0;
          if (b) {
            let O = u.scrollTop;
            u.scrollTop += b / g, v = (u.scrollTop - O) * g;
          }
          if (m) {
            let O = u.scrollLeft;
            u.scrollLeft += m / p, y = (u.scrollLeft - O) * p;
          }
          e = {
            left: e.left - y,
            top: e.top - v,
            right: e.right - y,
            bottom: e.bottom - v
          }, y && Math.abs(y - m) < 1 && (i = "nearest"), v && Math.abs(v - b) < 1 && (s = "nearest");
        }
      if (d)
        break;
      u = u.assignedSlot || u.parentNode;
    } else if (u.nodeType == 11)
      u = u.host;
    else
      break;
}
function dX(n) {
  let e = n.ownerDocument;
  for (let t = n.parentNode; t && t != e.body; )
    if (t.nodeType == 1) {
      if (t.scrollHeight > t.clientHeight || t.scrollWidth > t.clientWidth)
        return t;
      t = t.assignedSlot || t.parentNode;
    } else if (t.nodeType == 11)
      t = t.host;
    else
      break;
  return null;
}
class pX {
  constructor() {
    this.anchorNode = null, this.anchorOffset = 0, this.focusNode = null, this.focusOffset = 0;
  }
  eq(e) {
    return this.anchorNode == e.anchorNode && this.anchorOffset == e.anchorOffset && this.focusNode == e.focusNode && this.focusOffset == e.focusOffset;
  }
  setRange(e) {
    let { anchorNode: t, focusNode: i } = e;
    this.set(t, Math.min(e.anchorOffset, t ? Qr(t) : 0), i, Math.min(e.focusOffset, i ? Qr(i) : 0));
  }
  set(e, t, i, s) {
    this.anchorNode = e, this.anchorOffset = t, this.focusNode = i, this.focusOffset = s;
  }
}
let la = null;
function $A(n) {
  if (n.setActive)
    return n.setActive();
  if (la)
    return n.focus(la);
  let e = [];
  for (let t = n; t && (e.push(t, t.scrollTop, t.scrollLeft), t != t.ownerDocument); t = t.parentNode)
    ;
  if (n.focus(la == null ? {
    get preventScroll() {
      return la = { preventScroll: !0 }, !0;
    }
  } : void 0), !la) {
    la = !1;
    for (let t = 0; t < e.length; ) {
      let i = e[t++], s = e[t++], r = e[t++];
      i.scrollTop != s && (i.scrollTop = s), i.scrollLeft != r && (i.scrollLeft = r);
    }
  }
}
let Nw;
function Bl(n, e, t = e) {
  let i = Nw || (Nw = document.createRange());
  return i.setEnd(n, t), i.setStart(n, e), i;
}
function ka(n, e, t) {
  let i = { key: e, code: e, keyCode: t, which: t, cancelable: !0 }, s = new KeyboardEvent("keydown", i);
  s.synthetic = !0, n.dispatchEvent(s);
  let r = new KeyboardEvent("keyup", i);
  return r.synthetic = !0, n.dispatchEvent(r), s.defaultPrevented || r.defaultPrevented;
}
function gX(n) {
  for (; n; ) {
    if (n && (n.nodeType == 9 || n.nodeType == 11 && n.host))
      return n;
    n = n.assignedSlot || n.parentNode;
  }
  return null;
}
function TA(n) {
  for (; n.attributes.length; )
    n.removeAttributeNode(n.attributes[0]);
}
function mX(n, e) {
  let t = e.focusNode, i = e.focusOffset;
  if (!t || e.anchorNode != t || e.anchorOffset != i)
    return !1;
  for (i = Math.min(i, Qr(t)); ; )
    if (i) {
      if (t.nodeType != 1)
        return !1;
      let s = t.childNodes[i - 1];
      s.contentEditable == "false" ? i-- : (t = s, i = Qr(t));
    } else {
      if (t == n)
        return !0;
      i = eh(t), t = t.parentNode;
    }
}
function _A(n) {
  return n.scrollTop > Math.max(1, n.scrollHeight - n.clientHeight - 4);
}
class qn {
  constructor(e, t, i = !0) {
    this.node = e, this.offset = t, this.precise = i;
  }
  static before(e, t) {
    return new qn(e.parentNode, eh(e), t);
  }
  static after(e, t) {
    return new qn(e.parentNode, eh(e) + 1, t);
  }
}
const ny = [];
class _t {
  constructor() {
    this.parent = null, this.dom = null, this.flags = 2;
  }
  get overrideDOMText() {
    return null;
  }
  get posAtStart() {
    return this.parent ? this.parent.posBefore(this) : 0;
  }
  get posAtEnd() {
    return this.posAtStart + this.length;
  }
  posBefore(e) {
    let t = this.posAtStart;
    for (let i of this.children) {
      if (i == e)
        return t;
      t += i.length + i.breakAfter;
    }
    throw new RangeError("Invalid child in posBefore");
  }
  posAfter(e) {
    return this.posBefore(e) + e.length;
  }
  sync(e, t) {
    if (this.flags & 2) {
      let i = this.dom, s = null, r;
      for (let o of this.children) {
        if (o.flags & 7) {
          if (!o.dom && (r = s ? s.nextSibling : i.firstChild)) {
            let l = _t.get(r);
            (!l || !l.parent && l.canReuseDOM(o)) && o.reuseDOM(r);
          }
          o.sync(e, t), o.flags &= -8;
        }
        if (r = s ? s.nextSibling : i.firstChild, t && !t.written && t.node == i && r != o.dom && (t.written = !0), o.dom.parentNode == i)
          for (; r && r != o.dom; )
            r = Iw(r);
        else
          i.insertBefore(o.dom, r);
        s = o.dom;
      }
      for (r = s ? s.nextSibling : i.firstChild, r && t && t.node == i && (t.written = !0); r; )
        r = Iw(r);
    } else if (this.flags & 1)
      for (let i of this.children)
        i.flags & 7 && (i.sync(e, t), i.flags &= -8);
  }
  reuseDOM(e) {
  }
  localPosFromDOM(e, t) {
    let i;
    if (e == this.dom)
      i = this.dom.childNodes[t];
    else {
      let s = Qr(e) == 0 ? 0 : t == 0 ? -1 : 1;
      for (; ; ) {
        let r = e.parentNode;
        if (r == this.dom)
          break;
        s == 0 && r.firstChild != r.lastChild && (e == r.firstChild ? s = -1 : s = 1), e = r;
      }
      s < 0 ? i = e : i = e.nextSibling;
    }
    if (i == this.dom.firstChild)
      return 0;
    for (; i && !_t.get(i); )
      i = i.nextSibling;
    if (!i)
      return this.length;
    for (let s = 0, r = 0; ; s++) {
      let o = this.children[s];
      if (o.dom == i)
        return r;
      r += o.length + o.breakAfter;
    }
  }
  domBoundsAround(e, t, i = 0) {
    let s = -1, r = -1, o = -1, l = -1;
    for (let a = 0, c = i, u = i; a < this.children.length; a++) {
      let h = this.children[a], f = c + h.length;
      if (c < e && f > t)
        return h.domBoundsAround(e, t, c);
      if (f >= e && s == -1 && (s = a, r = c), c > t && h.dom.parentNode == this.dom) {
        o = a, l = u;
        break;
      }
      u = f, c = f + h.breakAfter;
    }
    return {
      from: r,
      to: l < 0 ? i + this.length : l,
      startDOM: (s ? this.children[s - 1].dom.nextSibling : null) || this.dom.firstChild,
      endDOM: o < this.children.length && o >= 0 ? this.children[o].dom : null
    };
  }
  markDirty(e = !1) {
    this.flags |= 2, this.markParentsDirty(e);
  }
  markParentsDirty(e) {
    for (let t = this.parent; t; t = t.parent) {
      if (e && (t.flags |= 2), t.flags & 1)
        return;
      t.flags |= 1, e = !1;
    }
  }
  setParent(e) {
    this.parent != e && (this.parent = e, this.flags & 7 && this.markParentsDirty(!0));
  }
  setDOM(e) {
    this.dom != e && (this.dom && (this.dom.cmView = null), this.dom = e, e.cmView = this);
  }
  get rootView() {
    for (let e = this; ; ) {
      let t = e.parent;
      if (!t)
        return e;
      e = t;
    }
  }
  replaceChildren(e, t, i = ny) {
    this.markDirty();
    for (let s = e; s < t; s++) {
      let r = this.children[s];
      r.parent == this && i.indexOf(r) < 0 && r.destroy();
    }
    this.children.splice(e, t - e, ...i);
    for (let s = 0; s < i.length; s++)
      i[s].setParent(this);
  }
  ignoreMutation(e) {
    return !1;
  }
  ignoreEvent(e) {
    return !1;
  }
  childCursor(e = this.length) {
    return new MA(this.children, e, this.children.length);
  }
  childPos(e, t = 1) {
    return this.childCursor().findPos(e, t);
  }
  toString() {
    let e = this.constructor.name.replace("View", "");
    return e + (this.children.length ? "(" + this.children.join() + ")" : this.length ? "[" + (e == "Text" ? this.text : this.length) + "]" : "") + (this.breakAfter ? "#" : "");
  }
  static get(e) {
    return e.cmView;
  }
  get isEditable() {
    return !0;
  }
  get isWidget() {
    return !1;
  }
  get isHidden() {
    return !1;
  }
  merge(e, t, i, s, r, o) {
    return !1;
  }
  become(e) {
    return !1;
  }
  canReuseDOM(e) {
    return e.constructor == this.constructor && !((this.flags | e.flags) & 8);
  }
  // When this is a zero-length view with a side, this should return a
  // number <= 0 to indicate it is before its position, or a
  // number > 0 when after its position.
  getSide() {
    return 0;
  }
  destroy() {
    for (let e of this.children)
      e.parent == this && e.destroy();
    this.parent = null;
  }
}
_t.prototype.breakAfter = 0;
function Iw(n) {
  let e = n.nextSibling;
  return n.parentNode.removeChild(n), e;
}
class MA {
  constructor(e, t, i) {
    this.children = e, this.pos = t, this.i = i, this.off = 0;
  }
  findPos(e, t = 1) {
    for (; ; ) {
      if (e > this.pos || e == this.pos && (t > 0 || this.i == 0 || this.children[this.i - 1].breakAfter))
        return this.off = e - this.pos, this;
      let i = this.children[--this.i];
      this.pos -= i.length + i.breakAfter;
    }
  }
}
function RA(n, e, t, i, s, r, o, l, a) {
  let { children: c } = n, u = c.length ? c[e] : null, h = r.length ? r[r.length - 1] : null, f = h ? h.breakAfter : o;
  if (!(e == i && u && !o && !f && r.length < 2 && u.merge(t, s, r.length ? h : null, t == 0, l, a))) {
    if (i < c.length) {
      let d = c[i];
      d && (s < d.length || d.breakAfter && (h != null && h.breakAfter)) ? (e == i && (d = d.split(s), s = 0), !f && h && d.merge(0, s, h, !0, 0, a) ? r[r.length - 1] = d : ((s || d.children.length && !d.children[0].length) && d.merge(0, s, null, !1, 0, a), r.push(d))) : d != null && d.breakAfter && (h ? h.breakAfter = 1 : o = 1), i++;
    }
    for (u && (u.breakAfter = o, t > 0 && (!o && r.length && u.merge(t, u.length, r[0], !1, l, 0) ? u.breakAfter = r.shift().breakAfter : (t < u.length || u.children.length && u.children[u.children.length - 1].length == 0) && u.merge(t, u.length, null, !1, l, 0), e++)); e < i && r.length; )
      if (c[i - 1].become(r[r.length - 1]))
        i--, r.pop(), a = r.length ? 0 : l;
      else if (c[e].become(r[0]))
        e++, r.shift(), l = r.length ? 0 : a;
      else
        break;
    !r.length && e && i < c.length && !c[e - 1].breakAfter && c[i].merge(0, 0, c[e - 1], !1, l, a) && e--, (e < i || r.length) && n.replaceChildren(e, i, r);
  }
}
function DA(n, e, t, i, s, r) {
  let o = n.childCursor(), { i: l, off: a } = o.findPos(t, 1), { i: c, off: u } = o.findPos(e, -1), h = e - t;
  for (let f of i)
    h += f.length;
  n.length += h, RA(n, c, u, l, a, i, 0, s, r);
}
let Ri = typeof navigator < "u" ? navigator : { userAgent: "", vendor: "", platform: "" }, G0 = typeof document < "u" ? document : { documentElement: { style: {} } };
const U0 = /* @__PURE__ */ /Edge\/(\d+)/.exec(Ri.userAgent), LA = /* @__PURE__ */ /MSIE \d/.test(Ri.userAgent), K0 = /* @__PURE__ */ /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(Ri.userAgent), eg = !!(LA || K0 || U0), Qw = !eg && /* @__PURE__ */ /gecko\/(\d+)/i.test(Ri.userAgent), om = !eg && /* @__PURE__ */ /Chrome\/(\d+)/.exec(Ri.userAgent), Bw = "webkitFontSmoothing" in G0.documentElement.style, NA = !eg && /* @__PURE__ */ /Apple Computer/.test(Ri.vendor), jw = NA && (/* @__PURE__ */ /Mobile\/\w+/.test(Ri.userAgent) || Ri.maxTouchPoints > 2);
var xe = {
  mac: jw || /* @__PURE__ */ /Mac/.test(Ri.platform),
  windows: /* @__PURE__ */ /Win/.test(Ri.platform),
  linux: /* @__PURE__ */ /Linux|X11/.test(Ri.platform),
  ie: eg,
  ie_version: LA ? G0.documentMode || 6 : K0 ? +K0[1] : U0 ? +U0[1] : 0,
  gecko: Qw,
  gecko_version: Qw ? +(/* @__PURE__ */ /Firefox\/(\d+)/.exec(Ri.userAgent) || [0, 0])[1] : 0,
  chrome: !!om,
  chrome_version: om ? +om[1] : 0,
  ios: jw,
  android: /* @__PURE__ */ /Android\b/.test(Ri.userAgent),
  webkit: Bw,
  safari: NA,
  webkit_version: Bw ? +(/* @__PURE__ */ /\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0,
  tabSize: G0.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
};
const bX = 256;
class Br extends _t {
  constructor(e) {
    super(), this.text = e;
  }
  get length() {
    return this.text.length;
  }
  createDOM(e) {
    this.setDOM(e || document.createTextNode(this.text));
  }
  sync(e, t) {
    this.dom || this.createDOM(), this.dom.nodeValue != this.text && (t && t.node == this.dom && (t.written = !0), this.dom.nodeValue = this.text);
  }
  reuseDOM(e) {
    e.nodeType == 3 && this.createDOM(e);
  }
  merge(e, t, i) {
    return this.flags & 8 || i && (!(i instanceof Br) || this.length - (t - e) + i.length > bX || i.flags & 8) ? !1 : (this.text = this.text.slice(0, e) + (i ? i.text : "") + this.text.slice(t), this.markDirty(), !0);
  }
  split(e) {
    let t = new Br(this.text.slice(e));
    return this.text = this.text.slice(0, e), this.markDirty(), t.flags |= this.flags & 8, t;
  }
  localPosFromDOM(e, t) {
    return e == this.dom ? t : t ? this.text.length : 0;
  }
  domAtPos(e) {
    return new qn(this.dom, e);
  }
  domBoundsAround(e, t, i) {
    return { from: i, to: i + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };
  }
  coordsAt(e, t) {
    return vX(this.dom, e, t);
  }
}
class jr extends _t {
  constructor(e, t = [], i = 0) {
    super(), this.mark = e, this.children = t, this.length = i;
    for (let s of t)
      s.setParent(this);
  }
  setAttrs(e) {
    if (TA(e), this.mark.class && (e.className = this.mark.class), this.mark.attrs)
      for (let t in this.mark.attrs)
        e.setAttribute(t, this.mark.attrs[t]);
    return e;
  }
  canReuseDOM(e) {
    return super.canReuseDOM(e) && !((this.flags | e.flags) & 8);
  }
  reuseDOM(e) {
    e.nodeName == this.mark.tagName.toUpperCase() && (this.setDOM(e), this.flags |= 6);
  }
  sync(e, t) {
    this.dom ? this.flags & 4 && this.setAttrs(this.dom) : this.setDOM(this.setAttrs(document.createElement(this.mark.tagName))), super.sync(e, t);
  }
  merge(e, t, i, s, r, o) {
    return i && (!(i instanceof jr && i.mark.eq(this.mark)) || e && r <= 0 || t < this.length && o <= 0) ? !1 : (DA(this, e, t, i ? i.children.slice() : [], r - 1, o - 1), this.markDirty(), !0);
  }
  split(e) {
    let t = [], i = 0, s = -1, r = 0;
    for (let l of this.children) {
      let a = i + l.length;
      a > e && t.push(i < e ? l.split(e - i) : l), s < 0 && i >= e && (s = r), i = a, r++;
    }
    let o = this.length - e;
    return this.length = e, s > -1 && (this.children.length = s, this.markDirty()), new jr(this.mark, t, o);
  }
  domAtPos(e) {
    return IA(this, e);
  }
  coordsAt(e, t) {
    return BA(this, e, t);
  }
}
function vX(n, e, t) {
  let i = n.nodeValue.length;
  e > i && (e = i);
  let s = e, r = e, o = 0;
  e == 0 && t < 0 || e == i && t >= 0 ? xe.chrome || xe.gecko || (e ? (s--, o = 1) : r < i && (r++, o = -1)) : t < 0 ? s-- : r < i && r++;
  let l = Bl(n, s, r).getClientRects();
  if (!l.length)
    return null;
  let a = l[(o ? o < 0 : t >= 0) ? 0 : l.length - 1];
  return xe.safari && !o && a.width == 0 && (a = Array.prototype.find.call(l, (c) => c.width) || a), o ? ty(a, o < 0) : a || null;
}
class Oo extends _t {
  static create(e, t, i) {
    return new Oo(e, t, i);
  }
  constructor(e, t, i) {
    super(), this.widget = e, this.length = t, this.side = i, this.prevWidget = null;
  }
  split(e) {
    let t = Oo.create(this.widget, this.length - e, this.side);
    return this.length -= e, t;
  }
  sync(e) {
    (!this.dom || !this.widget.updateDOM(this.dom, e)) && (this.dom && this.prevWidget && this.prevWidget.destroy(this.dom), this.prevWidget = null, this.setDOM(this.widget.toDOM(e)), this.widget.editable || (this.dom.contentEditable = "false"));
  }
  getSide() {
    return this.side;
  }
  merge(e, t, i, s, r, o) {
    return i && (!(i instanceof Oo) || !this.widget.compare(i.widget) || e > 0 && r <= 0 || t < this.length && o <= 0) ? !1 : (this.length = e + (i ? i.length : 0) + (this.length - t), !0);
  }
  become(e) {
    return e instanceof Oo && e.side == this.side && this.widget.constructor == e.widget.constructor ? (this.widget.compare(e.widget) || this.markDirty(!0), this.dom && !this.prevWidget && (this.prevWidget = this.widget), this.widget = e.widget, this.length = e.length, !0) : !1;
  }
  ignoreMutation() {
    return !0;
  }
  ignoreEvent(e) {
    return this.widget.ignoreEvent(e);
  }
  get overrideDOMText() {
    if (this.length == 0)
      return ut.empty;
    let e = this;
    for (; e.parent; )
      e = e.parent;
    let { view: t } = e, i = t && t.state.doc, s = this.posAtStart;
    return i ? i.slice(s, s + this.length) : ut.empty;
  }
  domAtPos(e) {
    return (this.length ? e == 0 : this.side > 0) ? qn.before(this.dom) : qn.after(this.dom, e == this.length);
  }
  domBoundsAround() {
    return null;
  }
  coordsAt(e, t) {
    let i = this.widget.coordsAt(this.dom, e, t);
    if (i)
      return i;
    let s = this.dom.getClientRects(), r = null;
    if (!s.length)
      return null;
    let o = this.side ? this.side < 0 : e > 0;
    for (let l = o ? s.length - 1 : 0; r = s[l], !(e > 0 ? l == 0 : l == s.length - 1 || r.top < r.bottom); l += o ? -1 : 1)
      ;
    return ty(r, !o);
  }
  get isEditable() {
    return !1;
  }
  get isWidget() {
    return !0;
  }
  get isHidden() {
    return this.widget.isHidden;
  }
  destroy() {
    super.destroy(), this.dom && this.widget.destroy(this.dom);
  }
}
class Ja extends _t {
  constructor(e) {
    super(), this.side = e;
  }
  get length() {
    return 0;
  }
  merge() {
    return !1;
  }
  become(e) {
    return e instanceof Ja && e.side == this.side;
  }
  split() {
    return new Ja(this.side);
  }
  sync() {
    if (!this.dom) {
      let e = document.createElement("img");
      e.className = "cm-widgetBuffer", e.setAttribute("aria-hidden", "true"), this.setDOM(e);
    }
  }
  getSide() {
    return this.side;
  }
  domAtPos(e) {
    return this.side > 0 ? qn.before(this.dom) : qn.after(this.dom);
  }
  localPosFromDOM() {
    return 0;
  }
  domBoundsAround() {
    return null;
  }
  coordsAt(e) {
    return this.dom.getBoundingClientRect();
  }
  get overrideDOMText() {
    return ut.empty;
  }
  get isHidden() {
    return !0;
  }
}
Br.prototype.children = Oo.prototype.children = Ja.prototype.children = ny;
function IA(n, e) {
  let t = n.dom, { children: i } = n, s = 0;
  for (let r = 0; s < i.length; s++) {
    let o = i[s], l = r + o.length;
    if (!(l == r && o.getSide() <= 0)) {
      if (e > r && e < l && o.dom.parentNode == t)
        return o.domAtPos(e - r);
      if (e <= r)
        break;
      r = l;
    }
  }
  for (let r = s; r > 0; r--) {
    let o = i[r - 1];
    if (o.dom.parentNode == t)
      return o.domAtPos(o.length);
  }
  for (let r = s; r < i.length; r++) {
    let o = i[r];
    if (o.dom.parentNode == t)
      return o.domAtPos(0);
  }
  return new qn(t, 0);
}
function QA(n, e, t) {
  let i, { children: s } = n;
  t > 0 && e instanceof jr && s.length && (i = s[s.length - 1]) instanceof jr && i.mark.eq(e.mark) ? QA(i, e.children[0], t - 1) : (s.push(e), e.setParent(n)), n.length += e.length;
}
function BA(n, e, t) {
  let i = null, s = -1, r = null, o = -1;
  function l(c, u) {
    for (let h = 0, f = 0; h < c.children.length && f <= u; h++) {
      let d = c.children[h], p = f + d.length;
      p >= u && (d.children.length ? l(d, u - f) : (!r || r.isHidden && t > 0) && (p > u || f == p && d.getSide() > 0) ? (r = d, o = u - f) : (f < u || f == p && d.getSide() < 0 && !d.isHidden) && (i = d, s = u - f)), f = p;
    }
  }
  l(n, e);
  let a = (t < 0 ? i : r) || i || r;
  return a ? a.coordsAt(Math.max(0, a == i ? s : o), t) : yX(n);
}
function yX(n) {
  let e = n.dom.lastChild;
  if (!e)
    return n.dom.getBoundingClientRect();
  let t = Ju(e);
  return t[t.length - 1] || null;
}
function J0(n, e) {
  for (let t in n)
    t == "class" && e.class ? e.class += " " + n.class : t == "style" && e.style ? e.style += ";" + n.style : e[t] = n[t];
  return e;
}
const zw = /* @__PURE__ */ Object.create(null);
function iy(n, e, t) {
  if (n == e)
    return !0;
  n || (n = zw), e || (e = zw);
  let i = Object.keys(n), s = Object.keys(e);
  if (i.length - (t && i.indexOf(t) > -1 ? 1 : 0) != s.length - (t && s.indexOf(t) > -1 ? 1 : 0))
    return !1;
  for (let r of i)
    if (r != t && (s.indexOf(r) == -1 || n[r] !== e[r]))
      return !1;
  return !0;
}
function eb(n, e, t) {
  let i = !1;
  if (e)
    for (let s in e)
      t && s in t || (i = !0, s == "style" ? n.style.cssText = "" : n.removeAttribute(s));
  if (t)
    for (let s in t)
      e && e[s] == t[s] || (i = !0, s == "style" ? n.style.cssText = t[s] : n.setAttribute(s, t[s]));
  return i;
}
function OX(n) {
  let e = /* @__PURE__ */ Object.create(null);
  for (let t = 0; t < n.attributes.length; t++) {
    let i = n.attributes[t];
    e[i.name] = i.value;
  }
  return e;
}
class hn extends _t {
  constructor() {
    super(...arguments), this.children = [], this.length = 0, this.prevAttrs = void 0, this.attrs = null, this.breakAfter = 0;
  }
  // Consumes source
  merge(e, t, i, s, r, o) {
    if (i) {
      if (!(i instanceof hn))
        return !1;
      this.dom || i.transferDOM(this);
    }
    return s && this.setDeco(i ? i.attrs : null), DA(this, e, t, i ? i.children.slice() : [], r, o), !0;
  }
  split(e) {
    let t = new hn();
    if (t.breakAfter = this.breakAfter, this.length == 0)
      return t;
    let { i, off: s } = this.childPos(e);
    s && (t.append(this.children[i].split(s), 0), this.children[i].merge(s, this.children[i].length, null, !1, 0, 0), i++);
    for (let r = i; r < this.children.length; r++)
      t.append(this.children[r], 0);
    for (; i > 0 && this.children[i - 1].length == 0; )
      this.children[--i].destroy();
    return this.children.length = i, this.markDirty(), this.length = e, t;
  }
  transferDOM(e) {
    this.dom && (this.markDirty(), e.setDOM(this.dom), e.prevAttrs = this.prevAttrs === void 0 ? this.attrs : this.prevAttrs, this.prevAttrs = void 0, this.dom = null);
  }
  setDeco(e) {
    iy(this.attrs, e) || (this.dom && (this.prevAttrs = this.attrs, this.markDirty()), this.attrs = e);
  }
  append(e, t) {
    QA(this, e, t);
  }
  // Only called when building a line view in ContentBuilder
  addLineDeco(e) {
    let t = e.spec.attributes, i = e.spec.class;
    t && (this.attrs = J0(t, this.attrs || {})), i && (this.attrs = J0({ class: i }, this.attrs || {}));
  }
  domAtPos(e) {
    return IA(this, e);
  }
  reuseDOM(e) {
    e.nodeName == "DIV" && (this.setDOM(e), this.flags |= 6);
  }
  sync(e, t) {
    var i;
    this.dom ? this.flags & 4 && (TA(this.dom), this.dom.className = "cm-line", this.prevAttrs = this.attrs ? null : void 0) : (this.setDOM(document.createElement("div")), this.dom.className = "cm-line", this.prevAttrs = this.attrs ? null : void 0), this.prevAttrs !== void 0 && (eb(this.dom, this.prevAttrs, this.attrs), this.dom.classList.add("cm-line"), this.prevAttrs = void 0), super.sync(e, t);
    let s = this.dom.lastChild;
    for (; s && _t.get(s) instanceof jr; )
      s = s.lastChild;
    if (!s || !this.length || s.nodeName != "BR" && ((i = _t.get(s)) === null || i === void 0 ? void 0 : i.isEditable) == !1 && (!xe.ios || !this.children.some((r) => r instanceof Br))) {
      let r = document.createElement("BR");
      r.cmIgnore = !0, this.dom.appendChild(r);
    }
  }
  measureTextSize() {
    if (this.children.length == 0 || this.length > 20)
      return null;
    let e = 0, t;
    for (let i of this.children) {
      if (!(i instanceof Br) || /[^ -~]/.test(i.text))
        return null;
      let s = Ju(i.dom);
      if (s.length != 1)
        return null;
      e += s[0].width, t = s[0].height;
    }
    return e ? {
      lineHeight: this.dom.getBoundingClientRect().height,
      charWidth: e / this.length,
      textHeight: t
    } : null;
  }
  coordsAt(e, t) {
    let i = BA(this, e, t);
    if (!this.children.length && i && this.parent) {
      let { heightOracle: s } = this.parent.view.viewState, r = i.bottom - i.top;
      if (Math.abs(r - s.lineHeight) < 2 && s.textHeight < r) {
        let o = (r - s.textHeight) / 2;
        return { top: i.top + o, bottom: i.bottom - o, left: i.left, right: i.left };
      }
    }
    return i;
  }
  become(e) {
    return !1;
  }
  covers() {
    return !0;
  }
  static find(e, t) {
    for (let i = 0, s = 0; i < e.children.length; i++) {
      let r = e.children[i], o = s + r.length;
      if (o >= t) {
        if (r instanceof hn)
          return r;
        if (o > t)
          break;
      }
      s = o + r.breakAfter;
    }
    return null;
  }
}
class Co extends _t {
  constructor(e, t, i) {
    super(), this.widget = e, this.length = t, this.deco = i, this.breakAfter = 0, this.prevWidget = null;
  }
  merge(e, t, i, s, r, o) {
    return i && (!(i instanceof Co) || !this.widget.compare(i.widget) || e > 0 && r <= 0 || t < this.length && o <= 0) ? !1 : (this.length = e + (i ? i.length : 0) + (this.length - t), !0);
  }
  domAtPos(e) {
    return e == 0 ? qn.before(this.dom) : qn.after(this.dom, e == this.length);
  }
  split(e) {
    let t = this.length - e;
    this.length = e;
    let i = new Co(this.widget, t, this.deco);
    return i.breakAfter = this.breakAfter, i;
  }
  get children() {
    return ny;
  }
  sync(e) {
    (!this.dom || !this.widget.updateDOM(this.dom, e)) && (this.dom && this.prevWidget && this.prevWidget.destroy(this.dom), this.prevWidget = null, this.setDOM(this.widget.toDOM(e)), this.widget.editable || (this.dom.contentEditable = "false"));
  }
  get overrideDOMText() {
    return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : ut.empty;
  }
  domBoundsAround() {
    return null;
  }
  become(e) {
    return e instanceof Co && e.widget.constructor == this.widget.constructor ? (e.widget.compare(this.widget) || this.markDirty(!0), this.dom && !this.prevWidget && (this.prevWidget = this.widget), this.widget = e.widget, this.length = e.length, this.deco = e.deco, this.breakAfter = e.breakAfter, !0) : !1;
  }
  ignoreMutation() {
    return !0;
  }
  ignoreEvent(e) {
    return this.widget.ignoreEvent(e);
  }
  get isEditable() {
    return !1;
  }
  get isWidget() {
    return !0;
  }
  coordsAt(e, t) {
    return this.widget.coordsAt(this.dom, e, t);
  }
  destroy() {
    super.destroy(), this.dom && this.widget.destroy(this.dom);
  }
  covers(e) {
    let { startSide: t, endSide: i } = this.deco;
    return t == i ? !1 : e < 0 ? t < 0 : i > 0;
  }
}
class Gr {
  /**
  Compare this instance to another instance of the same type.
  (TypeScript can't express this, but only instances of the same
  specific class will be passed to this method.) This is used to
  avoid redrawing widgets when they are replaced by a new
  decoration of the same type. The default implementation just
  returns `false`, which will cause new instances of the widget to
  always be redrawn.
  */
  eq(e) {
    return !1;
  }
  /**
  Update a DOM element created by a widget of the same type (but
  different, non-`eq` content) to reflect this widget. May return
  true to indicate that it could update, false to indicate it
  couldn't (in which case the widget will be redrawn). The default
  implementation just returns false.
  */
  updateDOM(e, t) {
    return !1;
  }
  /**
  @internal
  */
  compare(e) {
    return this == e || this.constructor == e.constructor && this.eq(e);
  }
  /**
  The estimated height this widget will have, to be used when
  estimating the height of content that hasn't been drawn. May
  return -1 to indicate you don't know. The default implementation
  returns -1.
  */
  get estimatedHeight() {
    return -1;
  }
  /**
  For inline widgets that are displayed inline (as opposed to
  `inline-block`) and introduce line breaks (through `<br>` tags
  or textual newlines), this must indicate the amount of line
  breaks they introduce. Defaults to 0.
  */
  get lineBreaks() {
    return 0;
  }
  /**
  Can be used to configure which kinds of events inside the widget
  should be ignored by the editor. The default is to ignore all
  events.
  */
  ignoreEvent(e) {
    return !0;
  }
  /**
  Override the way screen coordinates for positions at/in the
  widget are found. `pos` will be the offset into the widget, and
  `side` the side of the position that is being queried—less than
  zero for before, greater than zero for after, and zero for
  directly at that position.
  */
  coordsAt(e, t, i) {
    return null;
  }
  /**
  @internal
  */
  get isHidden() {
    return !1;
  }
  /**
  @internal
  */
  get editable() {
    return !1;
  }
  /**
  This is called when the an instance of the widget is removed
  from the editor view.
  */
  destroy(e) {
  }
}
var ei = /* @__PURE__ */ function(n) {
  return n[n.Text = 0] = "Text", n[n.WidgetBefore = 1] = "WidgetBefore", n[n.WidgetAfter = 2] = "WidgetAfter", n[n.WidgetRange = 3] = "WidgetRange", n;
}(ei || (ei = {}));
class Te extends Ql {
  constructor(e, t, i, s) {
    super(), this.startSide = e, this.endSide = t, this.widget = i, this.spec = s;
  }
  /**
  @internal
  */
  get heightRelevant() {
    return !1;
  }
  /**
  Create a mark decoration, which influences the styling of the
  content in its range. Nested mark decorations will cause nested
  DOM elements to be created. Nesting order is determined by
  precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with
  the higher-precedence decorations creating the inner DOM nodes.
  Such elements are split on line boundaries and on the boundaries
  of lower-precedence decorations.
  */
  static mark(e) {
    return new Xh(e);
  }
  /**
  Create a widget decoration, which displays a DOM element at the
  given position.
  */
  static widget(e) {
    let t = Math.max(-1e4, Math.min(1e4, e.side || 0)), i = !!e.block;
    return t += i && !e.inlineOrder ? t > 0 ? 3e8 : -4e8 : t > 0 ? 1e8 : -1e8, new _o(e, t, t, i, e.widget || null, !1);
  }
  /**
  Create a replace decoration which replaces the given range with
  a widget, or simply hides it.
  */
  static replace(e) {
    let t = !!e.block, i, s;
    if (e.isBlockGap)
      i = -5e8, s = 4e8;
    else {
      let { start: r, end: o } = jA(e, t);
      i = (r ? t ? -3e8 : -1 : 5e8) - 1, s = (o ? t ? 2e8 : 1 : -6e8) + 1;
    }
    return new _o(e, i, s, t, e.widget || null, !0);
  }
  /**
  Create a line decoration, which can add DOM attributes to the
  line starting at the given position.
  */
  static line(e) {
    return new Yh(e);
  }
  /**
  Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
  decorated range or ranges. If the ranges aren't already sorted,
  pass `true` for `sort` to make the library sort them for you.
  */
  static set(e, t = !1) {
    return it.of(e, t);
  }
  /**
  @internal
  */
  hasHeight() {
    return this.widget ? this.widget.estimatedHeight > -1 : !1;
  }
}
Te.none = it.empty;
class Xh extends Te {
  constructor(e) {
    let { start: t, end: i } = jA(e);
    super(t ? -1 : 5e8, i ? 1 : -6e8, null, e), this.tagName = e.tagName || "span", this.class = e.class || "", this.attrs = e.attributes || null;
  }
  eq(e) {
    var t, i;
    return this == e || e instanceof Xh && this.tagName == e.tagName && (this.class || ((t = this.attrs) === null || t === void 0 ? void 0 : t.class)) == (e.class || ((i = e.attrs) === null || i === void 0 ? void 0 : i.class)) && iy(this.attrs, e.attrs, "class");
  }
  range(e, t = e) {
    if (e >= t)
      throw new RangeError("Mark decorations may not be empty");
    return super.range(e, t);
  }
}
Xh.prototype.point = !1;
class Yh extends Te {
  constructor(e) {
    super(-2e8, -2e8, null, e);
  }
  eq(e) {
    return e instanceof Yh && this.spec.class == e.spec.class && iy(this.spec.attributes, e.spec.attributes);
  }
  range(e, t = e) {
    if (t != e)
      throw new RangeError("Line decoration ranges must be zero-length");
    return super.range(e, t);
  }
}
Yh.prototype.mapMode = Nn.TrackBefore;
Yh.prototype.point = !0;
class _o extends Te {
  constructor(e, t, i, s, r, o) {
    super(t, i, r, e), this.block = s, this.isReplace = o, this.mapMode = s ? t <= 0 ? Nn.TrackBefore : Nn.TrackAfter : Nn.TrackDel;
  }
  // Only relevant when this.block == true
  get type() {
    return this.startSide != this.endSide ? ei.WidgetRange : this.startSide <= 0 ? ei.WidgetBefore : ei.WidgetAfter;
  }
  get heightRelevant() {
    return this.block || !!this.widget && (this.widget.estimatedHeight >= 5 || this.widget.lineBreaks > 0);
  }
  eq(e) {
    return e instanceof _o && wX(this.widget, e.widget) && this.block == e.block && this.startSide == e.startSide && this.endSide == e.endSide;
  }
  range(e, t = e) {
    if (this.isReplace && (e > t || e == t && this.startSide > 0 && this.endSide <= 0))
      throw new RangeError("Invalid range for replacement decoration");
    if (!this.isReplace && t != e)
      throw new RangeError("Widget decorations can only have zero-length ranges");
    return super.range(e, t);
  }
}
_o.prototype.point = !0;
function jA(n, e = !1) {
  let { inclusiveStart: t, inclusiveEnd: i } = n;
  return t == null && (t = n.inclusive), i == null && (i = n.inclusive), { start: t ?? e, end: i ?? e };
}
function wX(n, e) {
  return n == e || !!(n && e && n.compare(e));
}
function tb(n, e, t, i = 0) {
  let s = t.length - 1;
  s >= 0 && t[s] + i >= n ? t[s] = Math.max(t[s], e) : t.push(n, e);
}
class ku {
  constructor(e, t, i, s) {
    this.doc = e, this.pos = t, this.end = i, this.disallowBlockEffectsFor = s, this.content = [], this.curLine = null, this.breakAtStart = 0, this.pendingBuffer = 0, this.bufferMarks = [], this.atCursorPos = !0, this.openStart = -1, this.openEnd = -1, this.text = "", this.textOff = 0, this.cursor = e.iter(), this.skip = t;
  }
  posCovered() {
    if (this.content.length == 0)
      return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
    let e = this.content[this.content.length - 1];
    return !(e.breakAfter || e instanceof Co && e.deco.endSide < 0);
  }
  getLine() {
    return this.curLine || (this.content.push(this.curLine = new hn()), this.atCursorPos = !0), this.curLine;
  }
  flushBuffer(e = this.bufferMarks) {
    this.pendingBuffer && (this.curLine.append(xf(new Ja(-1), e), e.length), this.pendingBuffer = 0);
  }
  addBlockWidget(e) {
    this.flushBuffer(), this.curLine = null, this.content.push(e);
  }
  finish(e) {
    this.pendingBuffer && e <= this.bufferMarks.length ? this.flushBuffer() : this.pendingBuffer = 0, !this.posCovered() && !(e && this.content.length && this.content[this.content.length - 1] instanceof Co) && this.getLine();
  }
  buildText(e, t, i) {
    for (; e > 0; ) {
      if (this.textOff == this.text.length) {
        let { value: r, lineBreak: o, done: l } = this.cursor.next(this.skip);
        if (this.skip = 0, l)
          throw new Error("Ran out of text content when drawing inline views");
        if (o) {
          this.posCovered() || this.getLine(), this.content.length ? this.content[this.content.length - 1].breakAfter = 1 : this.breakAtStart = 1, this.flushBuffer(), this.curLine = null, this.atCursorPos = !0, e--;
          continue;
        } else
          this.text = r, this.textOff = 0;
      }
      let s = Math.min(
        this.text.length - this.textOff,
        e,
        512
        /* T.Chunk */
      );
      this.flushBuffer(t.slice(t.length - i)), this.getLine().append(xf(new Br(this.text.slice(this.textOff, this.textOff + s)), t), i), this.atCursorPos = !0, this.textOff += s, e -= s, i = 0;
    }
  }
  span(e, t, i, s) {
    this.buildText(t - e, i, s), this.pos = t, this.openStart < 0 && (this.openStart = s);
  }
  point(e, t, i, s, r, o) {
    if (this.disallowBlockEffectsFor[o] && i instanceof _o) {
      if (i.block)
        throw new RangeError("Block decorations may not be specified via plugins");
      if (t > this.doc.lineAt(this.pos).to)
        throw new RangeError("Decorations that replace line breaks may not be specified via plugins");
    }
    let l = t - e;
    if (i instanceof _o)
      if (i.block)
        i.startSide > 0 && !this.posCovered() && this.getLine(), this.addBlockWidget(new Co(i.widget || new Zw("div"), l, i));
      else {
        let a = Oo.create(i.widget || new Zw("span"), l, l ? 0 : i.startSide), c = this.atCursorPos && !a.isEditable && r <= s.length && (e < t || i.startSide > 0), u = !a.isEditable && (e < t || r > s.length || i.startSide <= 0), h = this.getLine();
        this.pendingBuffer == 2 && !c && !a.isEditable && (this.pendingBuffer = 0), this.flushBuffer(s), c && (h.append(xf(new Ja(1), s), r), r = s.length + Math.max(0, r - s.length)), h.append(xf(a, s), r), this.atCursorPos = u, this.pendingBuffer = u ? e < t || r > s.length ? 1 : 2 : 0, this.pendingBuffer && (this.bufferMarks = s.slice());
      }
    else
      this.doc.lineAt(this.pos).from == this.pos && this.getLine().addLineDeco(i);
    l && (this.textOff + l <= this.text.length ? this.textOff += l : (this.skip += l - (this.text.length - this.textOff), this.text = "", this.textOff = 0), this.pos = t), this.openStart < 0 && (this.openStart = r);
  }
  static build(e, t, i, s, r) {
    let o = new ku(e, t, i, r);
    return o.openEnd = it.spans(s, t, i, o), o.openStart < 0 && (o.openStart = o.openEnd), o.finish(o.openEnd), o;
  }
}
function xf(n, e) {
  for (let t of e)
    n = new jr(t, [n], n.length);
  return n;
}
class Zw extends Gr {
  constructor(e) {
    super(), this.tag = e;
  }
  eq(e) {
    return e.tag == this.tag;
  }
  toDOM() {
    return document.createElement(this.tag);
  }
  updateDOM(e) {
    return e.nodeName.toLowerCase() == this.tag;
  }
  get isHidden() {
    return !0;
  }
}
var Rt = /* @__PURE__ */ function(n) {
  return n[n.LTR = 0] = "LTR", n[n.RTL = 1] = "RTL", n;
}(Rt || (Rt = {}));
const jl = Rt.LTR, sy = Rt.RTL;
function zA(n) {
  let e = [];
  for (let t = 0; t < n.length; t++)
    e.push(1 << +n[t]);
  return e;
}
const xX = /* @__PURE__ */ zA("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008"), SX = /* @__PURE__ */ zA("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333"), nb = /* @__PURE__ */ Object.create(null), Zs = [];
for (let n of ["()", "[]", "{}"]) {
  let e = /* @__PURE__ */ n.charCodeAt(0), t = /* @__PURE__ */ n.charCodeAt(1);
  nb[e] = t, nb[t] = -e;
}
function ZA(n) {
  return n <= 247 ? xX[n] : 1424 <= n && n <= 1524 ? 2 : 1536 <= n && n <= 1785 ? SX[n - 1536] : 1774 <= n && n <= 2220 ? 4 : 8192 <= n && n <= 8204 ? 256 : 64336 <= n && n <= 65023 ? 4 : 1;
}
const CX = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;
class wo {
  /**
  The direction of this span.
  */
  get dir() {
    return this.level % 2 ? sy : jl;
  }
  /**
  @internal
  */
  constructor(e, t, i) {
    this.from = e, this.to = t, this.level = i;
  }
  /**
  @internal
  */
  side(e, t) {
    return this.dir == t == e ? this.to : this.from;
  }
  /**
  @internal
  */
  forward(e, t) {
    return e == (this.dir == t);
  }
  /**
  @internal
  */
  static find(e, t, i, s) {
    let r = -1;
    for (let o = 0; o < e.length; o++) {
      let l = e[o];
      if (l.from <= t && l.to >= t) {
        if (l.level == i)
          return o;
        (r < 0 || (s != 0 ? s < 0 ? l.from < t : l.to > t : e[r].level > l.level)) && (r = o);
      }
    }
    if (r < 0)
      throw new RangeError("Index out of range");
    return r;
  }
}
function FA(n, e) {
  if (n.length != e.length)
    return !1;
  for (let t = 0; t < n.length; t++) {
    let i = n[t], s = e[t];
    if (i.from != s.from || i.to != s.to || i.direction != s.direction || !FA(i.inner, s.inner))
      return !1;
  }
  return !0;
}
const wt = [];
function kX(n, e, t, i, s) {
  for (let r = 0; r <= i.length; r++) {
    let o = r ? i[r - 1].to : e, l = r < i.length ? i[r].from : t, a = r ? 256 : s;
    for (let c = o, u = a, h = a; c < l; c++) {
      let f = ZA(n.charCodeAt(c));
      f == 512 ? f = u : f == 8 && h == 4 && (f = 16), wt[c] = f == 4 ? 2 : f, f & 7 && (h = f), u = f;
    }
    for (let c = o, u = a, h = a; c < l; c++) {
      let f = wt[c];
      if (f == 128)
        c < l - 1 && u == wt[c + 1] && u & 24 ? f = wt[c] = u : wt[c] = 256;
      else if (f == 64) {
        let d = c + 1;
        for (; d < l && wt[d] == 64; )
          d++;
        let p = c && u == 8 || d < t && wt[d] == 8 ? h == 1 ? 1 : 8 : 256;
        for (let g = c; g < d; g++)
          wt[g] = p;
        c = d - 1;
      } else
        f == 8 && h == 1 && (wt[c] = 1);
      u = f, f & 7 && (h = f);
    }
  }
}
function PX(n, e, t, i, s) {
  let r = s == 1 ? 2 : 1;
  for (let o = 0, l = 0, a = 0; o <= i.length; o++) {
    let c = o ? i[o - 1].to : e, u = o < i.length ? i[o].from : t;
    for (let h = c, f, d, p; h < u; h++)
      if (d = nb[f = n.charCodeAt(h)])
        if (d < 0) {
          for (let g = l - 3; g >= 0; g -= 3)
            if (Zs[g + 1] == -d) {
              let m = Zs[g + 2], b = m & 2 ? s : m & 4 ? m & 1 ? r : s : 0;
              b && (wt[h] = wt[Zs[g]] = b), l = g;
              break;
            }
        } else {
          if (Zs.length == 189)
            break;
          Zs[l++] = h, Zs[l++] = f, Zs[l++] = a;
        }
      else if ((p = wt[h]) == 2 || p == 1) {
        let g = p == s;
        a = g ? 0 : 1;
        for (let m = l - 3; m >= 0; m -= 3) {
          let b = Zs[m + 2];
          if (b & 2)
            break;
          if (g)
            Zs[m + 2] |= 2;
          else {
            if (b & 4)
              break;
            Zs[m + 2] |= 4;
          }
        }
      }
  }
}
function AX(n, e, t, i) {
  for (let s = 0, r = i; s <= t.length; s++) {
    let o = s ? t[s - 1].to : n, l = s < t.length ? t[s].from : e;
    for (let a = o; a < l; ) {
      let c = wt[a];
      if (c == 256) {
        let u = a + 1;
        for (; ; )
          if (u == l) {
            if (s == t.length)
              break;
            u = t[s++].to, l = s < t.length ? t[s].from : e;
          } else if (wt[u] == 256)
            u++;
          else
            break;
        let h = r == 1, f = (u < e ? wt[u] : i) == 1, d = h == f ? h ? 1 : 2 : i;
        for (let p = u, g = s, m = g ? t[g - 1].to : n; p > a; )
          p == m && (p = t[--g].from, m = g ? t[g - 1].to : n), wt[--p] = d;
        a = u;
      } else
        r = c, a++;
    }
  }
}
function ib(n, e, t, i, s, r, o) {
  let l = i % 2 ? 2 : 1;
  if (i % 2 == s % 2)
    for (let a = e, c = 0; a < t; ) {
      let u = !0, h = !1;
      if (c == r.length || a < r[c].from) {
        let g = wt[a];
        g != l && (u = !1, h = g == 16);
      }
      let f = !u && l == 1 ? [] : null, d = u ? i : i + 1, p = a;
      e:
        for (; ; )
          if (c < r.length && p == r[c].from) {
            if (h)
              break e;
            let g = r[c];
            if (!u)
              for (let m = g.to, b = c + 1; ; ) {
                if (m == t)
                  break e;
                if (b < r.length && r[b].from == m)
                  m = r[b++].to;
                else {
                  if (wt[m] == l)
                    break e;
                  break;
                }
              }
            if (c++, f)
              f.push(g);
            else {
              g.from > a && o.push(new wo(a, g.from, d));
              let m = g.direction == jl != !(d % 2);
              sb(n, m ? i + 1 : i, s, g.inner, g.from, g.to, o), a = g.to;
            }
            p = g.to;
          } else {
            if (p == t || (u ? wt[p] != l : wt[p] == l))
              break;
            p++;
          }
      f ? ib(n, a, p, i + 1, s, f, o) : a < p && o.push(new wo(a, p, d)), a = p;
    }
  else
    for (let a = t, c = r.length; a > e; ) {
      let u = !0, h = !1;
      if (!c || a > r[c - 1].to) {
        let g = wt[a - 1];
        g != l && (u = !1, h = g == 16);
      }
      let f = !u && l == 1 ? [] : null, d = u ? i : i + 1, p = a;
      e:
        for (; ; )
          if (c && p == r[c - 1].to) {
            if (h)
              break e;
            let g = r[--c];
            if (!u)
              for (let m = g.from, b = c; ; ) {
                if (m == e)
                  break e;
                if (b && r[b - 1].to == m)
                  m = r[--b].from;
                else {
                  if (wt[m - 1] == l)
                    break e;
                  break;
                }
              }
            if (f)
              f.push(g);
            else {
              g.to < a && o.push(new wo(g.to, a, d));
              let m = g.direction == jl != !(d % 2);
              sb(n, m ? i + 1 : i, s, g.inner, g.from, g.to, o), a = g.from;
            }
            p = g.from;
          } else {
            if (p == e || (u ? wt[p - 1] != l : wt[p - 1] == l))
              break;
            p--;
          }
      f ? ib(n, p, a, i + 1, s, f, o) : p < a && o.push(new wo(p, a, d)), a = p;
    }
}
function sb(n, e, t, i, s, r, o) {
  let l = e % 2 ? 2 : 1;
  kX(n, s, r, i, l), PX(n, s, r, i, l), AX(s, r, i, l), ib(n, s, r, e, t, i, o);
}
function EX(n, e, t) {
  if (!n)
    return [new wo(0, 0, e == sy ? 1 : 0)];
  if (e == jl && !t.length && !CX.test(n))
    return VA(n.length);
  if (t.length)
    for (; n.length > wt.length; )
      wt[wt.length] = 256;
  let i = [], s = e == jl ? 0 : 1;
  return sb(n, s, s, t, 0, n.length, i), i;
}
function VA(n) {
  return [new wo(0, n, 0)];
}
let qA = "";
function $X(n, e, t, i, s) {
  var r;
  let o = i.head - n.from, l = wo.find(e, o, (r = i.bidiLevel) !== null && r !== void 0 ? r : -1, i.assoc), a = e[l], c = a.side(s, t);
  if (o == c) {
    let f = l += s ? 1 : -1;
    if (f < 0 || f >= e.length)
      return null;
    a = e[l = f], o = a.side(!s, t), c = a.side(s, t);
  }
  let u = Bn(n.text, o, a.forward(s, t));
  (u < a.from || u > a.to) && (u = c), qA = n.text.slice(Math.min(o, u), Math.max(o, u));
  let h = l == (s ? e.length - 1 : 0) ? null : e[l + (s ? 1 : -1)];
  return h && u == c && h.level + (s ? 0 : 1) < a.level ? J.cursor(h.side(!s, t) + n.from, h.forward(s, t) ? 1 : -1, h.level) : J.cursor(u + n.from, a.forward(s, t) ? -1 : 1, a.level);
}
function TX(n, e, t) {
  for (let i = e; i < t; i++) {
    let s = ZA(n.charCodeAt(i));
    if (s == 1)
      return jl;
    if (s == 2 || s == 4)
      return sy;
  }
  return jl;
}
const WA = /* @__PURE__ */ we.define(), XA = /* @__PURE__ */ we.define(), YA = /* @__PURE__ */ we.define(), HA = /* @__PURE__ */ we.define(), rb = /* @__PURE__ */ we.define(), GA = /* @__PURE__ */ we.define(), UA = /* @__PURE__ */ we.define(), KA = /* @__PURE__ */ we.define({
  combine: (n) => n.some((e) => e)
}), JA = /* @__PURE__ */ we.define({
  combine: (n) => n.some((e) => e)
});
class Pa {
  constructor(e, t = "nearest", i = "nearest", s = 5, r = 5, o = !1) {
    this.range = e, this.y = t, this.x = i, this.yMargin = s, this.xMargin = r, this.isSnapshot = o;
  }
  map(e) {
    return e.empty ? this : new Pa(this.range.map(e), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
  }
  clip(e) {
    return this.range.to <= e.doc.length ? this : new Pa(J.cursor(e.doc.length), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
  }
}
const Sf = /* @__PURE__ */ Ve.define({ map: (n, e) => n.map(e) });
function Ki(n, e, t) {
  let i = n.facet(HA);
  i.length ? i[0](e) : window.onerror ? window.onerror(String(e), t, void 0, void 0, e) : t ? console.error(t + ":", e) : console.error(e);
}
const tg = /* @__PURE__ */ we.define({ combine: (n) => n.length ? n[0] : !0 });
let _X = 0;
const su = /* @__PURE__ */ we.define();
class on {
  constructor(e, t, i, s, r) {
    this.id = e, this.create = t, this.domEventHandlers = i, this.domEventObservers = s, this.extension = r(this);
  }
  /**
  Define a plugin from a constructor function that creates the
  plugin's value, given an editor view.
  */
  static define(e, t) {
    const { eventHandlers: i, eventObservers: s, provide: r, decorations: o } = t || {};
    return new on(_X++, e, i, s, (l) => {
      let a = [su.of(l)];
      return o && a.push(th.of((c) => {
        let u = c.plugin(l);
        return u ? o(u) : Te.none;
      })), r && a.push(r(l)), a;
    });
  }
  /**
  Create a plugin for a class whose constructor takes a single
  editor view as argument.
  */
  static fromClass(e, t) {
    return on.define((i) => new e(i), t);
  }
}
class lm {
  constructor(e) {
    this.spec = e, this.mustUpdate = null, this.value = null;
  }
  update(e) {
    if (this.value) {
      if (this.mustUpdate) {
        let t = this.mustUpdate;
        if (this.mustUpdate = null, this.value.update)
          try {
            this.value.update(t);
          } catch (i) {
            if (Ki(t.state, i, "CodeMirror plugin crashed"), this.value.destroy)
              try {
                this.value.destroy();
              } catch {
              }
            this.deactivate();
          }
      }
    } else if (this.spec)
      try {
        this.value = this.spec.create(e);
      } catch (t) {
        Ki(e.state, t, "CodeMirror plugin crashed"), this.deactivate();
      }
    return this;
  }
  destroy(e) {
    var t;
    if (!((t = this.value) === null || t === void 0) && t.destroy)
      try {
        this.value.destroy();
      } catch (i) {
        Ki(e.state, i, "CodeMirror plugin crashed");
      }
  }
  deactivate() {
    this.spec = this.value = null;
  }
}
const eE = /* @__PURE__ */ we.define(), ry = /* @__PURE__ */ we.define(), th = /* @__PURE__ */ we.define(), tE = /* @__PURE__ */ we.define(), oy = /* @__PURE__ */ we.define(), nE = /* @__PURE__ */ we.define();
function Fw(n, e) {
  let t = n.state.facet(nE);
  if (!t.length)
    return t;
  let i = t.map((r) => r instanceof Function ? r(n) : r), s = [];
  return it.spans(i, e.from, e.to, {
    point() {
    },
    span(r, o, l, a) {
      let c = r - e.from, u = o - e.from, h = s;
      for (let f = l.length - 1; f >= 0; f--, a--) {
        let d = l[f].spec.bidiIsolate, p;
        if (d == null && (d = TX(e.text, c, u)), a > 0 && h.length && (p = h[h.length - 1]).to == c && p.direction == d)
          p.to = u, h = p.inner;
        else {
          let g = { from: c, to: u, direction: d, inner: [] };
          h.push(g), h = g.inner;
        }
      }
    }
  }), s;
}
const iE = /* @__PURE__ */ we.define();
function sE(n) {
  let e = 0, t = 0, i = 0, s = 0;
  for (let r of n.state.facet(iE)) {
    let o = r(n);
    o && (o.left != null && (e = Math.max(e, o.left)), o.right != null && (t = Math.max(t, o.right)), o.top != null && (i = Math.max(i, o.top)), o.bottom != null && (s = Math.max(s, o.bottom)));
  }
  return { left: e, right: t, top: i, bottom: s };
}
const ru = /* @__PURE__ */ we.define();
class Ji {
  constructor(e, t, i, s) {
    this.fromA = e, this.toA = t, this.fromB = i, this.toB = s;
  }
  join(e) {
    return new Ji(Math.min(this.fromA, e.fromA), Math.max(this.toA, e.toA), Math.min(this.fromB, e.fromB), Math.max(this.toB, e.toB));
  }
  addToSet(e) {
    let t = e.length, i = this;
    for (; t > 0; t--) {
      let s = e[t - 1];
      if (!(s.fromA > i.toA)) {
        if (s.toA < i.fromA)
          break;
        i = i.join(s), e.splice(t - 1, 1);
      }
    }
    return e.splice(t, 0, i), e;
  }
  static extendWithRanges(e, t) {
    if (t.length == 0)
      return e;
    let i = [];
    for (let s = 0, r = 0, o = 0, l = 0; ; s++) {
      let a = s == e.length ? null : e[s], c = o - l, u = a ? a.fromB : 1e9;
      for (; r < t.length && t[r] < u; ) {
        let h = t[r], f = t[r + 1], d = Math.max(l, h), p = Math.min(u, f);
        if (d <= p && new Ji(d + c, p + c, d, p).addToSet(i), f > u)
          break;
        r += 2;
      }
      if (!a)
        return i;
      new Ji(a.fromA, a.toA, a.fromB, a.toB).addToSet(i), o = a.toA, l = a.toB;
    }
  }
}
class qd {
  constructor(e, t, i) {
    this.view = e, this.state = t, this.transactions = i, this.flags = 0, this.startState = e.state, this.changes = dn.empty(this.startState.doc.length);
    for (let r of i)
      this.changes = this.changes.compose(r.changes);
    let s = [];
    this.changes.iterChangedRanges((r, o, l, a) => s.push(new Ji(r, o, l, a))), this.changedRanges = s;
  }
  /**
  @internal
  */
  static create(e, t, i) {
    return new qd(e, t, i);
  }
  /**
  Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or
  [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this
  update.
  */
  get viewportChanged() {
    return (this.flags & 4) > 0;
  }
  /**
  Indicates whether the height of a block element in the editor
  changed in this update.
  */
  get heightChanged() {
    return (this.flags & 2) > 0;
  }
  /**
  Returns true when the document was modified or the size of the
  editor, or elements within the editor, changed.
  */
  get geometryChanged() {
    return this.docChanged || (this.flags & 10) > 0;
  }
  /**
  True when this update indicates a focus change.
  */
  get focusChanged() {
    return (this.flags & 1) > 0;
  }
  /**
  Whether the document changed in this update.
  */
  get docChanged() {
    return !this.changes.empty;
  }
  /**
  Whether the selection was explicitly set in this update.
  */
  get selectionSet() {
    return this.transactions.some((e) => e.selection);
  }
  /**
  @internal
  */
  get empty() {
    return this.flags == 0 && this.transactions.length == 0;
  }
}
class Vw extends _t {
  get length() {
    return this.view.state.doc.length;
  }
  constructor(e) {
    super(), this.view = e, this.decorations = [], this.dynamicDecorationMap = [], this.domChanged = null, this.hasComposition = null, this.markedForComposition = /* @__PURE__ */ new Set(), this.minWidth = 0, this.minWidthFrom = 0, this.minWidthTo = 0, this.impreciseAnchor = null, this.impreciseHead = null, this.forceSelection = !1, this.lastUpdate = Date.now(), this.setDOM(e.contentDOM), this.children = [new hn()], this.children[0].setParent(this), this.updateDeco(), this.updateInner([new Ji(0, 0, 0, e.state.doc.length)], 0, null);
  }
  // Update the document view to a given state.
  update(e) {
    var t;
    let i = e.changedRanges;
    this.minWidth > 0 && i.length && (i.every(({ fromA: c, toA: u }) => u < this.minWidthFrom || c > this.minWidthTo) ? (this.minWidthFrom = e.changes.mapPos(this.minWidthFrom, 1), this.minWidthTo = e.changes.mapPos(this.minWidthTo, 1)) : this.minWidth = this.minWidthFrom = this.minWidthTo = 0);
    let s = -1;
    this.view.inputState.composing >= 0 && (!((t = this.domChanged) === null || t === void 0) && t.newSel ? s = this.domChanged.newSel.head : !QX(e.changes, this.hasComposition) && !e.selectionSet && (s = e.state.selection.main.head));
    let r = s > -1 ? RX(this.view, e.changes, s) : null;
    if (this.domChanged = null, this.hasComposition) {
      this.markedForComposition.clear();
      let { from: c, to: u } = this.hasComposition;
      i = new Ji(c, u, e.changes.mapPos(c, -1), e.changes.mapPos(u, 1)).addToSet(i.slice());
    }
    this.hasComposition = r ? { from: r.range.fromB, to: r.range.toB } : null, (xe.ie || xe.chrome) && !r && e && e.state.doc.lines != e.startState.doc.lines && (this.forceSelection = !0);
    let o = this.decorations, l = this.updateDeco(), a = NX(o, l, e.changes);
    return i = Ji.extendWithRanges(i, a), !(this.flags & 7) && i.length == 0 ? !1 : (this.updateInner(i, e.startState.doc.length, r), e.transactions.length && (this.lastUpdate = Date.now()), !0);
  }
  // Used by update and the constructor do perform the actual DOM
  // update
  updateInner(e, t, i) {
    this.view.viewState.mustMeasureContent = !0, this.updateChildren(e, t, i);
    let { observer: s } = this.view;
    s.ignore(() => {
      this.dom.style.height = this.view.viewState.contentHeight / this.view.scaleY + "px", this.dom.style.flexBasis = this.minWidth ? this.minWidth + "px" : "";
      let o = xe.chrome || xe.ios ? { node: s.selectionRange.focusNode, written: !1 } : void 0;
      this.sync(this.view, o), this.flags &= -8, o && (o.written || s.selectionRange.focusNode != o.node) && (this.forceSelection = !0), this.dom.style.height = "";
    }), this.markedForComposition.forEach(
      (o) => o.flags &= -9
      /* ViewFlag.Composition */
    );
    let r = [];
    if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length)
      for (let o of this.children)
        o instanceof Co && o.widget instanceof qw && r.push(o.dom);
    s.updateGaps(r);
  }
  updateChildren(e, t, i) {
    let s = i ? i.range.addToSet(e.slice()) : e, r = this.childCursor(t);
    for (let o = s.length - 1; ; o--) {
      let l = o >= 0 ? s[o] : null;
      if (!l)
        break;
      let { fromA: a, toA: c, fromB: u, toB: h } = l, f, d, p, g;
      if (i && i.range.fromB < h && i.range.toB > u) {
        let O = ku.build(this.view.state.doc, u, i.range.fromB, this.decorations, this.dynamicDecorationMap), x = ku.build(this.view.state.doc, i.range.toB, h, this.decorations, this.dynamicDecorationMap);
        d = O.breakAtStart, p = O.openStart, g = x.openEnd;
        let S = this.compositionView(i);
        x.breakAtStart ? S.breakAfter = 1 : x.content.length && S.merge(S.length, S.length, x.content[0], !1, x.openStart, 0) && (S.breakAfter = x.content[0].breakAfter, x.content.shift()), O.content.length && S.merge(0, 0, O.content[O.content.length - 1], !0, 0, O.openEnd) && O.content.pop(), f = O.content.concat(S).concat(x.content);
      } else
        ({ content: f, breakAtStart: d, openStart: p, openEnd: g } = ku.build(this.view.state.doc, u, h, this.decorations, this.dynamicDecorationMap));
      let { i: m, off: b } = r.findPos(c, 1), { i: y, off: v } = r.findPos(a, -1);
      RA(this, y, v, m, b, f, d, p, g);
    }
    i && this.fixCompositionDOM(i);
  }
  compositionView(e) {
    let t = new Br(e.text.nodeValue);
    t.flags |= 8;
    for (let { deco: s } of e.marks)
      t = new jr(s, [t], t.length);
    let i = new hn();
    return i.append(t, 0), i;
  }
  fixCompositionDOM(e) {
    let t = (r, o) => {
      o.flags |= 8 | (o.children.some(
        (a) => a.flags & 7
        /* ViewFlag.Dirty */
      ) ? 1 : 0), this.markedForComposition.add(o);
      let l = _t.get(r);
      l && l != o && (l.dom = null), o.setDOM(r);
    }, i = this.childPos(e.range.fromB, 1), s = this.children[i.i];
    t(e.line, s);
    for (let r = e.marks.length - 1; r >= -1; r--)
      i = s.childPos(i.off, 1), s = s.children[i.i], t(r >= 0 ? e.marks[r].node : e.text, s);
  }
  // Sync the DOM selection to this.state.selection
  updateSelection(e = !1, t = !1) {
    (e || !this.view.observer.selectionRange.focusNode) && this.view.observer.readSelectionRange();
    let i = this.view.root.activeElement, s = i == this.dom, r = !s && md(this.dom, this.view.observer.selectionRange) && !(i && this.dom.contains(i));
    if (!(s || t || r))
      return;
    let o = this.forceSelection;
    this.forceSelection = !1;
    let l = this.view.state.selection.main, a = this.moveToLine(this.domAtPos(l.anchor)), c = l.empty ? a : this.moveToLine(this.domAtPos(l.head));
    if (xe.gecko && l.empty && !this.hasComposition && MX(a)) {
      let h = document.createTextNode("");
      this.view.observer.ignore(() => a.node.insertBefore(h, a.node.childNodes[a.offset] || null)), a = c = new qn(h, 0), o = !0;
    }
    let u = this.view.observer.selectionRange;
    (o || !u.focusNode || (!Cu(a.node, a.offset, u.anchorNode, u.anchorOffset) || !Cu(c.node, c.offset, u.focusNode, u.focusOffset)) && !this.suppressWidgetCursorChange(u, l)) && (this.view.observer.ignore(() => {
      xe.android && xe.chrome && this.dom.contains(u.focusNode) && IX(u.focusNode, this.dom) && (this.dom.blur(), this.dom.focus({ preventScroll: !0 }));
      let h = Vd(this.view.root);
      if (h)
        if (l.empty) {
          if (xe.gecko) {
            let f = DX(a.node, a.offset);
            if (f && f != 3) {
              let d = oE(a.node, a.offset, f == 1 ? 1 : -1);
              d && (a = new qn(d.node, d.offset));
            }
          }
          h.collapse(a.node, a.offset), l.bidiLevel != null && h.caretBidiLevel !== void 0 && (h.caretBidiLevel = l.bidiLevel);
        } else if (h.extend) {
          h.collapse(a.node, a.offset);
          try {
            h.extend(c.node, c.offset);
          } catch {
          }
        } else {
          let f = document.createRange();
          l.anchor > l.head && ([a, c] = [c, a]), f.setEnd(c.node, c.offset), f.setStart(a.node, a.offset), h.removeAllRanges(), h.addRange(f);
        }
      r && this.view.root.activeElement == this.dom && (this.dom.blur(), i && i.focus());
    }), this.view.observer.setSelectionRange(a, c)), this.impreciseAnchor = a.precise ? null : new qn(u.anchorNode, u.anchorOffset), this.impreciseHead = c.precise ? null : new qn(u.focusNode, u.focusOffset);
  }
  // If a zero-length widget is inserted next to the cursor during
  // composition, avoid moving it across it and disrupting the
  // composition.
  suppressWidgetCursorChange(e, t) {
    return this.hasComposition && t.empty && Cu(e.focusNode, e.focusOffset, e.anchorNode, e.anchorOffset) && this.posFromDOM(e.focusNode, e.focusOffset) == t.head;
  }
  enforceCursorAssoc() {
    if (this.hasComposition)
      return;
    let { view: e } = this, t = e.state.selection.main, i = Vd(e.root), { anchorNode: s, anchorOffset: r } = e.observer.selectionRange;
    if (!i || !t.empty || !t.assoc || !i.modify)
      return;
    let o = hn.find(this, t.head);
    if (!o)
      return;
    let l = o.posAtStart;
    if (t.head == l || t.head == l + o.length)
      return;
    let a = this.coordsAt(t.head, -1), c = this.coordsAt(t.head, 1);
    if (!a || !c || a.bottom > c.top)
      return;
    let u = this.domAtPos(t.head + t.assoc);
    i.collapse(u.node, u.offset), i.modify("move", t.assoc < 0 ? "forward" : "backward", "lineboundary"), e.observer.readSelectionRange();
    let h = e.observer.selectionRange;
    e.docView.posFromDOM(h.anchorNode, h.anchorOffset) != t.from && i.collapse(s, r);
  }
  // If a position is in/near a block widget, move it to a nearby text
  // line, since we don't want the cursor inside a block widget.
  moveToLine(e) {
    let t = this.dom, i;
    if (e.node != t)
      return e;
    for (let s = e.offset; !i && s < t.childNodes.length; s++) {
      let r = _t.get(t.childNodes[s]);
      r instanceof hn && (i = r.domAtPos(0));
    }
    for (let s = e.offset - 1; !i && s >= 0; s--) {
      let r = _t.get(t.childNodes[s]);
      r instanceof hn && (i = r.domAtPos(r.length));
    }
    return i ? new qn(i.node, i.offset, !0) : e;
  }
  nearest(e) {
    for (let t = e; t; ) {
      let i = _t.get(t);
      if (i && i.rootView == this)
        return i;
      t = t.parentNode;
    }
    return null;
  }
  posFromDOM(e, t) {
    let i = this.nearest(e);
    if (!i)
      throw new RangeError("Trying to find position for a DOM position outside of the document");
    return i.localPosFromDOM(e, t) + i.posAtStart;
  }
  domAtPos(e) {
    let { i: t, off: i } = this.childCursor().findPos(e, -1);
    for (; t < this.children.length - 1; ) {
      let s = this.children[t];
      if (i < s.length || s instanceof hn)
        break;
      t++, i = 0;
    }
    return this.children[t].domAtPos(i);
  }
  coordsAt(e, t) {
    let i = null, s = 0;
    for (let r = this.length, o = this.children.length - 1; o >= 0; o--) {
      let l = this.children[o], a = r - l.breakAfter, c = a - l.length;
      if (a < e)
        break;
      c <= e && (c < e || l.covers(-1)) && (a > e || l.covers(1)) && (!i || l instanceof hn && !(i instanceof hn && t >= 0)) && (i = l, s = c), r = c;
    }
    return i ? i.coordsAt(e - s, t) : null;
  }
  coordsForChar(e) {
    let { i: t, off: i } = this.childPos(e, 1), s = this.children[t];
    if (!(s instanceof hn))
      return null;
    for (; s.children.length; ) {
      let { i: l, off: a } = s.childPos(i, 1);
      for (; ; l++) {
        if (l == s.children.length)
          return null;
        if ((s = s.children[l]).length)
          break;
      }
      i = a;
    }
    if (!(s instanceof Br))
      return null;
    let r = Bn(s.text, i);
    if (r == i)
      return null;
    let o = Bl(s.dom, i, r).getClientRects();
    for (let l = 0; l < o.length; l++) {
      let a = o[l];
      if (l == o.length - 1 || a.top < a.bottom && a.left < a.right)
        return a;
    }
    return null;
  }
  measureVisibleLineHeights(e) {
    let t = [], { from: i, to: s } = e, r = this.view.contentDOM.clientWidth, o = r > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1, l = -1, a = this.view.textDirection == Rt.LTR;
    for (let c = 0, u = 0; u < this.children.length; u++) {
      let h = this.children[u], f = c + h.length;
      if (f > s)
        break;
      if (c >= i) {
        let d = h.dom.getBoundingClientRect();
        if (t.push(d.height), o) {
          let p = h.dom.lastChild, g = p ? Ju(p) : [];
          if (g.length) {
            let m = g[g.length - 1], b = a ? m.right - d.left : d.right - m.left;
            b > l && (l = b, this.minWidth = r, this.minWidthFrom = c, this.minWidthTo = f);
          }
        }
      }
      c = f + h.breakAfter;
    }
    return t;
  }
  textDirectionAt(e) {
    let { i: t } = this.childPos(e, 1);
    return getComputedStyle(this.children[t].dom).direction == "rtl" ? Rt.RTL : Rt.LTR;
  }
  measureTextSize() {
    for (let r of this.children)
      if (r instanceof hn) {
        let o = r.measureTextSize();
        if (o)
          return o;
      }
    let e = document.createElement("div"), t, i, s;
    return e.className = "cm-line", e.style.width = "99999px", e.style.position = "absolute", e.textContent = "abc def ghi jkl mno pqr stu", this.view.observer.ignore(() => {
      this.dom.appendChild(e);
      let r = Ju(e.firstChild)[0];
      t = e.getBoundingClientRect().height, i = r ? r.width / 27 : 7, s = r ? r.height : t, e.remove();
    }), { lineHeight: t, charWidth: i, textHeight: s };
  }
  childCursor(e = this.length) {
    let t = this.children.length;
    return t && (e -= this.children[--t].length), new MA(this.children, e, t);
  }
  computeBlockGapDeco() {
    let e = [], t = this.view.viewState;
    for (let i = 0, s = 0; ; s++) {
      let r = s == t.viewports.length ? null : t.viewports[s], o = r ? r.from - 1 : this.length;
      if (o > i) {
        let l = (t.lineBlockAt(o).bottom - t.lineBlockAt(i).top) / this.view.scaleY;
        e.push(Te.replace({
          widget: new qw(l),
          block: !0,
          inclusive: !0,
          isBlockGap: !0
        }).range(i, o));
      }
      if (!r)
        break;
      i = r.to + 1;
    }
    return Te.set(e);
  }
  updateDeco() {
    let e = this.view.state.facet(th).map((s, r) => (this.dynamicDecorationMap[r] = typeof s == "function") ? s(this.view) : s), t = !1, i = this.view.state.facet(tE).map((s, r) => {
      let o = typeof s == "function";
      return o && (t = !0), o ? s(this.view) : s;
    });
    i.length && (this.dynamicDecorationMap[e.length] = t, e.push(it.join(i)));
    for (let s = e.length; s < e.length + 3; s++)
      this.dynamicDecorationMap[s] = !1;
    return this.decorations = [
      ...e,
      this.computeBlockGapDeco(),
      this.view.viewState.lineGapDeco
    ];
  }
  scrollIntoView(e) {
    if (e.isSnapshot) {
      let c = this.view.viewState.lineBlockAt(e.range.head);
      this.view.scrollDOM.scrollTop = c.top - e.yMargin, this.view.scrollDOM.scrollLeft = e.xMargin;
      return;
    }
    let { range: t } = e, i = this.coordsAt(t.head, t.empty ? t.assoc : t.head > t.anchor ? -1 : 1), s;
    if (!i)
      return;
    !t.empty && (s = this.coordsAt(t.anchor, t.anchor > t.head ? -1 : 1)) && (i = {
      left: Math.min(i.left, s.left),
      top: Math.min(i.top, s.top),
      right: Math.max(i.right, s.right),
      bottom: Math.max(i.bottom, s.bottom)
    });
    let r = sE(this.view), o = {
      left: i.left - r.left,
      top: i.top - r.top,
      right: i.right + r.right,
      bottom: i.bottom + r.bottom
    }, { offsetWidth: l, offsetHeight: a } = this.view.scrollDOM;
    fX(this.view.scrollDOM, o, t.head < t.anchor ? -1 : 1, e.x, e.y, Math.max(Math.min(e.xMargin, l), -l), Math.max(Math.min(e.yMargin, a), -a), this.view.textDirection == Rt.LTR);
  }
}
function MX(n) {
  return n.node.nodeType == 1 && n.node.firstChild && (n.offset == 0 || n.node.childNodes[n.offset - 1].contentEditable == "false") && (n.offset == n.node.childNodes.length || n.node.childNodes[n.offset].contentEditable == "false");
}
class qw extends Gr {
  constructor(e) {
    super(), this.height = e;
  }
  toDOM() {
    let e = document.createElement("div");
    return e.className = "cm-gap", this.updateDOM(e), e;
  }
  eq(e) {
    return e.height == this.height;
  }
  updateDOM(e) {
    return e.style.height = this.height + "px", !0;
  }
  get editable() {
    return !0;
  }
  get estimatedHeight() {
    return this.height;
  }
  ignoreEvent() {
    return !1;
  }
}
function rE(n, e) {
  let t = n.observer.selectionRange, i = t.focusNode && oE(t.focusNode, t.focusOffset, 0);
  if (!i)
    return null;
  let s = e - i.offset;
  return { from: s, to: s + i.node.nodeValue.length, node: i.node };
}
function RX(n, e, t) {
  let i = rE(n, t);
  if (!i)
    return null;
  let { node: s, from: r, to: o } = i, l = s.nodeValue;
  if (/[\n\r]/.test(l) || n.state.doc.sliceString(i.from, i.to) != l)
    return null;
  let a = e.invertedDesc, c = new Ji(a.mapPos(r), a.mapPos(o), r, o), u = [];
  for (let h = s.parentNode; ; h = h.parentNode) {
    let f = _t.get(h);
    if (f instanceof jr)
      u.push({ node: h, deco: f.mark });
    else {
      if (f instanceof hn || h.nodeName == "DIV" && h.parentNode == n.contentDOM)
        return { range: c, text: s, marks: u, line: h };
      if (h != n.contentDOM)
        u.push({ node: h, deco: new Xh({
          inclusive: !0,
          attributes: OX(h),
          tagName: h.tagName.toLowerCase()
        }) });
      else
        return null;
    }
  }
}
function oE(n, e, t) {
  if (t <= 0)
    for (let i = n, s = e; ; ) {
      if (i.nodeType == 3)
        return { node: i, offset: s };
      if (i.nodeType == 1 && s > 0)
        i = i.childNodes[s - 1], s = Qr(i);
      else
        break;
    }
  if (t >= 0)
    for (let i = n, s = e; ; ) {
      if (i.nodeType == 3)
        return { node: i, offset: s };
      if (i.nodeType == 1 && s < i.childNodes.length && t >= 0)
        i = i.childNodes[s], s = 0;
      else
        break;
    }
  return null;
}
function DX(n, e) {
  return n.nodeType != 1 ? 0 : (e && n.childNodes[e - 1].contentEditable == "false" ? 1 : 0) | (e < n.childNodes.length && n.childNodes[e].contentEditable == "false" ? 2 : 0);
}
let LX = class {
  constructor() {
    this.changes = [];
  }
  compareRange(e, t) {
    tb(e, t, this.changes);
  }
  comparePoint(e, t) {
    tb(e, t, this.changes);
  }
};
function NX(n, e, t) {
  let i = new LX();
  return it.compare(n, e, t, i), i.changes;
}
function IX(n, e) {
  for (let t = n; t && t != e; t = t.assignedSlot || t.parentNode)
    if (t.nodeType == 1 && t.contentEditable == "false")
      return !0;
  return !1;
}
function QX(n, e) {
  let t = !1;
  return e && n.iterChangedRanges((i, s) => {
    i < e.to && s > e.from && (t = !0);
  }), t;
}
function BX(n, e, t = 1) {
  let i = n.charCategorizer(e), s = n.doc.lineAt(e), r = e - s.from;
  if (s.length == 0)
    return J.cursor(e);
  r == 0 ? t = 1 : r == s.length && (t = -1);
  let o = r, l = r;
  t < 0 ? o = Bn(s.text, r, !1) : l = Bn(s.text, r);
  let a = i(s.text.slice(o, l));
  for (; o > 0; ) {
    let c = Bn(s.text, o, !1);
    if (i(s.text.slice(c, o)) != a)
      break;
    o = c;
  }
  for (; l < s.length; ) {
    let c = Bn(s.text, l);
    if (i(s.text.slice(l, c)) != a)
      break;
    l = c;
  }
  return J.range(o + s.from, l + s.from);
}
function jX(n, e) {
  return e.left > n ? e.left - n : Math.max(0, n - e.right);
}
function zX(n, e) {
  return e.top > n ? e.top - n : Math.max(0, n - e.bottom);
}
function am(n, e) {
  return n.top < e.bottom - 1 && n.bottom > e.top + 1;
}
function Ww(n, e) {
  return e < n.top ? { top: e, left: n.left, right: n.right, bottom: n.bottom } : n;
}
function Xw(n, e) {
  return e > n.bottom ? { top: n.top, left: n.left, right: n.right, bottom: e } : n;
}
function ob(n, e, t) {
  let i, s, r, o, l = !1, a, c, u, h;
  for (let p = n.firstChild; p; p = p.nextSibling) {
    let g = Ju(p);
    for (let m = 0; m < g.length; m++) {
      let b = g[m];
      s && am(s, b) && (b = Ww(Xw(b, s.bottom), s.top));
      let y = jX(e, b), v = zX(t, b);
      if (y == 0 && v == 0)
        return p.nodeType == 3 ? Yw(p, e, t) : ob(p, e, t);
      if (!i || o > v || o == v && r > y) {
        i = p, s = b, r = y, o = v;
        let O = v ? t < b.top ? -1 : 1 : y ? e < b.left ? -1 : 1 : 0;
        l = !O || (O > 0 ? m < g.length - 1 : m > 0);
      }
      y == 0 ? t > b.bottom && (!u || u.bottom < b.bottom) ? (a = p, u = b) : t < b.top && (!h || h.top > b.top) && (c = p, h = b) : u && am(u, b) ? u = Xw(u, b.bottom) : h && am(h, b) && (h = Ww(h, b.top));
    }
  }
  if (u && u.bottom >= t ? (i = a, s = u) : h && h.top <= t && (i = c, s = h), !i)
    return { node: n, offset: 0 };
  let f = Math.max(s.left, Math.min(s.right, e));
  if (i.nodeType == 3)
    return Yw(i, f, t);
  if (l && i.contentEditable != "false")
    return ob(i, f, t);
  let d = Array.prototype.indexOf.call(n.childNodes, i) + (e >= (s.left + s.right) / 2 ? 1 : 0);
  return { node: n, offset: d };
}
function Yw(n, e, t) {
  let i = n.nodeValue.length, s = -1, r = 1e9, o = 0;
  for (let l = 0; l < i; l++) {
    let a = Bl(n, l, l + 1).getClientRects();
    for (let c = 0; c < a.length; c++) {
      let u = a[c];
      if (u.top == u.bottom)
        continue;
      o || (o = e - u.left);
      let h = (u.top > t ? u.top - t : t - u.bottom) - 1;
      if (u.left - 1 <= e && u.right + 1 >= e && h < r) {
        let f = e >= (u.left + u.right) / 2, d = f;
        if ((xe.chrome || xe.gecko) && Bl(n, l).getBoundingClientRect().left == u.right && (d = !f), h <= 0)
          return { node: n, offset: l + (d ? 1 : 0) };
        s = l + (d ? 1 : 0), r = h;
      }
    }
  }
  return { node: n, offset: s > -1 ? s : o > 0 ? n.nodeValue.length : 0 };
}
function lE(n, e, t, i = -1) {
  var s, r;
  let o = n.contentDOM.getBoundingClientRect(), l = o.top + n.viewState.paddingTop, a, { docHeight: c } = n.viewState, { x: u, y: h } = e, f = h - l;
  if (f < 0)
    return 0;
  if (f > c)
    return n.state.doc.length;
  for (let O = n.viewState.heightOracle.textHeight / 2, x = !1; a = n.elementAtHeight(f), a.type != ei.Text; )
    for (; f = i > 0 ? a.bottom + O : a.top - O, !(f >= 0 && f <= c); ) {
      if (x)
        return t ? null : 0;
      x = !0, i = -i;
    }
  h = l + f;
  let d = a.from;
  if (d < n.viewport.from)
    return n.viewport.from == 0 ? 0 : t ? null : Hw(n, o, a, u, h);
  if (d > n.viewport.to)
    return n.viewport.to == n.state.doc.length ? n.state.doc.length : t ? null : Hw(n, o, a, u, h);
  let p = n.dom.ownerDocument, g = n.root.elementFromPoint ? n.root : p, m = g.elementFromPoint(u, h);
  m && !n.contentDOM.contains(m) && (m = null), m || (u = Math.max(o.left + 1, Math.min(o.right - 1, u)), m = g.elementFromPoint(u, h), m && !n.contentDOM.contains(m) && (m = null));
  let b, y = -1;
  if (m && ((s = n.docView.nearest(m)) === null || s === void 0 ? void 0 : s.isEditable) != !1) {
    if (p.caretPositionFromPoint) {
      let O = p.caretPositionFromPoint(u, h);
      O && ({ offsetNode: b, offset: y } = O);
    } else if (p.caretRangeFromPoint) {
      let O = p.caretRangeFromPoint(u, h);
      O && ({ startContainer: b, startOffset: y } = O, (!n.contentDOM.contains(b) || xe.safari && ZX(b, y, u) || xe.chrome && FX(b, y, u)) && (b = void 0));
    }
  }
  if (!b || !n.docView.dom.contains(b)) {
    let O = hn.find(n.docView, d);
    if (!O)
      return f > a.top + a.height / 2 ? a.to : a.from;
    ({ node: b, offset: y } = ob(O.dom, u, h));
  }
  let v = n.docView.nearest(b);
  if (!v)
    return null;
  if (v.isWidget && ((r = v.dom) === null || r === void 0 ? void 0 : r.nodeType) == 1) {
    let O = v.dom.getBoundingClientRect();
    return e.y < O.top || e.y <= O.bottom && e.x <= (O.left + O.right) / 2 ? v.posAtStart : v.posAtEnd;
  } else
    return v.localPosFromDOM(b, y) + v.posAtStart;
}
function Hw(n, e, t, i, s) {
  let r = Math.round((i - e.left) * n.defaultCharacterWidth);
  if (n.lineWrapping && t.height > n.defaultLineHeight * 1.5) {
    let l = n.viewState.heightOracle.textHeight, a = Math.floor((s - t.top - (n.defaultLineHeight - l) * 0.5) / l);
    r += a * n.viewState.heightOracle.lineLength;
  }
  let o = n.state.sliceDoc(t.from, t.to);
  return t.from + W0(o, r, n.state.tabSize);
}
function ZX(n, e, t) {
  let i;
  if (n.nodeType != 3 || e != (i = n.nodeValue.length))
    return !1;
  for (let s = n.nextSibling; s; s = s.nextSibling)
    if (s.nodeType != 1 || s.nodeName != "BR")
      return !1;
  return Bl(n, i - 1, i).getBoundingClientRect().left > t;
}
function FX(n, e, t) {
  if (e != 0)
    return !1;
  for (let s = n; ; ) {
    let r = s.parentNode;
    if (!r || r.nodeType != 1 || r.firstChild != s)
      return !1;
    if (r.classList.contains("cm-line"))
      break;
    s = r;
  }
  let i = n.nodeType == 1 ? n.getBoundingClientRect() : Bl(n, 0, Math.max(n.nodeValue.length, 1)).getBoundingClientRect();
  return t - i.left > 5;
}
function lb(n, e) {
  let t = n.lineBlockAt(e);
  if (Array.isArray(t.type)) {
    for (let i of t.type)
      if (i.to > e || i.to == e && (i.to == t.to || i.type == ei.Text))
        return i;
  }
  return t;
}
function VX(n, e, t, i) {
  let s = lb(n, e.head), r = !i || s.type != ei.Text || !(n.lineWrapping || s.widgetLineBreaks) ? null : n.coordsAtPos(e.assoc < 0 && e.head > s.from ? e.head - 1 : e.head);
  if (r) {
    let o = n.dom.getBoundingClientRect(), l = n.textDirectionAt(s.from), a = n.posAtCoords({
      x: t == (l == Rt.LTR) ? o.right - 1 : o.left + 1,
      y: (r.top + r.bottom) / 2
    });
    if (a != null)
      return J.cursor(a, t ? -1 : 1);
  }
  return J.cursor(t ? s.to : s.from, t ? -1 : 1);
}
function Gw(n, e, t, i) {
  let s = n.state.doc.lineAt(e.head), r = n.bidiSpans(s), o = n.textDirectionAt(s.from);
  for (let l = e, a = null; ; ) {
    let c = $X(s, r, o, l, t), u = qA;
    if (!c) {
      if (s.number == (t ? n.state.doc.lines : 1))
        return l;
      u = `
`, s = n.state.doc.line(s.number + (t ? 1 : -1)), r = n.bidiSpans(s), c = n.visualLineSide(s, !t);
    }
    if (a) {
      if (!a(u))
        return l;
    } else {
      if (!i)
        return c;
      a = i(u);
    }
    l = c;
  }
}
function qX(n, e, t) {
  let i = n.state.charCategorizer(e), s = i(t);
  return (r) => {
    let o = i(r);
    return s == Nt.Space && (s = o), s == o;
  };
}
function WX(n, e, t, i) {
  let s = e.head, r = t ? 1 : -1;
  if (s == (t ? n.state.doc.length : 0))
    return J.cursor(s, e.assoc);
  let o = e.goalColumn, l, a = n.contentDOM.getBoundingClientRect(), c = n.coordsAtPos(s, e.assoc || -1), u = n.documentTop;
  if (c)
    o == null && (o = c.left - a.left), l = r < 0 ? c.top : c.bottom;
  else {
    let d = n.viewState.lineBlockAt(s);
    o == null && (o = Math.min(a.right - a.left, n.defaultCharacterWidth * (s - d.from))), l = (r < 0 ? d.top : d.bottom) + u;
  }
  let h = a.left + o, f = i ?? n.viewState.heightOracle.textHeight >> 1;
  for (let d = 0; ; d += 10) {
    let p = l + (f + d) * r, g = lE(n, { x: h, y: p }, !1, r);
    if (p < a.top || p > a.bottom || (r < 0 ? g < s : g > s)) {
      let m = n.docView.coordsForChar(g), b = !m || p < m.top ? -1 : 1;
      return J.cursor(g, b, void 0, o);
    }
  }
}
function bd(n, e, t) {
  for (; ; ) {
    let i = 0;
    for (let s of n)
      s.between(e - 1, e + 1, (r, o, l) => {
        if (e > r && e < o) {
          let a = i || t || (e - r < o - e ? -1 : 1);
          e = a < 0 ? r : o, i = a;
        }
      });
    if (!i)
      return e;
  }
}
function cm(n, e, t) {
  let i = bd(n.state.facet(oy).map((s) => s(n)), t.from, e.head > t.from ? -1 : 1);
  return i == t.from ? t : J.cursor(i, i < t.from ? 1 : -1);
}
class XX {
  setSelectionOrigin(e) {
    this.lastSelectionOrigin = e, this.lastSelectionTime = Date.now();
  }
  constructor(e) {
    this.view = e, this.lastKeyCode = 0, this.lastKeyTime = 0, this.lastTouchTime = 0, this.lastFocusTime = 0, this.lastScrollTop = 0, this.lastScrollLeft = 0, this.pendingIOSKey = void 0, this.lastSelectionOrigin = null, this.lastSelectionTime = 0, this.lastEscPress = 0, this.lastContextMenu = 0, this.scrollHandlers = [], this.handlers = /* @__PURE__ */ Object.create(null), this.composing = -1, this.compositionFirstChange = null, this.compositionEndedAt = 0, this.compositionPendingKey = !1, this.compositionPendingChange = !1, this.mouseSelection = null, this.draggedContent = null, this.handleEvent = this.handleEvent.bind(this), this.notifiedFocused = e.hasFocus, xe.safari && e.contentDOM.addEventListener("input", () => null), xe.gecko && cY(e.contentDOM.ownerDocument);
  }
  handleEvent(e) {
    !tY(this.view, e) || this.ignoreDuringComposition(e) || e.type == "keydown" && this.keydown(e) || this.runHandlers(e.type, e);
  }
  runHandlers(e, t) {
    let i = this.handlers[e];
    if (i) {
      for (let s of i.observers)
        s(this.view, t);
      for (let s of i.handlers) {
        if (t.defaultPrevented)
          break;
        if (s(this.view, t)) {
          t.preventDefault();
          break;
        }
      }
    }
  }
  ensureHandlers(e) {
    let t = YX(e), i = this.handlers, s = this.view.contentDOM;
    for (let r in t)
      if (r != "scroll") {
        let o = !t[r].handlers.length, l = i[r];
        l && o != !l.handlers.length && (s.removeEventListener(r, this.handleEvent), l = null), l || s.addEventListener(r, this.handleEvent, { passive: o });
      }
    for (let r in i)
      r != "scroll" && !t[r] && s.removeEventListener(r, this.handleEvent);
    this.handlers = t;
  }
  keydown(e) {
    if (this.lastKeyCode = e.keyCode, this.lastKeyTime = Date.now(), e.keyCode == 9 && Date.now() < this.lastEscPress + 2e3)
      return !0;
    if (e.keyCode != 27 && cE.indexOf(e.keyCode) < 0 && (this.view.inputState.lastEscPress = 0), xe.android && xe.chrome && !e.synthetic && (e.keyCode == 13 || e.keyCode == 8))
      return this.view.observer.delayAndroidKey(e.key, e.keyCode), !0;
    let t;
    return xe.ios && !e.synthetic && !e.altKey && !e.metaKey && ((t = aE.find((i) => i.keyCode == e.keyCode)) && !e.ctrlKey || HX.indexOf(e.key) > -1 && e.ctrlKey && !e.shiftKey) ? (this.pendingIOSKey = t || e, setTimeout(() => this.flushIOSKey(), 250), !0) : (e.keyCode != 229 && this.view.observer.forceFlush(), !1);
  }
  flushIOSKey() {
    let e = this.pendingIOSKey;
    return e ? (this.pendingIOSKey = void 0, ka(this.view.contentDOM, e.key, e.keyCode)) : !1;
  }
  ignoreDuringComposition(e) {
    return /^key/.test(e.type) ? this.composing > 0 ? !0 : xe.safari && !xe.ios && this.compositionPendingKey && Date.now() - this.compositionEndedAt < 100 ? (this.compositionPendingKey = !1, !0) : !1 : !1;
  }
  startMouseSelection(e) {
    this.mouseSelection && this.mouseSelection.destroy(), this.mouseSelection = e;
  }
  update(e) {
    this.mouseSelection && this.mouseSelection.update(e), this.draggedContent && e.docChanged && (this.draggedContent = this.draggedContent.map(e.changes)), e.transactions.length && (this.lastKeyCode = this.lastSelectionTime = 0);
  }
  destroy() {
    this.mouseSelection && this.mouseSelection.destroy();
  }
}
function Uw(n, e) {
  return (t, i) => {
    try {
      return e.call(n, i, t);
    } catch (s) {
      Ki(t.state, s);
    }
  };
}
function YX(n) {
  let e = /* @__PURE__ */ Object.create(null);
  function t(i) {
    return e[i] || (e[i] = { observers: [], handlers: [] });
  }
  for (let i of n) {
    let s = i.spec;
    if (s && s.domEventHandlers)
      for (let r in s.domEventHandlers) {
        let o = s.domEventHandlers[r];
        o && t(r).handlers.push(Uw(i.value, o));
      }
    if (s && s.domEventObservers)
      for (let r in s.domEventObservers) {
        let o = s.domEventObservers[r];
        o && t(r).observers.push(Uw(i.value, o));
      }
  }
  for (let i in $s)
    t(i).handlers.push($s[i]);
  for (let i in Ts)
    t(i).observers.push(Ts[i]);
  return e;
}
const aE = [
  { key: "Backspace", keyCode: 8, inputType: "deleteContentBackward" },
  { key: "Enter", keyCode: 13, inputType: "insertParagraph" },
  { key: "Enter", keyCode: 13, inputType: "insertLineBreak" },
  { key: "Delete", keyCode: 46, inputType: "deleteContentForward" }
], HX = "dthko", cE = [16, 17, 18, 20, 91, 92, 224, 225], Cf = 6;
function kf(n) {
  return Math.max(0, n) * 0.7 + 8;
}
function GX(n, e) {
  return Math.max(Math.abs(n.clientX - e.clientX), Math.abs(n.clientY - e.clientY));
}
class UX {
  constructor(e, t, i, s) {
    this.view = e, this.startEvent = t, this.style = i, this.mustSelect = s, this.scrollSpeed = { x: 0, y: 0 }, this.scrolling = -1, this.lastEvent = t, this.scrollParent = dX(e.contentDOM), this.atoms = e.state.facet(oy).map((o) => o(e));
    let r = e.contentDOM.ownerDocument;
    r.addEventListener("mousemove", this.move = this.move.bind(this)), r.addEventListener("mouseup", this.up = this.up.bind(this)), this.extend = t.shiftKey, this.multiple = e.state.facet(at.allowMultipleSelections) && KX(e, t), this.dragging = eY(e, t) && dE(t) == 1 ? null : !1;
  }
  start(e) {
    this.dragging === !1 && this.select(e);
  }
  move(e) {
    var t;
    if (e.buttons == 0)
      return this.destroy();
    if (this.dragging || this.dragging == null && GX(this.startEvent, e) < 10)
      return;
    this.select(this.lastEvent = e);
    let i = 0, s = 0, r = ((t = this.scrollParent) === null || t === void 0 ? void 0 : t.getBoundingClientRect()) || { left: 0, top: 0, right: this.view.win.innerWidth, bottom: this.view.win.innerHeight }, o = sE(this.view);
    e.clientX - o.left <= r.left + Cf ? i = -kf(r.left - e.clientX) : e.clientX + o.right >= r.right - Cf && (i = kf(e.clientX - r.right)), e.clientY - o.top <= r.top + Cf ? s = -kf(r.top - e.clientY) : e.clientY + o.bottom >= r.bottom - Cf && (s = kf(e.clientY - r.bottom)), this.setScrollSpeed(i, s);
  }
  up(e) {
    this.dragging == null && this.select(this.lastEvent), this.dragging || e.preventDefault(), this.destroy();
  }
  destroy() {
    this.setScrollSpeed(0, 0);
    let e = this.view.contentDOM.ownerDocument;
    e.removeEventListener("mousemove", this.move), e.removeEventListener("mouseup", this.up), this.view.inputState.mouseSelection = this.view.inputState.draggedContent = null;
  }
  setScrollSpeed(e, t) {
    this.scrollSpeed = { x: e, y: t }, e || t ? this.scrolling < 0 && (this.scrolling = setInterval(() => this.scroll(), 50)) : this.scrolling > -1 && (clearInterval(this.scrolling), this.scrolling = -1);
  }
  scroll() {
    this.scrollParent ? (this.scrollParent.scrollLeft += this.scrollSpeed.x, this.scrollParent.scrollTop += this.scrollSpeed.y) : this.view.win.scrollBy(this.scrollSpeed.x, this.scrollSpeed.y), this.dragging === !1 && this.select(this.lastEvent);
  }
  skipAtoms(e) {
    let t = null;
    for (let i = 0; i < e.ranges.length; i++) {
      let s = e.ranges[i], r = null;
      if (s.empty) {
        let o = bd(this.atoms, s.from, 0);
        o != s.from && (r = J.cursor(o, -1));
      } else {
        let o = bd(this.atoms, s.from, -1), l = bd(this.atoms, s.to, 1);
        (o != s.from || l != s.to) && (r = J.range(s.from == s.anchor ? o : l, s.from == s.head ? o : l));
      }
      r && (t || (t = e.ranges.slice()), t[i] = r);
    }
    return t ? J.create(t, e.mainIndex) : e;
  }
  select(e) {
    let { view: t } = this, i = this.skipAtoms(this.style.get(e, this.extend, this.multiple));
    (this.mustSelect || !i.eq(t.state.selection, this.dragging === !1)) && this.view.dispatch({
      selection: i,
      userEvent: "select.pointer"
    }), this.mustSelect = !1;
  }
  update(e) {
    this.style.update(e) && setTimeout(() => this.select(this.lastEvent), 20);
  }
}
function KX(n, e) {
  let t = n.state.facet(WA);
  return t.length ? t[0](e) : xe.mac ? e.metaKey : e.ctrlKey;
}
function JX(n, e) {
  let t = n.state.facet(XA);
  return t.length ? t[0](e) : xe.mac ? !e.altKey : !e.ctrlKey;
}
function eY(n, e) {
  let { main: t } = n.state.selection;
  if (t.empty)
    return !1;
  let i = Vd(n.root);
  if (!i || i.rangeCount == 0)
    return !0;
  let s = i.getRangeAt(0).getClientRects();
  for (let r = 0; r < s.length; r++) {
    let o = s[r];
    if (o.left <= e.clientX && o.right >= e.clientX && o.top <= e.clientY && o.bottom >= e.clientY)
      return !0;
  }
  return !1;
}
function tY(n, e) {
  if (!e.bubbles)
    return !0;
  if (e.defaultPrevented)
    return !1;
  for (let t = e.target, i; t != n.contentDOM; t = t.parentNode)
    if (!t || t.nodeType == 11 || (i = _t.get(t)) && i.ignoreEvent(e))
      return !1;
  return !0;
}
const $s = /* @__PURE__ */ Object.create(null), Ts = /* @__PURE__ */ Object.create(null), uE = xe.ie && xe.ie_version < 15 || xe.ios && xe.webkit_version < 604;
function nY(n) {
  let e = n.dom.parentNode;
  if (!e)
    return;
  let t = e.appendChild(document.createElement("textarea"));
  t.style.cssText = "position: fixed; left: -10000px; top: 10px", t.focus(), setTimeout(() => {
    n.focus(), t.remove(), hE(n, t.value);
  }, 50);
}
function hE(n, e) {
  let { state: t } = n, i, s = 1, r = t.toText(e), o = r.lines == t.selection.ranges.length;
  if (ab != null && t.selection.ranges.every((a) => a.empty) && ab == r.toString()) {
    let a = -1;
    i = t.changeByRange((c) => {
      let u = t.doc.lineAt(c.from);
      if (u.from == a)
        return { range: c };
      a = u.from;
      let h = t.toText((o ? r.line(s++).text : e) + t.lineBreak);
      return {
        changes: { from: u.from, insert: h },
        range: J.cursor(c.from + h.length)
      };
    });
  } else
    o ? i = t.changeByRange((a) => {
      let c = r.line(s++);
      return {
        changes: { from: a.from, to: a.to, insert: c.text },
        range: J.cursor(a.from + c.length)
      };
    }) : i = t.replaceSelection(r);
  n.dispatch(i, {
    userEvent: "input.paste",
    scrollIntoView: !0
  });
}
Ts.scroll = (n) => {
  n.inputState.lastScrollTop = n.scrollDOM.scrollTop, n.inputState.lastScrollLeft = n.scrollDOM.scrollLeft;
};
$s.keydown = (n, e) => (n.inputState.setSelectionOrigin("select"), e.keyCode == 27 && (n.inputState.lastEscPress = Date.now()), !1);
Ts.touchstart = (n, e) => {
  n.inputState.lastTouchTime = Date.now(), n.inputState.setSelectionOrigin("select.pointer");
};
Ts.touchmove = (n) => {
  n.inputState.setSelectionOrigin("select.pointer");
};
$s.mousedown = (n, e) => {
  if (n.observer.flush(), n.inputState.lastTouchTime > Date.now() - 2e3)
    return !1;
  let t = null;
  for (let i of n.state.facet(YA))
    if (t = i(n, e), t)
      break;
  if (!t && e.button == 0 && (t = rY(n, e)), t) {
    let i = !n.hasFocus;
    n.inputState.startMouseSelection(new UX(n, e, t, i)), i && n.observer.ignore(() => $A(n.contentDOM));
    let s = n.inputState.mouseSelection;
    if (s)
      return s.start(e), s.dragging === !1;
  }
  return !1;
};
function Kw(n, e, t, i) {
  if (i == 1)
    return J.cursor(e, t);
  if (i == 2)
    return BX(n.state, e, t);
  {
    let s = hn.find(n.docView, e), r = n.state.doc.lineAt(s ? s.posAtEnd : e), o = s ? s.posAtStart : r.from, l = s ? s.posAtEnd : r.to;
    return l < n.state.doc.length && l == r.to && l++, J.range(o, l);
  }
}
let fE = (n, e) => n >= e.top && n <= e.bottom, Jw = (n, e, t) => fE(e, t) && n >= t.left && n <= t.right;
function iY(n, e, t, i) {
  let s = hn.find(n.docView, e);
  if (!s)
    return 1;
  let r = e - s.posAtStart;
  if (r == 0)
    return 1;
  if (r == s.length)
    return -1;
  let o = s.coordsAt(r, -1);
  if (o && Jw(t, i, o))
    return -1;
  let l = s.coordsAt(r, 1);
  return l && Jw(t, i, l) ? 1 : o && fE(i, o) ? -1 : 1;
}
function ex(n, e) {
  let t = n.posAtCoords({ x: e.clientX, y: e.clientY }, !1);
  return { pos: t, bias: iY(n, t, e.clientX, e.clientY) };
}
const sY = xe.ie && xe.ie_version <= 11;
let tx = null, nx = 0, ix = 0;
function dE(n) {
  if (!sY)
    return n.detail;
  let e = tx, t = ix;
  return tx = n, ix = Date.now(), nx = !e || t > Date.now() - 400 && Math.abs(e.clientX - n.clientX) < 2 && Math.abs(e.clientY - n.clientY) < 2 ? (nx + 1) % 3 : 1;
}
function rY(n, e) {
  let t = ex(n, e), i = dE(e), s = n.state.selection;
  return {
    update(r) {
      r.docChanged && (t.pos = r.changes.mapPos(t.pos), s = s.map(r.changes));
    },
    get(r, o, l) {
      let a = ex(n, r), c, u = Kw(n, a.pos, a.bias, i);
      if (t.pos != a.pos && !o) {
        let h = Kw(n, t.pos, t.bias, i), f = Math.min(h.from, u.from), d = Math.max(h.to, u.to);
        u = f < u.from ? J.range(f, d) : J.range(d, f);
      }
      return o ? s.replaceRange(s.main.extend(u.from, u.to)) : l && i == 1 && s.ranges.length > 1 && (c = oY(s, a.pos)) ? c : l ? s.addRange(u) : J.create([u]);
    }
  };
}
function oY(n, e) {
  for (let t = 0; t < n.ranges.length; t++) {
    let { from: i, to: s } = n.ranges[t];
    if (i <= e && s >= e)
      return J.create(n.ranges.slice(0, t).concat(n.ranges.slice(t + 1)), n.mainIndex == t ? 0 : n.mainIndex - (n.mainIndex > t ? 1 : 0));
  }
  return null;
}
$s.dragstart = (n, e) => {
  let { selection: { main: t } } = n.state;
  if (e.target.draggable) {
    let s = n.docView.nearest(e.target);
    if (s && s.isWidget) {
      let r = s.posAtStart, o = r + s.length;
      (r >= t.to || o <= t.from) && (t = J.range(r, o));
    }
  }
  let { inputState: i } = n;
  return i.mouseSelection && (i.mouseSelection.dragging = !0), i.draggedContent = t, e.dataTransfer && (e.dataTransfer.setData("Text", n.state.sliceDoc(t.from, t.to)), e.dataTransfer.effectAllowed = "copyMove"), !1;
};
$s.dragend = (n) => (n.inputState.draggedContent = null, !1);
function sx(n, e, t, i) {
  if (!t)
    return;
  let s = n.posAtCoords({ x: e.clientX, y: e.clientY }, !1), { draggedContent: r } = n.inputState, o = i && r && JX(n, e) ? { from: r.from, to: r.to } : null, l = { from: s, insert: t }, a = n.state.changes(o ? [o, l] : l);
  n.focus(), n.dispatch({
    changes: a,
    selection: { anchor: a.mapPos(s, -1), head: a.mapPos(s, 1) },
    userEvent: o ? "move.drop" : "input.drop"
  }), n.inputState.draggedContent = null;
}
$s.drop = (n, e) => {
  if (!e.dataTransfer)
    return !1;
  if (n.state.readOnly)
    return !0;
  let t = e.dataTransfer.files;
  if (t && t.length) {
    let i = Array(t.length), s = 0, r = () => {
      ++s == t.length && sx(n, e, i.filter((o) => o != null).join(n.state.lineBreak), !1);
    };
    for (let o = 0; o < t.length; o++) {
      let l = new FileReader();
      l.onerror = r, l.onload = () => {
        /[\x00-\x08\x0e-\x1f]{2}/.test(l.result) || (i[o] = l.result), r();
      }, l.readAsText(t[o]);
    }
    return !0;
  } else {
    let i = e.dataTransfer.getData("Text");
    if (i)
      return sx(n, e, i, !0), !0;
  }
  return !1;
};
$s.paste = (n, e) => {
  if (n.state.readOnly)
    return !0;
  n.observer.flush();
  let t = uE ? null : e.clipboardData;
  return t ? (hE(n, t.getData("text/plain") || t.getData("text/uri-text")), !0) : (nY(n), !1);
};
function lY(n, e) {
  let t = n.dom.parentNode;
  if (!t)
    return;
  let i = t.appendChild(document.createElement("textarea"));
  i.style.cssText = "position: fixed; left: -10000px; top: 10px", i.value = e, i.focus(), i.selectionEnd = e.length, i.selectionStart = 0, setTimeout(() => {
    i.remove(), n.focus();
  }, 50);
}
function aY(n) {
  let e = [], t = [], i = !1;
  for (let s of n.selection.ranges)
    s.empty || (e.push(n.sliceDoc(s.from, s.to)), t.push(s));
  if (!e.length) {
    let s = -1;
    for (let { from: r } of n.selection.ranges) {
      let o = n.doc.lineAt(r);
      o.number > s && (e.push(o.text), t.push({ from: o.from, to: Math.min(n.doc.length, o.to + 1) })), s = o.number;
    }
    i = !0;
  }
  return { text: e.join(n.lineBreak), ranges: t, linewise: i };
}
let ab = null;
$s.copy = $s.cut = (n, e) => {
  let { text: t, ranges: i, linewise: s } = aY(n.state);
  if (!t && !s)
    return !1;
  ab = s ? t : null, e.type == "cut" && !n.state.readOnly && n.dispatch({
    changes: i,
    scrollIntoView: !0,
    userEvent: "delete.cut"
  });
  let r = uE ? null : e.clipboardData;
  return r ? (r.clearData(), r.setData("text/plain", t), !0) : (lY(n, t), !1);
};
const pE = /* @__PURE__ */ Hr.define();
function gE(n, e) {
  let t = [];
  for (let i of n.facet(UA)) {
    let s = i(n, e);
    s && t.push(s);
  }
  return t ? n.update({ effects: t, annotations: pE.of(!0) }) : null;
}
function mE(n) {
  setTimeout(() => {
    let e = n.hasFocus;
    if (e != n.inputState.notifiedFocused) {
      let t = gE(n.state, e);
      t ? n.dispatch(t) : n.update([]);
    }
  }, 10);
}
Ts.focus = (n) => {
  n.inputState.lastFocusTime = Date.now(), !n.scrollDOM.scrollTop && (n.inputState.lastScrollTop || n.inputState.lastScrollLeft) && (n.scrollDOM.scrollTop = n.inputState.lastScrollTop, n.scrollDOM.scrollLeft = n.inputState.lastScrollLeft), mE(n);
};
Ts.blur = (n) => {
  n.observer.clearSelectionRange(), mE(n);
};
Ts.compositionstart = Ts.compositionupdate = (n) => {
  n.inputState.compositionFirstChange == null && (n.inputState.compositionFirstChange = !0), n.inputState.composing < 0 && (n.inputState.composing = 0);
};
Ts.compositionend = (n) => {
  n.inputState.composing = -1, n.inputState.compositionEndedAt = Date.now(), n.inputState.compositionPendingKey = !0, n.inputState.compositionPendingChange = n.observer.pendingRecords().length > 0, n.inputState.compositionFirstChange = null, xe.chrome && xe.android ? n.observer.flushSoon() : n.inputState.compositionPendingChange ? Promise.resolve().then(() => n.observer.flush()) : setTimeout(() => {
    n.inputState.composing < 0 && n.docView.hasComposition && n.update([]);
  }, 50);
};
Ts.contextmenu = (n) => {
  n.inputState.lastContextMenu = Date.now();
};
$s.beforeinput = (n, e) => {
  var t;
  let i;
  if (xe.chrome && xe.android && (i = aE.find((s) => s.inputType == e.inputType)) && (n.observer.delayAndroidKey(i.key, i.keyCode), i.key == "Backspace" || i.key == "Delete")) {
    let s = ((t = window.visualViewport) === null || t === void 0 ? void 0 : t.height) || 0;
    setTimeout(() => {
      var r;
      (((r = window.visualViewport) === null || r === void 0 ? void 0 : r.height) || 0) > s + 10 && n.hasFocus && (n.contentDOM.blur(), n.focus());
    }, 100);
  }
  return !1;
};
const rx = /* @__PURE__ */ new Set();
function cY(n) {
  rx.has(n) || (rx.add(n), n.addEventListener("copy", () => {
  }), n.addEventListener("cut", () => {
  }));
}
const ox = ["pre-wrap", "normal", "pre-line", "break-spaces"];
class uY {
  constructor(e) {
    this.lineWrapping = e, this.doc = ut.empty, this.heightSamples = {}, this.lineHeight = 14, this.charWidth = 7, this.textHeight = 14, this.lineLength = 30, this.heightChanged = !1;
  }
  heightForGap(e, t) {
    let i = this.doc.lineAt(t).number - this.doc.lineAt(e).number + 1;
    return this.lineWrapping && (i += Math.max(0, Math.ceil((t - e - i * this.lineLength * 0.5) / this.lineLength))), this.lineHeight * i;
  }
  heightForLine(e) {
    return this.lineWrapping ? (1 + Math.max(0, Math.ceil((e - this.lineLength) / (this.lineLength - 5)))) * this.lineHeight : this.lineHeight;
  }
  setDoc(e) {
    return this.doc = e, this;
  }
  mustRefreshForWrapping(e) {
    return ox.indexOf(e) > -1 != this.lineWrapping;
  }
  mustRefreshForHeights(e) {
    let t = !1;
    for (let i = 0; i < e.length; i++) {
      let s = e[i];
      s < 0 ? i++ : this.heightSamples[Math.floor(s * 10)] || (t = !0, this.heightSamples[Math.floor(s * 10)] = !0);
    }
    return t;
  }
  refresh(e, t, i, s, r, o) {
    let l = ox.indexOf(e) > -1, a = Math.round(t) != Math.round(this.lineHeight) || this.lineWrapping != l;
    if (this.lineWrapping = l, this.lineHeight = t, this.charWidth = i, this.textHeight = s, this.lineLength = r, a) {
      this.heightSamples = {};
      for (let c = 0; c < o.length; c++) {
        let u = o[c];
        u < 0 ? c++ : this.heightSamples[Math.floor(u * 10)] = !0;
      }
    }
    return a;
  }
}
class hY {
  constructor(e, t) {
    this.from = e, this.heights = t, this.index = 0;
  }
  get more() {
    return this.index < this.heights.length;
  }
}
class Ks {
  /**
  @internal
  */
  constructor(e, t, i, s, r) {
    this.from = e, this.length = t, this.top = i, this.height = s, this._content = r;
  }
  /**
  The type of element this is. When querying lines, this may be
  an array of all the blocks that make up the line.
  */
  get type() {
    return typeof this._content == "number" ? ei.Text : Array.isArray(this._content) ? this._content : this._content.type;
  }
  /**
  The end of the element as a document position.
  */
  get to() {
    return this.from + this.length;
  }
  /**
  The bottom position of the element.
  */
  get bottom() {
    return this.top + this.height;
  }
  /**
  If this is a widget block, this will return the widget
  associated with it.
  */
  get widget() {
    return this._content instanceof _o ? this._content.widget : null;
  }
  /**
  If this is a textblock, this holds the number of line breaks
  that appear in widgets inside the block.
  */
  get widgetLineBreaks() {
    return typeof this._content == "number" ? this._content : 0;
  }
  /**
  @internal
  */
  join(e) {
    let t = (Array.isArray(this._content) ? this._content : [this]).concat(Array.isArray(e._content) ? e._content : [e]);
    return new Ks(this.from, this.length + e.length, this.top, this.height + e.height, t);
  }
}
var Et = /* @__PURE__ */ function(n) {
  return n[n.ByPos = 0] = "ByPos", n[n.ByHeight = 1] = "ByHeight", n[n.ByPosNoHeight = 2] = "ByPosNoHeight", n;
}(Et || (Et = {}));
const vd = 1e-3;
class ti {
  constructor(e, t, i = 2) {
    this.length = e, this.height = t, this.flags = i;
  }
  get outdated() {
    return (this.flags & 2) > 0;
  }
  set outdated(e) {
    this.flags = (e ? 2 : 0) | this.flags & -3;
  }
  setHeight(e, t) {
    this.height != t && (Math.abs(this.height - t) > vd && (e.heightChanged = !0), this.height = t);
  }
  // Base case is to replace a leaf node, which simply builds a tree
  // from the new nodes and returns that (HeightMapBranch and
  // HeightMapGap override this to actually use from/to)
  replace(e, t, i) {
    return ti.of(i);
  }
  // Again, these are base cases, and are overridden for branch and gap nodes.
  decomposeLeft(e, t) {
    t.push(this);
  }
  decomposeRight(e, t) {
    t.push(this);
  }
  applyChanges(e, t, i, s) {
    let r = this, o = i.doc;
    for (let l = s.length - 1; l >= 0; l--) {
      let { fromA: a, toA: c, fromB: u, toB: h } = s[l], f = r.lineAt(a, Et.ByPosNoHeight, i.setDoc(t), 0, 0), d = f.to >= c ? f : r.lineAt(c, Et.ByPosNoHeight, i, 0, 0);
      for (h += d.to - c, c = d.to; l > 0 && f.from <= s[l - 1].toA; )
        a = s[l - 1].fromA, u = s[l - 1].fromB, l--, a < f.from && (f = r.lineAt(a, Et.ByPosNoHeight, i, 0, 0));
      u += f.from - a, a = f.from;
      let p = ly.build(i.setDoc(o), e, u, h);
      r = r.replace(a, c, p);
    }
    return r.updateHeight(i, 0);
  }
  static empty() {
    return new _i(0, 0);
  }
  // nodes uses null values to indicate the position of line breaks.
  // There are never line breaks at the start or end of the array, or
  // two line breaks next to each other, and the array isn't allowed
  // to be empty (same restrictions as return value from the builder).
  static of(e) {
    if (e.length == 1)
      return e[0];
    let t = 0, i = e.length, s = 0, r = 0;
    for (; ; )
      if (t == i)
        if (s > r * 2) {
          let l = e[t - 1];
          l.break ? e.splice(--t, 1, l.left, null, l.right) : e.splice(--t, 1, l.left, l.right), i += 1 + l.break, s -= l.size;
        } else if (r > s * 2) {
          let l = e[i];
          l.break ? e.splice(i, 1, l.left, null, l.right) : e.splice(i, 1, l.left, l.right), i += 2 + l.break, r -= l.size;
        } else
          break;
      else if (s < r) {
        let l = e[t++];
        l && (s += l.size);
      } else {
        let l = e[--i];
        l && (r += l.size);
      }
    let o = 0;
    return e[t - 1] == null ? (o = 1, t--) : e[t] == null && (o = 1, i++), new fY(ti.of(e.slice(0, t)), o, ti.of(e.slice(i)));
  }
}
ti.prototype.size = 1;
class bE extends ti {
  constructor(e, t, i) {
    super(e, t), this.deco = i;
  }
  blockAt(e, t, i, s) {
    return new Ks(s, this.length, i, this.height, this.deco || 0);
  }
  lineAt(e, t, i, s, r) {
    return this.blockAt(0, i, s, r);
  }
  forEachLine(e, t, i, s, r, o) {
    e <= r + this.length && t >= r && o(this.blockAt(0, i, s, r));
  }
  updateHeight(e, t = 0, i = !1, s) {
    return s && s.from <= t && s.more && this.setHeight(e, s.heights[s.index++]), this.outdated = !1, this;
  }
  toString() {
    return `block(${this.length})`;
  }
}
class _i extends bE {
  constructor(e, t) {
    super(e, t, null), this.collapsed = 0, this.widgetHeight = 0, this.breaks = 0;
  }
  blockAt(e, t, i, s) {
    return new Ks(s, this.length, i, this.height, this.breaks);
  }
  replace(e, t, i) {
    let s = i[0];
    return i.length == 1 && (s instanceof _i || s instanceof Tn && s.flags & 4) && Math.abs(this.length - s.length) < 10 ? (s instanceof Tn ? s = new _i(s.length, this.height) : s.height = this.height, this.outdated || (s.outdated = !1), s) : ti.of(i);
  }
  updateHeight(e, t = 0, i = !1, s) {
    return s && s.from <= t && s.more ? this.setHeight(e, s.heights[s.index++]) : (i || this.outdated) && this.setHeight(e, Math.max(this.widgetHeight, e.heightForLine(this.length - this.collapsed)) + this.breaks * e.lineHeight), this.outdated = !1, this;
  }
  toString() {
    return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
  }
}
class Tn extends ti {
  constructor(e) {
    super(e, 0);
  }
  heightMetrics(e, t) {
    let i = e.doc.lineAt(t).number, s = e.doc.lineAt(t + this.length).number, r = s - i + 1, o, l = 0;
    if (e.lineWrapping) {
      let a = Math.min(this.height, e.lineHeight * r);
      o = a / r, this.length > r + 1 && (l = (this.height - a) / (this.length - r - 1));
    } else
      o = this.height / r;
    return { firstLine: i, lastLine: s, perLine: o, perChar: l };
  }
  blockAt(e, t, i, s) {
    let { firstLine: r, lastLine: o, perLine: l, perChar: a } = this.heightMetrics(t, s);
    if (t.lineWrapping) {
      let c = s + Math.round(Math.max(0, Math.min(1, (e - i) / this.height)) * this.length), u = t.doc.lineAt(c), h = l + u.length * a, f = Math.max(i, e - h / 2);
      return new Ks(u.from, u.length, f, h, 0);
    } else {
      let c = Math.max(0, Math.min(o - r, Math.floor((e - i) / l))), { from: u, length: h } = t.doc.line(r + c);
      return new Ks(u, h, i + l * c, l, 0);
    }
  }
  lineAt(e, t, i, s, r) {
    if (t == Et.ByHeight)
      return this.blockAt(e, i, s, r);
    if (t == Et.ByPosNoHeight) {
      let { from: d, to: p } = i.doc.lineAt(e);
      return new Ks(d, p - d, 0, 0, 0);
    }
    let { firstLine: o, perLine: l, perChar: a } = this.heightMetrics(i, r), c = i.doc.lineAt(e), u = l + c.length * a, h = c.number - o, f = s + l * h + a * (c.from - r - h);
    return new Ks(c.from, c.length, Math.max(s, Math.min(f, s + this.height - u)), u, 0);
  }
  forEachLine(e, t, i, s, r, o) {
    e = Math.max(e, r), t = Math.min(t, r + this.length);
    let { firstLine: l, perLine: a, perChar: c } = this.heightMetrics(i, r);
    for (let u = e, h = s; u <= t; ) {
      let f = i.doc.lineAt(u);
      if (u == e) {
        let p = f.number - l;
        h += a * p + c * (e - r - p);
      }
      let d = a + c * f.length;
      o(new Ks(f.from, f.length, h, d, 0)), h += d, u = f.to + 1;
    }
  }
  replace(e, t, i) {
    let s = this.length - t;
    if (s > 0) {
      let r = i[i.length - 1];
      r instanceof Tn ? i[i.length - 1] = new Tn(r.length + s) : i.push(null, new Tn(s - 1));
    }
    if (e > 0) {
      let r = i[0];
      r instanceof Tn ? i[0] = new Tn(e + r.length) : i.unshift(new Tn(e - 1), null);
    }
    return ti.of(i);
  }
  decomposeLeft(e, t) {
    t.push(new Tn(e - 1), null);
  }
  decomposeRight(e, t) {
    t.push(null, new Tn(this.length - e - 1));
  }
  updateHeight(e, t = 0, i = !1, s) {
    let r = t + this.length;
    if (s && s.from <= t + this.length && s.more) {
      let o = [], l = Math.max(t, s.from), a = -1;
      for (s.from > t && o.push(new Tn(s.from - t - 1).updateHeight(e, t)); l <= r && s.more; ) {
        let u = e.doc.lineAt(l).length;
        o.length && o.push(null);
        let h = s.heights[s.index++];
        a == -1 ? a = h : Math.abs(h - a) >= vd && (a = -2);
        let f = new _i(u, h);
        f.outdated = !1, o.push(f), l += u + 1;
      }
      l <= r && o.push(null, new Tn(r - l).updateHeight(e, l));
      let c = ti.of(o);
      return (a < 0 || Math.abs(c.height - this.height) >= vd || Math.abs(a - this.heightMetrics(e, t).perLine) >= vd) && (e.heightChanged = !0), c;
    } else
      (i || this.outdated) && (this.setHeight(e, e.heightForGap(t, t + this.length)), this.outdated = !1);
    return this;
  }
  toString() {
    return `gap(${this.length})`;
  }
}
class fY extends ti {
  constructor(e, t, i) {
    super(e.length + t + i.length, e.height + i.height, t | (e.outdated || i.outdated ? 2 : 0)), this.left = e, this.right = i, this.size = e.size + i.size;
  }
  get break() {
    return this.flags & 1;
  }
  blockAt(e, t, i, s) {
    let r = i + this.left.height;
    return e < r ? this.left.blockAt(e, t, i, s) : this.right.blockAt(e, t, r, s + this.left.length + this.break);
  }
  lineAt(e, t, i, s, r) {
    let o = s + this.left.height, l = r + this.left.length + this.break, a = t == Et.ByHeight ? e < o : e < l, c = a ? this.left.lineAt(e, t, i, s, r) : this.right.lineAt(e, t, i, o, l);
    if (this.break || (a ? c.to < l : c.from > l))
      return c;
    let u = t == Et.ByPosNoHeight ? Et.ByPosNoHeight : Et.ByPos;
    return a ? c.join(this.right.lineAt(l, u, i, o, l)) : this.left.lineAt(l, u, i, s, r).join(c);
  }
  forEachLine(e, t, i, s, r, o) {
    let l = s + this.left.height, a = r + this.left.length + this.break;
    if (this.break)
      e < a && this.left.forEachLine(e, t, i, s, r, o), t >= a && this.right.forEachLine(e, t, i, l, a, o);
    else {
      let c = this.lineAt(a, Et.ByPos, i, s, r);
      e < c.from && this.left.forEachLine(e, c.from - 1, i, s, r, o), c.to >= e && c.from <= t && o(c), t > c.to && this.right.forEachLine(c.to + 1, t, i, l, a, o);
    }
  }
  replace(e, t, i) {
    let s = this.left.length + this.break;
    if (t < s)
      return this.balanced(this.left.replace(e, t, i), this.right);
    if (e > this.left.length)
      return this.balanced(this.left, this.right.replace(e - s, t - s, i));
    let r = [];
    e > 0 && this.decomposeLeft(e, r);
    let o = r.length;
    for (let l of i)
      r.push(l);
    if (e > 0 && lx(r, o - 1), t < this.length) {
      let l = r.length;
      this.decomposeRight(t, r), lx(r, l);
    }
    return ti.of(r);
  }
  decomposeLeft(e, t) {
    let i = this.left.length;
    if (e <= i)
      return this.left.decomposeLeft(e, t);
    t.push(this.left), this.break && (i++, e >= i && t.push(null)), e > i && this.right.decomposeLeft(e - i, t);
  }
  decomposeRight(e, t) {
    let i = this.left.length, s = i + this.break;
    if (e >= s)
      return this.right.decomposeRight(e - s, t);
    e < i && this.left.decomposeRight(e, t), this.break && e < s && t.push(null), t.push(this.right);
  }
  balanced(e, t) {
    return e.size > 2 * t.size || t.size > 2 * e.size ? ti.of(this.break ? [e, null, t] : [e, t]) : (this.left = e, this.right = t, this.height = e.height + t.height, this.outdated = e.outdated || t.outdated, this.size = e.size + t.size, this.length = e.length + this.break + t.length, this);
  }
  updateHeight(e, t = 0, i = !1, s) {
    let { left: r, right: o } = this, l = t + r.length + this.break, a = null;
    return s && s.from <= t + r.length && s.more ? a = r = r.updateHeight(e, t, i, s) : r.updateHeight(e, t, i), s && s.from <= l + o.length && s.more ? a = o = o.updateHeight(e, l, i, s) : o.updateHeight(e, l, i), a ? this.balanced(r, o) : (this.height = this.left.height + this.right.height, this.outdated = !1, this);
  }
  toString() {
    return this.left + (this.break ? " " : "-") + this.right;
  }
}
function lx(n, e) {
  let t, i;
  n[e] == null && (t = n[e - 1]) instanceof Tn && (i = n[e + 1]) instanceof Tn && n.splice(e - 1, 3, new Tn(t.length + 1 + i.length));
}
const dY = 5;
class ly {
  constructor(e, t) {
    this.pos = e, this.oracle = t, this.nodes = [], this.lineStart = -1, this.lineEnd = -1, this.covering = null, this.writtenTo = e;
  }
  get isCovered() {
    return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
  }
  span(e, t) {
    if (this.lineStart > -1) {
      let i = Math.min(t, this.lineEnd), s = this.nodes[this.nodes.length - 1];
      s instanceof _i ? s.length += i - this.pos : (i > this.pos || !this.isCovered) && this.nodes.push(new _i(i - this.pos, -1)), this.writtenTo = i, t > i && (this.nodes.push(null), this.writtenTo++, this.lineStart = -1);
    }
    this.pos = t;
  }
  point(e, t, i) {
    if (e < t || i.heightRelevant) {
      let s = i.widget ? i.widget.estimatedHeight : 0, r = i.widget ? i.widget.lineBreaks : 0;
      s < 0 && (s = this.oracle.lineHeight);
      let o = t - e;
      i.block ? this.addBlock(new bE(o, s, i)) : (o || r || s >= dY) && this.addLineDeco(s, r, o);
    } else
      t > e && this.span(e, t);
    this.lineEnd > -1 && this.lineEnd < this.pos && (this.lineEnd = this.oracle.doc.lineAt(this.pos).to);
  }
  enterLine() {
    if (this.lineStart > -1)
      return;
    let { from: e, to: t } = this.oracle.doc.lineAt(this.pos);
    this.lineStart = e, this.lineEnd = t, this.writtenTo < e && ((this.writtenTo < e - 1 || this.nodes[this.nodes.length - 1] == null) && this.nodes.push(this.blankContent(this.writtenTo, e - 1)), this.nodes.push(null)), this.pos > e && this.nodes.push(new _i(this.pos - e, -1)), this.writtenTo = this.pos;
  }
  blankContent(e, t) {
    let i = new Tn(t - e);
    return this.oracle.doc.lineAt(e).to == t && (i.flags |= 4), i;
  }
  ensureLine() {
    this.enterLine();
    let e = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
    if (e instanceof _i)
      return e;
    let t = new _i(0, -1);
    return this.nodes.push(t), t;
  }
  addBlock(e) {
    this.enterLine();
    let t = e.deco;
    t && t.startSide > 0 && !this.isCovered && this.ensureLine(), this.nodes.push(e), this.writtenTo = this.pos = this.pos + e.length, t && t.endSide > 0 && (this.covering = e);
  }
  addLineDeco(e, t, i) {
    let s = this.ensureLine();
    s.length += i, s.collapsed += i, s.widgetHeight = Math.max(s.widgetHeight, e), s.breaks += t, this.writtenTo = this.pos = this.pos + i;
  }
  finish(e) {
    let t = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
    this.lineStart > -1 && !(t instanceof _i) && !this.isCovered ? this.nodes.push(new _i(0, -1)) : (this.writtenTo < this.pos || t == null) && this.nodes.push(this.blankContent(this.writtenTo, this.pos));
    let i = e;
    for (let s of this.nodes)
      s instanceof _i && s.updateHeight(this.oracle, i), i += s ? s.length : 1;
    return this.nodes;
  }
  // Always called with a region that on both sides either stretches
  // to a line break or the end of the document.
  // The returned array uses null to indicate line breaks, but never
  // starts or ends in a line break, or has multiple line breaks next
  // to each other.
  static build(e, t, i, s) {
    let r = new ly(i, e);
    return it.spans(t, i, s, r, 0), r.finish(i);
  }
}
function pY(n, e, t) {
  let i = new gY();
  return it.compare(n, e, t, i, 0), i.changes;
}
class gY {
  constructor() {
    this.changes = [];
  }
  compareRange() {
  }
  comparePoint(e, t, i, s) {
    (e < t || i && i.heightRelevant || s && s.heightRelevant) && tb(e, t, this.changes, 5);
  }
}
function mY(n, e) {
  let t = n.getBoundingClientRect(), i = n.ownerDocument, s = i.defaultView || window, r = Math.max(0, t.left), o = Math.min(s.innerWidth, t.right), l = Math.max(0, t.top), a = Math.min(s.innerHeight, t.bottom);
  for (let c = n.parentNode; c && c != i.body; )
    if (c.nodeType == 1) {
      let u = c, h = window.getComputedStyle(u);
      if ((u.scrollHeight > u.clientHeight || u.scrollWidth > u.clientWidth) && h.overflow != "visible") {
        let f = u.getBoundingClientRect();
        r = Math.max(r, f.left), o = Math.min(o, f.right), l = Math.max(l, f.top), a = c == n.parentNode ? f.bottom : Math.min(a, f.bottom);
      }
      c = h.position == "absolute" || h.position == "fixed" ? u.offsetParent : u.parentNode;
    } else if (c.nodeType == 11)
      c = c.host;
    else
      break;
  return {
    left: r - t.left,
    right: Math.max(r, o) - t.left,
    top: l - (t.top + e),
    bottom: Math.max(l, a) - (t.top + e)
  };
}
function bY(n, e) {
  let t = n.getBoundingClientRect();
  return {
    left: 0,
    right: t.right - t.left,
    top: e,
    bottom: t.bottom - (t.top + e)
  };
}
class um {
  constructor(e, t, i) {
    this.from = e, this.to = t, this.size = i;
  }
  static same(e, t) {
    if (e.length != t.length)
      return !1;
    for (let i = 0; i < e.length; i++) {
      let s = e[i], r = t[i];
      if (s.from != r.from || s.to != r.to || s.size != r.size)
        return !1;
    }
    return !0;
  }
  draw(e, t) {
    return Te.replace({
      widget: new vY(this.size * (t ? e.scaleY : e.scaleX), t)
    }).range(this.from, this.to);
  }
}
class vY extends Gr {
  constructor(e, t) {
    super(), this.size = e, this.vertical = t;
  }
  eq(e) {
    return e.size == this.size && e.vertical == this.vertical;
  }
  toDOM() {
    let e = document.createElement("div");
    return this.vertical ? e.style.height = this.size + "px" : (e.style.width = this.size + "px", e.style.height = "2px", e.style.display = "inline-block"), e;
  }
  get estimatedHeight() {
    return this.vertical ? this.size : -1;
  }
}
class ax {
  constructor(e) {
    this.state = e, this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 }, this.inView = !0, this.paddingTop = 0, this.paddingBottom = 0, this.contentDOMWidth = 0, this.contentDOMHeight = 0, this.editorHeight = 0, this.editorWidth = 0, this.scrollTop = 0, this.scrolledToBottom = !0, this.scaleX = 1, this.scaleY = 1, this.scrollAnchorPos = 0, this.scrollAnchorHeight = -1, this.scaler = cx, this.scrollTarget = null, this.printing = !1, this.mustMeasureContent = !0, this.defaultTextDirection = Rt.LTR, this.visibleRanges = [], this.mustEnforceCursorAssoc = !1;
    let t = e.facet(ry).some((i) => typeof i != "function" && i.class == "cm-lineWrapping");
    this.heightOracle = new uY(t), this.stateDeco = e.facet(th).filter((i) => typeof i != "function"), this.heightMap = ti.empty().applyChanges(this.stateDeco, ut.empty, this.heightOracle.setDoc(e.doc), [new Ji(0, 0, 0, e.doc.length)]), this.viewport = this.getViewport(0, null), this.updateViewportLines(), this.updateForViewport(), this.lineGaps = this.ensureLineGaps([]), this.lineGapDeco = Te.set(this.lineGaps.map((i) => i.draw(this, !1))), this.computeVisibleRanges();
  }
  updateForViewport() {
    let e = [this.viewport], { main: t } = this.state.selection;
    for (let i = 0; i <= 1; i++) {
      let s = i ? t.head : t.anchor;
      if (!e.some(({ from: r, to: o }) => s >= r && s <= o)) {
        let { from: r, to: o } = this.lineBlockAt(s);
        e.push(new Pf(r, o));
      }
    }
    this.viewports = e.sort((i, s) => i.from - s.from), this.scaler = this.heightMap.height <= 7e6 ? cx : new wY(this.heightOracle, this.heightMap, this.viewports);
  }
  updateViewportLines() {
    this.viewportLines = [], this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.heightOracle.setDoc(this.state.doc), 0, 0, (e) => {
      this.viewportLines.push(this.scaler.scale == 1 ? e : ou(e, this.scaler));
    });
  }
  update(e, t = null) {
    this.state = e.state;
    let i = this.stateDeco;
    this.stateDeco = this.state.facet(th).filter((u) => typeof u != "function");
    let s = e.changedRanges, r = Ji.extendWithRanges(s, pY(i, this.stateDeco, e ? e.changes : dn.empty(this.state.doc.length))), o = this.heightMap.height, l = this.scrolledToBottom ? null : this.scrollAnchorAt(this.scrollTop);
    this.heightMap = this.heightMap.applyChanges(this.stateDeco, e.startState.doc, this.heightOracle.setDoc(this.state.doc), r), this.heightMap.height != o && (e.flags |= 2), l ? (this.scrollAnchorPos = e.changes.mapPos(l.from, -1), this.scrollAnchorHeight = l.top) : (this.scrollAnchorPos = -1, this.scrollAnchorHeight = this.heightMap.height);
    let a = r.length ? this.mapViewport(this.viewport, e.changes) : this.viewport;
    (t && (t.range.head < a.from || t.range.head > a.to) || !this.viewportIsAppropriate(a)) && (a = this.getViewport(0, t));
    let c = !e.changes.empty || e.flags & 2 || a.from != this.viewport.from || a.to != this.viewport.to;
    this.viewport = a, this.updateForViewport(), c && this.updateViewportLines(), (this.lineGaps.length || this.viewport.to - this.viewport.from > 4e3) && this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, e.changes))), e.flags |= this.computeVisibleRanges(), t && (this.scrollTarget = t), !this.mustEnforceCursorAssoc && e.selectionSet && e.view.lineWrapping && e.state.selection.main.empty && e.state.selection.main.assoc && !e.state.facet(JA) && (this.mustEnforceCursorAssoc = !0);
  }
  measure(e) {
    let t = e.contentDOM, i = window.getComputedStyle(t), s = this.heightOracle, r = i.whiteSpace;
    this.defaultTextDirection = i.direction == "rtl" ? Rt.RTL : Rt.LTR;
    let o = this.heightOracle.mustRefreshForWrapping(r), l = t.getBoundingClientRect(), a = o || this.mustMeasureContent || this.contentDOMHeight != l.height;
    this.contentDOMHeight = l.height, this.mustMeasureContent = !1;
    let c = 0, u = 0;
    if (l.width && l.height) {
      let { scaleX: O, scaleY: x } = EA(t, l);
      (this.scaleX != O || this.scaleY != x) && (this.scaleX = O, this.scaleY = x, c |= 8, o = a = !0);
    }
    let h = (parseInt(i.paddingTop) || 0) * this.scaleY, f = (parseInt(i.paddingBottom) || 0) * this.scaleY;
    (this.paddingTop != h || this.paddingBottom != f) && (this.paddingTop = h, this.paddingBottom = f, c |= 10), this.editorWidth != e.scrollDOM.clientWidth && (s.lineWrapping && (a = !0), this.editorWidth = e.scrollDOM.clientWidth, c |= 8);
    let d = e.scrollDOM.scrollTop * this.scaleY;
    this.scrollTop != d && (this.scrollAnchorHeight = -1, this.scrollTop = d), this.scrolledToBottom = _A(e.scrollDOM);
    let p = (this.printing ? bY : mY)(t, this.paddingTop), g = p.top - this.pixelViewport.top, m = p.bottom - this.pixelViewport.bottom;
    this.pixelViewport = p;
    let b = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
    if (b != this.inView && (this.inView = b, b && (a = !0)), !this.inView && !this.scrollTarget)
      return 0;
    let y = l.width;
    if ((this.contentDOMWidth != y || this.editorHeight != e.scrollDOM.clientHeight) && (this.contentDOMWidth = l.width, this.editorHeight = e.scrollDOM.clientHeight, c |= 8), a) {
      let O = e.docView.measureVisibleLineHeights(this.viewport);
      if (s.mustRefreshForHeights(O) && (o = !0), o || s.lineWrapping && Math.abs(y - this.contentDOMWidth) > s.charWidth) {
        let { lineHeight: x, charWidth: S, textHeight: C } = e.docView.measureTextSize();
        o = x > 0 && s.refresh(r, x, S, C, y / S, O), o && (e.docView.minWidth = 0, c |= 8);
      }
      g > 0 && m > 0 ? u = Math.max(g, m) : g < 0 && m < 0 && (u = Math.min(g, m)), s.heightChanged = !1;
      for (let x of this.viewports) {
        let S = x.from == this.viewport.from ? O : e.docView.measureVisibleLineHeights(x);
        this.heightMap = (o ? ti.empty().applyChanges(this.stateDeco, ut.empty, this.heightOracle, [new Ji(0, 0, 0, e.state.doc.length)]) : this.heightMap).updateHeight(s, 0, o, new hY(x.from, S));
      }
      s.heightChanged && (c |= 2);
    }
    let v = !this.viewportIsAppropriate(this.viewport, u) || this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from || this.scrollTarget.range.head > this.viewport.to);
    return v && (this.viewport = this.getViewport(u, this.scrollTarget)), this.updateForViewport(), (c & 2 || v) && this.updateViewportLines(), (this.lineGaps.length || this.viewport.to - this.viewport.from > 4e3) && this.updateLineGaps(this.ensureLineGaps(o ? [] : this.lineGaps, e)), c |= this.computeVisibleRanges(), this.mustEnforceCursorAssoc && (this.mustEnforceCursorAssoc = !1, e.docView.enforceCursorAssoc()), c;
  }
  get visibleTop() {
    return this.scaler.fromDOM(this.pixelViewport.top);
  }
  get visibleBottom() {
    return this.scaler.fromDOM(this.pixelViewport.bottom);
  }
  getViewport(e, t) {
    let i = 0.5 - Math.max(-0.5, Math.min(0.5, e / 1e3 / 2)), s = this.heightMap, r = this.heightOracle, { visibleTop: o, visibleBottom: l } = this, a = new Pf(s.lineAt(o - i * 1e3, Et.ByHeight, r, 0, 0).from, s.lineAt(l + (1 - i) * 1e3, Et.ByHeight, r, 0, 0).to);
    if (t) {
      let { head: c } = t.range;
      if (c < a.from || c > a.to) {
        let u = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top), h = s.lineAt(c, Et.ByPos, r, 0, 0), f;
        t.y == "center" ? f = (h.top + h.bottom) / 2 - u / 2 : t.y == "start" || t.y == "nearest" && c < a.from ? f = h.top : f = h.bottom - u, a = new Pf(s.lineAt(f - 1e3 / 2, Et.ByHeight, r, 0, 0).from, s.lineAt(f + u + 1e3 / 2, Et.ByHeight, r, 0, 0).to);
      }
    }
    return a;
  }
  mapViewport(e, t) {
    let i = t.mapPos(e.from, -1), s = t.mapPos(e.to, 1);
    return new Pf(this.heightMap.lineAt(i, Et.ByPos, this.heightOracle, 0, 0).from, this.heightMap.lineAt(s, Et.ByPos, this.heightOracle, 0, 0).to);
  }
  // Checks if a given viewport covers the visible part of the
  // document and not too much beyond that.
  viewportIsAppropriate({ from: e, to: t }, i = 0) {
    if (!this.inView)
      return !0;
    let { top: s } = this.heightMap.lineAt(e, Et.ByPos, this.heightOracle, 0, 0), { bottom: r } = this.heightMap.lineAt(t, Et.ByPos, this.heightOracle, 0, 0), { visibleTop: o, visibleBottom: l } = this;
    return (e == 0 || s <= o - Math.max(10, Math.min(
      -i,
      250
      /* VP.MaxCoverMargin */
    ))) && (t == this.state.doc.length || r >= l + Math.max(10, Math.min(
      i,
      250
      /* VP.MaxCoverMargin */
    ))) && s > o - 2 * 1e3 && r < l + 2 * 1e3;
  }
  mapLineGaps(e, t) {
    if (!e.length || t.empty)
      return e;
    let i = [];
    for (let s of e)
      t.touchesRange(s.from, s.to) || i.push(new um(t.mapPos(s.from), t.mapPos(s.to), s.size));
    return i;
  }
  // Computes positions in the viewport where the start or end of a
  // line should be hidden, trying to reuse existing line gaps when
  // appropriate to avoid unneccesary redraws.
  // Uses crude character-counting for the positioning and sizing,
  // since actual DOM coordinates aren't always available and
  // predictable. Relies on generous margins (see LG.Margin) to hide
  // the artifacts this might produce from the user.
  ensureLineGaps(e, t) {
    let i = this.heightOracle.lineWrapping, s = i ? 1e4 : 2e3, r = s >> 1, o = s << 1;
    if (this.defaultTextDirection != Rt.LTR && !i)
      return [];
    let l = [], a = (c, u, h, f) => {
      if (u - c < r)
        return;
      let d = this.state.selection.main, p = [d.from];
      d.empty || p.push(d.to);
      for (let m of p)
        if (m > c && m < u) {
          a(c, m - 10, h, f), a(m + 10, u, h, f);
          return;
        }
      let g = OY(e, (m) => m.from >= h.from && m.to <= h.to && Math.abs(m.from - c) < r && Math.abs(m.to - u) < r && !p.some((b) => m.from < b && m.to > b));
      if (!g) {
        if (u < h.to && t && i && t.visibleRanges.some((m) => m.from <= u && m.to >= u)) {
          let m = t.moveToLineBoundary(J.cursor(u), !1, !0).head;
          m > c && (u = m);
        }
        g = new um(c, u, this.gapSize(h, c, u, f));
      }
      l.push(g);
    };
    for (let c of this.viewportLines) {
      if (c.length < o)
        continue;
      let u = yY(c.from, c.to, this.stateDeco);
      if (u.total < o)
        continue;
      let h = this.scrollTarget ? this.scrollTarget.range.head : null, f, d;
      if (i) {
        let p = s / this.heightOracle.lineLength * this.heightOracle.lineHeight, g, m;
        if (h != null) {
          let b = Ef(u, h), y = ((this.visibleBottom - this.visibleTop) / 2 + p) / c.height;
          g = b - y, m = b + y;
        } else
          g = (this.visibleTop - c.top - p) / c.height, m = (this.visibleBottom - c.top + p) / c.height;
        f = Af(u, g), d = Af(u, m);
      } else {
        let p = u.total * this.heightOracle.charWidth, g = s * this.heightOracle.charWidth, m, b;
        if (h != null) {
          let y = Ef(u, h), v = ((this.pixelViewport.right - this.pixelViewport.left) / 2 + g) / p;
          m = y - v, b = y + v;
        } else
          m = (this.pixelViewport.left - g) / p, b = (this.pixelViewport.right + g) / p;
        f = Af(u, m), d = Af(u, b);
      }
      f > c.from && a(c.from, f, c, u), d < c.to && a(d, c.to, c, u);
    }
    return l;
  }
  gapSize(e, t, i, s) {
    let r = Ef(s, i) - Ef(s, t);
    return this.heightOracle.lineWrapping ? e.height * r : s.total * this.heightOracle.charWidth * r;
  }
  updateLineGaps(e) {
    um.same(e, this.lineGaps) || (this.lineGaps = e, this.lineGapDeco = Te.set(e.map((t) => t.draw(this, this.heightOracle.lineWrapping))));
  }
  computeVisibleRanges() {
    let e = this.stateDeco;
    this.lineGaps.length && (e = e.concat(this.lineGapDeco));
    let t = [];
    it.spans(e, this.viewport.from, this.viewport.to, {
      span(s, r) {
        t.push({ from: s, to: r });
      },
      point() {
      }
    }, 20);
    let i = t.length != this.visibleRanges.length || this.visibleRanges.some((s, r) => s.from != t[r].from || s.to != t[r].to);
    return this.visibleRanges = t, i ? 4 : 0;
  }
  lineBlockAt(e) {
    return e >= this.viewport.from && e <= this.viewport.to && this.viewportLines.find((t) => t.from <= e && t.to >= e) || ou(this.heightMap.lineAt(e, Et.ByPos, this.heightOracle, 0, 0), this.scaler);
  }
  lineBlockAtHeight(e) {
    return ou(this.heightMap.lineAt(this.scaler.fromDOM(e), Et.ByHeight, this.heightOracle, 0, 0), this.scaler);
  }
  scrollAnchorAt(e) {
    let t = this.lineBlockAtHeight(e + 8);
    return t.from >= this.viewport.from || this.viewportLines[0].top - e > 200 ? t : this.viewportLines[0];
  }
  elementAtHeight(e) {
    return ou(this.heightMap.blockAt(this.scaler.fromDOM(e), this.heightOracle, 0, 0), this.scaler);
  }
  get docHeight() {
    return this.scaler.toDOM(this.heightMap.height);
  }
  get contentHeight() {
    return this.docHeight + this.paddingTop + this.paddingBottom;
  }
}
class Pf {
  constructor(e, t) {
    this.from = e, this.to = t;
  }
}
function yY(n, e, t) {
  let i = [], s = n, r = 0;
  return it.spans(t, n, e, {
    span() {
    },
    point(o, l) {
      o > s && (i.push({ from: s, to: o }), r += o - s), s = l;
    }
  }, 20), s < e && (i.push({ from: s, to: e }), r += e - s), { total: r, ranges: i };
}
function Af({ total: n, ranges: e }, t) {
  if (t <= 0)
    return e[0].from;
  if (t >= 1)
    return e[e.length - 1].to;
  let i = Math.floor(n * t);
  for (let s = 0; ; s++) {
    let { from: r, to: o } = e[s], l = o - r;
    if (i <= l)
      return r + i;
    i -= l;
  }
}
function Ef(n, e) {
  let t = 0;
  for (let { from: i, to: s } of n.ranges) {
    if (e <= s) {
      t += e - i;
      break;
    }
    t += s - i;
  }
  return t / n.total;
}
function OY(n, e) {
  for (let t of n)
    if (e(t))
      return t;
}
const cx = {
  toDOM(n) {
    return n;
  },
  fromDOM(n) {
    return n;
  },
  scale: 1
};
class wY {
  constructor(e, t, i) {
    let s = 0, r = 0, o = 0;
    this.viewports = i.map(({ from: l, to: a }) => {
      let c = t.lineAt(l, Et.ByPos, e, 0, 0).top, u = t.lineAt(a, Et.ByPos, e, 0, 0).bottom;
      return s += u - c, { from: l, to: a, top: c, bottom: u, domTop: 0, domBottom: 0 };
    }), this.scale = (7e6 - s) / (t.height - s);
    for (let l of this.viewports)
      l.domTop = o + (l.top - r) * this.scale, o = l.domBottom = l.domTop + (l.bottom - l.top), r = l.bottom;
  }
  toDOM(e) {
    for (let t = 0, i = 0, s = 0; ; t++) {
      let r = t < this.viewports.length ? this.viewports[t] : null;
      if (!r || e < r.top)
        return s + (e - i) * this.scale;
      if (e <= r.bottom)
        return r.domTop + (e - r.top);
      i = r.bottom, s = r.domBottom;
    }
  }
  fromDOM(e) {
    for (let t = 0, i = 0, s = 0; ; t++) {
      let r = t < this.viewports.length ? this.viewports[t] : null;
      if (!r || e < r.domTop)
        return i + (e - s) / this.scale;
      if (e <= r.domBottom)
        return r.top + (e - r.domTop);
      i = r.bottom, s = r.domBottom;
    }
  }
}
function ou(n, e) {
  if (e.scale == 1)
    return n;
  let t = e.toDOM(n.top), i = e.toDOM(n.bottom);
  return new Ks(n.from, n.length, t, i - t, Array.isArray(n._content) ? n._content.map((s) => ou(s, e)) : n._content);
}
const $f = /* @__PURE__ */ we.define({ combine: (n) => n.join(" ") }), cb = /* @__PURE__ */ we.define({ combine: (n) => n.indexOf(!0) > -1 }), ub = /* @__PURE__ */ $o.newName(), vE = /* @__PURE__ */ $o.newName(), yE = /* @__PURE__ */ $o.newName(), OE = { "&light": "." + vE, "&dark": "." + yE };
function hb(n, e, t) {
  return new $o(e, {
    finish(i) {
      return /&/.test(i) ? i.replace(/&\w*/, (s) => {
        if (s == "&")
          return n;
        if (!t || !t[s])
          throw new RangeError(`Unsupported selector: ${s}`);
        return t[s];
      }) : n + " " + i;
    }
  });
}
const xY = /* @__PURE__ */ hb("." + ub, {
  "&": {
    position: "relative !important",
    boxSizing: "border-box",
    "&.cm-focused": {
      // Provide a simple default outline to make sure a focused
      // editor is visually distinct. Can't leave the default behavior
      // because that will apply to the content element, which is
      // inside the scrollable container and doesn't include the
      // gutters. We also can't use an 'auto' outline, since those
      // are, for some reason, drawn behind the element content, which
      // will cause things like the active line background to cover
      // the outline (#297).
      outline: "1px dotted #212121"
    },
    display: "flex !important",
    flexDirection: "column"
  },
  ".cm-scroller": {
    display: "flex !important",
    alignItems: "flex-start !important",
    fontFamily: "monospace",
    lineHeight: 1.4,
    height: "100%",
    overflowX: "auto",
    position: "relative",
    zIndex: 0
  },
  ".cm-content": {
    margin: 0,
    flexGrow: 2,
    flexShrink: 0,
    display: "block",
    whiteSpace: "pre",
    wordWrap: "normal",
    // https://github.com/codemirror/dev/issues/456
    boxSizing: "border-box",
    minHeight: "100%",
    padding: "4px 0",
    outline: "none",
    "&[contenteditable=true]": {
      WebkitUserModify: "read-write-plaintext-only"
    }
  },
  ".cm-lineWrapping": {
    whiteSpace_fallback: "pre-wrap",
    // For IE
    whiteSpace: "break-spaces",
    wordBreak: "break-word",
    // For Safari, which doesn't support overflow-wrap: anywhere
    overflowWrap: "anywhere",
    flexShrink: 1
  },
  "&light .cm-content": { caretColor: "black" },
  "&dark .cm-content": { caretColor: "white" },
  ".cm-line": {
    display: "block",
    padding: "0 2px 0 6px"
  },
  ".cm-layer": {
    position: "absolute",
    left: 0,
    top: 0,
    contain: "size style",
    "& > *": {
      position: "absolute"
    }
  },
  "&light .cm-selectionBackground": {
    background: "#d9d9d9"
  },
  "&dark .cm-selectionBackground": {
    background: "#222"
  },
  "&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
    background: "#d7d4f0"
  },
  "&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
    background: "#233"
  },
  ".cm-cursorLayer": {
    pointerEvents: "none"
  },
  "&.cm-focused > .cm-scroller > .cm-cursorLayer": {
    animation: "steps(1) cm-blink 1.2s infinite"
  },
  // Two animations defined so that we can switch between them to
  // restart the animation without forcing another style
  // recomputation.
  "@keyframes cm-blink": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
  "@keyframes cm-blink2": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
  ".cm-cursor, .cm-dropCursor": {
    borderLeft: "1.2px solid black",
    marginLeft: "-0.6px",
    pointerEvents: "none"
  },
  ".cm-cursor": {
    display: "none"
  },
  "&dark .cm-cursor": {
    borderLeftColor: "#444"
  },
  ".cm-dropCursor": {
    position: "absolute"
  },
  "&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor": {
    display: "block"
  },
  ".cm-iso": {
    unicodeBidi: "isolate"
  },
  ".cm-announced": {
    position: "fixed",
    top: "-10000px"
  },
  "@media print": {
    ".cm-announced": { display: "none" }
  },
  "&light .cm-activeLine": { backgroundColor: "#cceeff44" },
  "&dark .cm-activeLine": { backgroundColor: "#99eeff33" },
  "&light .cm-specialChar": { color: "red" },
  "&dark .cm-specialChar": { color: "#f78" },
  ".cm-gutters": {
    flexShrink: 0,
    display: "flex",
    height: "100%",
    boxSizing: "border-box",
    insetInlineStart: 0,
    zIndex: 200
  },
  "&light .cm-gutters": {
    backgroundColor: "#f5f5f5",
    color: "#6c6c6c",
    borderRight: "1px solid #ddd"
  },
  "&dark .cm-gutters": {
    backgroundColor: "#333338",
    color: "#ccc"
  },
  ".cm-gutter": {
    display: "flex !important",
    // Necessary -- prevents margin collapsing
    flexDirection: "column",
    flexShrink: 0,
    boxSizing: "border-box",
    minHeight: "100%",
    overflow: "hidden"
  },
  ".cm-gutterElement": {
    boxSizing: "border-box"
  },
  ".cm-lineNumbers .cm-gutterElement": {
    padding: "0 3px 0 5px",
    minWidth: "20px",
    textAlign: "right",
    whiteSpace: "nowrap"
  },
  "&light .cm-activeLineGutter": {
    backgroundColor: "#e2f2ff"
  },
  "&dark .cm-activeLineGutter": {
    backgroundColor: "#222227"
  },
  ".cm-panels": {
    boxSizing: "border-box",
    position: "sticky",
    left: 0,
    right: 0
  },
  "&light .cm-panels": {
    backgroundColor: "#f5f5f5",
    color: "black"
  },
  "&light .cm-panels-top": {
    borderBottom: "1px solid #ddd"
  },
  "&light .cm-panels-bottom": {
    borderTop: "1px solid #ddd"
  },
  "&dark .cm-panels": {
    backgroundColor: "#333338",
    color: "white"
  },
  ".cm-tab": {
    display: "inline-block",
    overflow: "hidden",
    verticalAlign: "bottom"
  },
  ".cm-widgetBuffer": {
    verticalAlign: "text-top",
    height: "1em",
    width: 0,
    display: "inline"
  },
  ".cm-placeholder": {
    color: "#888",
    display: "inline-block",
    verticalAlign: "top"
  },
  ".cm-highlightSpace:before": {
    content: "attr(data-display)",
    position: "absolute",
    pointerEvents: "none",
    color: "#888"
  },
  ".cm-highlightTab": {
    backgroundImage: `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="20"><path stroke="%23888" stroke-width="1" fill="none" d="M1 10H196L190 5M190 15L196 10M197 4L197 16"/></svg>')`,
    backgroundSize: "auto 100%",
    backgroundPosition: "right 90%",
    backgroundRepeat: "no-repeat"
  },
  ".cm-trailingSpace": {
    backgroundColor: "#ff332255"
  },
  ".cm-button": {
    verticalAlign: "middle",
    color: "inherit",
    fontSize: "70%",
    padding: ".2em 1em",
    borderRadius: "1px"
  },
  "&light .cm-button": {
    backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
    border: "1px solid #888",
    "&:active": {
      backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
    }
  },
  "&dark .cm-button": {
    backgroundImage: "linear-gradient(#393939, #111)",
    border: "1px solid #888",
    "&:active": {
      backgroundImage: "linear-gradient(#111, #333)"
    }
  },
  ".cm-textfield": {
    verticalAlign: "middle",
    color: "inherit",
    fontSize: "70%",
    border: "1px solid silver",
    padding: ".2em .5em"
  },
  "&light .cm-textfield": {
    backgroundColor: "white"
  },
  "&dark .cm-textfield": {
    border: "1px solid #555",
    backgroundColor: "inherit"
  }
}, OE), lu = "￿";
class SY {
  constructor(e, t) {
    this.points = e, this.text = "", this.lineSeparator = t.facet(at.lineSeparator);
  }
  append(e) {
    this.text += e;
  }
  lineBreak() {
    this.text += lu;
  }
  readRange(e, t) {
    if (!e)
      return this;
    let i = e.parentNode;
    for (let s = e; ; ) {
      this.findPointBefore(i, s);
      let r = this.text.length;
      this.readNode(s);
      let o = s.nextSibling;
      if (o == t)
        break;
      let l = _t.get(s), a = _t.get(o);
      (l && a ? l.breakAfter : (l ? l.breakAfter : ux(s)) || ux(o) && (s.nodeName != "BR" || s.cmIgnore) && this.text.length > r) && this.lineBreak(), s = o;
    }
    return this.findPointBefore(i, t), this;
  }
  readTextNode(e) {
    let t = e.nodeValue;
    for (let i of this.points)
      i.node == e && (i.pos = this.text.length + Math.min(i.offset, t.length));
    for (let i = 0, s = this.lineSeparator ? null : /\r\n?|\n/g; ; ) {
      let r = -1, o = 1, l;
      if (this.lineSeparator ? (r = t.indexOf(this.lineSeparator, i), o = this.lineSeparator.length) : (l = s.exec(t)) && (r = l.index, o = l[0].length), this.append(t.slice(i, r < 0 ? t.length : r)), r < 0)
        break;
      if (this.lineBreak(), o > 1)
        for (let a of this.points)
          a.node == e && a.pos > this.text.length && (a.pos -= o - 1);
      i = r + o;
    }
  }
  readNode(e) {
    if (e.cmIgnore)
      return;
    let t = _t.get(e), i = t && t.overrideDOMText;
    if (i != null) {
      this.findPointInside(e, i.length);
      for (let s = i.iter(); !s.next().done; )
        s.lineBreak ? this.lineBreak() : this.append(s.value);
    } else
      e.nodeType == 3 ? this.readTextNode(e) : e.nodeName == "BR" ? e.nextSibling && this.lineBreak() : e.nodeType == 1 && this.readRange(e.firstChild, null);
  }
  findPointBefore(e, t) {
    for (let i of this.points)
      i.node == e && e.childNodes[i.offset] == t && (i.pos = this.text.length);
  }
  findPointInside(e, t) {
    for (let i of this.points)
      (e.nodeType == 3 ? i.node == e : e.contains(i.node)) && (i.pos = this.text.length + (CY(e, i.node, i.offset) ? t : 0));
  }
}
function CY(n, e, t) {
  for (; ; ) {
    if (!e || t < Qr(e))
      return !1;
    if (e == n)
      return !0;
    t = eh(e) + 1, e = e.parentNode;
  }
}
function ux(n) {
  return n.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(n.nodeName);
}
class hx {
  constructor(e, t) {
    this.node = e, this.offset = t, this.pos = -1;
  }
}
class kY {
  constructor(e, t, i, s) {
    this.typeOver = s, this.bounds = null, this.text = "";
    let { impreciseHead: r, impreciseAnchor: o } = e.docView;
    if (e.state.readOnly && t > -1)
      this.newSel = null;
    else if (t > -1 && (this.bounds = e.docView.domBoundsAround(t, i, 0))) {
      let l = r || o ? [] : EY(e), a = new SY(l, e.state);
      a.readRange(this.bounds.startDOM, this.bounds.endDOM), this.text = a.text, this.newSel = $Y(l, this.bounds.from);
    } else {
      let l = e.observer.selectionRange, a = r && r.node == l.focusNode && r.offset == l.focusOffset || !H0(e.contentDOM, l.focusNode) ? e.state.selection.main.head : e.docView.posFromDOM(l.focusNode, l.focusOffset), c = o && o.node == l.anchorNode && o.offset == l.anchorOffset || !H0(e.contentDOM, l.anchorNode) ? e.state.selection.main.anchor : e.docView.posFromDOM(l.anchorNode, l.anchorOffset), u = e.viewport;
      if ((xe.ios || xe.chrome) && e.state.selection.main.empty && a != c && (u.from > 0 || u.to < e.state.doc.length)) {
        let h = Math.min(a, c), f = Math.max(a, c), d = u.from - h, p = u.to - f;
        (d == 0 || d == 1 || h == 0) && (p == 0 || p == -1 || f == e.state.doc.length) && (a = 0, c = e.state.doc.length);
      }
      this.newSel = J.single(c, a);
    }
  }
}
function wE(n, e) {
  let t, { newSel: i } = e, s = n.state.selection.main, r = n.inputState.lastKeyTime > Date.now() - 100 ? n.inputState.lastKeyCode : -1;
  if (e.bounds) {
    let { from: o, to: l } = e.bounds, a = s.from, c = null;
    (r === 8 || xe.android && e.text.length < l - o) && (a = s.to, c = "end");
    let u = AY(n.state.doc.sliceString(o, l, lu), e.text, a - o, c);
    u && (xe.chrome && r == 13 && u.toB == u.from + 2 && e.text.slice(u.from, u.toB) == lu + lu && u.toB--, t = {
      from: o + u.from,
      to: o + u.toA,
      insert: ut.of(e.text.slice(u.from, u.toB).split(lu))
    });
  } else
    i && (!n.hasFocus && n.state.facet(tg) || i.main.eq(s)) && (i = null);
  if (!t && !i)
    return !1;
  if (!t && e.typeOver && !s.empty && i && i.main.empty ? t = { from: s.from, to: s.to, insert: n.state.doc.slice(s.from, s.to) } : t && t.from >= s.from && t.to <= s.to && (t.from != s.from || t.to != s.to) && s.to - s.from - (t.to - t.from) <= 4 ? t = {
    from: s.from,
    to: s.to,
    insert: n.state.doc.slice(s.from, t.from).append(t.insert).append(n.state.doc.slice(t.to, s.to))
  } : (xe.mac || xe.android) && t && t.from == t.to && t.from == s.head - 1 && /^\. ?$/.test(t.insert.toString()) && n.contentDOM.getAttribute("autocorrect") == "off" ? (i && t.insert.length == 2 && (i = J.single(i.main.anchor - 1, i.main.head - 1)), t = { from: s.from, to: s.to, insert: ut.of([" "]) }) : xe.chrome && t && t.from == t.to && t.from == s.head && t.insert.toString() == `
 ` && n.lineWrapping && (i && (i = J.single(i.main.anchor - 1, i.main.head - 1)), t = { from: s.from, to: s.to, insert: ut.of([" "]) }), t) {
    if (xe.ios && n.inputState.flushIOSKey() || xe.android && (t.from == s.from && t.to == s.to && t.insert.length == 1 && t.insert.lines == 2 && ka(n.contentDOM, "Enter", 13) || (t.from == s.from - 1 && t.to == s.to && t.insert.length == 0 || r == 8 && t.insert.length < t.to - t.from && t.to > s.head) && ka(n.contentDOM, "Backspace", 8) || t.from == s.from && t.to == s.to + 1 && t.insert.length == 0 && ka(n.contentDOM, "Delete", 46)))
      return !0;
    let o = t.insert.toString();
    n.inputState.composing >= 0 && n.inputState.composing++;
    let l, a = () => l || (l = PY(n, t, i));
    return n.state.facet(GA).some((c) => c(n, t.from, t.to, o, a)) || n.dispatch(a()), !0;
  } else if (i && !i.main.eq(s)) {
    let o = !1, l = "select";
    return n.inputState.lastSelectionTime > Date.now() - 50 && (n.inputState.lastSelectionOrigin == "select" && (o = !0), l = n.inputState.lastSelectionOrigin), n.dispatch({ selection: i, scrollIntoView: o, userEvent: l }), !0;
  } else
    return !1;
}
function PY(n, e, t) {
  let i, s = n.state, r = s.selection.main;
  if (e.from >= r.from && e.to <= r.to && e.to - e.from >= (r.to - r.from) / 3 && (!t || t.main.empty && t.main.from == e.from + e.insert.length) && n.inputState.composing < 0) {
    let l = r.from < e.from ? s.sliceDoc(r.from, e.from) : "", a = r.to > e.to ? s.sliceDoc(e.to, r.to) : "";
    i = s.replaceSelection(n.state.toText(l + e.insert.sliceString(0, void 0, n.state.lineBreak) + a));
  } else {
    let l = s.changes(e), a = t && t.main.to <= l.newLength ? t.main : void 0;
    if (s.selection.ranges.length > 1 && n.inputState.composing >= 0 && e.to <= r.to && e.to >= r.to - 10) {
      let c = n.state.sliceDoc(e.from, e.to), u, h = t && rE(n, t.main.head);
      if (h) {
        let p = e.insert.length - (e.to - e.from);
        u = { from: h.from, to: h.to - p };
      } else
        u = n.state.doc.lineAt(r.head);
      let f = r.to - e.to, d = r.to - r.from;
      i = s.changeByRange((p) => {
        if (p.from == r.from && p.to == r.to)
          return { changes: l, range: a || p.map(l) };
        let g = p.to - f, m = g - c.length;
        if (p.to - p.from != d || n.state.sliceDoc(m, g) != c || // Unfortunately, there's no way to make multiple
        // changes in the same node work without aborting
        // composition, so cursors in the composition range are
        // ignored.
        p.to >= u.from && p.from <= u.to)
          return { range: p };
        let b = s.changes({ from: m, to: g, insert: e.insert }), y = p.to - r.to;
        return {
          changes: b,
          range: a ? J.range(Math.max(0, a.anchor + y), Math.max(0, a.head + y)) : p.map(b)
        };
      });
    } else
      i = {
        changes: l,
        selection: a && s.selection.replaceRange(a)
      };
  }
  let o = "input.type";
  return (n.composing || n.inputState.compositionPendingChange && n.inputState.compositionEndedAt > Date.now() - 50) && (n.inputState.compositionPendingChange = !1, o += ".compose", n.inputState.compositionFirstChange && (o += ".start", n.inputState.compositionFirstChange = !1)), s.update(i, { userEvent: o, scrollIntoView: !0 });
}
function AY(n, e, t, i) {
  let s = Math.min(n.length, e.length), r = 0;
  for (; r < s && n.charCodeAt(r) == e.charCodeAt(r); )
    r++;
  if (r == s && n.length == e.length)
    return null;
  let o = n.length, l = e.length;
  for (; o > 0 && l > 0 && n.charCodeAt(o - 1) == e.charCodeAt(l - 1); )
    o--, l--;
  if (i == "end") {
    let a = Math.max(0, r - Math.min(o, l));
    t -= o + a - r;
  }
  if (o < r && n.length < e.length) {
    let a = t <= r && t >= o ? r - t : 0;
    r -= a, l = r + (l - o), o = r;
  } else if (l < r) {
    let a = t <= r && t >= l ? r - t : 0;
    r -= a, o = r + (o - l), l = r;
  }
  return { from: r, toA: o, toB: l };
}
function EY(n) {
  let e = [];
  if (n.root.activeElement != n.contentDOM)
    return e;
  let { anchorNode: t, anchorOffset: i, focusNode: s, focusOffset: r } = n.observer.selectionRange;
  return t && (e.push(new hx(t, i)), (s != t || r != i) && e.push(new hx(s, r))), e;
}
function $Y(n, e) {
  if (n.length == 0)
    return null;
  let t = n[0].pos, i = n.length == 2 ? n[1].pos : t;
  return t > -1 && i > -1 ? J.single(t + e, i + e) : null;
}
const TY = {
  childList: !0,
  characterData: !0,
  subtree: !0,
  attributes: !0,
  characterDataOldValue: !0
}, hm = xe.ie && xe.ie_version <= 11;
class _Y {
  constructor(e) {
    this.view = e, this.active = !1, this.selectionRange = new pX(), this.selectionChanged = !1, this.delayedFlush = -1, this.resizeTimeout = -1, this.queue = [], this.delayedAndroidKey = null, this.flushingAndroidKey = -1, this.lastChange = 0, this.scrollTargets = [], this.intersection = null, this.resizeScroll = null, this.intersecting = !1, this.gapIntersection = null, this.gaps = [], this.parentCheck = -1, this.dom = e.contentDOM, this.observer = new MutationObserver((t) => {
      for (let i of t)
        this.queue.push(i);
      (xe.ie && xe.ie_version <= 11 || xe.ios && e.composing) && t.some((i) => i.type == "childList" && i.removedNodes.length || i.type == "characterData" && i.oldValue.length > i.target.nodeValue.length) ? this.flushSoon() : this.flush();
    }), hm && (this.onCharData = (t) => {
      this.queue.push({
        target: t.target,
        type: "characterData",
        oldValue: t.prevValue
      }), this.flushSoon();
    }), this.onSelectionChange = this.onSelectionChange.bind(this), this.onResize = this.onResize.bind(this), this.onPrint = this.onPrint.bind(this), this.onScroll = this.onScroll.bind(this), typeof ResizeObserver == "function" && (this.resizeScroll = new ResizeObserver(() => {
      var t;
      ((t = this.view.docView) === null || t === void 0 ? void 0 : t.lastUpdate) < Date.now() - 75 && this.onResize();
    }), this.resizeScroll.observe(e.scrollDOM)), this.addWindowListeners(this.win = e.win), this.start(), typeof IntersectionObserver == "function" && (this.intersection = new IntersectionObserver((t) => {
      this.parentCheck < 0 && (this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1e3)), t.length > 0 && t[t.length - 1].intersectionRatio > 0 != this.intersecting && (this.intersecting = !this.intersecting, this.intersecting != this.view.inView && this.onScrollChanged(document.createEvent("Event")));
    }, { threshold: [0, 1e-3] }), this.intersection.observe(this.dom), this.gapIntersection = new IntersectionObserver((t) => {
      t.length > 0 && t[t.length - 1].intersectionRatio > 0 && this.onScrollChanged(document.createEvent("Event"));
    }, {})), this.listenForScroll(), this.readSelectionRange();
  }
  onScrollChanged(e) {
    this.view.inputState.runHandlers("scroll", e), this.intersecting && this.view.measure();
  }
  onScroll(e) {
    this.intersecting && this.flush(!1), this.onScrollChanged(e);
  }
  onResize() {
    this.resizeTimeout < 0 && (this.resizeTimeout = setTimeout(() => {
      this.resizeTimeout = -1, this.view.requestMeasure();
    }, 50));
  }
  onPrint() {
    this.view.viewState.printing = !0, this.view.measure(), setTimeout(() => {
      this.view.viewState.printing = !1, this.view.requestMeasure();
    }, 500);
  }
  updateGaps(e) {
    if (this.gapIntersection && (e.length != this.gaps.length || this.gaps.some((t, i) => t != e[i]))) {
      this.gapIntersection.disconnect();
      for (let t of e)
        this.gapIntersection.observe(t);
      this.gaps = e;
    }
  }
  onSelectionChange(e) {
    let t = this.selectionChanged;
    if (!this.readSelectionRange() || this.delayedAndroidKey)
      return;
    let { view: i } = this, s = this.selectionRange;
    if (i.state.facet(tg) ? i.root.activeElement != this.dom : !md(i.dom, s))
      return;
    let r = s.anchorNode && i.docView.nearest(s.anchorNode);
    if (r && r.ignoreEvent(e)) {
      t || (this.selectionChanged = !1);
      return;
    }
    (xe.ie && xe.ie_version <= 11 || xe.android && xe.chrome) && !i.state.selection.main.empty && // (Selection.isCollapsed isn't reliable on IE)
    s.focusNode && Cu(s.focusNode, s.focusOffset, s.anchorNode, s.anchorOffset) ? this.flushSoon() : this.flush(!1);
  }
  readSelectionRange() {
    let { view: e } = this, t = xe.safari && e.root.nodeType == 11 && uX(this.dom.ownerDocument) == this.dom && MY(this.view) || Vd(e.root);
    if (!t || this.selectionRange.eq(t))
      return !1;
    let i = md(this.dom, t);
    return i && !this.selectionChanged && e.inputState.lastFocusTime > Date.now() - 200 && e.inputState.lastTouchTime < Date.now() - 300 && mX(this.dom, t) ? (this.view.inputState.lastFocusTime = 0, e.docView.updateSelection(), !1) : (this.selectionRange.setRange(t), i && (this.selectionChanged = !0), !0);
  }
  setSelectionRange(e, t) {
    this.selectionRange.set(e.node, e.offset, t.node, t.offset), this.selectionChanged = !1;
  }
  clearSelectionRange() {
    this.selectionRange.set(null, 0, null, 0);
  }
  listenForScroll() {
    this.parentCheck = -1;
    let e = 0, t = null;
    for (let i = this.dom; i; )
      if (i.nodeType == 1)
        !t && e < this.scrollTargets.length && this.scrollTargets[e] == i ? e++ : t || (t = this.scrollTargets.slice(0, e)), t && t.push(i), i = i.assignedSlot || i.parentNode;
      else if (i.nodeType == 11)
        i = i.host;
      else
        break;
    if (e < this.scrollTargets.length && !t && (t = this.scrollTargets.slice(0, e)), t) {
      for (let i of this.scrollTargets)
        i.removeEventListener("scroll", this.onScroll);
      for (let i of this.scrollTargets = t)
        i.addEventListener("scroll", this.onScroll);
    }
  }
  ignore(e) {
    if (!this.active)
      return e();
    try {
      return this.stop(), e();
    } finally {
      this.start(), this.clear();
    }
  }
  start() {
    this.active || (this.observer.observe(this.dom, TY), hm && this.dom.addEventListener("DOMCharacterDataModified", this.onCharData), this.active = !0);
  }
  stop() {
    this.active && (this.active = !1, this.observer.disconnect(), hm && this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData));
  }
  // Throw away any pending changes
  clear() {
    this.processRecords(), this.queue.length = 0, this.selectionChanged = !1;
  }
  // Chrome Android, especially in combination with GBoard, not only
  // doesn't reliably fire regular key events, but also often
  // surrounds the effect of enter or backspace with a bunch of
  // composition events that, when interrupted, cause text duplication
  // or other kinds of corruption. This hack makes the editor back off
  // from handling DOM changes for a moment when such a key is
  // detected (via beforeinput or keydown), and then tries to flush
  // them or, if that has no effect, dispatches the given key.
  delayAndroidKey(e, t) {
    var i;
    if (!this.delayedAndroidKey) {
      let s = () => {
        let r = this.delayedAndroidKey;
        r && (this.clearDelayedAndroidKey(), this.view.inputState.lastKeyCode = r.keyCode, this.view.inputState.lastKeyTime = Date.now(), !this.flush() && r.force && ka(this.dom, r.key, r.keyCode));
      };
      this.flushingAndroidKey = this.view.win.requestAnimationFrame(s);
    }
    (!this.delayedAndroidKey || e == "Enter") && (this.delayedAndroidKey = {
      key: e,
      keyCode: t,
      // Only run the key handler when no changes are detected if
      // this isn't coming right after another change, in which case
      // it is probably part of a weird chain of updates, and should
      // be ignored if it returns the DOM to its previous state.
      force: this.lastChange < Date.now() - 50 || !!(!((i = this.delayedAndroidKey) === null || i === void 0) && i.force)
    });
  }
  clearDelayedAndroidKey() {
    this.win.cancelAnimationFrame(this.flushingAndroidKey), this.delayedAndroidKey = null, this.flushingAndroidKey = -1;
  }
  flushSoon() {
    this.delayedFlush < 0 && (this.delayedFlush = this.view.win.requestAnimationFrame(() => {
      this.delayedFlush = -1, this.flush();
    }));
  }
  forceFlush() {
    this.delayedFlush >= 0 && (this.view.win.cancelAnimationFrame(this.delayedFlush), this.delayedFlush = -1), this.flush();
  }
  pendingRecords() {
    for (let e of this.observer.takeRecords())
      this.queue.push(e);
    return this.queue;
  }
  processRecords() {
    let e = this.pendingRecords();
    e.length && (this.queue = []);
    let t = -1, i = -1, s = !1;
    for (let r of e) {
      let o = this.readMutation(r);
      o && (o.typeOver && (s = !0), t == -1 ? { from: t, to: i } = o : (t = Math.min(o.from, t), i = Math.max(o.to, i)));
    }
    return { from: t, to: i, typeOver: s };
  }
  readChange() {
    let { from: e, to: t, typeOver: i } = this.processRecords(), s = this.selectionChanged && md(this.dom, this.selectionRange);
    if (e < 0 && !s)
      return null;
    e > -1 && (this.lastChange = Date.now()), this.view.inputState.lastFocusTime = 0, this.selectionChanged = !1;
    let r = new kY(this.view, e, t, i);
    return this.view.docView.domChanged = { newSel: r.newSel ? r.newSel.main : null }, r;
  }
  // Apply pending changes, if any
  flush(e = !0) {
    if (this.delayedFlush >= 0 || this.delayedAndroidKey)
      return !1;
    e && this.readSelectionRange();
    let t = this.readChange();
    if (!t)
      return this.view.requestMeasure(), !1;
    let i = this.view.state, s = wE(this.view, t);
    return this.view.state == i && this.view.update([]), s;
  }
  readMutation(e) {
    let t = this.view.docView.nearest(e.target);
    if (!t || t.ignoreMutation(e))
      return null;
    if (t.markDirty(e.type == "attributes"), e.type == "attributes" && (t.flags |= 4), e.type == "childList") {
      let i = fx(t, e.previousSibling || e.target.previousSibling, -1), s = fx(t, e.nextSibling || e.target.nextSibling, 1);
      return {
        from: i ? t.posAfter(i) : t.posAtStart,
        to: s ? t.posBefore(s) : t.posAtEnd,
        typeOver: !1
      };
    } else
      return e.type == "characterData" ? { from: t.posAtStart, to: t.posAtEnd, typeOver: e.target.nodeValue == e.oldValue } : null;
  }
  setWindow(e) {
    e != this.win && (this.removeWindowListeners(this.win), this.win = e, this.addWindowListeners(this.win));
  }
  addWindowListeners(e) {
    e.addEventListener("resize", this.onResize), e.addEventListener("beforeprint", this.onPrint), e.addEventListener("scroll", this.onScroll), e.document.addEventListener("selectionchange", this.onSelectionChange);
  }
  removeWindowListeners(e) {
    e.removeEventListener("scroll", this.onScroll), e.removeEventListener("resize", this.onResize), e.removeEventListener("beforeprint", this.onPrint), e.document.removeEventListener("selectionchange", this.onSelectionChange);
  }
  destroy() {
    var e, t, i;
    this.stop(), (e = this.intersection) === null || e === void 0 || e.disconnect(), (t = this.gapIntersection) === null || t === void 0 || t.disconnect(), (i = this.resizeScroll) === null || i === void 0 || i.disconnect();
    for (let s of this.scrollTargets)
      s.removeEventListener("scroll", this.onScroll);
    this.removeWindowListeners(this.win), clearTimeout(this.parentCheck), clearTimeout(this.resizeTimeout), this.win.cancelAnimationFrame(this.delayedFlush), this.win.cancelAnimationFrame(this.flushingAndroidKey);
  }
}
function fx(n, e, t) {
  for (; e; ) {
    let i = _t.get(e);
    if (i && i.parent == n)
      return i;
    let s = e.parentNode;
    e = s != n.dom ? s : t > 0 ? e.nextSibling : e.previousSibling;
  }
  return null;
}
function MY(n) {
  let e = null;
  function t(a) {
    a.preventDefault(), a.stopImmediatePropagation(), e = a.getTargetRanges()[0];
  }
  if (n.contentDOM.addEventListener("beforeinput", t, !0), n.dom.ownerDocument.execCommand("indent"), n.contentDOM.removeEventListener("beforeinput", t, !0), !e)
    return null;
  let i = e.startContainer, s = e.startOffset, r = e.endContainer, o = e.endOffset, l = n.docView.domAtPos(n.state.selection.main.anchor);
  return Cu(l.node, l.offset, r, o) && ([i, s, r, o] = [r, o, i, s]), { anchorNode: i, anchorOffset: s, focusNode: r, focusOffset: o };
}
class Oe {
  /**
  The current editor state.
  */
  get state() {
    return this.viewState.state;
  }
  /**
  To be able to display large documents without consuming too much
  memory or overloading the browser, CodeMirror only draws the
  code that is visible (plus a margin around it) to the DOM. This
  property tells you the extent of the current drawn viewport, in
  document positions.
  */
  get viewport() {
    return this.viewState.viewport;
  }
  /**
  When there are, for example, large collapsed ranges in the
  viewport, its size can be a lot bigger than the actual visible
  content. Thus, if you are doing something like styling the
  content in the viewport, it is preferable to only do so for
  these ranges, which are the subset of the viewport that is
  actually drawn.
  */
  get visibleRanges() {
    return this.viewState.visibleRanges;
  }
  /**
  Returns false when the editor is entirely scrolled out of view
  or otherwise hidden.
  */
  get inView() {
    return this.viewState.inView;
  }
  /**
  Indicates whether the user is currently composing text via
  [IME](https://en.wikipedia.org/wiki/Input_method), and at least
  one change has been made in the current composition.
  */
  get composing() {
    return this.inputState.composing > 0;
  }
  /**
  Indicates whether the user is currently in composing state. Note
  that on some platforms, like Android, this will be the case a
  lot, since just putting the cursor on a word starts a
  composition there.
  */
  get compositionStarted() {
    return this.inputState.composing >= 0;
  }
  /**
  The document or shadow root that the view lives in.
  */
  get root() {
    return this._root;
  }
  /**
  @internal
  */
  get win() {
    return this.dom.ownerDocument.defaultView || window;
  }
  /**
  Construct a new view. You'll want to either provide a `parent`
  option, or put `view.dom` into your document after creating a
  view, so that the user can see the editor.
  */
  constructor(e = {}) {
    this.plugins = [], this.pluginMap = /* @__PURE__ */ new Map(), this.editorAttrs = {}, this.contentAttrs = {}, this.bidiCache = [], this.destroyed = !1, this.updateState = 2, this.measureScheduled = -1, this.measureRequests = [], this.contentDOM = document.createElement("div"), this.scrollDOM = document.createElement("div"), this.scrollDOM.tabIndex = -1, this.scrollDOM.className = "cm-scroller", this.scrollDOM.appendChild(this.contentDOM), this.announceDOM = document.createElement("div"), this.announceDOM.className = "cm-announced", this.announceDOM.setAttribute("aria-live", "polite"), this.dom = document.createElement("div"), this.dom.appendChild(this.announceDOM), this.dom.appendChild(this.scrollDOM), e.parent && e.parent.appendChild(this.dom);
    let { dispatch: t } = e;
    this.dispatchTransactions = e.dispatchTransactions || t && ((i) => i.forEach((s) => t(s, this))) || ((i) => this.update(i)), this.dispatch = this.dispatch.bind(this), this._root = e.root || gX(e.parent) || document, this.viewState = new ax(e.state || at.create(e)), e.scrollTo && e.scrollTo.is(Sf) && (this.viewState.scrollTarget = e.scrollTo.value.clip(this.viewState.state)), this.plugins = this.state.facet(su).map((i) => new lm(i));
    for (let i of this.plugins)
      i.update(this);
    this.observer = new _Y(this), this.inputState = new XX(this), this.inputState.ensureHandlers(this.plugins), this.docView = new Vw(this), this.mountStyles(), this.updateAttrs(), this.updateState = 0, this.requestMeasure();
  }
  dispatch(...e) {
    let t = e.length == 1 && e[0] instanceof en ? e : e.length == 1 && Array.isArray(e[0]) ? e[0] : [this.state.update(...e)];
    this.dispatchTransactions(t, this);
  }
  /**
  Update the view for the given array of transactions. This will
  update the visible document and selection to match the state
  produced by the transactions, and notify view plugins of the
  change. You should usually call
  [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
  as a primitive.
  */
  update(e) {
    if (this.updateState != 0)
      throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
    let t = !1, i = !1, s, r = this.state;
    for (let f of e) {
      if (f.startState != r)
        throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
      r = f.state;
    }
    if (this.destroyed) {
      this.viewState.state = r;
      return;
    }
    let o = this.hasFocus, l = 0, a = null;
    e.some((f) => f.annotation(pE)) ? (this.inputState.notifiedFocused = o, l = 1) : o != this.inputState.notifiedFocused && (this.inputState.notifiedFocused = o, a = gE(r, o), a || (l = 1));
    let c = this.observer.delayedAndroidKey, u = null;
    if (c ? (this.observer.clearDelayedAndroidKey(), u = this.observer.readChange(), (u && !this.state.doc.eq(r.doc) || !this.state.selection.eq(r.selection)) && (u = null)) : this.observer.clear(), r.facet(at.phrases) != this.state.facet(at.phrases))
      return this.setState(r);
    s = qd.create(this, r, e), s.flags |= l;
    let h = this.viewState.scrollTarget;
    try {
      this.updateState = 2;
      for (let f of e) {
        if (h && (h = h.map(f.changes)), f.scrollIntoView) {
          let { main: d } = f.state.selection;
          h = new Pa(d.empty ? d : J.cursor(d.head, d.head > d.anchor ? -1 : 1));
        }
        for (let d of f.effects)
          d.is(Sf) && (h = d.value.clip(this.state));
      }
      this.viewState.update(s, h), this.bidiCache = Wd.update(this.bidiCache, s.changes), s.empty || (this.updatePlugins(s), this.inputState.update(s)), t = this.docView.update(s), this.state.facet(ru) != this.styleModules && this.mountStyles(), i = this.updateAttrs(), this.showAnnouncements(e), this.docView.updateSelection(t, e.some((f) => f.isUserEvent("select.pointer")));
    } finally {
      this.updateState = 0;
    }
    if (s.startState.facet($f) != s.state.facet($f) && (this.viewState.mustMeasureContent = !0), (t || i || h || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent) && this.requestMeasure(), !s.empty)
      for (let f of this.state.facet(rb))
        try {
          f(s);
        } catch (d) {
          Ki(this.state, d, "update listener");
        }
    (a || u) && Promise.resolve().then(() => {
      a && this.state == a.startState && this.dispatch(a), u && !wE(this, u) && c.force && ka(this.contentDOM, c.key, c.keyCode);
    });
  }
  /**
  Reset the view to the given state. (This will cause the entire
  document to be redrawn and all view plugins to be reinitialized,
  so you should probably only use it when the new state isn't
  derived from the old state. Otherwise, use
  [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
  */
  setState(e) {
    if (this.updateState != 0)
      throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
    if (this.destroyed) {
      this.viewState.state = e;
      return;
    }
    this.updateState = 2;
    let t = this.hasFocus;
    try {
      for (let i of this.plugins)
        i.destroy(this);
      this.viewState = new ax(e), this.plugins = e.facet(su).map((i) => new lm(i)), this.pluginMap.clear();
      for (let i of this.plugins)
        i.update(this);
      this.docView.destroy(), this.docView = new Vw(this), this.inputState.ensureHandlers(this.plugins), this.mountStyles(), this.updateAttrs(), this.bidiCache = [];
    } finally {
      this.updateState = 0;
    }
    t && this.focus(), this.requestMeasure();
  }
  updatePlugins(e) {
    let t = e.startState.facet(su), i = e.state.facet(su);
    if (t != i) {
      let s = [];
      for (let r of i) {
        let o = t.indexOf(r);
        if (o < 0)
          s.push(new lm(r));
        else {
          let l = this.plugins[o];
          l.mustUpdate = e, s.push(l);
        }
      }
      for (let r of this.plugins)
        r.mustUpdate != e && r.destroy(this);
      this.plugins = s, this.pluginMap.clear();
    } else
      for (let s of this.plugins)
        s.mustUpdate = e;
    for (let s = 0; s < this.plugins.length; s++)
      this.plugins[s].update(this);
    t != i && this.inputState.ensureHandlers(this.plugins);
  }
  /**
  @internal
  */
  measure(e = !0) {
    if (this.destroyed)
      return;
    if (this.measureScheduled > -1 && this.win.cancelAnimationFrame(this.measureScheduled), this.observer.delayedAndroidKey) {
      this.measureScheduled = -1, this.requestMeasure();
      return;
    }
    this.measureScheduled = 0, e && this.observer.forceFlush();
    let t = null, i = this.scrollDOM, s = i.scrollTop * this.scaleY, { scrollAnchorPos: r, scrollAnchorHeight: o } = this.viewState;
    Math.abs(s - this.viewState.scrollTop) > 1 && (o = -1), this.viewState.scrollAnchorHeight = -1;
    try {
      for (let l = 0; ; l++) {
        if (o < 0)
          if (_A(i))
            r = -1, o = this.viewState.heightMap.height;
          else {
            let d = this.viewState.scrollAnchorAt(s);
            r = d.from, o = d.top;
          }
        this.updateState = 1;
        let a = this.viewState.measure(this);
        if (!a && !this.measureRequests.length && this.viewState.scrollTarget == null)
          break;
        if (l > 5) {
          console.warn(this.measureRequests.length ? "Measure loop restarted more than 5 times" : "Viewport failed to stabilize");
          break;
        }
        let c = [];
        a & 4 || ([this.measureRequests, c] = [c, this.measureRequests]);
        let u = c.map((d) => {
          try {
            return d.read(this);
          } catch (p) {
            return Ki(this.state, p), dx;
          }
        }), h = qd.create(this, this.state, []), f = !1;
        h.flags |= a, t ? t.flags |= a : t = h, this.updateState = 2, h.empty || (this.updatePlugins(h), this.inputState.update(h), this.updateAttrs(), f = this.docView.update(h));
        for (let d = 0; d < c.length; d++)
          if (u[d] != dx)
            try {
              let p = c[d];
              p.write && p.write(u[d], this);
            } catch (p) {
              Ki(this.state, p);
            }
        if (f && this.docView.updateSelection(!0), !h.viewportChanged && this.measureRequests.length == 0) {
          if (this.viewState.editorHeight)
            if (this.viewState.scrollTarget) {
              this.docView.scrollIntoView(this.viewState.scrollTarget), this.viewState.scrollTarget = null, o = -1;
              continue;
            } else {
              let p = (r < 0 ? this.viewState.heightMap.height : this.viewState.lineBlockAt(r).top) - o;
              if (p > 1 || p < -1) {
                s = s + p, i.scrollTop = s / this.scaleY, o = -1;
                continue;
              }
            }
          break;
        }
      }
    } finally {
      this.updateState = 0, this.measureScheduled = -1;
    }
    if (t && !t.empty)
      for (let l of this.state.facet(rb))
        l(t);
  }
  /**
  Get the CSS classes for the currently active editor themes.
  */
  get themeClasses() {
    return ub + " " + (this.state.facet(cb) ? yE : vE) + " " + this.state.facet($f);
  }
  updateAttrs() {
    let e = px(this, eE, {
      class: "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
    }), t = {
      spellcheck: "false",
      autocorrect: "off",
      autocapitalize: "off",
      translate: "no",
      contenteditable: this.state.facet(tg) ? "true" : "false",
      class: "cm-content",
      style: `${xe.tabSize}: ${this.state.tabSize}`,
      role: "textbox",
      "aria-multiline": "true"
    };
    this.state.readOnly && (t["aria-readonly"] = "true"), px(this, ry, t);
    let i = this.observer.ignore(() => {
      let s = eb(this.contentDOM, this.contentAttrs, t), r = eb(this.dom, this.editorAttrs, e);
      return s || r;
    });
    return this.editorAttrs = e, this.contentAttrs = t, i;
  }
  showAnnouncements(e) {
    let t = !0;
    for (let i of e)
      for (let s of i.effects)
        if (s.is(Oe.announce)) {
          t && (this.announceDOM.textContent = ""), t = !1;
          let r = this.announceDOM.appendChild(document.createElement("div"));
          r.textContent = s.value;
        }
  }
  mountStyles() {
    this.styleModules = this.state.facet(ru);
    let e = this.state.facet(Oe.cspNonce);
    $o.mount(this.root, this.styleModules.concat(xY).reverse(), e ? { nonce: e } : void 0);
  }
  readMeasured() {
    if (this.updateState == 2)
      throw new Error("Reading the editor layout isn't allowed during an update");
    this.updateState == 0 && this.measureScheduled > -1 && this.measure(!1);
  }
  /**
  Schedule a layout measurement, optionally providing callbacks to
  do custom DOM measuring followed by a DOM write phase. Using
  this is preferable reading DOM layout directly from, for
  example, an event handler, because it'll make sure measuring and
  drawing done by other components is synchronized, avoiding
  unnecessary DOM layout computations.
  */
  requestMeasure(e) {
    if (this.measureScheduled < 0 && (this.measureScheduled = this.win.requestAnimationFrame(() => this.measure())), e) {
      if (this.measureRequests.indexOf(e) > -1)
        return;
      if (e.key != null) {
        for (let t = 0; t < this.measureRequests.length; t++)
          if (this.measureRequests[t].key === e.key) {
            this.measureRequests[t] = e;
            return;
          }
      }
      this.measureRequests.push(e);
    }
  }
  /**
  Get the value of a specific plugin, if present. Note that
  plugins that crash can be dropped from a view, so even when you
  know you registered a given plugin, it is recommended to check
  the return value of this method.
  */
  plugin(e) {
    let t = this.pluginMap.get(e);
    return (t === void 0 || t && t.spec != e) && this.pluginMap.set(e, t = this.plugins.find((i) => i.spec == e) || null), t && t.update(this).value;
  }
  /**
  The top position of the document, in screen coordinates. This
  may be negative when the editor is scrolled down. Points
  directly to the top of the first line, not above the padding.
  */
  get documentTop() {
    return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;
  }
  /**
  Reports the padding above and below the document.
  */
  get documentPadding() {
    return { top: this.viewState.paddingTop, bottom: this.viewState.paddingBottom };
  }
  /**
  If the editor is transformed with CSS, this provides the scale
  along the X axis. Otherwise, it will just be 1. Note that
  transforms other than translation and scaling are not supported.
  */
  get scaleX() {
    return this.viewState.scaleX;
  }
  /**
  Provide the CSS transformed scale along the Y axis.
  */
  get scaleY() {
    return this.viewState.scaleY;
  }
  /**
  Find the text line or block widget at the given vertical
  position (which is interpreted as relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)).
  */
  elementAtHeight(e) {
    return this.readMeasured(), this.viewState.elementAtHeight(e);
  }
  /**
  Find the line block (see
  [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given
  height, again interpreted relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop).
  */
  lineBlockAtHeight(e) {
    return this.readMeasured(), this.viewState.lineBlockAtHeight(e);
  }
  /**
  Get the extent and vertical position of all [line
  blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions
  are relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);
  */
  get viewportLineBlocks() {
    return this.viewState.viewportLines;
  }
  /**
  Find the line block around the given document position. A line
  block is a range delimited on both sides by either a
  non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line breaks, or the
  start/end of the document. It will usually just hold a line of
  text, but may be broken into multiple textblocks by block
  widgets.
  */
  lineBlockAt(e) {
    return this.viewState.lineBlockAt(e);
  }
  /**
  The editor's total content height.
  */
  get contentHeight() {
    return this.viewState.contentHeight;
  }
  /**
  Move a cursor position by [grapheme
  cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether
  the motion is away from the line start, or towards it. In
  bidirectional text, the line is traversed in visual order, using
  the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
  When the start position was the last one on the line, the
  returned position will be across the line break. If there is no
  further line, the original position is returned.
  
  By default, this method moves over a single cluster. The
  optional `by` argument can be used to move across more. It will
  be called with the first cluster as argument, and should return
  a predicate that determines, for each subsequent cluster,
  whether it should also be moved over.
  */
  moveByChar(e, t, i) {
    return cm(this, e, Gw(this, e, t, i));
  }
  /**
  Move a cursor position across the next group of either
  [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
  non-whitespace characters.
  */
  moveByGroup(e, t) {
    return cm(this, e, Gw(this, e, t, (i) => qX(this, e.head, i)));
  }
  /**
  Get the cursor position visually at the start or end of a line.
  Note that this may differ from the _logical_ position at its
  start or end (which is simply at `line.from`/`line.to`) if text
  at the start or end goes against the line's base text direction.
  */
  visualLineSide(e, t) {
    let i = this.bidiSpans(e), s = this.textDirectionAt(e.from), r = i[t ? i.length - 1 : 0];
    return J.cursor(r.side(t, s) + e.from, r.forward(!t, s) ? 1 : -1);
  }
  /**
  Move to the next line boundary in the given direction. If
  `includeWrap` is true, line wrapping is on, and there is a
  further wrap point on the current line, the wrap point will be
  returned. Otherwise this function will return the start or end
  of the line.
  */
  moveToLineBoundary(e, t, i = !0) {
    return VX(this, e, t, i);
  }
  /**
  Move a cursor position vertically. When `distance` isn't given,
  it defaults to moving to the next line (including wrapped
  lines). Otherwise, `distance` should provide a positive distance
  in pixels.
  
  When `start` has a
  [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
  motion will use that as a target horizontal position. Otherwise,
  the cursor's own horizontal position is used. The returned
  cursor will have its goal column set to whichever column was
  used.
  */
  moveVertically(e, t, i) {
    return cm(this, e, WX(this, e, t, i));
  }
  /**
  Find the DOM parent node and offset (child offset if `node` is
  an element, character offset when it is a text node) at the
  given document position.
  
  Note that for positions that aren't currently in
  `visibleRanges`, the resulting DOM position isn't necessarily
  meaningful (it may just point before or after a placeholder
  element).
  */
  domAtPos(e) {
    return this.docView.domAtPos(e);
  }
  /**
  Find the document position at the given DOM node. Can be useful
  for associating positions with DOM events. Will raise an error
  when `node` isn't part of the editor content.
  */
  posAtDOM(e, t = 0) {
    return this.docView.posFromDOM(e, t);
  }
  posAtCoords(e, t = !0) {
    return this.readMeasured(), lE(this, e, t);
  }
  /**
  Get the screen coordinates at the given document position.
  `side` determines whether the coordinates are based on the
  element before (-1) or after (1) the position (if no element is
  available on the given side, the method will transparently use
  another strategy to get reasonable coordinates).
  */
  coordsAtPos(e, t = 1) {
    this.readMeasured();
    let i = this.docView.coordsAt(e, t);
    if (!i || i.left == i.right)
      return i;
    let s = this.state.doc.lineAt(e), r = this.bidiSpans(s), o = r[wo.find(r, e - s.from, -1, t)];
    return ty(i, o.dir == Rt.LTR == t > 0);
  }
  /**
  Return the rectangle around a given character. If `pos` does not
  point in front of a character that is in the viewport and
  rendered (i.e. not replaced, not a line break), this will return
  null. For space characters that are a line wrap point, this will
  return the position before the line break.
  */
  coordsForChar(e) {
    return this.readMeasured(), this.docView.coordsForChar(e);
  }
  /**
  The default width of a character in the editor. May not
  accurately reflect the width of all characters (given variable
  width fonts or styling of invididual ranges).
  */
  get defaultCharacterWidth() {
    return this.viewState.heightOracle.charWidth;
  }
  /**
  The default height of a line in the editor. May not be accurate
  for all lines.
  */
  get defaultLineHeight() {
    return this.viewState.heightOracle.lineHeight;
  }
  /**
  The text direction
  ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
  CSS property) of the editor's content element.
  */
  get textDirection() {
    return this.viewState.defaultTextDirection;
  }
  /**
  Find the text direction of the block at the given position, as
  assigned by CSS. If
  [`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)
  isn't enabled, or the given position is outside of the viewport,
  this will always return the same as
  [`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that
  this may trigger a DOM layout.
  */
  textDirectionAt(e) {
    return !this.state.facet(KA) || e < this.viewport.from || e > this.viewport.to ? this.textDirection : (this.readMeasured(), this.docView.textDirectionAt(e));
  }
  /**
  Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
  (as determined by the
  [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
  CSS property of its content element).
  */
  get lineWrapping() {
    return this.viewState.heightOracle.lineWrapping;
  }
  /**
  Returns the bidirectional text structure of the given line
  (which should be in the current document) as an array of span
  objects. The order of these spans matches the [text
  direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
  left-to-right, the leftmost spans come first, otherwise the
  rightmost spans come first.
  */
  bidiSpans(e) {
    if (e.length > RY)
      return VA(e.length);
    let t = this.textDirectionAt(e.from), i;
    for (let r of this.bidiCache)
      if (r.from == e.from && r.dir == t && (r.fresh || FA(r.isolates, i = Fw(this, e))))
        return r.order;
    i || (i = Fw(this, e));
    let s = EX(e.text, t, i);
    return this.bidiCache.push(new Wd(e.from, e.to, t, i, !0, s)), s;
  }
  /**
  Check whether the editor has focus.
  */
  get hasFocus() {
    var e;
    return (this.dom.ownerDocument.hasFocus() || xe.safari && ((e = this.inputState) === null || e === void 0 ? void 0 : e.lastContextMenu) > Date.now() - 3e4) && this.root.activeElement == this.contentDOM;
  }
  /**
  Put focus on the editor.
  */
  focus() {
    this.observer.ignore(() => {
      $A(this.contentDOM), this.docView.updateSelection();
    });
  }
  /**
  Update the [root](https://codemirror.net/6/docs/ref/##view.EditorViewConfig.root) in which the editor lives. This is only
  necessary when moving the editor's existing DOM to a new window or shadow root.
  */
  setRoot(e) {
    this._root != e && (this._root = e, this.observer.setWindow((e.nodeType == 9 ? e : e.ownerDocument).defaultView || window), this.mountStyles());
  }
  /**
  Clean up this editor view, removing its element from the
  document, unregistering event handlers, and notifying
  plugins. The view instance can no longer be used after
  calling this.
  */
  destroy() {
    for (let e of this.plugins)
      e.destroy(this);
    this.plugins = [], this.inputState.destroy(), this.docView.destroy(), this.dom.remove(), this.observer.destroy(), this.measureScheduled > -1 && this.win.cancelAnimationFrame(this.measureScheduled), this.destroyed = !0;
  }
  /**
  Returns an effect that can be
  [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to
  cause it to scroll the given position or range into view.
  */
  static scrollIntoView(e, t = {}) {
    return Sf.of(new Pa(typeof e == "number" ? J.cursor(e) : e, t.y, t.x, t.yMargin, t.xMargin));
  }
  /**
  Return an effect that resets the editor to its current (at the
  time this method was called) scroll position. Note that this
  only affects the editor's own scrollable element, not parents.
  See also
  [`EditorViewConfig.scrollTo`](https://codemirror.net/6/docs/ref/#view.EditorViewConfig.scrollTo).
  
  The effect should be used with a document identical to the one
  it was created for. Failing to do so is not an error, but may
  not scroll to the expected position. You can
  [map](https://codemirror.net/6/docs/ref/#state.StateEffect.map) the effect to account for changes.
  */
  scrollSnapshot() {
    let { scrollTop: e, scrollLeft: t } = this.scrollDOM, i = this.viewState.scrollAnchorAt(e);
    return Sf.of(new Pa(J.cursor(i.from), "start", "start", i.top - e, t, !0));
  }
  /**
  Returns an extension that can be used to add DOM event handlers.
  The value should be an object mapping event names to handler
  functions. For any given event, such functions are ordered by
  extension precedence, and the first handler to return true will
  be assumed to have handled that event, and no other handlers or
  built-in behavior will be activated for it. These are registered
  on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except
  for `scroll` handlers, which will be called any time the
  editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of
  its parent nodes is scrolled.
  */
  static domEventHandlers(e) {
    return on.define(() => ({}), { eventHandlers: e });
  }
  /**
  Create an extension that registers DOM event observers. Contrary
  to event [handlers](https://codemirror.net/6/docs/ref/#view.EditorView^domEventHandlers),
  observers can't be prevented from running by a higher-precedence
  handler returning true. They also don't prevent other handlers
  and observers from running when they return true, and should not
  call `preventDefault`.
  */
  static domEventObservers(e) {
    return on.define(() => ({}), { eventObservers: e });
  }
  /**
  Create a theme extension. The first argument can be a
  [`style-mod`](https://github.com/marijnh/style-mod#documentation)
  style spec providing the styles for the theme. These will be
  prefixed with a generated class for the style.
  
  Because the selectors will be prefixed with a scope class, rule
  that directly match the editor's [wrapper
  element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
  added—need to be explicitly differentiated by adding an `&` to
  the selector for that element—for example
  `&.cm-focused`.
  
  When `dark` is set to true, the theme will be marked as dark,
  which will cause the `&dark` rules from [base
  themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
  `&light` when a light theme is active).
  */
  static theme(e, t) {
    let i = $o.newName(), s = [$f.of(i), ru.of(hb(`.${i}`, e))];
    return t && t.dark && s.push(cb.of(!0)), s;
  }
  /**
  Create an extension that adds styles to the base theme. Like
  with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
  place of the editor wrapper element when directly targeting
  that. You can also use `&dark` or `&light` instead to only
  target editors with a dark or light theme.
  */
  static baseTheme(e) {
    return Kl.lowest(ru.of(hb("." + ub, e, OE)));
  }
  /**
  Retrieve an editor view instance from the view's DOM
  representation.
  */
  static findFromDOM(e) {
    var t;
    let i = e.querySelector(".cm-content"), s = i && _t.get(i) || _t.get(e);
    return ((t = s == null ? void 0 : s.rootView) === null || t === void 0 ? void 0 : t.view) || null;
  }
}
Oe.styleModule = ru;
Oe.inputHandler = GA;
Oe.focusChangeEffect = UA;
Oe.perLineTextDirection = KA;
Oe.exceptionSink = HA;
Oe.updateListener = rb;
Oe.editable = tg;
Oe.mouseSelectionStyle = YA;
Oe.dragMovesSelection = XA;
Oe.clickAddsSelectionRange = WA;
Oe.decorations = th;
Oe.outerDecorations = tE;
Oe.atomicRanges = oy;
Oe.bidiIsolatedRanges = nE;
Oe.scrollMargins = iE;
Oe.darkTheme = cb;
Oe.cspNonce = /* @__PURE__ */ we.define({ combine: (n) => n.length ? n[0] : "" });
Oe.contentAttributes = ry;
Oe.editorAttributes = eE;
Oe.lineWrapping = /* @__PURE__ */ Oe.contentAttributes.of({ class: "cm-lineWrapping" });
Oe.announce = /* @__PURE__ */ Ve.define();
const RY = 4096, dx = {};
class Wd {
  constructor(e, t, i, s, r, o) {
    this.from = e, this.to = t, this.dir = i, this.isolates = s, this.fresh = r, this.order = o;
  }
  static update(e, t) {
    if (t.empty && !e.some((r) => r.fresh))
      return e;
    let i = [], s = e.length ? e[e.length - 1].dir : Rt.LTR;
    for (let r = Math.max(0, e.length - 10); r < e.length; r++) {
      let o = e[r];
      o.dir == s && !t.touchesRange(o.from, o.to) && i.push(new Wd(t.mapPos(o.from, 1), t.mapPos(o.to, -1), o.dir, o.isolates, !1, o.order));
    }
    return i;
  }
}
function px(n, e, t) {
  for (let i = n.state.facet(e), s = i.length - 1; s >= 0; s--) {
    let r = i[s], o = typeof r == "function" ? r(n) : r;
    o && J0(o, t);
  }
  return t;
}
const DY = xe.mac ? "mac" : xe.windows ? "win" : xe.linux ? "linux" : "key";
function LY(n, e) {
  const t = n.split(/-(?!$)/);
  let i = t[t.length - 1];
  i == "Space" && (i = " ");
  let s, r, o, l;
  for (let a = 0; a < t.length - 1; ++a) {
    const c = t[a];
    if (/^(cmd|meta|m)$/i.test(c))
      l = !0;
    else if (/^a(lt)?$/i.test(c))
      s = !0;
    else if (/^(c|ctrl|control)$/i.test(c))
      r = !0;
    else if (/^s(hift)?$/i.test(c))
      o = !0;
    else if (/^mod$/i.test(c))
      e == "mac" ? l = !0 : r = !0;
    else
      throw new Error("Unrecognized modifier name: " + c);
  }
  return s && (i = "Alt-" + i), r && (i = "Ctrl-" + i), l && (i = "Meta-" + i), o && (i = "Shift-" + i), i;
}
function Tf(n, e, t) {
  return e.altKey && (n = "Alt-" + n), e.ctrlKey && (n = "Ctrl-" + n), e.metaKey && (n = "Meta-" + n), t !== !1 && e.shiftKey && (n = "Shift-" + n), n;
}
const NY = /* @__PURE__ */ Kl.default(/* @__PURE__ */ Oe.domEventHandlers({
  keydown(n, e) {
    return SE(xE(e.state), n, e, "editor");
  }
})), ng = /* @__PURE__ */ we.define({ enables: NY }), gx = /* @__PURE__ */ new WeakMap();
function xE(n) {
  let e = n.facet(ng), t = gx.get(e);
  return t || gx.set(e, t = BY(e.reduce((i, s) => i.concat(s), []))), t;
}
function IY(n, e, t) {
  return SE(xE(n.state), e, n, t);
}
let po = null;
const QY = 4e3;
function BY(n, e = DY) {
  let t = /* @__PURE__ */ Object.create(null), i = /* @__PURE__ */ Object.create(null), s = (o, l) => {
    let a = i[o];
    if (a == null)
      i[o] = l;
    else if (a != l)
      throw new Error("Key binding " + o + " is used both as a regular binding and as a multi-stroke prefix");
  }, r = (o, l, a, c, u) => {
    var h, f;
    let d = t[o] || (t[o] = /* @__PURE__ */ Object.create(null)), p = l.split(/ (?!$)/).map((b) => LY(b, e));
    for (let b = 1; b < p.length; b++) {
      let y = p.slice(0, b).join(" ");
      s(y, !0), d[y] || (d[y] = {
        preventDefault: !0,
        stopPropagation: !1,
        run: [(v) => {
          let O = po = { view: v, prefix: y, scope: o };
          return setTimeout(() => {
            po == O && (po = null);
          }, QY), !0;
        }]
      });
    }
    let g = p.join(" ");
    s(g, !1);
    let m = d[g] || (d[g] = {
      preventDefault: !1,
      stopPropagation: !1,
      run: ((f = (h = d._any) === null || h === void 0 ? void 0 : h.run) === null || f === void 0 ? void 0 : f.slice()) || []
    });
    a && m.run.push(a), c && (m.preventDefault = !0), u && (m.stopPropagation = !0);
  };
  for (let o of n) {
    let l = o.scope ? o.scope.split(" ") : ["editor"];
    if (o.any)
      for (let c of l) {
        let u = t[c] || (t[c] = /* @__PURE__ */ Object.create(null));
        u._any || (u._any = { preventDefault: !1, stopPropagation: !1, run: [] });
        for (let h in u)
          u[h].run.push(o.any);
      }
    let a = o[e] || o.key;
    if (a)
      for (let c of l)
        r(c, a, o.run, o.preventDefault, o.stopPropagation), o.shift && r(c, "Shift-" + a, o.shift, o.preventDefault, o.stopPropagation);
  }
  return t;
}
function SE(n, e, t, i) {
  let s = cX(e), r = Mn(s, 0), o = Xi(r) == s.length && s != " ", l = "", a = !1, c = !1, u = !1;
  po && po.view == t && po.scope == i && (l = po.prefix + " ", cE.indexOf(e.keyCode) < 0 && (c = !0, po = null));
  let h = /* @__PURE__ */ new Set(), f = (m) => {
    if (m) {
      for (let b of m.run)
        if (!h.has(b) && (h.add(b), b(t, e)))
          return m.stopPropagation && (u = !0), !0;
      m.preventDefault && (m.stopPropagation && (u = !0), c = !0);
    }
    return !1;
  }, d = n[i], p, g;
  return d && (f(d[l + Tf(s, e, !o)]) ? a = !0 : o && (e.altKey || e.metaKey || e.ctrlKey) && // Ctrl-Alt may be used for AltGr on Windows
  !(xe.windows && e.ctrlKey && e.altKey) && (p = To[e.keyCode]) && p != s ? (f(d[l + Tf(p, e, !0)]) || e.shiftKey && (g = Ku[e.keyCode]) != s && g != p && f(d[l + Tf(g, e, !1)])) && (a = !0) : o && e.shiftKey && f(d[l + Tf(s, e, !0)]) && (a = !0), !a && f(d._any) && (a = !0)), c && (a = !0), a && u && e.stopPropagation(), a;
}
class Hh {
  /**
  Create a marker with the given class and dimensions. If `width`
  is null, the DOM element will get no width style.
  */
  constructor(e, t, i, s, r) {
    this.className = e, this.left = t, this.top = i, this.width = s, this.height = r;
  }
  draw() {
    let e = document.createElement("div");
    return e.className = this.className, this.adjust(e), e;
  }
  update(e, t) {
    return t.className != this.className ? !1 : (this.adjust(e), !0);
  }
  adjust(e) {
    e.style.left = this.left + "px", e.style.top = this.top + "px", this.width != null && (e.style.width = this.width + "px"), e.style.height = this.height + "px";
  }
  eq(e) {
    return this.left == e.left && this.top == e.top && this.width == e.width && this.height == e.height && this.className == e.className;
  }
  /**
  Create a set of rectangles for the given selection range,
  assigning them theclass`className`. Will create a single
  rectangle for empty ranges, and a set of selection-style
  rectangles covering the range's content (in a bidi-aware
  way) for non-empty ones.
  */
  static forRange(e, t, i) {
    if (i.empty) {
      let s = e.coordsAtPos(i.head, i.assoc || 1);
      if (!s)
        return [];
      let r = CE(e);
      return [new Hh(t, s.left - r.left, s.top - r.top, null, s.bottom - s.top)];
    } else
      return jY(e, t, i);
  }
}
function CE(n) {
  let e = n.scrollDOM.getBoundingClientRect();
  return { left: (n.textDirection == Rt.LTR ? e.left : e.right - n.scrollDOM.clientWidth * n.scaleX) - n.scrollDOM.scrollLeft * n.scaleX, top: e.top - n.scrollDOM.scrollTop * n.scaleY };
}
function mx(n, e, t) {
  let i = J.cursor(e);
  return {
    from: Math.max(t.from, n.moveToLineBoundary(i, !1, !0).from),
    to: Math.min(t.to, n.moveToLineBoundary(i, !0, !0).from),
    type: ei.Text
  };
}
function jY(n, e, t) {
  if (t.to <= n.viewport.from || t.from >= n.viewport.to)
    return [];
  let i = Math.max(t.from, n.viewport.from), s = Math.min(t.to, n.viewport.to), r = n.textDirection == Rt.LTR, o = n.contentDOM, l = o.getBoundingClientRect(), a = CE(n), c = o.querySelector(".cm-line"), u = c && window.getComputedStyle(c), h = l.left + (u ? parseInt(u.paddingLeft) + Math.min(0, parseInt(u.textIndent)) : 0), f = l.right - (u ? parseInt(u.paddingRight) : 0), d = lb(n, i), p = lb(n, s), g = d.type == ei.Text ? d : null, m = p.type == ei.Text ? p : null;
  if (g && (n.lineWrapping || d.widgetLineBreaks) && (g = mx(n, i, g)), m && (n.lineWrapping || p.widgetLineBreaks) && (m = mx(n, s, m)), g && m && g.from == m.from)
    return y(v(t.from, t.to, g));
  {
    let x = g ? v(t.from, null, g) : O(d, !1), S = m ? v(null, t.to, m) : O(p, !0), C = [];
    return (g || d).to < (m || p).from - (g && m ? 1 : 0) || d.widgetLineBreaks > 1 && x.bottom + n.defaultLineHeight / 2 < S.top ? C.push(b(h, x.bottom, f, S.top)) : x.bottom < S.top && n.elementAtHeight((x.bottom + S.top) / 2).type == ei.Text && (x.bottom = S.top = (x.bottom + S.top) / 2), y(x).concat(C).concat(y(S));
  }
  function b(x, S, C, k) {
    return new Hh(
      e,
      x - a.left,
      S - a.top - 0.01,
      C - x,
      k - S + 0.01
      /* C.Epsilon */
    );
  }
  function y({ top: x, bottom: S, horizontal: C }) {
    let k = [];
    for (let E = 0; E < C.length; E += 2)
      k.push(b(C[E], x, C[E + 1], S));
    return k;
  }
  function v(x, S, C) {
    let k = 1e9, E = -1e9, $ = [];
    function T(D, P, A, Q, X) {
      let z = n.coordsAtPos(D, D == C.to ? -2 : 2), q = n.coordsAtPos(A, A == C.from ? 2 : -2);
      !z || !q || (k = Math.min(z.top, q.top, k), E = Math.max(z.bottom, q.bottom, E), X == Rt.LTR ? $.push(r && P ? h : z.left, r && Q ? f : q.right) : $.push(!r && Q ? h : q.left, !r && P ? f : z.right));
    }
    let M = x ?? C.from, j = S ?? C.to;
    for (let D of n.visibleRanges)
      if (D.to > M && D.from < j)
        for (let P = Math.max(D.from, M), A = Math.min(D.to, j); ; ) {
          let Q = n.state.doc.lineAt(P);
          for (let X of n.bidiSpans(Q)) {
            let z = X.from + Q.from, q = X.to + Q.from;
            if (z >= A)
              break;
            q > P && T(Math.max(z, P), x == null && z <= M, Math.min(q, A), S == null && q >= j, X.dir);
          }
          if (P = Q.to + 1, P >= A)
            break;
        }
    return $.length == 0 && T(M, x == null, j, S == null, n.textDirection), { top: k, bottom: E, horizontal: $ };
  }
  function O(x, S) {
    let C = l.top + (S ? x.top : x.bottom);
    return { top: C, bottom: C, horizontal: [] };
  }
}
function zY(n, e) {
  return n.constructor == e.constructor && n.eq(e);
}
class ZY {
  constructor(e, t) {
    this.view = e, this.layer = t, this.drawn = [], this.scaleX = 1, this.scaleY = 1, this.measureReq = { read: this.measure.bind(this), write: this.draw.bind(this) }, this.dom = e.scrollDOM.appendChild(document.createElement("div")), this.dom.classList.add("cm-layer"), t.above && this.dom.classList.add("cm-layer-above"), t.class && this.dom.classList.add(t.class), this.scale(), this.dom.setAttribute("aria-hidden", "true"), this.setOrder(e.state), e.requestMeasure(this.measureReq), t.mount && t.mount(this.dom, e);
  }
  update(e) {
    e.startState.facet(yd) != e.state.facet(yd) && this.setOrder(e.state), (this.layer.update(e, this.dom) || e.geometryChanged) && (this.scale(), e.view.requestMeasure(this.measureReq));
  }
  setOrder(e) {
    let t = 0, i = e.facet(yd);
    for (; t < i.length && i[t] != this.layer; )
      t++;
    this.dom.style.zIndex = String((this.layer.above ? 150 : -1) - t);
  }
  measure() {
    return this.layer.markers(this.view);
  }
  scale() {
    let { scaleX: e, scaleY: t } = this.view;
    (e != this.scaleX || t != this.scaleY) && (this.scaleX = e, this.scaleY = t, this.dom.style.transform = `scale(${1 / e}, ${1 / t})`);
  }
  draw(e) {
    if (e.length != this.drawn.length || e.some((t, i) => !zY(t, this.drawn[i]))) {
      let t = this.dom.firstChild, i = 0;
      for (let s of e)
        s.update && t && s.constructor && this.drawn[i].constructor && s.update(t, this.drawn[i]) ? (t = t.nextSibling, i++) : this.dom.insertBefore(s.draw(), t);
      for (; t; ) {
        let s = t.nextSibling;
        t.remove(), t = s;
      }
      this.drawn = e;
    }
  }
  destroy() {
    this.layer.destroy && this.layer.destroy(this.dom, this.view), this.dom.remove();
  }
}
const yd = /* @__PURE__ */ we.define();
function kE(n) {
  return [
    on.define((e) => new ZY(e, n)),
    yd.of(n)
  ];
}
const PE = !xe.ios, nh = /* @__PURE__ */ we.define({
  combine(n) {
    return Or(n, {
      cursorBlinkRate: 1200,
      drawRangeCursor: !0
    }, {
      cursorBlinkRate: (e, t) => Math.min(e, t),
      drawRangeCursor: (e, t) => e || t
    });
  }
});
function FY(n = {}) {
  return [
    nh.of(n),
    VY,
    qY,
    WY,
    JA.of(!0)
  ];
}
function AE(n) {
  return n.startState.facet(nh) != n.state.facet(nh);
}
const VY = /* @__PURE__ */ kE({
  above: !0,
  markers(n) {
    let { state: e } = n, t = e.facet(nh), i = [];
    for (let s of e.selection.ranges) {
      let r = s == e.selection.main;
      if (s.empty ? !r || PE : t.drawRangeCursor) {
        let o = r ? "cm-cursor cm-cursor-primary" : "cm-cursor cm-cursor-secondary", l = s.empty ? s : J.cursor(s.head, s.head > s.anchor ? -1 : 1);
        for (let a of Hh.forRange(n, o, l))
          i.push(a);
      }
    }
    return i;
  },
  update(n, e) {
    n.transactions.some((i) => i.selection) && (e.style.animationName = e.style.animationName == "cm-blink" ? "cm-blink2" : "cm-blink");
    let t = AE(n);
    return t && bx(n.state, e), n.docChanged || n.selectionSet || t;
  },
  mount(n, e) {
    bx(e.state, n);
  },
  class: "cm-cursorLayer"
});
function bx(n, e) {
  e.style.animationDuration = n.facet(nh).cursorBlinkRate + "ms";
}
const qY = /* @__PURE__ */ kE({
  above: !1,
  markers(n) {
    return n.state.selection.ranges.map((e) => e.empty ? [] : Hh.forRange(n, "cm-selectionBackground", e)).reduce((e, t) => e.concat(t));
  },
  update(n, e) {
    return n.docChanged || n.selectionSet || n.viewportChanged || AE(n);
  },
  class: "cm-selectionLayer"
}), fb = {
  ".cm-line": {
    "& ::selection": { backgroundColor: "transparent !important" },
    "&::selection": { backgroundColor: "transparent !important" }
  }
};
PE && (fb[".cm-line"].caretColor = "transparent !important", fb[".cm-content"] = { caretColor: "transparent !important" });
const WY = /* @__PURE__ */ Kl.highest(/* @__PURE__ */ Oe.theme(fb)), EE = /* @__PURE__ */ Ve.define({
  map(n, e) {
    return n == null ? null : e.mapPos(n);
  }
}), au = /* @__PURE__ */ Pn.define({
  create() {
    return null;
  },
  update(n, e) {
    return n != null && (n = e.changes.mapPos(n)), e.effects.reduce((t, i) => i.is(EE) ? i.value : t, n);
  }
}), XY = /* @__PURE__ */ on.fromClass(class {
  constructor(n) {
    this.view = n, this.cursor = null, this.measureReq = { read: this.readPos.bind(this), write: this.drawCursor.bind(this) };
  }
  update(n) {
    var e;
    let t = n.state.field(au);
    t == null ? this.cursor != null && ((e = this.cursor) === null || e === void 0 || e.remove(), this.cursor = null) : (this.cursor || (this.cursor = this.view.scrollDOM.appendChild(document.createElement("div")), this.cursor.className = "cm-dropCursor"), (n.startState.field(au) != t || n.docChanged || n.geometryChanged) && this.view.requestMeasure(this.measureReq));
  }
  readPos() {
    let { view: n } = this, e = n.state.field(au), t = e != null && n.coordsAtPos(e);
    if (!t)
      return null;
    let i = n.scrollDOM.getBoundingClientRect();
    return {
      left: t.left - i.left + n.scrollDOM.scrollLeft * n.scaleX,
      top: t.top - i.top + n.scrollDOM.scrollTop * n.scaleY,
      height: t.bottom - t.top
    };
  }
  drawCursor(n) {
    if (this.cursor) {
      let { scaleX: e, scaleY: t } = this.view;
      n ? (this.cursor.style.left = n.left / e + "px", this.cursor.style.top = n.top / t + "px", this.cursor.style.height = n.height / t + "px") : this.cursor.style.left = "-100000px";
    }
  }
  destroy() {
    this.cursor && this.cursor.remove();
  }
  setDropPos(n) {
    this.view.state.field(au) != n && this.view.dispatch({ effects: EE.of(n) });
  }
}, {
  eventObservers: {
    dragover(n) {
      this.setDropPos(this.view.posAtCoords({ x: n.clientX, y: n.clientY }));
    },
    dragleave(n) {
      (n.target == this.view.contentDOM || !this.view.contentDOM.contains(n.relatedTarget)) && this.setDropPos(null);
    },
    dragend() {
      this.setDropPos(null);
    },
    drop() {
      this.setDropPos(null);
    }
  }
});
function YY() {
  return [au, XY];
}
function vx(n, e, t, i, s) {
  e.lastIndex = 0;
  for (let r = n.iterRange(t, i), o = t, l; !r.next().done; o += r.value.length)
    if (!r.lineBreak)
      for (; l = e.exec(r.value); )
        s(o + l.index, l);
}
function HY(n, e) {
  let t = n.visibleRanges;
  if (t.length == 1 && t[0].from == n.viewport.from && t[0].to == n.viewport.to)
    return t;
  let i = [];
  for (let { from: s, to: r } of t)
    s = Math.max(n.state.doc.lineAt(s).from, s - e), r = Math.min(n.state.doc.lineAt(r).to, r + e), i.length && i[i.length - 1].to >= s ? i[i.length - 1].to = r : i.push({ from: s, to: r });
  return i;
}
class GY {
  /**
  Create a decorator.
  */
  constructor(e) {
    const { regexp: t, decoration: i, decorate: s, boundary: r, maxLength: o = 1e3 } = e;
    if (!t.global)
      throw new RangeError("The regular expression given to MatchDecorator should have its 'g' flag set");
    if (this.regexp = t, s)
      this.addMatch = (l, a, c, u) => s(u, c, c + l[0].length, l, a);
    else if (typeof i == "function")
      this.addMatch = (l, a, c, u) => {
        let h = i(l, a, c);
        h && u(c, c + l[0].length, h);
      };
    else if (i)
      this.addMatch = (l, a, c, u) => u(c, c + l[0].length, i);
    else
      throw new RangeError("Either 'decorate' or 'decoration' should be provided to MatchDecorator");
    this.boundary = r, this.maxLength = o;
  }
  /**
  Compute the full set of decorations for matches in the given
  view's viewport. You'll want to call this when initializing your
  plugin.
  */
  createDeco(e) {
    let t = new Eo(), i = t.add.bind(t);
    for (let { from: s, to: r } of HY(e, this.maxLength))
      vx(e.state.doc, this.regexp, s, r, (o, l) => this.addMatch(l, e, o, i));
    return t.finish();
  }
  /**
  Update a set of decorations for a view update. `deco` _must_ be
  the set of decorations produced by _this_ `MatchDecorator` for
  the view state before the update.
  */
  updateDeco(e, t) {
    let i = 1e9, s = -1;
    return e.docChanged && e.changes.iterChanges((r, o, l, a) => {
      a > e.view.viewport.from && l < e.view.viewport.to && (i = Math.min(l, i), s = Math.max(a, s));
    }), e.viewportChanged || s - i > 1e3 ? this.createDeco(e.view) : s > -1 ? this.updateRange(e.view, t.map(e.changes), i, s) : t;
  }
  updateRange(e, t, i, s) {
    for (let r of e.visibleRanges) {
      let o = Math.max(r.from, i), l = Math.min(r.to, s);
      if (l > o) {
        let a = e.state.doc.lineAt(o), c = a.to < l ? e.state.doc.lineAt(l) : a, u = Math.max(r.from, a.from), h = Math.min(r.to, c.to);
        if (this.boundary) {
          for (; o > a.from; o--)
            if (this.boundary.test(a.text[o - 1 - a.from])) {
              u = o;
              break;
            }
          for (; l < c.to; l++)
            if (this.boundary.test(c.text[l - c.from])) {
              h = l;
              break;
            }
        }
        let f = [], d, p = (g, m, b) => f.push(b.range(g, m));
        if (a == c)
          for (this.regexp.lastIndex = u - a.from; (d = this.regexp.exec(a.text)) && d.index < h - a.from; )
            this.addMatch(d, e, d.index + a.from, p);
        else
          vx(e.state.doc, this.regexp, u, h, (g, m) => this.addMatch(m, e, g, p));
        t = t.update({ filterFrom: u, filterTo: h, filter: (g, m) => g < u || m > h, add: f });
      }
    }
    return t;
  }
}
const db = /x/.unicode != null ? "gu" : "g", UY = /* @__PURE__ */ new RegExp(`[\0-\b
--­؜​‎‏\u2028\u2029‭‮⁦⁧⁩\uFEFF￹-￼]`, db), KY = {
  0: "null",
  7: "bell",
  8: "backspace",
  10: "newline",
  11: "vertical tab",
  13: "carriage return",
  27: "escape",
  8203: "zero width space",
  8204: "zero width non-joiner",
  8205: "zero width joiner",
  8206: "left-to-right mark",
  8207: "right-to-left mark",
  8232: "line separator",
  8237: "left-to-right override",
  8238: "right-to-left override",
  8294: "left-to-right isolate",
  8295: "right-to-left isolate",
  8297: "pop directional isolate",
  8233: "paragraph separator",
  65279: "zero width no-break space",
  65532: "object replacement"
};
let fm = null;
function JY() {
  var n;
  if (fm == null && typeof document < "u" && document.body) {
    let e = document.body.style;
    fm = ((n = e.tabSize) !== null && n !== void 0 ? n : e.MozTabSize) != null;
  }
  return fm || !1;
}
const Od = /* @__PURE__ */ we.define({
  combine(n) {
    let e = Or(n, {
      render: null,
      specialChars: UY,
      addSpecialChars: null
    });
    return (e.replaceTabs = !JY()) && (e.specialChars = new RegExp("	|" + e.specialChars.source, db)), e.addSpecialChars && (e.specialChars = new RegExp(e.specialChars.source + "|" + e.addSpecialChars.source, db)), e;
  }
});
function eH(n = {}) {
  return [Od.of(n), tH()];
}
let yx = null;
function tH() {
  return yx || (yx = on.fromClass(class {
    constructor(n) {
      this.view = n, this.decorations = Te.none, this.decorationCache = /* @__PURE__ */ Object.create(null), this.decorator = this.makeDecorator(n.state.facet(Od)), this.decorations = this.decorator.createDeco(n);
    }
    makeDecorator(n) {
      return new GY({
        regexp: n.specialChars,
        decoration: (e, t, i) => {
          let { doc: s } = t.state, r = Mn(e[0], 0);
          if (r == 9) {
            let o = s.lineAt(i), l = t.state.tabSize, a = Mc(o.text, l, i - o.from);
            return Te.replace({
              widget: new rH((l - a % l) * this.view.defaultCharacterWidth / this.view.scaleX)
            });
          }
          return this.decorationCache[r] || (this.decorationCache[r] = Te.replace({ widget: new sH(n, r) }));
        },
        boundary: n.replaceTabs ? void 0 : /[^]/
      });
    }
    update(n) {
      let e = n.state.facet(Od);
      n.startState.facet(Od) != e ? (this.decorator = this.makeDecorator(e), this.decorations = this.decorator.createDeco(n.view)) : this.decorations = this.decorator.updateDeco(n, this.decorations);
    }
  }, {
    decorations: (n) => n.decorations
  }));
}
const nH = "•";
function iH(n) {
  return n >= 32 ? nH : n == 10 ? "␤" : String.fromCharCode(9216 + n);
}
class sH extends Gr {
  constructor(e, t) {
    super(), this.options = e, this.code = t;
  }
  eq(e) {
    return e.code == this.code;
  }
  toDOM(e) {
    let t = iH(this.code), i = e.state.phrase("Control character") + " " + (KY[this.code] || "0x" + this.code.toString(16)), s = this.options.render && this.options.render(this.code, i, t);
    if (s)
      return s;
    let r = document.createElement("span");
    return r.textContent = t, r.title = i, r.setAttribute("aria-label", i), r.className = "cm-specialChar", r;
  }
  ignoreEvent() {
    return !1;
  }
}
class rH extends Gr {
  constructor(e) {
    super(), this.width = e;
  }
  eq(e) {
    return e.width == this.width;
  }
  toDOM() {
    let e = document.createElement("span");
    return e.textContent = "	", e.className = "cm-tab", e.style.width = this.width + "px", e;
  }
  ignoreEvent() {
    return !1;
  }
}
function oH() {
  return aH;
}
const lH = /* @__PURE__ */ Te.line({ class: "cm-activeLine" }), aH = /* @__PURE__ */ on.fromClass(class {
  constructor(n) {
    this.decorations = this.getDeco(n);
  }
  update(n) {
    (n.docChanged || n.selectionSet) && (this.decorations = this.getDeco(n.view));
  }
  getDeco(n) {
    let e = -1, t = [];
    for (let i of n.state.selection.ranges) {
      let s = n.lineBlockAt(i.head);
      s.from > e && (t.push(lH.range(s.from)), e = s.from);
    }
    return Te.set(t);
  }
}, {
  decorations: (n) => n.decorations
}), pb = 2e3;
function cH(n, e, t) {
  let i = Math.min(e.line, t.line), s = Math.max(e.line, t.line), r = [];
  if (e.off > pb || t.off > pb || e.col < 0 || t.col < 0) {
    let o = Math.min(e.off, t.off), l = Math.max(e.off, t.off);
    for (let a = i; a <= s; a++) {
      let c = n.doc.line(a);
      c.length <= l && r.push(J.range(c.from + o, c.to + l));
    }
  } else {
    let o = Math.min(e.col, t.col), l = Math.max(e.col, t.col);
    for (let a = i; a <= s; a++) {
      let c = n.doc.line(a), u = W0(c.text, o, n.tabSize, !0);
      if (u < 0)
        r.push(J.cursor(c.to));
      else {
        let h = W0(c.text, l, n.tabSize);
        r.push(J.range(c.from + u, c.from + h));
      }
    }
  }
  return r;
}
function uH(n, e) {
  let t = n.coordsAtPos(n.viewport.from);
  return t ? Math.round(Math.abs((t.left - e) / n.defaultCharacterWidth)) : -1;
}
function Ox(n, e) {
  let t = n.posAtCoords({ x: e.clientX, y: e.clientY }, !1), i = n.state.doc.lineAt(t), s = t - i.from, r = s > pb ? -1 : s == i.length ? uH(n, e.clientX) : Mc(i.text, n.state.tabSize, t - i.from);
  return { line: i.number, col: r, off: s };
}
function hH(n, e) {
  let t = Ox(n, e), i = n.state.selection;
  return t ? {
    update(s) {
      if (s.docChanged) {
        let r = s.changes.mapPos(s.startState.doc.line(t.line).from), o = s.state.doc.lineAt(r);
        t = { line: o.number, col: t.col, off: Math.min(t.off, o.length) }, i = i.map(s.changes);
      }
    },
    get(s, r, o) {
      let l = Ox(n, s);
      if (!l)
        return i;
      let a = cH(n.state, t, l);
      return a.length ? o ? J.create(a.concat(i.ranges)) : J.create(a) : i;
    }
  } : null;
}
function fH(n) {
  let e = (n == null ? void 0 : n.eventFilter) || ((t) => t.altKey && t.button == 0);
  return Oe.mouseSelectionStyle.of((t, i) => e(i) ? hH(t, i) : null);
}
const dH = {
  Alt: [18, (n) => !!n.altKey],
  Control: [17, (n) => !!n.ctrlKey],
  Shift: [16, (n) => !!n.shiftKey],
  Meta: [91, (n) => !!n.metaKey]
}, pH = { style: "cursor: crosshair" };
function gH(n = {}) {
  let [e, t] = dH[n.key || "Alt"], i = on.fromClass(class {
    constructor(s) {
      this.view = s, this.isDown = !1;
    }
    set(s) {
      this.isDown != s && (this.isDown = s, this.view.update([]));
    }
  }, {
    eventObservers: {
      keydown(s) {
        this.set(s.keyCode == e || t(s));
      },
      keyup(s) {
        (s.keyCode == e || !t(s)) && this.set(!1);
      },
      mousemove(s) {
        this.set(t(s));
      }
    }
  });
  return [
    i,
    Oe.contentAttributes.of((s) => {
      var r;
      return !((r = s.plugin(i)) === null || r === void 0) && r.isDown ? pH : null;
    })
  ];
}
const Gc = "-10000px";
class $E {
  constructor(e, t, i, s) {
    this.facet = t, this.createTooltipView = i, this.removeTooltipView = s, this.input = e.state.facet(t), this.tooltips = this.input.filter((o) => o);
    let r = null;
    this.tooltipViews = this.tooltips.map((o) => r = i(o, r));
  }
  update(e, t) {
    var i;
    let s = e.state.facet(this.facet), r = s.filter((a) => a);
    if (s === this.input) {
      for (let a of this.tooltipViews)
        a.update && a.update(e);
      return !1;
    }
    let o = [], l = t ? [] : null;
    for (let a = 0; a < r.length; a++) {
      let c = r[a], u = -1;
      if (c) {
        for (let h = 0; h < this.tooltips.length; h++) {
          let f = this.tooltips[h];
          f && f.create == c.create && (u = h);
        }
        if (u < 0)
          o[a] = this.createTooltipView(c, a ? o[a - 1] : null), l && (l[a] = !!c.above);
        else {
          let h = o[a] = this.tooltipViews[u];
          l && (l[a] = t[u]), h.update && h.update(e);
        }
      }
    }
    for (let a of this.tooltipViews)
      o.indexOf(a) < 0 && (this.removeTooltipView(a), (i = a.destroy) === null || i === void 0 || i.call(a));
    return t && (l.forEach((a, c) => t[c] = a), t.length = l.length), this.input = s, this.tooltips = r, this.tooltipViews = o, !0;
  }
}
function mH(n) {
  let { win: e } = n;
  return { top: 0, left: 0, bottom: e.innerHeight, right: e.innerWidth };
}
const dm = /* @__PURE__ */ we.define({
  combine: (n) => {
    var e, t, i;
    return {
      position: xe.ios ? "absolute" : ((e = n.find((s) => s.position)) === null || e === void 0 ? void 0 : e.position) || "fixed",
      parent: ((t = n.find((s) => s.parent)) === null || t === void 0 ? void 0 : t.parent) || null,
      tooltipSpace: ((i = n.find((s) => s.tooltipSpace)) === null || i === void 0 ? void 0 : i.tooltipSpace) || mH
    };
  }
}), wx = /* @__PURE__ */ new WeakMap(), ay = /* @__PURE__ */ on.fromClass(class {
  constructor(n) {
    this.view = n, this.above = [], this.inView = !0, this.madeAbsolute = !1, this.lastTransaction = 0, this.measureTimeout = -1;
    let e = n.state.facet(dm);
    this.position = e.position, this.parent = e.parent, this.classes = n.themeClasses, this.createContainer(), this.measureReq = { read: this.readMeasure.bind(this), write: this.writeMeasure.bind(this), key: this }, this.resizeObserver = typeof ResizeObserver == "function" ? new ResizeObserver(() => this.measureSoon()) : null, this.manager = new $E(n, cy, (t, i) => this.createTooltip(t, i), (t) => {
      this.resizeObserver && this.resizeObserver.unobserve(t.dom), t.dom.remove();
    }), this.above = this.manager.tooltips.map((t) => !!t.above), this.intersectionObserver = typeof IntersectionObserver == "function" ? new IntersectionObserver((t) => {
      Date.now() > this.lastTransaction - 50 && t.length > 0 && t[t.length - 1].intersectionRatio < 1 && this.measureSoon();
    }, { threshold: [1] }) : null, this.observeIntersection(), n.win.addEventListener("resize", this.measureSoon = this.measureSoon.bind(this)), this.maybeMeasure();
  }
  createContainer() {
    this.parent ? (this.container = document.createElement("div"), this.container.style.position = "relative", this.container.className = this.view.themeClasses, this.parent.appendChild(this.container)) : this.container = this.view.dom;
  }
  observeIntersection() {
    if (this.intersectionObserver) {
      this.intersectionObserver.disconnect();
      for (let n of this.manager.tooltipViews)
        this.intersectionObserver.observe(n.dom);
    }
  }
  measureSoon() {
    this.measureTimeout < 0 && (this.measureTimeout = setTimeout(() => {
      this.measureTimeout = -1, this.maybeMeasure();
    }, 50));
  }
  update(n) {
    n.transactions.length && (this.lastTransaction = Date.now());
    let e = this.manager.update(n, this.above);
    e && this.observeIntersection();
    let t = e || n.geometryChanged, i = n.state.facet(dm);
    if (i.position != this.position && !this.madeAbsolute) {
      this.position = i.position;
      for (let s of this.manager.tooltipViews)
        s.dom.style.position = this.position;
      t = !0;
    }
    if (i.parent != this.parent) {
      this.parent && this.container.remove(), this.parent = i.parent, this.createContainer();
      for (let s of this.manager.tooltipViews)
        this.container.appendChild(s.dom);
      t = !0;
    } else
      this.parent && this.view.themeClasses != this.classes && (this.classes = this.container.className = this.view.themeClasses);
    t && this.maybeMeasure();
  }
  createTooltip(n, e) {
    let t = n.create(this.view), i = e ? e.dom : null;
    if (t.dom.classList.add("cm-tooltip"), n.arrow && !t.dom.querySelector(".cm-tooltip > .cm-tooltip-arrow")) {
      let s = document.createElement("div");
      s.className = "cm-tooltip-arrow", t.dom.insertBefore(s, i);
    }
    return t.dom.style.position = this.position, t.dom.style.top = Gc, t.dom.style.left = "0px", this.container.insertBefore(t.dom, i), t.mount && t.mount(this.view), this.resizeObserver && this.resizeObserver.observe(t.dom), t;
  }
  destroy() {
    var n, e, t;
    this.view.win.removeEventListener("resize", this.measureSoon);
    for (let i of this.manager.tooltipViews)
      i.dom.remove(), (n = i.destroy) === null || n === void 0 || n.call(i);
    this.parent && this.container.remove(), (e = this.resizeObserver) === null || e === void 0 || e.disconnect(), (t = this.intersectionObserver) === null || t === void 0 || t.disconnect(), clearTimeout(this.measureTimeout);
  }
  readMeasure() {
    let n = this.view.dom.getBoundingClientRect(), e = 1, t = 1, i = !1;
    if (this.position == "fixed" && this.manager.tooltipViews.length) {
      let { dom: s } = this.manager.tooltipViews[0];
      if (xe.gecko)
        i = s.offsetParent != this.container.ownerDocument.body;
      else if (s.style.top == Gc && s.style.left == "0px") {
        let r = s.getBoundingClientRect();
        i = Math.abs(r.top + 1e4) > 1 || Math.abs(r.left) > 1;
      }
    }
    if (i || this.position == "absolute")
      if (this.parent) {
        let s = this.parent.getBoundingClientRect();
        s.width && s.height && (e = s.width / this.parent.offsetWidth, t = s.height / this.parent.offsetHeight);
      } else
        ({ scaleX: e, scaleY: t } = this.view.viewState);
    return {
      editor: n,
      parent: this.parent ? this.container.getBoundingClientRect() : n,
      pos: this.manager.tooltips.map((s, r) => {
        let o = this.manager.tooltipViews[r];
        return o.getCoords ? o.getCoords(s.pos) : this.view.coordsAtPos(s.pos);
      }),
      size: this.manager.tooltipViews.map(({ dom: s }) => s.getBoundingClientRect()),
      space: this.view.state.facet(dm).tooltipSpace(this.view),
      scaleX: e,
      scaleY: t,
      makeAbsolute: i
    };
  }
  writeMeasure(n) {
    var e;
    if (n.makeAbsolute) {
      this.madeAbsolute = !0, this.position = "absolute";
      for (let l of this.manager.tooltipViews)
        l.dom.style.position = "absolute";
    }
    let { editor: t, space: i, scaleX: s, scaleY: r } = n, o = [];
    for (let l = 0; l < this.manager.tooltips.length; l++) {
      let a = this.manager.tooltips[l], c = this.manager.tooltipViews[l], { dom: u } = c, h = n.pos[l], f = n.size[l];
      if (!h || h.bottom <= Math.max(t.top, i.top) || h.top >= Math.min(t.bottom, i.bottom) || h.right < Math.max(t.left, i.left) - 0.1 || h.left > Math.min(t.right, i.right) + 0.1) {
        u.style.top = Gc;
        continue;
      }
      let d = a.arrow ? c.dom.querySelector(".cm-tooltip-arrow") : null, p = d ? 7 : 0, g = f.right - f.left, m = (e = wx.get(c)) !== null && e !== void 0 ? e : f.bottom - f.top, b = c.offset || vH, y = this.view.textDirection == Rt.LTR, v = f.width > i.right - i.left ? y ? i.left : i.right - f.width : y ? Math.min(h.left - (d ? 14 : 0) + b.x, i.right - g) : Math.max(i.left, h.left - g + (d ? 14 : 0) - b.x), O = this.above[l];
      !a.strictSide && (O ? h.top - (f.bottom - f.top) - b.y < i.top : h.bottom + (f.bottom - f.top) + b.y > i.bottom) && O == i.bottom - h.bottom > h.top - i.top && (O = this.above[l] = !O);
      let x = (O ? h.top - i.top : i.bottom - h.bottom) - p;
      if (x < m && c.resize !== !1) {
        if (x < this.view.defaultLineHeight) {
          u.style.top = Gc;
          continue;
        }
        wx.set(c, m), u.style.height = (m = x) / r + "px";
      } else
        u.style.height && (u.style.height = "");
      let S = O ? h.top - m - p - b.y : h.bottom + p + b.y, C = v + g;
      if (c.overlap !== !0)
        for (let k of o)
          k.left < C && k.right > v && k.top < S + m && k.bottom > S && (S = O ? k.top - m - 2 - p : k.bottom + p + 2);
      if (this.position == "absolute" ? (u.style.top = (S - n.parent.top) / r + "px", u.style.left = (v - n.parent.left) / s + "px") : (u.style.top = S / r + "px", u.style.left = v / s + "px"), d) {
        let k = h.left + (y ? b.x : -b.x) - (v + 14 - 7);
        d.style.left = k / s + "px";
      }
      c.overlap !== !0 && o.push({ left: v, top: S, right: C, bottom: S + m }), u.classList.toggle("cm-tooltip-above", O), u.classList.toggle("cm-tooltip-below", !O), c.positioned && c.positioned(n.space);
    }
  }
  maybeMeasure() {
    if (this.manager.tooltips.length && (this.view.inView && this.view.requestMeasure(this.measureReq), this.inView != this.view.inView && (this.inView = this.view.inView, !this.inView)))
      for (let n of this.manager.tooltipViews)
        n.dom.style.top = Gc;
  }
}, {
  eventObservers: {
    scroll() {
      this.maybeMeasure();
    }
  }
}), bH = /* @__PURE__ */ Oe.baseTheme({
  ".cm-tooltip": {
    zIndex: 100,
    boxSizing: "border-box"
  },
  "&light .cm-tooltip": {
    border: "1px solid #bbb",
    backgroundColor: "#f5f5f5"
  },
  "&light .cm-tooltip-section:not(:first-child)": {
    borderTop: "1px solid #bbb"
  },
  "&dark .cm-tooltip": {
    backgroundColor: "#333338",
    color: "white"
  },
  ".cm-tooltip-arrow": {
    height: "7px",
    width: `${7 * 2}px`,
    position: "absolute",
    zIndex: -1,
    overflow: "hidden",
    "&:before, &:after": {
      content: "''",
      position: "absolute",
      width: 0,
      height: 0,
      borderLeft: "7px solid transparent",
      borderRight: "7px solid transparent"
    },
    ".cm-tooltip-above &": {
      bottom: "-7px",
      "&:before": {
        borderTop: "7px solid #bbb"
      },
      "&:after": {
        borderTop: "7px solid #f5f5f5",
        bottom: "1px"
      }
    },
    ".cm-tooltip-below &": {
      top: "-7px",
      "&:before": {
        borderBottom: "7px solid #bbb"
      },
      "&:after": {
        borderBottom: "7px solid #f5f5f5",
        top: "1px"
      }
    }
  },
  "&dark .cm-tooltip .cm-tooltip-arrow": {
    "&:before": {
      borderTopColor: "#333338",
      borderBottomColor: "#333338"
    },
    "&:after": {
      borderTopColor: "transparent",
      borderBottomColor: "transparent"
    }
  }
}), vH = { x: 0, y: 0 }, cy = /* @__PURE__ */ we.define({
  enables: [ay, bH]
}), Xd = /* @__PURE__ */ we.define({
  combine: (n) => n.reduce((e, t) => e.concat(t), [])
});
class ig {
  // Needs to be static so that host tooltip instances always match
  static create(e) {
    return new ig(e);
  }
  constructor(e) {
    this.view = e, this.mounted = !1, this.dom = document.createElement("div"), this.dom.classList.add("cm-tooltip-hover"), this.manager = new $E(e, Xd, (t, i) => this.createHostedView(t, i), (t) => t.dom.remove());
  }
  createHostedView(e, t) {
    let i = e.create(this.view);
    return i.dom.classList.add("cm-tooltip-section"), this.dom.insertBefore(i.dom, t ? t.dom.nextSibling : this.dom.firstChild), this.mounted && i.mount && i.mount(this.view), i;
  }
  mount(e) {
    for (let t of this.manager.tooltipViews)
      t.mount && t.mount(e);
    this.mounted = !0;
  }
  positioned(e) {
    for (let t of this.manager.tooltipViews)
      t.positioned && t.positioned(e);
  }
  update(e) {
    this.manager.update(e);
  }
  destroy() {
    var e;
    for (let t of this.manager.tooltipViews)
      (e = t.destroy) === null || e === void 0 || e.call(t);
  }
  passProp(e) {
    let t;
    for (let i of this.manager.tooltipViews) {
      let s = i[e];
      if (s !== void 0) {
        if (t === void 0)
          t = s;
        else if (t !== s)
          return;
      }
    }
    return t;
  }
  get offset() {
    return this.passProp("offset");
  }
  get getCoords() {
    return this.passProp("getCoords");
  }
  get overlap() {
    return this.passProp("overlap");
  }
  get resize() {
    return this.passProp("resize");
  }
}
const yH = /* @__PURE__ */ cy.compute([Xd], (n) => {
  let e = n.facet(Xd);
  return e.length === 0 ? null : {
    pos: Math.min(...e.map((t) => t.pos)),
    end: Math.max(...e.map((t) => {
      var i;
      return (i = t.end) !== null && i !== void 0 ? i : t.pos;
    })),
    create: ig.create,
    above: e[0].above,
    arrow: e.some((t) => t.arrow)
  };
});
class OH {
  constructor(e, t, i, s, r) {
    this.view = e, this.source = t, this.field = i, this.setHover = s, this.hoverTime = r, this.hoverTimeout = -1, this.restartTimeout = -1, this.pending = null, this.lastMove = { x: 0, y: 0, target: e.dom, time: 0 }, this.checkHover = this.checkHover.bind(this), e.dom.addEventListener("mouseleave", this.mouseleave = this.mouseleave.bind(this)), e.dom.addEventListener("mousemove", this.mousemove = this.mousemove.bind(this));
  }
  update() {
    this.pending && (this.pending = null, clearTimeout(this.restartTimeout), this.restartTimeout = setTimeout(() => this.startHover(), 20));
  }
  get active() {
    return this.view.state.field(this.field);
  }
  checkHover() {
    if (this.hoverTimeout = -1, this.active.length)
      return;
    let e = Date.now() - this.lastMove.time;
    e < this.hoverTime ? this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime - e) : this.startHover();
  }
  startHover() {
    clearTimeout(this.restartTimeout);
    let { view: e, lastMove: t } = this, i = e.docView.nearest(t.target);
    if (!i)
      return;
    let s, r = 1;
    if (i instanceof Oo)
      s = i.posAtStart;
    else {
      if (s = e.posAtCoords(t), s == null)
        return;
      let l = e.coordsAtPos(s);
      if (!l || t.y < l.top || t.y > l.bottom || t.x < l.left - e.defaultCharacterWidth || t.x > l.right + e.defaultCharacterWidth)
        return;
      let a = e.bidiSpans(e.state.doc.lineAt(s)).find((u) => u.from <= s && u.to >= s), c = a && a.dir == Rt.RTL ? -1 : 1;
      r = t.x < l.left ? -c : c;
    }
    let o = this.source(e, s, r);
    if (o != null && o.then) {
      let l = this.pending = { pos: s };
      o.then((a) => {
        this.pending == l && (this.pending = null, a && !(Array.isArray(a) && !a.length) && e.dispatch({ effects: this.setHover.of(Array.isArray(a) ? a : [a]) }));
      }, (a) => Ki(e.state, a, "hover tooltip"));
    } else
      o && !(Array.isArray(o) && !o.length) && e.dispatch({ effects: this.setHover.of(Array.isArray(o) ? o : [o]) });
  }
  get tooltip() {
    let e = this.view.plugin(ay), t = e ? e.manager.tooltips.findIndex((i) => i.create == ig.create) : -1;
    return t > -1 ? e.manager.tooltipViews[t] : null;
  }
  mousemove(e) {
    var t, i;
    this.lastMove = { x: e.clientX, y: e.clientY, target: e.target, time: Date.now() }, this.hoverTimeout < 0 && (this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime));
    let { active: s, tooltip: r } = this;
    if (s.length && r && !wH(r.dom, e) || this.pending) {
      let { pos: o } = s[0] || this.pending, l = (i = (t = s[0]) === null || t === void 0 ? void 0 : t.end) !== null && i !== void 0 ? i : o;
      (o == l ? this.view.posAtCoords(this.lastMove) != o : !xH(this.view, o, l, e.clientX, e.clientY)) && (this.view.dispatch({ effects: this.setHover.of([]) }), this.pending = null);
    }
  }
  mouseleave(e) {
    clearTimeout(this.hoverTimeout), this.hoverTimeout = -1;
    let { active: t } = this;
    if (t.length) {
      let { tooltip: i } = this;
      i && i.dom.contains(e.relatedTarget) ? this.watchTooltipLeave(i.dom) : this.view.dispatch({ effects: this.setHover.of([]) });
    }
  }
  watchTooltipLeave(e) {
    let t = (i) => {
      e.removeEventListener("mouseleave", t), this.active.length && !this.view.dom.contains(i.relatedTarget) && this.view.dispatch({ effects: this.setHover.of([]) });
    };
    e.addEventListener("mouseleave", t);
  }
  destroy() {
    clearTimeout(this.hoverTimeout), this.view.dom.removeEventListener("mouseleave", this.mouseleave), this.view.dom.removeEventListener("mousemove", this.mousemove);
  }
}
const _f = 4;
function wH(n, e) {
  let t = n.getBoundingClientRect();
  return e.clientX >= t.left - _f && e.clientX <= t.right + _f && e.clientY >= t.top - _f && e.clientY <= t.bottom + _f;
}
function xH(n, e, t, i, s, r) {
  let o = n.scrollDOM.getBoundingClientRect(), l = n.documentTop + n.documentPadding.top + n.contentHeight;
  if (o.left > i || o.right < i || o.top > s || Math.min(o.bottom, l) < s)
    return !1;
  let a = n.posAtCoords({ x: i, y: s }, !1);
  return a >= e && a <= t;
}
function SH(n, e = {}) {
  let t = Ve.define(), i = Pn.define({
    create() {
      return [];
    },
    update(s, r) {
      if (s.length && (e.hideOnChange && (r.docChanged || r.selection) ? s = [] : e.hideOn && (s = s.filter((o) => !e.hideOn(r, o))), r.docChanged)) {
        let o = [];
        for (let l of s) {
          let a = r.changes.mapPos(l.pos, -1, Nn.TrackDel);
          if (a != null) {
            let c = Object.assign(/* @__PURE__ */ Object.create(null), l);
            c.pos = a, c.end != null && (c.end = r.changes.mapPos(c.end)), o.push(c);
          }
        }
        s = o;
      }
      for (let o of r.effects)
        o.is(t) && (s = o.value), o.is(CH) && (s = []);
      return s;
    },
    provide: (s) => Xd.from(s)
  });
  return [
    i,
    on.define((s) => new OH(
      s,
      n,
      i,
      t,
      e.hoverTime || 300
      /* Hover.Time */
    )),
    yH
  ];
}
function TE(n, e) {
  let t = n.plugin(ay);
  if (!t)
    return null;
  let i = t.manager.tooltips.indexOf(e);
  return i < 0 ? null : t.manager.tooltipViews[i];
}
const CH = /* @__PURE__ */ Ve.define(), xx = /* @__PURE__ */ we.define({
  combine(n) {
    let e, t;
    for (let i of n)
      e = e || i.topContainer, t = t || i.bottomContainer;
    return { topContainer: e, bottomContainer: t };
  }
});
function ih(n, e) {
  let t = n.plugin(_E), i = t ? t.specs.indexOf(e) : -1;
  return i > -1 ? t.panels[i] : null;
}
const _E = /* @__PURE__ */ on.fromClass(class {
  constructor(n) {
    this.input = n.state.facet(sh), this.specs = this.input.filter((t) => t), this.panels = this.specs.map((t) => t(n));
    let e = n.state.facet(xx);
    this.top = new Mf(n, !0, e.topContainer), this.bottom = new Mf(n, !1, e.bottomContainer), this.top.sync(this.panels.filter((t) => t.top)), this.bottom.sync(this.panels.filter((t) => !t.top));
    for (let t of this.panels)
      t.dom.classList.add("cm-panel"), t.mount && t.mount();
  }
  update(n) {
    let e = n.state.facet(xx);
    this.top.container != e.topContainer && (this.top.sync([]), this.top = new Mf(n.view, !0, e.topContainer)), this.bottom.container != e.bottomContainer && (this.bottom.sync([]), this.bottom = new Mf(n.view, !1, e.bottomContainer)), this.top.syncClasses(), this.bottom.syncClasses();
    let t = n.state.facet(sh);
    if (t != this.input) {
      let i = t.filter((a) => a), s = [], r = [], o = [], l = [];
      for (let a of i) {
        let c = this.specs.indexOf(a), u;
        c < 0 ? (u = a(n.view), l.push(u)) : (u = this.panels[c], u.update && u.update(n)), s.push(u), (u.top ? r : o).push(u);
      }
      this.specs = i, this.panels = s, this.top.sync(r), this.bottom.sync(o);
      for (let a of l)
        a.dom.classList.add("cm-panel"), a.mount && a.mount();
    } else
      for (let i of this.panels)
        i.update && i.update(n);
  }
  destroy() {
    this.top.sync([]), this.bottom.sync([]);
  }
}, {
  provide: (n) => Oe.scrollMargins.of((e) => {
    let t = e.plugin(n);
    return t && { top: t.top.scrollMargin(), bottom: t.bottom.scrollMargin() };
  })
});
class Mf {
  constructor(e, t, i) {
    this.view = e, this.top = t, this.container = i, this.dom = void 0, this.classes = "", this.panels = [], this.syncClasses();
  }
  sync(e) {
    for (let t of this.panels)
      t.destroy && e.indexOf(t) < 0 && t.destroy();
    this.panels = e, this.syncDOM();
  }
  syncDOM() {
    if (this.panels.length == 0) {
      this.dom && (this.dom.remove(), this.dom = void 0);
      return;
    }
    if (!this.dom) {
      this.dom = document.createElement("div"), this.dom.className = this.top ? "cm-panels cm-panels-top" : "cm-panels cm-panels-bottom", this.dom.style[this.top ? "top" : "bottom"] = "0";
      let t = this.container || this.view.dom;
      t.insertBefore(this.dom, this.top ? t.firstChild : null);
    }
    let e = this.dom.firstChild;
    for (let t of this.panels)
      if (t.dom.parentNode == this.dom) {
        for (; e != t.dom; )
          e = Sx(e);
        e = e.nextSibling;
      } else
        this.dom.insertBefore(t.dom, e);
    for (; e; )
      e = Sx(e);
  }
  scrollMargin() {
    return !this.dom || this.container ? 0 : Math.max(0, this.top ? this.dom.getBoundingClientRect().bottom - Math.max(0, this.view.scrollDOM.getBoundingClientRect().top) : Math.min(innerHeight, this.view.scrollDOM.getBoundingClientRect().bottom) - this.dom.getBoundingClientRect().top);
  }
  syncClasses() {
    if (!(!this.container || this.classes == this.view.themeClasses)) {
      for (let e of this.classes.split(" "))
        e && this.container.classList.remove(e);
      for (let e of (this.classes = this.view.themeClasses).split(" "))
        e && this.container.classList.add(e);
    }
  }
}
function Sx(n) {
  let e = n.nextSibling;
  return n.remove(), e;
}
const sh = /* @__PURE__ */ we.define({
  enables: _E
});
class zr extends Ql {
  /**
  @internal
  */
  compare(e) {
    return this == e || this.constructor == e.constructor && this.eq(e);
  }
  /**
  Compare this marker to another marker of the same type.
  */
  eq(e) {
    return !1;
  }
  /**
  Called if the marker has a `toDOM` method and its representation
  was removed from a gutter.
  */
  destroy(e) {
  }
}
zr.prototype.elementClass = "";
zr.prototype.toDOM = void 0;
zr.prototype.mapMode = Nn.TrackBefore;
zr.prototype.startSide = zr.prototype.endSide = -1;
zr.prototype.point = !0;
const wd = /* @__PURE__ */ we.define(), kH = {
  class: "",
  renderEmptyElements: !1,
  elementStyle: "",
  markers: () => it.empty,
  lineMarker: () => null,
  widgetMarker: () => null,
  lineMarkerChange: null,
  initialSpacer: null,
  updateSpacer: null,
  domEventHandlers: {}
}, Pu = /* @__PURE__ */ we.define();
function PH(n) {
  return [ME(), Pu.of(Object.assign(Object.assign({}, kH), n))];
}
const gb = /* @__PURE__ */ we.define({
  combine: (n) => n.some((e) => e)
});
function ME(n) {
  let e = [
    AH
  ];
  return n && n.fixed === !1 && e.push(gb.of(!0)), e;
}
const AH = /* @__PURE__ */ on.fromClass(class {
  constructor(n) {
    this.view = n, this.prevViewport = n.viewport, this.dom = document.createElement("div"), this.dom.className = "cm-gutters", this.dom.setAttribute("aria-hidden", "true"), this.dom.style.minHeight = this.view.contentHeight / this.view.scaleY + "px", this.gutters = n.state.facet(Pu).map((e) => new kx(n, e));
    for (let e of this.gutters)
      this.dom.appendChild(e.dom);
    this.fixed = !n.state.facet(gb), this.fixed && (this.dom.style.position = "sticky"), this.syncGutters(!1), n.scrollDOM.insertBefore(this.dom, n.contentDOM);
  }
  update(n) {
    if (this.updateGutters(n)) {
      let e = this.prevViewport, t = n.view.viewport, i = Math.min(e.to, t.to) - Math.max(e.from, t.from);
      this.syncGutters(i < (t.to - t.from) * 0.8);
    }
    n.geometryChanged && (this.dom.style.minHeight = this.view.contentHeight + "px"), this.view.state.facet(gb) != !this.fixed && (this.fixed = !this.fixed, this.dom.style.position = this.fixed ? "sticky" : ""), this.prevViewport = n.view.viewport;
  }
  syncGutters(n) {
    let e = this.dom.nextSibling;
    n && this.dom.remove();
    let t = it.iter(this.view.state.facet(wd), this.view.viewport.from), i = [], s = this.gutters.map((r) => new EH(r, this.view.viewport, -this.view.documentPadding.top));
    for (let r of this.view.viewportLineBlocks)
      if (i.length && (i = []), Array.isArray(r.type)) {
        let o = !0;
        for (let l of r.type)
          if (l.type == ei.Text && o) {
            mb(t, i, l.from);
            for (let a of s)
              a.line(this.view, l, i);
            o = !1;
          } else if (l.widget)
            for (let a of s)
              a.widget(this.view, l);
      } else if (r.type == ei.Text) {
        mb(t, i, r.from);
        for (let o of s)
          o.line(this.view, r, i);
      } else if (r.widget)
        for (let o of s)
          o.widget(this.view, r);
    for (let r of s)
      r.finish();
    n && this.view.scrollDOM.insertBefore(this.dom, e);
  }
  updateGutters(n) {
    let e = n.startState.facet(Pu), t = n.state.facet(Pu), i = n.docChanged || n.heightChanged || n.viewportChanged || !it.eq(n.startState.facet(wd), n.state.facet(wd), n.view.viewport.from, n.view.viewport.to);
    if (e == t)
      for (let s of this.gutters)
        s.update(n) && (i = !0);
    else {
      i = !0;
      let s = [];
      for (let r of t) {
        let o = e.indexOf(r);
        o < 0 ? s.push(new kx(this.view, r)) : (this.gutters[o].update(n), s.push(this.gutters[o]));
      }
      for (let r of this.gutters)
        r.dom.remove(), s.indexOf(r) < 0 && r.destroy();
      for (let r of s)
        this.dom.appendChild(r.dom);
      this.gutters = s;
    }
    return i;
  }
  destroy() {
    for (let n of this.gutters)
      n.destroy();
    this.dom.remove();
  }
}, {
  provide: (n) => Oe.scrollMargins.of((e) => {
    let t = e.plugin(n);
    return !t || t.gutters.length == 0 || !t.fixed ? null : e.textDirection == Rt.LTR ? { left: t.dom.offsetWidth * e.scaleX } : { right: t.dom.offsetWidth * e.scaleX };
  })
});
function Cx(n) {
  return Array.isArray(n) ? n : [n];
}
function mb(n, e, t) {
  for (; n.value && n.from <= t; )
    n.from == t && e.push(n.value), n.next();
}
class EH {
  constructor(e, t, i) {
    this.gutter = e, this.height = i, this.i = 0, this.cursor = it.iter(e.markers, t.from);
  }
  addElement(e, t, i) {
    let { gutter: s } = this, r = (t.top - this.height) / e.scaleY, o = t.height / e.scaleY;
    if (this.i == s.elements.length) {
      let l = new RE(e, o, r, i);
      s.elements.push(l), s.dom.appendChild(l.dom);
    } else
      s.elements[this.i].update(e, o, r, i);
    this.height = t.bottom, this.i++;
  }
  line(e, t, i) {
    let s = [];
    mb(this.cursor, s, t.from), i.length && (s = s.concat(i));
    let r = this.gutter.config.lineMarker(e, t, s);
    r && s.unshift(r);
    let o = this.gutter;
    s.length == 0 && !o.config.renderEmptyElements || this.addElement(e, t, s);
  }
  widget(e, t) {
    let i = this.gutter.config.widgetMarker(e, t.widget, t);
    i && this.addElement(e, t, [i]);
  }
  finish() {
    let e = this.gutter;
    for (; e.elements.length > this.i; ) {
      let t = e.elements.pop();
      e.dom.removeChild(t.dom), t.destroy();
    }
  }
}
class kx {
  constructor(e, t) {
    this.view = e, this.config = t, this.elements = [], this.spacer = null, this.dom = document.createElement("div"), this.dom.className = "cm-gutter" + (this.config.class ? " " + this.config.class : "");
    for (let i in t.domEventHandlers)
      this.dom.addEventListener(i, (s) => {
        let r = s.target, o;
        if (r != this.dom && this.dom.contains(r)) {
          for (; r.parentNode != this.dom; )
            r = r.parentNode;
          let a = r.getBoundingClientRect();
          o = (a.top + a.bottom) / 2;
        } else
          o = s.clientY;
        let l = e.lineBlockAtHeight(o - e.documentTop);
        t.domEventHandlers[i](e, l, s) && s.preventDefault();
      });
    this.markers = Cx(t.markers(e)), t.initialSpacer && (this.spacer = new RE(e, 0, 0, [t.initialSpacer(e)]), this.dom.appendChild(this.spacer.dom), this.spacer.dom.style.cssText += "visibility: hidden; pointer-events: none");
  }
  update(e) {
    let t = this.markers;
    if (this.markers = Cx(this.config.markers(e.view)), this.spacer && this.config.updateSpacer) {
      let s = this.config.updateSpacer(this.spacer.markers[0], e);
      s != this.spacer.markers[0] && this.spacer.update(e.view, 0, 0, [s]);
    }
    let i = e.view.viewport;
    return !it.eq(this.markers, t, i.from, i.to) || (this.config.lineMarkerChange ? this.config.lineMarkerChange(e) : !1);
  }
  destroy() {
    for (let e of this.elements)
      e.destroy();
  }
}
class RE {
  constructor(e, t, i, s) {
    this.height = -1, this.above = 0, this.markers = [], this.dom = document.createElement("div"), this.dom.className = "cm-gutterElement", this.update(e, t, i, s);
  }
  update(e, t, i, s) {
    this.height != t && (this.height = t, this.dom.style.height = t + "px"), this.above != i && (this.dom.style.marginTop = (this.above = i) ? i + "px" : ""), $H(this.markers, s) || this.setMarkers(e, s);
  }
  setMarkers(e, t) {
    let i = "cm-gutterElement", s = this.dom.firstChild;
    for (let r = 0, o = 0; ; ) {
      let l = o, a = r < t.length ? t[r++] : null, c = !1;
      if (a) {
        let u = a.elementClass;
        u && (i += " " + u);
        for (let h = o; h < this.markers.length; h++)
          if (this.markers[h].compare(a)) {
            l = h, c = !0;
            break;
          }
      } else
        l = this.markers.length;
      for (; o < l; ) {
        let u = this.markers[o++];
        if (u.toDOM) {
          u.destroy(s);
          let h = s.nextSibling;
          s.remove(), s = h;
        }
      }
      if (!a)
        break;
      a.toDOM && (c ? s = s.nextSibling : this.dom.insertBefore(a.toDOM(e), s)), c && o++;
    }
    this.dom.className = i, this.markers = t;
  }
  destroy() {
    this.setMarkers(null, []);
  }
}
function $H(n, e) {
  if (n.length != e.length)
    return !1;
  for (let t = 0; t < n.length; t++)
    if (!n[t].compare(e[t]))
      return !1;
  return !0;
}
const TH = /* @__PURE__ */ we.define(), ga = /* @__PURE__ */ we.define({
  combine(n) {
    return Or(n, { formatNumber: String, domEventHandlers: {} }, {
      domEventHandlers(e, t) {
        let i = Object.assign({}, e);
        for (let s in t) {
          let r = i[s], o = t[s];
          i[s] = r ? (l, a, c) => r(l, a, c) || o(l, a, c) : o;
        }
        return i;
      }
    });
  }
});
class pm extends zr {
  constructor(e) {
    super(), this.number = e;
  }
  eq(e) {
    return this.number == e.number;
  }
  toDOM() {
    return document.createTextNode(this.number);
  }
}
function gm(n, e) {
  return n.state.facet(ga).formatNumber(e, n.state);
}
const _H = /* @__PURE__ */ Pu.compute([ga], (n) => ({
  class: "cm-lineNumbers",
  renderEmptyElements: !1,
  markers(e) {
    return e.state.facet(TH);
  },
  lineMarker(e, t, i) {
    return i.some((s) => s.toDOM) ? null : new pm(gm(e, e.state.doc.lineAt(t.from).number));
  },
  widgetMarker: () => null,
  lineMarkerChange: (e) => e.startState.facet(ga) != e.state.facet(ga),
  initialSpacer(e) {
    return new pm(gm(e, Px(e.state.doc.lines)));
  },
  updateSpacer(e, t) {
    let i = gm(t.view, Px(t.view.state.doc.lines));
    return i == e.number ? e : new pm(i);
  },
  domEventHandlers: n.facet(ga).domEventHandlers
}));
function MH(n = {}) {
  return [
    ga.of(n),
    ME(),
    _H
  ];
}
function Px(n) {
  let e = 9;
  for (; e < n; )
    e = e * 10 + 9;
  return e;
}
const RH = /* @__PURE__ */ new class extends zr {
  constructor() {
    super(...arguments), this.elementClass = "cm-activeLineGutter";
  }
}(), DH = /* @__PURE__ */ wd.compute(["selection"], (n) => {
  let e = [], t = -1;
  for (let i of n.selection.ranges) {
    let s = n.doc.lineAt(i.head).from;
    s > t && (t = s, e.push(RH.range(s)));
  }
  return it.of(e);
});
function LH() {
  return DH;
}
const DE = 1024;
let NH = 0;
class mm {
  constructor(e, t) {
    this.from = e, this.to = t;
  }
}
class Ge {
  /**
  Create a new node prop type.
  */
  constructor(e = {}) {
    this.id = NH++, this.perNode = !!e.perNode, this.deserialize = e.deserialize || (() => {
      throw new Error("This node type doesn't define a deserialize function");
    });
  }
  /**
  This is meant to be used with
  [`NodeSet.extend`](#common.NodeSet.extend) or
  [`LRParser.configure`](#lr.ParserConfig.props) to compute
  prop values for each node type in the set. Takes a [match
  object](#common.NodeType^match) or function that returns undefined
  if the node type doesn't get this prop, and the prop's value if
  it does.
  */
  add(e) {
    if (this.perNode)
      throw new RangeError("Can't add per-node props to node types");
    return typeof e != "function" && (e = xi.match(e)), (t) => {
      let i = e(t);
      return i === void 0 ? null : [this, i];
    };
  }
}
Ge.closedBy = new Ge({ deserialize: (n) => n.split(" ") });
Ge.openedBy = new Ge({ deserialize: (n) => n.split(" ") });
Ge.group = new Ge({ deserialize: (n) => n.split(" ") });
Ge.isolate = new Ge({ deserialize: (n) => {
  if (n && n != "rtl" && n != "ltr" && n != "auto")
    throw new RangeError("Invalid value for isolate: " + n);
  return n || "auto";
} });
Ge.contextHash = new Ge({ perNode: !0 });
Ge.lookAhead = new Ge({ perNode: !0 });
Ge.mounted = new Ge({ perNode: !0 });
class Yd {
  constructor(e, t, i) {
    this.tree = e, this.overlay = t, this.parser = i;
  }
  /**
  @internal
  */
  static get(e) {
    return e && e.props && e.props[Ge.mounted.id];
  }
}
const IH = /* @__PURE__ */ Object.create(null);
class xi {
  /**
  @internal
  */
  constructor(e, t, i, s = 0) {
    this.name = e, this.props = t, this.id = i, this.flags = s;
  }
  /**
  Define a node type.
  */
  static define(e) {
    let t = e.props && e.props.length ? /* @__PURE__ */ Object.create(null) : IH, i = (e.top ? 1 : 0) | (e.skipped ? 2 : 0) | (e.error ? 4 : 0) | (e.name == null ? 8 : 0), s = new xi(e.name || "", t, e.id, i);
    if (e.props) {
      for (let r of e.props)
        if (Array.isArray(r) || (r = r(s)), r) {
          if (r[0].perNode)
            throw new RangeError("Can't store a per-node prop on a node type");
          t[r[0].id] = r[1];
        }
    }
    return s;
  }
  /**
  Retrieves a node prop for this type. Will return `undefined` if
  the prop isn't present on this node.
  */
  prop(e) {
    return this.props[e.id];
  }
  /**
  True when this is the top node of a grammar.
  */
  get isTop() {
    return (this.flags & 1) > 0;
  }
  /**
  True when this node is produced by a skip rule.
  */
  get isSkipped() {
    return (this.flags & 2) > 0;
  }
  /**
  Indicates whether this is an error node.
  */
  get isError() {
    return (this.flags & 4) > 0;
  }
  /**
  When true, this node type doesn't correspond to a user-declared
  named node, for example because it is used to cache repetition.
  */
  get isAnonymous() {
    return (this.flags & 8) > 0;
  }
  /**
  Returns true when this node's name or one of its
  [groups](#common.NodeProp^group) matches the given string.
  */
  is(e) {
    if (typeof e == "string") {
      if (this.name == e)
        return !0;
      let t = this.prop(Ge.group);
      return t ? t.indexOf(e) > -1 : !1;
    }
    return this.id == e;
  }
  /**
  Create a function from node types to arbitrary values by
  specifying an object whose property names are node or
  [group](#common.NodeProp^group) names. Often useful with
  [`NodeProp.add`](#common.NodeProp.add). You can put multiple
  names, separated by spaces, in a single property name to map
  multiple node names to a single value.
  */
  static match(e) {
    let t = /* @__PURE__ */ Object.create(null);
    for (let i in e)
      for (let s of i.split(" "))
        t[s] = e[i];
    return (i) => {
      for (let s = i.prop(Ge.group), r = -1; r < (s ? s.length : 0); r++) {
        let o = t[r < 0 ? i.name : s[r]];
        if (o)
          return o;
      }
    };
  }
}
xi.none = new xi(
  "",
  /* @__PURE__ */ Object.create(null),
  0,
  8
  /* NodeFlag.Anonymous */
);
class uy {
  /**
  Create a set with the given types. The `id` property of each
  type should correspond to its position within the array.
  */
  constructor(e) {
    this.types = e;
    for (let t = 0; t < e.length; t++)
      if (e[t].id != t)
        throw new RangeError("Node type ids should correspond to array positions when creating a node set");
  }
  /**
  Create a copy of this set with some node properties added. The
  arguments to this method can be created with
  [`NodeProp.add`](#common.NodeProp.add).
  */
  extend(...e) {
    let t = [];
    for (let i of this.types) {
      let s = null;
      for (let r of e) {
        let o = r(i);
        o && (s || (s = Object.assign({}, i.props)), s[o[0].id] = o[1]);
      }
      t.push(s ? new xi(i.name, s, i.id, i.flags) : i);
    }
    return new uy(t);
  }
}
const Rf = /* @__PURE__ */ new WeakMap(), Ax = /* @__PURE__ */ new WeakMap();
var pn;
(function(n) {
  n[n.ExcludeBuffers = 1] = "ExcludeBuffers", n[n.IncludeAnonymous = 2] = "IncludeAnonymous", n[n.IgnoreMounts = 4] = "IgnoreMounts", n[n.IgnoreOverlays = 8] = "IgnoreOverlays";
})(pn || (pn = {}));
class tn {
  /**
  Construct a new tree. See also [`Tree.build`](#common.Tree^build).
  */
  constructor(e, t, i, s, r) {
    if (this.type = e, this.children = t, this.positions = i, this.length = s, this.props = null, r && r.length) {
      this.props = /* @__PURE__ */ Object.create(null);
      for (let [o, l] of r)
        this.props[typeof o == "number" ? o : o.id] = l;
    }
  }
  /**
  @internal
  */
  toString() {
    let e = Yd.get(this);
    if (e && !e.overlay)
      return e.tree.toString();
    let t = "";
    for (let i of this.children) {
      let s = i.toString();
      s && (t && (t += ","), t += s);
    }
    return this.type.name ? (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) + (t.length ? "(" + t + ")" : "") : t;
  }
  /**
  Get a [tree cursor](#common.TreeCursor) positioned at the top of
  the tree. Mode can be used to [control](#common.IterMode) which
  nodes the cursor visits.
  */
  cursor(e = 0) {
    return new vb(this.topNode, e);
  }
  /**
  Get a [tree cursor](#common.TreeCursor) pointing into this tree
  at the given position and side (see
  [`moveTo`](#common.TreeCursor.moveTo).
  */
  cursorAt(e, t = 0, i = 0) {
    let s = Rf.get(this) || this.topNode, r = new vb(s);
    return r.moveTo(e, t), Rf.set(this, r._tree), r;
  }
  /**
  Get a [syntax node](#common.SyntaxNode) object for the top of the
  tree.
  */
  get topNode() {
    return new Oi(this, 0, 0, null);
  }
  /**
  Get the [syntax node](#common.SyntaxNode) at the given position.
  If `side` is -1, this will move into nodes that end at the
  position. If 1, it'll move into nodes that start at the
  position. With 0, it'll only enter nodes that cover the position
  from both sides.
  
  Note that this will not enter
  [overlays](#common.MountedTree.overlay), and you often want
  [`resolveInner`](#common.Tree.resolveInner) instead.
  */
  resolve(e, t = 0) {
    let i = rh(Rf.get(this) || this.topNode, e, t, !1);
    return Rf.set(this, i), i;
  }
  /**
  Like [`resolve`](#common.Tree.resolve), but will enter
  [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node
  pointing into the innermost overlaid tree at the given position
  (with parent links going through all parent structure, including
  the host trees).
  */
  resolveInner(e, t = 0) {
    let i = rh(Ax.get(this) || this.topNode, e, t, !0);
    return Ax.set(this, i), i;
  }
  /**
  In some situations, it can be useful to iterate through all
  nodes around a position, including those in overlays that don't
  directly cover the position. This method gives you an iterator
  that will produce all nodes, from small to big, around the given
  position.
  */
  resolveStack(e, t = 0) {
    return jH(this, e, t);
  }
  /**
  Iterate over the tree and its children, calling `enter` for any
  node that touches the `from`/`to` region (if given) before
  running over such a node's children, and `leave` (if given) when
  leaving the node. When `enter` returns `false`, that node will
  not have its children iterated over (or `leave` called).
  */
  iterate(e) {
    let { enter: t, leave: i, from: s = 0, to: r = this.length } = e, o = e.mode || 0, l = (o & pn.IncludeAnonymous) > 0;
    for (let a = this.cursor(o | pn.IncludeAnonymous); ; ) {
      let c = !1;
      if (a.from <= r && a.to >= s && (!l && a.type.isAnonymous || t(a) !== !1)) {
        if (a.firstChild())
          continue;
        c = !0;
      }
      for (; c && i && (l || !a.type.isAnonymous) && i(a), !a.nextSibling(); ) {
        if (!a.parent())
          return;
        c = !0;
      }
    }
  }
  /**
  Get the value of the given [node prop](#common.NodeProp) for this
  node. Works with both per-node and per-type props.
  */
  prop(e) {
    return e.perNode ? this.props ? this.props[e.id] : void 0 : this.type.prop(e);
  }
  /**
  Returns the node's [per-node props](#common.NodeProp.perNode) in a
  format that can be passed to the [`Tree`](#common.Tree)
  constructor.
  */
  get propValues() {
    let e = [];
    if (this.props)
      for (let t in this.props)
        e.push([+t, this.props[t]]);
    return e;
  }
  /**
  Balance the direct children of this tree, producing a copy of
  which may have children grouped into subtrees with type
  [`NodeType.none`](#common.NodeType^none).
  */
  balance(e = {}) {
    return this.children.length <= 8 ? this : dy(xi.none, this.children, this.positions, 0, this.children.length, 0, this.length, (t, i, s) => new tn(this.type, t, i, s, this.propValues), e.makeTree || ((t, i, s) => new tn(xi.none, t, i, s)));
  }
  /**
  Build a tree from a postfix-ordered buffer of node information,
  or a cursor over such a buffer.
  */
  static build(e) {
    return zH(e);
  }
}
tn.empty = new tn(xi.none, [], [], 0);
class hy {
  constructor(e, t) {
    this.buffer = e, this.index = t;
  }
  get id() {
    return this.buffer[this.index - 4];
  }
  get start() {
    return this.buffer[this.index - 3];
  }
  get end() {
    return this.buffer[this.index - 2];
  }
  get size() {
    return this.buffer[this.index - 1];
  }
  get pos() {
    return this.index;
  }
  next() {
    this.index -= 4;
  }
  fork() {
    return new hy(this.buffer, this.index);
  }
}
class Mo {
  /**
  Create a tree buffer.
  */
  constructor(e, t, i) {
    this.buffer = e, this.length = t, this.set = i;
  }
  /**
  @internal
  */
  get type() {
    return xi.none;
  }
  /**
  @internal
  */
  toString() {
    let e = [];
    for (let t = 0; t < this.buffer.length; )
      e.push(this.childString(t)), t = this.buffer[t + 3];
    return e.join(",");
  }
  /**
  @internal
  */
  childString(e) {
    let t = this.buffer[e], i = this.buffer[e + 3], s = this.set.types[t], r = s.name;
    if (/\W/.test(r) && !s.isError && (r = JSON.stringify(r)), e += 4, i == e)
      return r;
    let o = [];
    for (; e < i; )
      o.push(this.childString(e)), e = this.buffer[e + 3];
    return r + "(" + o.join(",") + ")";
  }
  /**
  @internal
  */
  findChild(e, t, i, s, r) {
    let { buffer: o } = this, l = -1;
    for (let a = e; a != t && !(LE(r, s, o[a + 1], o[a + 2]) && (l = a, i > 0)); a = o[a + 3])
      ;
    return l;
  }
  /**
  @internal
  */
  slice(e, t, i) {
    let s = this.buffer, r = new Uint16Array(t - e), o = 0;
    for (let l = e, a = 0; l < t; ) {
      r[a++] = s[l++], r[a++] = s[l++] - i;
      let c = r[a++] = s[l++] - i;
      r[a++] = s[l++] - e, o = Math.max(o, c);
    }
    return new Mo(r, o, this.set);
  }
}
function LE(n, e, t, i) {
  switch (n) {
    case -2:
      return t < e;
    case -1:
      return i >= e && t < e;
    case 0:
      return t < e && i > e;
    case 1:
      return t <= e && i > e;
    case 2:
      return i > e;
    case 4:
      return !0;
  }
}
function rh(n, e, t, i) {
  for (var s; n.from == n.to || (t < 1 ? n.from >= e : n.from > e) || (t > -1 ? n.to <= e : n.to < e); ) {
    let o = !i && n instanceof Oi && n.index < 0 ? null : n.parent;
    if (!o)
      return n;
    n = o;
  }
  let r = i ? 0 : pn.IgnoreOverlays;
  if (i)
    for (let o = n, l = o.parent; l; o = l, l = o.parent)
      o instanceof Oi && o.index < 0 && ((s = l.enter(e, t, r)) === null || s === void 0 ? void 0 : s.from) != o.from && (n = l);
  for (; ; ) {
    let o = n.enter(e, t, r);
    if (!o)
      return n;
    n = o;
  }
}
class NE {
  cursor(e = 0) {
    return new vb(this, e);
  }
  getChild(e, t = null, i = null) {
    let s = Ex(this, e, t, i);
    return s.length ? s[0] : null;
  }
  getChildren(e, t = null, i = null) {
    return Ex(this, e, t, i);
  }
  resolve(e, t = 0) {
    return rh(this, e, t, !1);
  }
  resolveInner(e, t = 0) {
    return rh(this, e, t, !0);
  }
  matchContext(e) {
    return bb(this, e);
  }
  enterUnfinishedNodesBefore(e) {
    let t = this.childBefore(e), i = this;
    for (; t; ) {
      let s = t.lastChild;
      if (!s || s.to != t.to)
        break;
      s.type.isError && s.from == s.to ? (i = t, t = s.prevSibling) : t = s;
    }
    return i;
  }
  get node() {
    return this;
  }
  get next() {
    return this.parent;
  }
}
class Oi extends NE {
  constructor(e, t, i, s) {
    super(), this._tree = e, this.from = t, this.index = i, this._parent = s;
  }
  get type() {
    return this._tree.type;
  }
  get name() {
    return this._tree.type.name;
  }
  get to() {
    return this.from + this._tree.length;
  }
  nextChild(e, t, i, s, r = 0) {
    for (let o = this; ; ) {
      for (let { children: l, positions: a } = o._tree, c = t > 0 ? l.length : -1; e != c; e += t) {
        let u = l[e], h = a[e] + o.from;
        if (LE(s, i, h, h + u.length)) {
          if (u instanceof Mo) {
            if (r & pn.ExcludeBuffers)
              continue;
            let f = u.findChild(0, u.buffer.length, t, i - h, s);
            if (f > -1)
              return new Js(new QH(o, u, e, h), null, f);
          } else if (r & pn.IncludeAnonymous || !u.type.isAnonymous || fy(u)) {
            let f;
            if (!(r & pn.IgnoreMounts) && (f = Yd.get(u)) && !f.overlay)
              return new Oi(f.tree, h, e, o);
            let d = new Oi(u, h, e, o);
            return r & pn.IncludeAnonymous || !d.type.isAnonymous ? d : d.nextChild(t < 0 ? u.children.length - 1 : 0, t, i, s);
          }
        }
      }
      if (r & pn.IncludeAnonymous || !o.type.isAnonymous || (o.index >= 0 ? e = o.index + t : e = t < 0 ? -1 : o._parent._tree.children.length, o = o._parent, !o))
        return null;
    }
  }
  get firstChild() {
    return this.nextChild(
      0,
      1,
      0,
      4
      /* Side.DontCare */
    );
  }
  get lastChild() {
    return this.nextChild(
      this._tree.children.length - 1,
      -1,
      0,
      4
      /* Side.DontCare */
    );
  }
  childAfter(e) {
    return this.nextChild(
      0,
      1,
      e,
      2
      /* Side.After */
    );
  }
  childBefore(e) {
    return this.nextChild(
      this._tree.children.length - 1,
      -1,
      e,
      -2
      /* Side.Before */
    );
  }
  enter(e, t, i = 0) {
    let s;
    if (!(i & pn.IgnoreOverlays) && (s = Yd.get(this._tree)) && s.overlay) {
      let r = e - this.from;
      for (let { from: o, to: l } of s.overlay)
        if ((t > 0 ? o <= r : o < r) && (t < 0 ? l >= r : l > r))
          return new Oi(s.tree, s.overlay[0].from + this.from, -1, this);
    }
    return this.nextChild(0, 1, e, t, i);
  }
  nextSignificantParent() {
    let e = this;
    for (; e.type.isAnonymous && e._parent; )
      e = e._parent;
    return e;
  }
  get parent() {
    return this._parent ? this._parent.nextSignificantParent() : null;
  }
  get nextSibling() {
    return this._parent && this.index >= 0 ? this._parent.nextChild(
      this.index + 1,
      1,
      0,
      4
      /* Side.DontCare */
    ) : null;
  }
  get prevSibling() {
    return this._parent && this.index >= 0 ? this._parent.nextChild(
      this.index - 1,
      -1,
      0,
      4
      /* Side.DontCare */
    ) : null;
  }
  get tree() {
    return this._tree;
  }
  toTree() {
    return this._tree;
  }
  /**
  @internal
  */
  toString() {
    return this._tree.toString();
  }
}
function Ex(n, e, t, i) {
  let s = n.cursor(), r = [];
  if (!s.firstChild())
    return r;
  if (t != null) {
    for (let o = !1; !o; )
      if (o = s.type.is(t), !s.nextSibling())
        return r;
  }
  for (; ; ) {
    if (i != null && s.type.is(i))
      return r;
    if (s.type.is(e) && r.push(s.node), !s.nextSibling())
      return i == null ? r : [];
  }
}
function bb(n, e, t = e.length - 1) {
  for (let i = n.parent; t >= 0; i = i.parent) {
    if (!i)
      return !1;
    if (!i.type.isAnonymous) {
      if (e[t] && e[t] != i.name)
        return !1;
      t--;
    }
  }
  return !0;
}
class QH {
  constructor(e, t, i, s) {
    this.parent = e, this.buffer = t, this.index = i, this.start = s;
  }
}
class Js extends NE {
  get name() {
    return this.type.name;
  }
  get from() {
    return this.context.start + this.context.buffer.buffer[this.index + 1];
  }
  get to() {
    return this.context.start + this.context.buffer.buffer[this.index + 2];
  }
  constructor(e, t, i) {
    super(), this.context = e, this._parent = t, this.index = i, this.type = e.buffer.set.types[e.buffer.buffer[i]];
  }
  child(e, t, i) {
    let { buffer: s } = this.context, r = s.findChild(this.index + 4, s.buffer[this.index + 3], e, t - this.context.start, i);
    return r < 0 ? null : new Js(this.context, this, r);
  }
  get firstChild() {
    return this.child(
      1,
      0,
      4
      /* Side.DontCare */
    );
  }
  get lastChild() {
    return this.child(
      -1,
      0,
      4
      /* Side.DontCare */
    );
  }
  childAfter(e) {
    return this.child(
      1,
      e,
      2
      /* Side.After */
    );
  }
  childBefore(e) {
    return this.child(
      -1,
      e,
      -2
      /* Side.Before */
    );
  }
  enter(e, t, i = 0) {
    if (i & pn.ExcludeBuffers)
      return null;
    let { buffer: s } = this.context, r = s.findChild(this.index + 4, s.buffer[this.index + 3], t > 0 ? 1 : -1, e - this.context.start, t);
    return r < 0 ? null : new Js(this.context, this, r);
  }
  get parent() {
    return this._parent || this.context.parent.nextSignificantParent();
  }
  externalSibling(e) {
    return this._parent ? null : this.context.parent.nextChild(
      this.context.index + e,
      e,
      0,
      4
      /* Side.DontCare */
    );
  }
  get nextSibling() {
    let { buffer: e } = this.context, t = e.buffer[this.index + 3];
    return t < (this._parent ? e.buffer[this._parent.index + 3] : e.buffer.length) ? new Js(this.context, this._parent, t) : this.externalSibling(1);
  }
  get prevSibling() {
    let { buffer: e } = this.context, t = this._parent ? this._parent.index + 4 : 0;
    return this.index == t ? this.externalSibling(-1) : new Js(this.context, this._parent, e.findChild(
      t,
      this.index,
      -1,
      0,
      4
      /* Side.DontCare */
    ));
  }
  get tree() {
    return null;
  }
  toTree() {
    let e = [], t = [], { buffer: i } = this.context, s = this.index + 4, r = i.buffer[this.index + 3];
    if (r > s) {
      let o = i.buffer[this.index + 1];
      e.push(i.slice(s, r, o)), t.push(0);
    }
    return new tn(this.type, e, t, this.to - this.from);
  }
  /**
  @internal
  */
  toString() {
    return this.context.buffer.childString(this.index);
  }
}
function IE(n) {
  if (!n.length)
    return null;
  let e = 0, t = n[0];
  for (let r = 1; r < n.length; r++) {
    let o = n[r];
    (o.from > t.from || o.to < t.to) && (t = o, e = r);
  }
  let i = t instanceof Oi && t.index < 0 ? null : t.parent, s = n.slice();
  return i ? s[e] = i : s.splice(e, 1), new BH(s, t);
}
class BH {
  constructor(e, t) {
    this.heads = e, this.node = t;
  }
  get next() {
    return IE(this.heads);
  }
}
function jH(n, e, t) {
  let i = n.resolveInner(e, t), s = null;
  for (let r = i instanceof Oi ? i : i.context.parent; r; r = r.parent)
    if (r.index < 0) {
      let o = r.parent;
      (s || (s = [i])).push(o.resolve(e, t)), r = o;
    } else {
      let o = Yd.get(r.tree);
      if (o && o.overlay && o.overlay[0].from <= e && o.overlay[o.overlay.length - 1].to >= e) {
        let l = new Oi(o.tree, o.overlay[0].from + r.from, -1, r);
        (s || (s = [i])).push(rh(l, e, t, !1));
      }
    }
  return s ? IE(s) : i;
}
class vb {
  /**
  Shorthand for `.type.name`.
  */
  get name() {
    return this.type.name;
  }
  /**
  @internal
  */
  constructor(e, t = 0) {
    if (this.mode = t, this.buffer = null, this.stack = [], this.index = 0, this.bufferNode = null, e instanceof Oi)
      this.yieldNode(e);
    else {
      this._tree = e.context.parent, this.buffer = e.context;
      for (let i = e._parent; i; i = i._parent)
        this.stack.unshift(i.index);
      this.bufferNode = e, this.yieldBuf(e.index);
    }
  }
  yieldNode(e) {
    return e ? (this._tree = e, this.type = e.type, this.from = e.from, this.to = e.to, !0) : !1;
  }
  yieldBuf(e, t) {
    this.index = e;
    let { start: i, buffer: s } = this.buffer;
    return this.type = t || s.set.types[s.buffer[e]], this.from = i + s.buffer[e + 1], this.to = i + s.buffer[e + 2], !0;
  }
  /**
  @internal
  */
  yield(e) {
    return e ? e instanceof Oi ? (this.buffer = null, this.yieldNode(e)) : (this.buffer = e.context, this.yieldBuf(e.index, e.type)) : !1;
  }
  /**
  @internal
  */
  toString() {
    return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
  }
  /**
  @internal
  */
  enterChild(e, t, i) {
    if (!this.buffer)
      return this.yield(this._tree.nextChild(e < 0 ? this._tree._tree.children.length - 1 : 0, e, t, i, this.mode));
    let { buffer: s } = this.buffer, r = s.findChild(this.index + 4, s.buffer[this.index + 3], e, t - this.buffer.start, i);
    return r < 0 ? !1 : (this.stack.push(this.index), this.yieldBuf(r));
  }
  /**
  Move the cursor to this node's first child. When this returns
  false, the node has no child, and the cursor has not been moved.
  */
  firstChild() {
    return this.enterChild(
      1,
      0,
      4
      /* Side.DontCare */
    );
  }
  /**
  Move the cursor to this node's last child.
  */
  lastChild() {
    return this.enterChild(
      -1,
      0,
      4
      /* Side.DontCare */
    );
  }
  /**
  Move the cursor to the first child that ends after `pos`.
  */
  childAfter(e) {
    return this.enterChild(
      1,
      e,
      2
      /* Side.After */
    );
  }
  /**
  Move to the last child that starts before `pos`.
  */
  childBefore(e) {
    return this.enterChild(
      -1,
      e,
      -2
      /* Side.Before */
    );
  }
  /**
  Move the cursor to the child around `pos`. If side is -1 the
  child may end at that position, when 1 it may start there. This
  will also enter [overlaid](#common.MountedTree.overlay)
  [mounted](#common.NodeProp^mounted) trees unless `overlays` is
  set to false.
  */
  enter(e, t, i = this.mode) {
    return this.buffer ? i & pn.ExcludeBuffers ? !1 : this.enterChild(1, e, t) : this.yield(this._tree.enter(e, t, i));
  }
  /**
  Move to the node's parent node, if this isn't the top node.
  */
  parent() {
    if (!this.buffer)
      return this.yieldNode(this.mode & pn.IncludeAnonymous ? this._tree._parent : this._tree.parent);
    if (this.stack.length)
      return this.yieldBuf(this.stack.pop());
    let e = this.mode & pn.IncludeAnonymous ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
    return this.buffer = null, this.yieldNode(e);
  }
  /**
  @internal
  */
  sibling(e) {
    if (!this.buffer)
      return this._tree._parent ? this.yield(this._tree.index < 0 ? null : this._tree._parent.nextChild(this._tree.index + e, e, 0, 4, this.mode)) : !1;
    let { buffer: t } = this.buffer, i = this.stack.length - 1;
    if (e < 0) {
      let s = i < 0 ? 0 : this.stack[i] + 4;
      if (this.index != s)
        return this.yieldBuf(t.findChild(
          s,
          this.index,
          -1,
          0,
          4
          /* Side.DontCare */
        ));
    } else {
      let s = t.buffer[this.index + 3];
      if (s < (i < 0 ? t.buffer.length : t.buffer[this.stack[i] + 3]))
        return this.yieldBuf(s);
    }
    return i < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + e, e, 0, 4, this.mode)) : !1;
  }
  /**
  Move to this node's next sibling, if any.
  */
  nextSibling() {
    return this.sibling(1);
  }
  /**
  Move to this node's previous sibling, if any.
  */
  prevSibling() {
    return this.sibling(-1);
  }
  atLastNode(e) {
    let t, i, { buffer: s } = this;
    if (s) {
      if (e > 0) {
        if (this.index < s.buffer.buffer.length)
          return !1;
      } else
        for (let r = 0; r < this.index; r++)
          if (s.buffer.buffer[r + 3] < this.index)
            return !1;
      ({ index: t, parent: i } = s);
    } else
      ({ index: t, _parent: i } = this._tree);
    for (; i; { index: t, _parent: i } = i)
      if (t > -1)
        for (let r = t + e, o = e < 0 ? -1 : i._tree.children.length; r != o; r += e) {
          let l = i._tree.children[r];
          if (this.mode & pn.IncludeAnonymous || l instanceof Mo || !l.type.isAnonymous || fy(l))
            return !1;
        }
    return !0;
  }
  move(e, t) {
    if (t && this.enterChild(
      e,
      0,
      4
      /* Side.DontCare */
    ))
      return !0;
    for (; ; ) {
      if (this.sibling(e))
        return !0;
      if (this.atLastNode(e) || !this.parent())
        return !1;
    }
  }
  /**
  Move to the next node in a
  [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)
  traversal, going from a node to its first child or, if the
  current node is empty or `enter` is false, its next sibling or
  the next sibling of the first parent node that has one.
  */
  next(e = !0) {
    return this.move(1, e);
  }
  /**
  Move to the next node in a last-to-first pre-order traveral. A
  node is followed by its last child or, if it has none, its
  previous sibling or the previous sibling of the first parent
  node that has one.
  */
  prev(e = !0) {
    return this.move(-1, e);
  }
  /**
  Move the cursor to the innermost node that covers `pos`. If
  `side` is -1, it will enter nodes that end at `pos`. If it is 1,
  it will enter nodes that start at `pos`.
  */
  moveTo(e, t = 0) {
    for (; (this.from == this.to || (t < 1 ? this.from >= e : this.from > e) || (t > -1 ? this.to <= e : this.to < e)) && this.parent(); )
      ;
    for (; this.enterChild(1, e, t); )
      ;
    return this;
  }
  /**
  Get a [syntax node](#common.SyntaxNode) at the cursor's current
  position.
  */
  get node() {
    if (!this.buffer)
      return this._tree;
    let e = this.bufferNode, t = null, i = 0;
    if (e && e.context == this.buffer)
      e:
        for (let s = this.index, r = this.stack.length; r >= 0; ) {
          for (let o = e; o; o = o._parent)
            if (o.index == s) {
              if (s == this.index)
                return o;
              t = o, i = r + 1;
              break e;
            }
          s = this.stack[--r];
        }
    for (let s = i; s < this.stack.length; s++)
      t = new Js(this.buffer, t, this.stack[s]);
    return this.bufferNode = new Js(this.buffer, t, this.index);
  }
  /**
  Get the [tree](#common.Tree) that represents the current node, if
  any. Will return null when the node is in a [tree
  buffer](#common.TreeBuffer).
  */
  get tree() {
    return this.buffer ? null : this._tree._tree;
  }
  /**
  Iterate over the current node and all its descendants, calling
  `enter` when entering a node and `leave`, if given, when leaving
  one. When `enter` returns `false`, any children of that node are
  skipped, and `leave` isn't called for it.
  */
  iterate(e, t) {
    for (let i = 0; ; ) {
      let s = !1;
      if (this.type.isAnonymous || e(this) !== !1) {
        if (this.firstChild()) {
          i++;
          continue;
        }
        this.type.isAnonymous || (s = !0);
      }
      for (; s && t && t(this), s = this.type.isAnonymous, !this.nextSibling(); ) {
        if (!i)
          return;
        this.parent(), i--, s = !0;
      }
    }
  }
  /**
  Test whether the current node matches a given context—a sequence
  of direct parent node names. Empty strings in the context array
  are treated as wildcards.
  */
  matchContext(e) {
    if (!this.buffer)
      return bb(this.node, e);
    let { buffer: t } = this.buffer, { types: i } = t.set;
    for (let s = e.length - 1, r = this.stack.length - 1; s >= 0; r--) {
      if (r < 0)
        return bb(this.node, e, s);
      let o = i[t.buffer[this.stack[r]]];
      if (!o.isAnonymous) {
        if (e[s] && e[s] != o.name)
          return !1;
        s--;
      }
    }
    return !0;
  }
}
function fy(n) {
  return n.children.some((e) => e instanceof Mo || !e.type.isAnonymous || fy(e));
}
function zH(n) {
  var e;
  let { buffer: t, nodeSet: i, maxBufferLength: s = DE, reused: r = [], minRepeatType: o = i.types.length } = n, l = Array.isArray(t) ? new hy(t, t.length) : t, a = i.types, c = 0, u = 0;
  function h(x, S, C, k, E, $) {
    let { id: T, start: M, end: j, size: D } = l, P = u;
    for (; D < 0; )
      if (l.next(), D == -1) {
        let q = r[T];
        C.push(q), k.push(M - x);
        return;
      } else if (D == -3) {
        c = T;
        return;
      } else if (D == -4) {
        u = T;
        return;
      } else
        throw new RangeError(`Unrecognized record size: ${D}`);
    let A = a[T], Q, X, z = M - x;
    if (j - M <= s && (X = m(l.pos - S, E))) {
      let q = new Uint16Array(X.size - X.skip), re = l.pos - X.size, H = q.length;
      for (; l.pos > re; )
        H = b(X.start, q, H);
      Q = new Mo(q, j - X.start, i), z = X.start - x;
    } else {
      let q = l.pos - D;
      l.next();
      let re = [], H = [], G = T >= o ? T : -1, U = 0, le = j;
      for (; l.pos > q; )
        G >= 0 && l.id == G && l.size >= 0 ? (l.end <= le - s && (p(re, H, M, U, l.end, le, G, P), U = re.length, le = l.end), l.next()) : $ > 2500 ? f(M, q, re, H) : h(M, q, re, H, G, $ + 1);
      if (G >= 0 && U > 0 && U < re.length && p(re, H, M, U, M, le, G, P), re.reverse(), H.reverse(), G > -1 && U > 0) {
        let ce = d(A);
        Q = dy(A, re, H, 0, re.length, 0, j - M, ce, ce);
      } else
        Q = g(A, re, H, j - M, P - j);
    }
    C.push(Q), k.push(z);
  }
  function f(x, S, C, k) {
    let E = [], $ = 0, T = -1;
    for (; l.pos > S; ) {
      let { id: M, start: j, end: D, size: P } = l;
      if (P > 4)
        l.next();
      else {
        if (T > -1 && j < T)
          break;
        T < 0 && (T = D - s), E.push(M, j, D), $++, l.next();
      }
    }
    if ($) {
      let M = new Uint16Array($ * 4), j = E[E.length - 2];
      for (let D = E.length - 3, P = 0; D >= 0; D -= 3)
        M[P++] = E[D], M[P++] = E[D + 1] - j, M[P++] = E[D + 2] - j, M[P++] = P;
      C.push(new Mo(M, E[2] - j, i)), k.push(j - x);
    }
  }
  function d(x) {
    return (S, C, k) => {
      let E = 0, $ = S.length - 1, T, M;
      if ($ >= 0 && (T = S[$]) instanceof tn) {
        if (!$ && T.type == x && T.length == k)
          return T;
        (M = T.prop(Ge.lookAhead)) && (E = C[$] + T.length + M);
      }
      return g(x, S, C, k, E);
    };
  }
  function p(x, S, C, k, E, $, T, M) {
    let j = [], D = [];
    for (; x.length > k; )
      j.push(x.pop()), D.push(S.pop() + C - E);
    x.push(g(i.types[T], j, D, $ - E, M - $)), S.push(E - C);
  }
  function g(x, S, C, k, E = 0, $) {
    if (c) {
      let T = [Ge.contextHash, c];
      $ = $ ? [T].concat($) : [T];
    }
    if (E > 25) {
      let T = [Ge.lookAhead, E];
      $ = $ ? [T].concat($) : [T];
    }
    return new tn(x, S, C, k, $);
  }
  function m(x, S) {
    let C = l.fork(), k = 0, E = 0, $ = 0, T = C.end - s, M = { size: 0, start: 0, skip: 0 };
    e:
      for (let j = C.pos - x; C.pos > j; ) {
        let D = C.size;
        if (C.id == S && D >= 0) {
          M.size = k, M.start = E, M.skip = $, $ += 4, k += 4, C.next();
          continue;
        }
        let P = C.pos - D;
        if (D < 0 || P < j || C.start < T)
          break;
        let A = C.id >= o ? 4 : 0, Q = C.start;
        for (C.next(); C.pos > P; ) {
          if (C.size < 0)
            if (C.size == -3)
              A += 4;
            else
              break e;
          else
            C.id >= o && (A += 4);
          C.next();
        }
        E = Q, k += D, $ += A;
      }
    return (S < 0 || k == x) && (M.size = k, M.start = E, M.skip = $), M.size > 4 ? M : void 0;
  }
  function b(x, S, C) {
    let { id: k, start: E, end: $, size: T } = l;
    if (l.next(), T >= 0 && k < o) {
      let M = C;
      if (T > 4) {
        let j = l.pos - (T - 4);
        for (; l.pos > j; )
          C = b(x, S, C);
      }
      S[--C] = M, S[--C] = $ - x, S[--C] = E - x, S[--C] = k;
    } else
      T == -3 ? c = k : T == -4 && (u = k);
    return C;
  }
  let y = [], v = [];
  for (; l.pos > 0; )
    h(n.start || 0, n.bufferStart || 0, y, v, -1, 0);
  let O = (e = n.length) !== null && e !== void 0 ? e : y.length ? v[0] + y[0].length : 0;
  return new tn(a[n.topID], y.reverse(), v.reverse(), O);
}
const $x = /* @__PURE__ */ new WeakMap();
function xd(n, e) {
  if (!n.isAnonymous || e instanceof Mo || e.type != n)
    return 1;
  let t = $x.get(e);
  if (t == null) {
    t = 1;
    for (let i of e.children) {
      if (i.type != n || !(i instanceof tn)) {
        t = 1;
        break;
      }
      t += xd(n, i);
    }
    $x.set(e, t);
  }
  return t;
}
function dy(n, e, t, i, s, r, o, l, a) {
  let c = 0;
  for (let p = i; p < s; p++)
    c += xd(n, e[p]);
  let u = Math.ceil(
    c * 1.5 / 8
    /* Balance.BranchFactor */
  ), h = [], f = [];
  function d(p, g, m, b, y) {
    for (let v = m; v < b; ) {
      let O = v, x = g[v], S = xd(n, p[v]);
      for (v++; v < b; v++) {
        let C = xd(n, p[v]);
        if (S + C >= u)
          break;
        S += C;
      }
      if (v == O + 1) {
        if (S > u) {
          let C = p[O];
          d(C.children, C.positions, 0, C.children.length, g[O] + y);
          continue;
        }
        h.push(p[O]);
      } else {
        let C = g[v - 1] + p[v - 1].length - x;
        h.push(dy(n, p, g, O, v, x, C, null, a));
      }
      f.push(x + y - r);
    }
  }
  return d(e, t, i, s, 0), (l || a)(h, f, o);
}
class ZH {
  constructor() {
    this.map = /* @__PURE__ */ new WeakMap();
  }
  setBuffer(e, t, i) {
    let s = this.map.get(e);
    s || this.map.set(e, s = /* @__PURE__ */ new Map()), s.set(t, i);
  }
  getBuffer(e, t) {
    let i = this.map.get(e);
    return i && i.get(t);
  }
  /**
  Set the value for this syntax node.
  */
  set(e, t) {
    e instanceof Js ? this.setBuffer(e.context.buffer, e.index, t) : e instanceof Oi && this.map.set(e.tree, t);
  }
  /**
  Retrieve value for this syntax node, if it exists in the map.
  */
  get(e) {
    return e instanceof Js ? this.getBuffer(e.context.buffer, e.index) : e instanceof Oi ? this.map.get(e.tree) : void 0;
  }
  /**
  Set the value for the node that a cursor currently points to.
  */
  cursorSet(e, t) {
    e.buffer ? this.setBuffer(e.buffer.buffer, e.index, t) : this.map.set(e.tree, t);
  }
  /**
  Retrieve the value for the node that a cursor currently points
  to.
  */
  cursorGet(e) {
    return e.buffer ? this.getBuffer(e.buffer.buffer, e.index) : this.map.get(e.tree);
  }
}
class Pl {
  /**
  Construct a tree fragment. You'll usually want to use
  [`addTree`](#common.TreeFragment^addTree) and
  [`applyChanges`](#common.TreeFragment^applyChanges) instead of
  calling this directly.
  */
  constructor(e, t, i, s, r = !1, o = !1) {
    this.from = e, this.to = t, this.tree = i, this.offset = s, this.open = (r ? 1 : 0) | (o ? 2 : 0);
  }
  /**
  Whether the start of the fragment represents the start of a
  parse, or the end of a change. (In the second case, it may not
  be safe to reuse some nodes at the start, depending on the
  parsing algorithm.)
  */
  get openStart() {
    return (this.open & 1) > 0;
  }
  /**
  Whether the end of the fragment represents the end of a
  full-document parse, or the start of a change.
  */
  get openEnd() {
    return (this.open & 2) > 0;
  }
  /**
  Create a set of fragments from a freshly parsed tree, or update
  an existing set of fragments by replacing the ones that overlap
  with a tree with content from the new tree. When `partial` is
  true, the parse is treated as incomplete, and the resulting
  fragment has [`openEnd`](#common.TreeFragment.openEnd) set to
  true.
  */
  static addTree(e, t = [], i = !1) {
    let s = [new Pl(0, e.length, e, 0, !1, i)];
    for (let r of t)
      r.to > e.length && s.push(r);
    return s;
  }
  /**
  Apply a set of edits to an array of fragments, removing or
  splitting fragments as necessary to remove edited ranges, and
  adjusting offsets for fragments that moved.
  */
  static applyChanges(e, t, i = 128) {
    if (!t.length)
      return e;
    let s = [], r = 1, o = e.length ? e[0] : null;
    for (let l = 0, a = 0, c = 0; ; l++) {
      let u = l < t.length ? t[l] : null, h = u ? u.fromA : 1e9;
      if (h - a >= i)
        for (; o && o.from < h; ) {
          let f = o;
          if (a >= f.from || h <= f.to || c) {
            let d = Math.max(f.from, a) - c, p = Math.min(f.to, h) - c;
            f = d >= p ? null : new Pl(d, p, f.tree, f.offset + c, l > 0, !!u);
          }
          if (f && s.push(f), o.to > h)
            break;
          o = r < e.length ? e[r++] : null;
        }
      if (!u)
        break;
      a = u.toA, c = u.toA - u.toB;
    }
    return s;
  }
}
class QE {
  /**
  Start a parse, returning a [partial parse](#common.PartialParse)
  object. [`fragments`](#common.TreeFragment) can be passed in to
  make the parse incremental.
  
  By default, the entire input is parsed. You can pass `ranges`,
  which should be a sorted array of non-empty, non-overlapping
  ranges, to parse only those ranges. The tree returned in that
  case will start at `ranges[0].from`.
  */
  startParse(e, t, i) {
    return typeof e == "string" && (e = new FH(e)), i = i ? i.length ? i.map((s) => new mm(s.from, s.to)) : [new mm(0, 0)] : [new mm(0, e.length)], this.createParse(e, t || [], i);
  }
  /**
  Run a full parse, returning the resulting tree.
  */
  parse(e, t, i) {
    let s = this.startParse(e, t, i);
    for (; ; ) {
      let r = s.advance();
      if (r)
        return r;
    }
  }
}
class FH {
  constructor(e) {
    this.string = e;
  }
  get length() {
    return this.string.length;
  }
  chunk(e) {
    return this.string.slice(e);
  }
  get lineChunks() {
    return !1;
  }
  read(e, t) {
    return this.string.slice(e, t);
  }
}
new Ge({ perNode: !0 });
let VH = 0;
class Gs {
  /**
  @internal
  */
  constructor(e, t, i) {
    this.set = e, this.base = t, this.modified = i, this.id = VH++;
  }
  /**
  Define a new tag. If `parent` is given, the tag is treated as a
  sub-tag of that parent, and
  [highlighters](#highlight.tagHighlighter) that don't mention
  this tag will try to fall back to the parent tag (or grandparent
  tag, etc).
  */
  static define(e) {
    if (e != null && e.base)
      throw new Error("Can not derive from a modified tag");
    let t = new Gs([], null, []);
    if (t.set.push(t), e)
      for (let i of e.set)
        t.set.push(i);
    return t;
  }
  /**
  Define a tag _modifier_, which is a function that, given a tag,
  will return a tag that is a subtag of the original. Applying the
  same modifier to a twice tag will return the same value (`m1(t1)
  == m1(t1)`) and applying multiple modifiers will, regardless or
  order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
  
  When multiple modifiers are applied to a given base tag, each
  smaller set of modifiers is registered as a parent, so that for
  example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
  `m1(m3(t1)`, and so on.
  */
  static defineModifier() {
    let e = new Hd();
    return (t) => t.modified.indexOf(e) > -1 ? t : Hd.get(t.base || t, t.modified.concat(e).sort((i, s) => i.id - s.id));
  }
}
let qH = 0;
class Hd {
  constructor() {
    this.instances = [], this.id = qH++;
  }
  static get(e, t) {
    if (!t.length)
      return e;
    let i = t[0].instances.find((l) => l.base == e && WH(t, l.modified));
    if (i)
      return i;
    let s = [], r = new Gs(s, e, t);
    for (let l of t)
      l.instances.push(r);
    let o = XH(t);
    for (let l of e.set)
      if (!l.modified.length)
        for (let a of o)
          s.push(Hd.get(l, a));
    return r;
  }
}
function WH(n, e) {
  return n.length == e.length && n.every((t, i) => t == e[i]);
}
function XH(n) {
  let e = [[]];
  for (let t = 0; t < n.length; t++)
    for (let i = 0, s = e.length; i < s; i++)
      e.push(e[i].concat(n[t]));
  return e.sort((t, i) => i.length - t.length);
}
function py(n) {
  let e = /* @__PURE__ */ Object.create(null);
  for (let t in n) {
    let i = n[t];
    Array.isArray(i) || (i = [i]);
    for (let s of t.split(" "))
      if (s) {
        let r = [], o = 2, l = s;
        for (let h = 0; ; ) {
          if (l == "..." && h > 0 && h + 3 == s.length) {
            o = 1;
            break;
          }
          let f = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(l);
          if (!f)
            throw new RangeError("Invalid path: " + s);
          if (r.push(f[0] == "*" ? "" : f[0][0] == '"' ? JSON.parse(f[0]) : f[0]), h += f[0].length, h == s.length)
            break;
          let d = s[h++];
          if (h == s.length && d == "!") {
            o = 0;
            break;
          }
          if (d != "/")
            throw new RangeError("Invalid path: " + s);
          l = s.slice(h);
        }
        let a = r.length - 1, c = r[a];
        if (!c)
          throw new RangeError("Invalid path: " + s);
        let u = new Gd(i, o, a > 0 ? r.slice(0, a) : null);
        e[c] = u.sort(e[c]);
      }
  }
  return BE.add(e);
}
const BE = new Ge();
class Gd {
  constructor(e, t, i, s) {
    this.tags = e, this.mode = t, this.context = i, this.next = s;
  }
  get opaque() {
    return this.mode == 0;
  }
  get inherit() {
    return this.mode == 1;
  }
  sort(e) {
    return !e || e.depth < this.depth ? (this.next = e, this) : (e.next = this.sort(e.next), e);
  }
  get depth() {
    return this.context ? this.context.length : 0;
  }
}
Gd.empty = new Gd([], 2, null);
function jE(n, e) {
  let t = /* @__PURE__ */ Object.create(null);
  for (let r of n)
    if (!Array.isArray(r.tag))
      t[r.tag.id] = r.class;
    else
      for (let o of r.tag)
        t[o.id] = r.class;
  let { scope: i, all: s = null } = e || {};
  return {
    style: (r) => {
      let o = s;
      for (let l of r)
        for (let a of l.set) {
          let c = t[a.id];
          if (c) {
            o = o ? o + " " + c : c;
            break;
          }
        }
      return o;
    },
    scope: i
  };
}
function YH(n, e) {
  let t = null;
  for (let i of n) {
    let s = i.style(e);
    s && (t = t ? t + " " + s : s);
  }
  return t;
}
function HH(n, e, t, i = 0, s = n.length) {
  let r = new GH(i, Array.isArray(e) ? e : [e], t);
  r.highlightRange(n.cursor(), i, s, "", r.highlighters), r.flush(s);
}
class GH {
  constructor(e, t, i) {
    this.at = e, this.highlighters = t, this.span = i, this.class = "";
  }
  startSpan(e, t) {
    t != this.class && (this.flush(e), e > this.at && (this.at = e), this.class = t);
  }
  flush(e) {
    e > this.at && this.class && this.span(this.at, e, this.class);
  }
  highlightRange(e, t, i, s, r) {
    let { type: o, from: l, to: a } = e;
    if (l >= i || a <= t)
      return;
    o.isTop && (r = this.highlighters.filter((d) => !d.scope || d.scope(o)));
    let c = s, u = UH(e) || Gd.empty, h = YH(r, u.tags);
    if (h && (c && (c += " "), c += h, u.mode == 1 && (s += (s ? " " : "") + h)), this.startSpan(Math.max(t, l), c), u.opaque)
      return;
    let f = e.tree && e.tree.prop(Ge.mounted);
    if (f && f.overlay) {
      let d = e.node.enter(f.overlay[0].from + l, 1), p = this.highlighters.filter((m) => !m.scope || m.scope(f.tree.type)), g = e.firstChild();
      for (let m = 0, b = l; ; m++) {
        let y = m < f.overlay.length ? f.overlay[m] : null, v = y ? y.from + l : a, O = Math.max(t, b), x = Math.min(i, v);
        if (O < x && g)
          for (; e.from < x && (this.highlightRange(e, O, x, s, r), this.startSpan(Math.min(x, e.to), c), !(e.to >= v || !e.nextSibling())); )
            ;
        if (!y || v > i)
          break;
        b = y.to + l, b > t && (this.highlightRange(d.cursor(), Math.max(t, y.from + l), Math.min(i, b), "", p), this.startSpan(Math.min(i, b), c));
      }
      g && e.parent();
    } else if (e.firstChild()) {
      f && (s = "");
      do
        if (!(e.to <= t)) {
          if (e.from >= i)
            break;
          this.highlightRange(e, t, i, s, r), this.startSpan(Math.min(i, e.to), c);
        }
      while (e.nextSibling());
      e.parent();
    }
  }
}
function UH(n) {
  let e = n.type.prop(BE);
  for (; e && e.context && !n.matchContext(e.context); )
    e = e.next;
  return e || null;
}
const de = Gs.define, Df = de(), lo = de(), Tx = de(lo), _x = de(lo), ao = de(), Lf = de(ao), bm = de(ao), qs = de(), el = de(qs), Fs = de(), Vs = de(), yb = de(), Uc = de(yb), Nf = de(), V = {
  /**
  A comment.
  */
  comment: Df,
  /**
  A line [comment](#highlight.tags.comment).
  */
  lineComment: de(Df),
  /**
  A block [comment](#highlight.tags.comment).
  */
  blockComment: de(Df),
  /**
  A documentation [comment](#highlight.tags.comment).
  */
  docComment: de(Df),
  /**
  Any kind of identifier.
  */
  name: lo,
  /**
  The [name](#highlight.tags.name) of a variable.
  */
  variableName: de(lo),
  /**
  A type [name](#highlight.tags.name).
  */
  typeName: Tx,
  /**
  A tag name (subtag of [`typeName`](#highlight.tags.typeName)).
  */
  tagName: de(Tx),
  /**
  A property or field [name](#highlight.tags.name).
  */
  propertyName: _x,
  /**
  An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).
  */
  attributeName: de(_x),
  /**
  The [name](#highlight.tags.name) of a class.
  */
  className: de(lo),
  /**
  A label [name](#highlight.tags.name).
  */
  labelName: de(lo),
  /**
  A namespace [name](#highlight.tags.name).
  */
  namespace: de(lo),
  /**
  The [name](#highlight.tags.name) of a macro.
  */
  macroName: de(lo),
  /**
  A literal value.
  */
  literal: ao,
  /**
  A string [literal](#highlight.tags.literal).
  */
  string: Lf,
  /**
  A documentation [string](#highlight.tags.string).
  */
  docString: de(Lf),
  /**
  A character literal (subtag of [string](#highlight.tags.string)).
  */
  character: de(Lf),
  /**
  An attribute value (subtag of [string](#highlight.tags.string)).
  */
  attributeValue: de(Lf),
  /**
  A number [literal](#highlight.tags.literal).
  */
  number: bm,
  /**
  An integer [number](#highlight.tags.number) literal.
  */
  integer: de(bm),
  /**
  A floating-point [number](#highlight.tags.number) literal.
  */
  float: de(bm),
  /**
  A boolean [literal](#highlight.tags.literal).
  */
  bool: de(ao),
  /**
  Regular expression [literal](#highlight.tags.literal).
  */
  regexp: de(ao),
  /**
  An escape [literal](#highlight.tags.literal), for example a
  backslash escape in a string.
  */
  escape: de(ao),
  /**
  A color [literal](#highlight.tags.literal).
  */
  color: de(ao),
  /**
  A URL [literal](#highlight.tags.literal).
  */
  url: de(ao),
  /**
  A language keyword.
  */
  keyword: Fs,
  /**
  The [keyword](#highlight.tags.keyword) for the self or this
  object.
  */
  self: de(Fs),
  /**
  The [keyword](#highlight.tags.keyword) for null.
  */
  null: de(Fs),
  /**
  A [keyword](#highlight.tags.keyword) denoting some atomic value.
  */
  atom: de(Fs),
  /**
  A [keyword](#highlight.tags.keyword) that represents a unit.
  */
  unit: de(Fs),
  /**
  A modifier [keyword](#highlight.tags.keyword).
  */
  modifier: de(Fs),
  /**
  A [keyword](#highlight.tags.keyword) that acts as an operator.
  */
  operatorKeyword: de(Fs),
  /**
  A control-flow related [keyword](#highlight.tags.keyword).
  */
  controlKeyword: de(Fs),
  /**
  A [keyword](#highlight.tags.keyword) that defines something.
  */
  definitionKeyword: de(Fs),
  /**
  A [keyword](#highlight.tags.keyword) related to defining or
  interfacing with modules.
  */
  moduleKeyword: de(Fs),
  /**
  An operator.
  */
  operator: Vs,
  /**
  An [operator](#highlight.tags.operator) that dereferences something.
  */
  derefOperator: de(Vs),
  /**
  Arithmetic-related [operator](#highlight.tags.operator).
  */
  arithmeticOperator: de(Vs),
  /**
  Logical [operator](#highlight.tags.operator).
  */
  logicOperator: de(Vs),
  /**
  Bit [operator](#highlight.tags.operator).
  */
  bitwiseOperator: de(Vs),
  /**
  Comparison [operator](#highlight.tags.operator).
  */
  compareOperator: de(Vs),
  /**
  [Operator](#highlight.tags.operator) that updates its operand.
  */
  updateOperator: de(Vs),
  /**
  [Operator](#highlight.tags.operator) that defines something.
  */
  definitionOperator: de(Vs),
  /**
  Type-related [operator](#highlight.tags.operator).
  */
  typeOperator: de(Vs),
  /**
  Control-flow [operator](#highlight.tags.operator).
  */
  controlOperator: de(Vs),
  /**
  Program or markup punctuation.
  */
  punctuation: yb,
  /**
  [Punctuation](#highlight.tags.punctuation) that separates
  things.
  */
  separator: de(yb),
  /**
  Bracket-style [punctuation](#highlight.tags.punctuation).
  */
  bracket: Uc,
  /**
  Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`
  tokens).
  */
  angleBracket: de(Uc),
  /**
  Square [brackets](#highlight.tags.bracket) (usually `[` and `]`
  tokens).
  */
  squareBracket: de(Uc),
  /**
  Parentheses (usually `(` and `)` tokens). Subtag of
  [bracket](#highlight.tags.bracket).
  */
  paren: de(Uc),
  /**
  Braces (usually `{` and `}` tokens). Subtag of
  [bracket](#highlight.tags.bracket).
  */
  brace: de(Uc),
  /**
  Content, for example plain text in XML or markup documents.
  */
  content: qs,
  /**
  [Content](#highlight.tags.content) that represents a heading.
  */
  heading: el,
  /**
  A level 1 [heading](#highlight.tags.heading).
  */
  heading1: de(el),
  /**
  A level 2 [heading](#highlight.tags.heading).
  */
  heading2: de(el),
  /**
  A level 3 [heading](#highlight.tags.heading).
  */
  heading3: de(el),
  /**
  A level 4 [heading](#highlight.tags.heading).
  */
  heading4: de(el),
  /**
  A level 5 [heading](#highlight.tags.heading).
  */
  heading5: de(el),
  /**
  A level 6 [heading](#highlight.tags.heading).
  */
  heading6: de(el),
  /**
  A prose separator (such as a horizontal rule).
  */
  contentSeparator: de(qs),
  /**
  [Content](#highlight.tags.content) that represents a list.
  */
  list: de(qs),
  /**
  [Content](#highlight.tags.content) that represents a quote.
  */
  quote: de(qs),
  /**
  [Content](#highlight.tags.content) that is emphasized.
  */
  emphasis: de(qs),
  /**
  [Content](#highlight.tags.content) that is styled strong.
  */
  strong: de(qs),
  /**
  [Content](#highlight.tags.content) that is part of a link.
  */
  link: de(qs),
  /**
  [Content](#highlight.tags.content) that is styled as code or
  monospace.
  */
  monospace: de(qs),
  /**
  [Content](#highlight.tags.content) that has a strike-through
  style.
  */
  strikethrough: de(qs),
  /**
  Inserted text in a change-tracking format.
  */
  inserted: de(),
  /**
  Deleted text.
  */
  deleted: de(),
  /**
  Changed text.
  */
  changed: de(),
  /**
  An invalid or unsyntactic element.
  */
  invalid: de(),
  /**
  Metadata or meta-instruction.
  */
  meta: Nf,
  /**
  [Metadata](#highlight.tags.meta) that applies to the entire
  document.
  */
  documentMeta: de(Nf),
  /**
  [Metadata](#highlight.tags.meta) that annotates or adds
  attributes to a given syntactic element.
  */
  annotation: de(Nf),
  /**
  Processing instruction or preprocessor directive. Subtag of
  [meta](#highlight.tags.meta).
  */
  processingInstruction: de(Nf),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates that a
  given element is being defined. Expected to be used with the
  various [name](#highlight.tags.name) tags.
  */
  definition: Gs.defineModifier(),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates that
  something is constant. Mostly expected to be used with
  [variable names](#highlight.tags.variableName).
  */
  constant: Gs.defineModifier(),
  /**
  [Modifier](#highlight.Tag^defineModifier) used to indicate that
  a [variable](#highlight.tags.variableName) or [property
  name](#highlight.tags.propertyName) is being called or defined
  as a function.
  */
  function: Gs.defineModifier(),
  /**
  [Modifier](#highlight.Tag^defineModifier) that can be applied to
  [names](#highlight.tags.name) to indicate that they belong to
  the language's standard environment.
  */
  standard: Gs.defineModifier(),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates a given
  [names](#highlight.tags.name) is local to some scope.
  */
  local: Gs.defineModifier(),
  /**
  A generic variant [modifier](#highlight.Tag^defineModifier) that
  can be used to tag language-specific alternative variants of
  some common tag. It is recommended for themes to define special
  forms of at least the [string](#highlight.tags.string) and
  [variable name](#highlight.tags.variableName) tags, since those
  come up a lot.
  */
  special: Gs.defineModifier()
};
jE([
  { tag: V.link, class: "tok-link" },
  { tag: V.heading, class: "tok-heading" },
  { tag: V.emphasis, class: "tok-emphasis" },
  { tag: V.strong, class: "tok-strong" },
  { tag: V.keyword, class: "tok-keyword" },
  { tag: V.atom, class: "tok-atom" },
  { tag: V.bool, class: "tok-bool" },
  { tag: V.url, class: "tok-url" },
  { tag: V.labelName, class: "tok-labelName" },
  { tag: V.inserted, class: "tok-inserted" },
  { tag: V.deleted, class: "tok-deleted" },
  { tag: V.literal, class: "tok-literal" },
  { tag: V.string, class: "tok-string" },
  { tag: V.number, class: "tok-number" },
  { tag: [V.regexp, V.escape, V.special(V.string)], class: "tok-string2" },
  { tag: V.variableName, class: "tok-variableName" },
  { tag: V.local(V.variableName), class: "tok-variableName tok-local" },
  { tag: V.definition(V.variableName), class: "tok-variableName tok-definition" },
  { tag: V.special(V.variableName), class: "tok-variableName2" },
  { tag: V.definition(V.propertyName), class: "tok-propertyName tok-definition" },
  { tag: V.typeName, class: "tok-typeName" },
  { tag: V.namespace, class: "tok-namespace" },
  { tag: V.className, class: "tok-className" },
  { tag: V.macroName, class: "tok-macroName" },
  { tag: V.propertyName, class: "tok-propertyName" },
  { tag: V.operator, class: "tok-operator" },
  { tag: V.comment, class: "tok-comment" },
  { tag: V.meta, class: "tok-meta" },
  { tag: V.invalid, class: "tok-invalid" },
  { tag: V.punctuation, class: "tok-punctuation" }
]);
var vm;
const ma = /* @__PURE__ */ new Ge();
function zE(n) {
  return we.define({
    combine: n ? (e) => e.concat(n) : void 0
  });
}
const gy = /* @__PURE__ */ new Ge();
class Ss {
  /**
  Construct a language object. If you need to invoke this
  directly, first define a data facet with
  [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then
  configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it
  to the language's outer syntax node.
  */
  constructor(e, t, i = [], s = "") {
    this.data = e, this.name = s, at.prototype.hasOwnProperty("tree") || Object.defineProperty(at.prototype, "tree", { get() {
      return mn(this);
    } }), this.parser = t, this.extension = [
      Ro.of(this),
      at.languageData.of((r, o, l) => {
        let a = Mx(r, o, l), c = a.type.prop(ma);
        if (!c)
          return [];
        let u = r.facet(c), h = a.type.prop(gy);
        if (h) {
          let f = a.resolve(o - a.from, l);
          for (let d of h)
            if (d.test(f, r)) {
              let p = r.facet(d.facet);
              return d.type == "replace" ? p : p.concat(u);
            }
        }
        return u;
      })
    ].concat(i);
  }
  /**
  Query whether this language is active at the given position.
  */
  isActiveAt(e, t, i = -1) {
    return Mx(e, t, i).type.prop(ma) == this.data;
  }
  /**
  Find the document regions that were parsed using this language.
  The returned regions will _include_ any nested languages rooted
  in this language, when those exist.
  */
  findRegions(e) {
    let t = e.facet(Ro);
    if ((t == null ? void 0 : t.data) == this.data)
      return [{ from: 0, to: e.doc.length }];
    if (!t || !t.allowsNesting)
      return [];
    let i = [], s = (r, o) => {
      if (r.prop(ma) == this.data) {
        i.push({ from: o, to: o + r.length });
        return;
      }
      let l = r.prop(Ge.mounted);
      if (l) {
        if (l.tree.prop(ma) == this.data) {
          if (l.overlay)
            for (let a of l.overlay)
              i.push({ from: a.from + o, to: a.to + o });
          else
            i.push({ from: o, to: o + r.length });
          return;
        } else if (l.overlay) {
          let a = i.length;
          if (s(l.tree, l.overlay[0].from + o), i.length > a)
            return;
        }
      }
      for (let a = 0; a < r.children.length; a++) {
        let c = r.children[a];
        c instanceof tn && s(c, r.positions[a] + o);
      }
    };
    return s(mn(e), 0), i;
  }
  /**
  Indicates whether this language allows nested languages. The
  default implementation returns true.
  */
  get allowsNesting() {
    return !0;
  }
}
Ss.setState = /* @__PURE__ */ Ve.define();
function Mx(n, e, t) {
  let i = n.facet(Ro), s = mn(n).topNode;
  if (!i || i.allowsNesting)
    for (let r = s; r; r = r.enter(e, t, pn.ExcludeBuffers))
      r.type.isTop && (s = r);
  return s;
}
class oh extends Ss {
  constructor(e, t, i) {
    super(e, t, [], i), this.parser = t;
  }
  /**
  Define a language from a parser.
  */
  static define(e) {
    let t = zE(e.languageData);
    return new oh(t, e.parser.configure({
      props: [ma.add((i) => i.isTop ? t : void 0)]
    }), e.name);
  }
  /**
  Create a new instance of this language with a reconfigured
  version of its parser and optionally a new name.
  */
  configure(e, t) {
    return new oh(this.data, this.parser.configure(e), t || this.name);
  }
  get allowsNesting() {
    return this.parser.hasWrappers();
  }
}
function mn(n) {
  let e = n.field(Ss.state, !1);
  return e ? e.tree : tn.empty;
}
class KH {
  /**
  Create an input object for the given document.
  */
  constructor(e) {
    this.doc = e, this.cursorPos = 0, this.string = "", this.cursor = e.iter();
  }
  get length() {
    return this.doc.length;
  }
  syncTo(e) {
    return this.string = this.cursor.next(e - this.cursorPos).value, this.cursorPos = e + this.string.length, this.cursorPos - this.string.length;
  }
  chunk(e) {
    return this.syncTo(e), this.string;
  }
  get lineChunks() {
    return !0;
  }
  read(e, t) {
    let i = this.cursorPos - this.string.length;
    return e < i || t >= this.cursorPos ? this.doc.sliceString(e, t) : this.string.slice(e - i, t - i);
  }
}
let Kc = null;
class Ud {
  constructor(e, t, i = [], s, r, o, l, a) {
    this.parser = e, this.state = t, this.fragments = i, this.tree = s, this.treeLen = r, this.viewport = o, this.skipped = l, this.scheduleOn = a, this.parse = null, this.tempSkipped = [];
  }
  /**
  @internal
  */
  static create(e, t, i) {
    return new Ud(e, t, [], tn.empty, 0, i, [], null);
  }
  startParse() {
    return this.parser.startParse(new KH(this.state.doc), this.fragments);
  }
  /**
  @internal
  */
  work(e, t) {
    return t != null && t >= this.state.doc.length && (t = void 0), this.tree != tn.empty && this.isDone(t ?? this.state.doc.length) ? (this.takeTree(), !0) : this.withContext(() => {
      var i;
      if (typeof e == "number") {
        let s = Date.now() + e;
        e = () => Date.now() > s;
      }
      for (this.parse || (this.parse = this.startParse()), t != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > t) && t < this.state.doc.length && this.parse.stopAt(t); ; ) {
        let s = this.parse.advance();
        if (s)
          if (this.fragments = this.withoutTempSkipped(Pl.addTree(s, this.fragments, this.parse.stoppedAt != null)), this.treeLen = (i = this.parse.stoppedAt) !== null && i !== void 0 ? i : this.state.doc.length, this.tree = s, this.parse = null, this.treeLen < (t ?? this.state.doc.length))
            this.parse = this.startParse();
          else
            return !0;
        if (e())
          return !1;
      }
    });
  }
  /**
  @internal
  */
  takeTree() {
    let e, t;
    this.parse && (e = this.parse.parsedPos) >= this.treeLen && ((this.parse.stoppedAt == null || this.parse.stoppedAt > e) && this.parse.stopAt(e), this.withContext(() => {
      for (; !(t = this.parse.advance()); )
        ;
    }), this.treeLen = e, this.tree = t, this.fragments = this.withoutTempSkipped(Pl.addTree(this.tree, this.fragments, !0)), this.parse = null);
  }
  withContext(e) {
    let t = Kc;
    Kc = this;
    try {
      return e();
    } finally {
      Kc = t;
    }
  }
  withoutTempSkipped(e) {
    for (let t; t = this.tempSkipped.pop(); )
      e = Rx(e, t.from, t.to);
    return e;
  }
  /**
  @internal
  */
  changes(e, t) {
    let { fragments: i, tree: s, treeLen: r, viewport: o, skipped: l } = this;
    if (this.takeTree(), !e.empty) {
      let a = [];
      if (e.iterChangedRanges((c, u, h, f) => a.push({ fromA: c, toA: u, fromB: h, toB: f })), i = Pl.applyChanges(i, a), s = tn.empty, r = 0, o = { from: e.mapPos(o.from, -1), to: e.mapPos(o.to, 1) }, this.skipped.length) {
        l = [];
        for (let c of this.skipped) {
          let u = e.mapPos(c.from, 1), h = e.mapPos(c.to, -1);
          u < h && l.push({ from: u, to: h });
        }
      }
    }
    return new Ud(this.parser, t, i, s, r, o, l, this.scheduleOn);
  }
  /**
  @internal
  */
  updateViewport(e) {
    if (this.viewport.from == e.from && this.viewport.to == e.to)
      return !1;
    this.viewport = e;
    let t = this.skipped.length;
    for (let i = 0; i < this.skipped.length; i++) {
      let { from: s, to: r } = this.skipped[i];
      s < e.to && r > e.from && (this.fragments = Rx(this.fragments, s, r), this.skipped.splice(i--, 1));
    }
    return this.skipped.length >= t ? !1 : (this.reset(), !0);
  }
  /**
  @internal
  */
  reset() {
    this.parse && (this.takeTree(), this.parse = null);
  }
  /**
  Notify the parse scheduler that the given region was skipped
  because it wasn't in view, and the parse should be restarted
  when it comes into view.
  */
  skipUntilInView(e, t) {
    this.skipped.push({ from: e, to: t });
  }
  /**
  Returns a parser intended to be used as placeholder when
  asynchronously loading a nested parser. It'll skip its input and
  mark it as not-really-parsed, so that the next update will parse
  it again.
  
  When `until` is given, a reparse will be scheduled when that
  promise resolves.
  */
  static getSkippingParser(e) {
    return new class extends QE {
      createParse(t, i, s) {
        let r = s[0].from, o = s[s.length - 1].to;
        return {
          parsedPos: r,
          advance() {
            let a = Kc;
            if (a) {
              for (let c of s)
                a.tempSkipped.push(c);
              e && (a.scheduleOn = a.scheduleOn ? Promise.all([a.scheduleOn, e]) : e);
            }
            return this.parsedPos = o, new tn(xi.none, [], [], o - r);
          },
          stoppedAt: null,
          stopAt() {
          }
        };
      }
    }();
  }
  /**
  @internal
  */
  isDone(e) {
    e = Math.min(e, this.state.doc.length);
    let t = this.fragments;
    return this.treeLen >= e && t.length && t[0].from == 0 && t[0].to >= e;
  }
  /**
  Get the context for the current parse, or `null` if no editor
  parse is in progress.
  */
  static get() {
    return Kc;
  }
}
function Rx(n, e, t) {
  return Pl.applyChanges(n, [{ fromA: e, toA: t, fromB: e, toB: t }]);
}
class ec {
  constructor(e) {
    this.context = e, this.tree = e.tree;
  }
  apply(e) {
    if (!e.docChanged && this.tree == this.context.tree)
      return this;
    let t = this.context.changes(e.changes, e.state), i = this.context.treeLen == e.startState.doc.length ? void 0 : Math.max(e.changes.mapPos(this.context.treeLen), t.viewport.to);
    return t.work(20, i) || t.takeTree(), new ec(t);
  }
  static init(e) {
    let t = Math.min(3e3, e.doc.length), i = Ud.create(e.facet(Ro).parser, e, { from: 0, to: t });
    return i.work(20, t) || i.takeTree(), new ec(i);
  }
}
Ss.state = /* @__PURE__ */ Pn.define({
  create: ec.init,
  update(n, e) {
    for (let t of e.effects)
      if (t.is(Ss.setState))
        return t.value;
    return e.startState.facet(Ro) != e.state.facet(Ro) ? ec.init(e.state) : n.apply(e);
  }
});
let ZE = (n) => {
  let e = setTimeout(
    () => n(),
    500
    /* Work.MaxPause */
  );
  return () => clearTimeout(e);
};
typeof requestIdleCallback < "u" && (ZE = (n) => {
  let e = -1, t = setTimeout(
    () => {
      e = requestIdleCallback(n, {
        timeout: 400
        /* Work.MinPause */
      });
    },
    100
    /* Work.MinPause */
  );
  return () => e < 0 ? clearTimeout(t) : cancelIdleCallback(e);
});
const ym = typeof navigator < "u" && (!((vm = navigator.scheduling) === null || vm === void 0) && vm.isInputPending) ? () => navigator.scheduling.isInputPending() : null, JH = /* @__PURE__ */ on.fromClass(class {
  constructor(e) {
    this.view = e, this.working = null, this.workScheduled = 0, this.chunkEnd = -1, this.chunkBudget = -1, this.work = this.work.bind(this), this.scheduleWork();
  }
  update(e) {
    let t = this.view.state.field(Ss.state).context;
    (t.updateViewport(e.view.viewport) || this.view.viewport.to > t.treeLen) && this.scheduleWork(), (e.docChanged || e.selectionSet) && (this.view.hasFocus && (this.chunkBudget += 50), this.scheduleWork()), this.checkAsyncSchedule(t);
  }
  scheduleWork() {
    if (this.working)
      return;
    let { state: e } = this.view, t = e.field(Ss.state);
    (t.tree != t.context.tree || !t.context.isDone(e.doc.length)) && (this.working = ZE(this.work));
  }
  work(e) {
    this.working = null;
    let t = Date.now();
    if (this.chunkEnd < t && (this.chunkEnd < 0 || this.view.hasFocus) && (this.chunkEnd = t + 3e4, this.chunkBudget = 3e3), this.chunkBudget <= 0)
      return;
    let { state: i, viewport: { to: s } } = this.view, r = i.field(Ss.state);
    if (r.tree == r.context.tree && r.context.isDone(
      s + 1e5
      /* Work.MaxParseAhead */
    ))
      return;
    let o = Date.now() + Math.min(this.chunkBudget, 100, e && !ym ? Math.max(25, e.timeRemaining() - 5) : 1e9), l = r.context.treeLen < s && i.doc.length > s + 1e3, a = r.context.work(() => ym && ym() || Date.now() > o, s + (l ? 0 : 1e5));
    this.chunkBudget -= Date.now() - t, (a || this.chunkBudget <= 0) && (r.context.takeTree(), this.view.dispatch({ effects: Ss.setState.of(new ec(r.context)) })), this.chunkBudget > 0 && !(a && !l) && this.scheduleWork(), this.checkAsyncSchedule(r.context);
  }
  checkAsyncSchedule(e) {
    e.scheduleOn && (this.workScheduled++, e.scheduleOn.then(() => this.scheduleWork()).catch((t) => Ki(this.view.state, t)).then(() => this.workScheduled--), e.scheduleOn = null);
  }
  destroy() {
    this.working && this.working();
  }
  isWorking() {
    return !!(this.working || this.workScheduled > 0);
  }
}, {
  eventHandlers: { focus() {
    this.scheduleWork();
  } }
}), Ro = /* @__PURE__ */ we.define({
  combine(n) {
    return n.length ? n[0] : null;
  },
  enables: (n) => [
    Ss.state,
    JH,
    Oe.contentAttributes.compute([n], (e) => {
      let t = e.facet(n);
      return t && t.name ? { "data-language": t.name } : {};
    })
  ]
});
class FE {
  /**
  Create a language support object.
  */
  constructor(e, t = []) {
    this.language = e, this.support = t, this.extension = [e, t];
  }
}
const eG = /* @__PURE__ */ we.define(), sg = /* @__PURE__ */ we.define({
  combine: (n) => {
    if (!n.length)
      return "  ";
    let e = n[0];
    if (!e || /\S/.test(e) || Array.from(e).some((t) => t != e[0]))
      throw new Error("Invalid indent unit: " + JSON.stringify(n[0]));
    return e;
  }
});
function Kd(n) {
  let e = n.facet(sg);
  return e.charCodeAt(0) == 9 ? n.tabSize * e.length : e.length;
}
function lh(n, e) {
  let t = "", i = n.tabSize, s = n.facet(sg)[0];
  if (s == "	") {
    for (; e >= i; )
      t += "	", e -= i;
    s = " ";
  }
  for (let r = 0; r < e; r++)
    t += s;
  return t;
}
function my(n, e) {
  n instanceof at && (n = new rg(n));
  for (let i of n.state.facet(eG)) {
    let s = i(n, e);
    if (s !== void 0)
      return s;
  }
  let t = mn(n.state);
  return t.length >= e ? tG(n, t, e) : null;
}
class rg {
  /**
  Create an indent context.
  */
  constructor(e, t = {}) {
    this.state = e, this.options = t, this.unit = Kd(e);
  }
  /**
  Get a description of the line at the given position, taking
  [simulated line
  breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
  into account. If there is such a break at `pos`, the `bias`
  argument determines whether the part of the line line before or
  after the break is used.
  */
  lineAt(e, t = 1) {
    let i = this.state.doc.lineAt(e), { simulateBreak: s, simulateDoubleBreak: r } = this.options;
    return s != null && s >= i.from && s <= i.to ? r && s == e ? { text: "", from: e } : (t < 0 ? s < e : s <= e) ? { text: i.text.slice(s - i.from), from: s } : { text: i.text.slice(0, s - i.from), from: i.from } : i;
  }
  /**
  Get the text directly after `pos`, either the entire line
  or the next 100 characters, whichever is shorter.
  */
  textAfterPos(e, t = 1) {
    if (this.options.simulateDoubleBreak && e == this.options.simulateBreak)
      return "";
    let { text: i, from: s } = this.lineAt(e, t);
    return i.slice(e - s, Math.min(i.length, e + 100 - s));
  }
  /**
  Find the column for the given position.
  */
  column(e, t = 1) {
    let { text: i, from: s } = this.lineAt(e, t), r = this.countColumn(i, e - s), o = this.options.overrideIndentation ? this.options.overrideIndentation(s) : -1;
    return o > -1 && (r += o - this.countColumn(i, i.search(/\S|$/))), r;
  }
  /**
  Find the column position (taking tabs into account) of the given
  position in the given string.
  */
  countColumn(e, t = e.length) {
    return Mc(e, this.state.tabSize, t);
  }
  /**
  Find the indentation column of the line at the given point.
  */
  lineIndent(e, t = 1) {
    let { text: i, from: s } = this.lineAt(e, t), r = this.options.overrideIndentation;
    if (r) {
      let o = r(s);
      if (o > -1)
        return o;
    }
    return this.countColumn(i, i.search(/\S|$/));
  }
  /**
  Returns the [simulated line
  break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
  for this context, if any.
  */
  get simulatedBreak() {
    return this.options.simulateBreak || null;
  }
}
const by = /* @__PURE__ */ new Ge();
function tG(n, e, t) {
  let i = e.resolveStack(t), s = i.node.enterUnfinishedNodesBefore(t);
  if (s != i.node) {
    let r = [];
    for (let o = s; o != i.node; o = o.parent)
      r.push(o);
    for (let o = r.length - 1; o >= 0; o--)
      i = { node: r[o], next: i };
  }
  return VE(i, n, t);
}
function VE(n, e, t) {
  for (let i = n; i; i = i.next) {
    let s = iG(i.node);
    if (s)
      return s(vy.create(e, t, i));
  }
  return 0;
}
function nG(n) {
  return n.pos == n.options.simulateBreak && n.options.simulateDoubleBreak;
}
function iG(n) {
  let e = n.type.prop(by);
  if (e)
    return e;
  let t = n.firstChild, i;
  if (t && (i = t.type.prop(Ge.closedBy))) {
    let s = n.lastChild, r = s && i.indexOf(s.name) > -1;
    return (o) => qE(o, !0, 1, void 0, r && !nG(o) ? s.from : void 0);
  }
  return n.parent == null ? sG : null;
}
function sG() {
  return 0;
}
class vy extends rg {
  constructor(e, t, i) {
    super(e.state, e.options), this.base = e, this.pos = t, this.context = i;
  }
  /**
  The syntax tree node to which the indentation strategy
  applies.
  */
  get node() {
    return this.context.node;
  }
  /**
  @internal
  */
  static create(e, t, i) {
    return new vy(e, t, i);
  }
  /**
  Get the text directly after `this.pos`, either the entire line
  or the next 100 characters, whichever is shorter.
  */
  get textAfter() {
    return this.textAfterPos(this.pos);
  }
  /**
  Get the indentation at the reference line for `this.node`, which
  is the line on which it starts, unless there is a node that is
  _not_ a parent of this node covering the start of that line. If
  so, the line at the start of that node is tried, again skipping
  on if it is covered by another such node.
  */
  get baseIndent() {
    return this.baseIndentFor(this.node);
  }
  /**
  Get the indentation for the reference line of the given node
  (see [`baseIndent`](https://codemirror.net/6/docs/ref/#language.TreeIndentContext.baseIndent)).
  */
  baseIndentFor(e) {
    let t = this.state.doc.lineAt(e.from);
    for (; ; ) {
      let i = e.resolve(t.from);
      for (; i.parent && i.parent.from == i.from; )
        i = i.parent;
      if (rG(i, e))
        break;
      t = this.state.doc.lineAt(i.from);
    }
    return this.lineIndent(t.from);
  }
  /**
  Continue looking for indentations in the node's parent nodes,
  and return the result of that.
  */
  continue() {
    return VE(this.context.next, this.base, this.pos);
  }
}
function rG(n, e) {
  for (let t = e; t; t = t.parent)
    if (n == t)
      return !0;
  return !1;
}
function oG(n) {
  let e = n.node, t = e.childAfter(e.from), i = e.lastChild;
  if (!t)
    return null;
  let s = n.options.simulateBreak, r = n.state.doc.lineAt(t.from), o = s == null || s <= r.from ? r.to : Math.min(r.to, s);
  for (let l = t.to; ; ) {
    let a = e.childAfter(l);
    if (!a || a == i)
      return null;
    if (!a.type.isSkipped)
      return a.from < o ? t : null;
    l = a.to;
  }
}
function lG({ closing: n, align: e = !0, units: t = 1 }) {
  return (i) => qE(i, e, t, n);
}
function qE(n, e, t, i, s) {
  let r = n.textAfter, o = r.match(/^\s*/)[0].length, l = i && r.slice(o, o + i.length) == i || s == n.pos + o, a = e ? oG(n) : null;
  return a ? l ? n.column(a.from) : n.column(a.to) : n.baseIndent + (l ? 0 : n.unit * t);
}
const aG = (n) => n.baseIndent;
function Au({ except: n, units: e = 1 } = {}) {
  return (t) => {
    let i = n && n.test(t.textAfter);
    return t.baseIndent + (i ? 0 : e * t.unit);
  };
}
const cG = 200;
function uG() {
  return at.transactionFilter.of((n) => {
    if (!n.docChanged || !n.isUserEvent("input.type") && !n.isUserEvent("input.complete"))
      return n;
    let e = n.startState.languageDataAt("indentOnInput", n.startState.selection.main.head);
    if (!e.length)
      return n;
    let t = n.newDoc, { head: i } = n.newSelection.main, s = t.lineAt(i);
    if (i > s.from + cG)
      return n;
    let r = t.sliceString(s.from, i);
    if (!e.some((c) => c.test(r)))
      return n;
    let { state: o } = n, l = -1, a = [];
    for (let { head: c } of o.selection.ranges) {
      let u = o.doc.lineAt(c);
      if (u.from == l)
        continue;
      l = u.from;
      let h = my(o, u.from);
      if (h == null)
        continue;
      let f = /^\s*/.exec(u.text)[0], d = lh(o, h);
      f != d && a.push({ from: u.from, to: u.from + f.length, insert: d });
    }
    return a.length ? [n, { changes: a, sequential: !0 }] : n;
  });
}
const hG = /* @__PURE__ */ we.define(), yy = /* @__PURE__ */ new Ge();
function WE(n) {
  let e = n.firstChild, t = n.lastChild;
  return e && e.to < t.from ? { from: e.to, to: t.type.isError ? n.to : t.from } : null;
}
function fG(n, e, t) {
  let i = mn(n);
  if (i.length < t)
    return null;
  let s = i.resolveStack(t, 1), r = null;
  for (let o = s; o; o = o.next) {
    let l = o.node;
    if (l.to <= t || l.from > t)
      continue;
    if (r && l.from < e)
      break;
    let a = l.type.prop(yy);
    if (a && (l.to < i.length - 50 || i.length == n.doc.length || !dG(l))) {
      let c = a(l, n);
      c && c.from <= t && c.from >= e && c.to > t && (r = c);
    }
  }
  return r;
}
function dG(n) {
  let e = n.lastChild;
  return e && e.to == n.to && e.type.isError;
}
function Jd(n, e, t) {
  for (let i of n.facet(hG)) {
    let s = i(n, e, t);
    if (s)
      return s;
  }
  return fG(n, e, t);
}
function XE(n, e) {
  let t = e.mapPos(n.from, 1), i = e.mapPos(n.to, -1);
  return t >= i ? void 0 : { from: t, to: i };
}
const og = /* @__PURE__ */ Ve.define({ map: XE }), Gh = /* @__PURE__ */ Ve.define({ map: XE });
function YE(n) {
  let e = [];
  for (let { head: t } of n.state.selection.ranges)
    e.some((i) => i.from <= t && i.to >= t) || e.push(n.lineBlockAt(t));
  return e;
}
const zl = /* @__PURE__ */ Pn.define({
  create() {
    return Te.none;
  },
  update(n, e) {
    n = n.map(e.changes);
    for (let t of e.effects)
      if (t.is(og) && !pG(n, t.value.from, t.value.to)) {
        let { preparePlaceholder: i } = e.state.facet(Oy), s = i ? Te.replace({ widget: new wG(i(e.state, t.value)) }) : Dx;
        n = n.update({ add: [s.range(t.value.from, t.value.to)] });
      } else
        t.is(Gh) && (n = n.update({
          filter: (i, s) => t.value.from != i || t.value.to != s,
          filterFrom: t.value.from,
          filterTo: t.value.to
        }));
    if (e.selection) {
      let t = !1, { head: i } = e.selection.main;
      n.between(i, i, (s, r) => {
        s < i && r > i && (t = !0);
      }), t && (n = n.update({
        filterFrom: i,
        filterTo: i,
        filter: (s, r) => r <= i || s >= i
      }));
    }
    return n;
  },
  provide: (n) => Oe.decorations.from(n),
  toJSON(n, e) {
    let t = [];
    return n.between(0, e.doc.length, (i, s) => {
      t.push(i, s);
    }), t;
  },
  fromJSON(n) {
    if (!Array.isArray(n) || n.length % 2)
      throw new RangeError("Invalid JSON for fold state");
    let e = [];
    for (let t = 0; t < n.length; ) {
      let i = n[t++], s = n[t++];
      if (typeof i != "number" || typeof s != "number")
        throw new RangeError("Invalid JSON for fold state");
      e.push(Dx.range(i, s));
    }
    return Te.set(e, !0);
  }
});
function ep(n, e, t) {
  var i;
  let s = null;
  return (i = n.field(zl, !1)) === null || i === void 0 || i.between(e, t, (r, o) => {
    (!s || s.from > r) && (s = { from: r, to: o });
  }), s;
}
function pG(n, e, t) {
  let i = !1;
  return n.between(e, e, (s, r) => {
    s == e && r == t && (i = !0);
  }), i;
}
function HE(n, e) {
  return n.field(zl, !1) ? e : e.concat(Ve.appendConfig.of(UE()));
}
const gG = (n) => {
  for (let e of YE(n)) {
    let t = Jd(n.state, e.from, e.to);
    if (t)
      return n.dispatch({ effects: HE(n.state, [og.of(t), GE(n, t)]) }), !0;
  }
  return !1;
}, mG = (n) => {
  if (!n.state.field(zl, !1))
    return !1;
  let e = [];
  for (let t of YE(n)) {
    let i = ep(n.state, t.from, t.to);
    i && e.push(Gh.of(i), GE(n, i, !1));
  }
  return e.length && n.dispatch({ effects: e }), e.length > 0;
};
function GE(n, e, t = !0) {
  let i = n.state.doc.lineAt(e.from).number, s = n.state.doc.lineAt(e.to).number;
  return Oe.announce.of(`${n.state.phrase(t ? "Folded lines" : "Unfolded lines")} ${i} ${n.state.phrase("to")} ${s}.`);
}
const bG = (n) => {
  let { state: e } = n, t = [];
  for (let i = 0; i < e.doc.length; ) {
    let s = n.lineBlockAt(i), r = Jd(e, s.from, s.to);
    r && t.push(og.of(r)), i = (r ? n.lineBlockAt(r.to) : s).to + 1;
  }
  return t.length && n.dispatch({ effects: HE(n.state, t) }), !!t.length;
}, vG = (n) => {
  let e = n.state.field(zl, !1);
  if (!e || !e.size)
    return !1;
  let t = [];
  return e.between(0, n.state.doc.length, (i, s) => {
    t.push(Gh.of({ from: i, to: s }));
  }), n.dispatch({ effects: t }), !0;
}, yG = [
  { key: "Ctrl-Shift-[", mac: "Cmd-Alt-[", run: gG },
  { key: "Ctrl-Shift-]", mac: "Cmd-Alt-]", run: mG },
  { key: "Ctrl-Alt-[", run: bG },
  { key: "Ctrl-Alt-]", run: vG }
], OG = {
  placeholderDOM: null,
  preparePlaceholder: null,
  placeholderText: "…"
}, Oy = /* @__PURE__ */ we.define({
  combine(n) {
    return Or(n, OG);
  }
});
function UE(n) {
  let e = [zl, CG];
  return n && e.push(Oy.of(n)), e;
}
function KE(n, e) {
  let { state: t } = n, i = t.facet(Oy), s = (o) => {
    let l = n.lineBlockAt(n.posAtDOM(o.target)), a = ep(n.state, l.from, l.to);
    a && n.dispatch({ effects: Gh.of(a) }), o.preventDefault();
  };
  if (i.placeholderDOM)
    return i.placeholderDOM(n, s, e);
  let r = document.createElement("span");
  return r.textContent = i.placeholderText, r.setAttribute("aria-label", t.phrase("folded code")), r.title = t.phrase("unfold"), r.className = "cm-foldPlaceholder", r.onclick = s, r;
}
const Dx = /* @__PURE__ */ Te.replace({ widget: /* @__PURE__ */ new class extends Gr {
  toDOM(n) {
    return KE(n, null);
  }
}() });
class wG extends Gr {
  constructor(e) {
    super(), this.value = e;
  }
  eq(e) {
    return this.value == e.value;
  }
  toDOM(e) {
    return KE(e, this.value);
  }
}
const xG = {
  openText: "⌄",
  closedText: "›",
  markerDOM: null,
  domEventHandlers: {},
  foldingChanged: () => !1
};
class Om extends zr {
  constructor(e, t) {
    super(), this.config = e, this.open = t;
  }
  eq(e) {
    return this.config == e.config && this.open == e.open;
  }
  toDOM(e) {
    if (this.config.markerDOM)
      return this.config.markerDOM(this.open);
    let t = document.createElement("span");
    return t.textContent = this.open ? this.config.openText : this.config.closedText, t.title = e.state.phrase(this.open ? "Fold line" : "Unfold line"), t;
  }
}
function SG(n = {}) {
  let e = Object.assign(Object.assign({}, xG), n), t = new Om(e, !0), i = new Om(e, !1), s = on.fromClass(class {
    constructor(o) {
      this.from = o.viewport.from, this.markers = this.buildMarkers(o);
    }
    update(o) {
      (o.docChanged || o.viewportChanged || o.startState.facet(Ro) != o.state.facet(Ro) || o.startState.field(zl, !1) != o.state.field(zl, !1) || mn(o.startState) != mn(o.state) || e.foldingChanged(o)) && (this.markers = this.buildMarkers(o.view));
    }
    buildMarkers(o) {
      let l = new Eo();
      for (let a of o.viewportLineBlocks) {
        let c = ep(o.state, a.from, a.to) ? i : Jd(o.state, a.from, a.to) ? t : null;
        c && l.add(a.from, a.from, c);
      }
      return l.finish();
    }
  }), { domEventHandlers: r } = e;
  return [
    s,
    PH({
      class: "cm-foldGutter",
      markers(o) {
        var l;
        return ((l = o.plugin(s)) === null || l === void 0 ? void 0 : l.markers) || it.empty;
      },
      initialSpacer() {
        return new Om(e, !1);
      },
      domEventHandlers: Object.assign(Object.assign({}, r), { click: (o, l, a) => {
        if (r.click && r.click(o, l, a))
          return !0;
        let c = ep(o.state, l.from, l.to);
        if (c)
          return o.dispatch({ effects: Gh.of(c) }), !0;
        let u = Jd(o.state, l.from, l.to);
        return u ? (o.dispatch({ effects: og.of(u) }), !0) : !1;
      } })
    }),
    UE()
  ];
}
const CG = /* @__PURE__ */ Oe.baseTheme({
  ".cm-foldPlaceholder": {
    backgroundColor: "#eee",
    border: "1px solid #ddd",
    color: "#888",
    borderRadius: ".2em",
    margin: "0 1px",
    padding: "0 1px",
    cursor: "pointer"
  },
  ".cm-foldGutter span": {
    padding: "0 1px",
    cursor: "pointer"
  }
});
class lg {
  constructor(e, t) {
    this.specs = e;
    let i;
    function s(l) {
      let a = $o.newName();
      return (i || (i = /* @__PURE__ */ Object.create(null)))["." + a] = l, a;
    }
    const r = typeof t.all == "string" ? t.all : t.all ? s(t.all) : void 0, o = t.scope;
    this.scope = o instanceof Ss ? (l) => l.prop(ma) == o.data : o ? (l) => l == o : void 0, this.style = jE(e.map((l) => ({
      tag: l.tag,
      class: l.class || s(Object.assign({}, l, { tag: null }))
    })), {
      all: r
    }).style, this.module = i ? new $o(i) : null, this.themeType = t.themeType;
  }
  /**
  Create a highlighter style that associates the given styles to
  the given tags. The specs must be objects that hold a style tag
  or array of tags in their `tag` property, and either a single
  `class` property providing a static CSS class (for highlighter
  that rely on external styling), or a
  [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style
  set of CSS properties (which define the styling for those tags).
  
  The CSS rules created for a highlighter will be emitted in the
  order of the spec's properties. That means that for elements that
  have multiple tags associated with them, styles defined further
  down in the list will have a higher CSS precedence than styles
  defined earlier.
  */
  static define(e, t) {
    return new lg(e, t || {});
  }
}
const Ob = /* @__PURE__ */ we.define(), JE = /* @__PURE__ */ we.define({
  combine(n) {
    return n.length ? [n[0]] : null;
  }
});
function wm(n) {
  let e = n.facet(Ob);
  return e.length ? e : n.facet(JE);
}
function kG(n, e) {
  let t = [AG], i;
  return n instanceof lg && (n.module && t.push(Oe.styleModule.of(n.module)), i = n.themeType), e != null && e.fallback ? t.push(JE.of(n)) : i ? t.push(Ob.computeN([Oe.darkTheme], (s) => s.facet(Oe.darkTheme) == (i == "dark") ? [n] : [])) : t.push(Ob.of(n)), t;
}
class PG {
  constructor(e) {
    this.markCache = /* @__PURE__ */ Object.create(null), this.tree = mn(e.state), this.decorations = this.buildDeco(e, wm(e.state)), this.decoratedTo = e.viewport.to;
  }
  update(e) {
    let t = mn(e.state), i = wm(e.state), s = i != wm(e.startState), { viewport: r } = e.view, o = e.changes.mapPos(this.decoratedTo, 1);
    t.length < r.to && !s && t.type == this.tree.type && o >= r.to ? (this.decorations = this.decorations.map(e.changes), this.decoratedTo = o) : (t != this.tree || e.viewportChanged || s) && (this.tree = t, this.decorations = this.buildDeco(e.view, i), this.decoratedTo = r.to);
  }
  buildDeco(e, t) {
    if (!t || !this.tree.length)
      return Te.none;
    let i = new Eo();
    for (let { from: s, to: r } of e.visibleRanges)
      HH(this.tree, t, (o, l, a) => {
        i.add(o, l, this.markCache[a] || (this.markCache[a] = Te.mark({ class: a })));
      }, s, r);
    return i.finish();
  }
}
const AG = /* @__PURE__ */ Kl.high(/* @__PURE__ */ on.fromClass(PG, {
  decorations: (n) => n.decorations
})), EG = /* @__PURE__ */ lg.define([
  {
    tag: V.meta,
    color: "#404740"
  },
  {
    tag: V.link,
    textDecoration: "underline"
  },
  {
    tag: V.heading,
    textDecoration: "underline",
    fontWeight: "bold"
  },
  {
    tag: V.emphasis,
    fontStyle: "italic"
  },
  {
    tag: V.strong,
    fontWeight: "bold"
  },
  {
    tag: V.strikethrough,
    textDecoration: "line-through"
  },
  {
    tag: V.keyword,
    color: "#708"
  },
  {
    tag: [V.atom, V.bool, V.url, V.contentSeparator, V.labelName],
    color: "#219"
  },
  {
    tag: [V.literal, V.inserted],
    color: "#164"
  },
  {
    tag: [V.string, V.deleted],
    color: "#a11"
  },
  {
    tag: [V.regexp, V.escape, /* @__PURE__ */ V.special(V.string)],
    color: "#e40"
  },
  {
    tag: /* @__PURE__ */ V.definition(V.variableName),
    color: "#00f"
  },
  {
    tag: /* @__PURE__ */ V.local(V.variableName),
    color: "#30a"
  },
  {
    tag: [V.typeName, V.namespace],
    color: "#085"
  },
  {
    tag: V.className,
    color: "#167"
  },
  {
    tag: [/* @__PURE__ */ V.special(V.variableName), V.macroName],
    color: "#256"
  },
  {
    tag: /* @__PURE__ */ V.definition(V.propertyName),
    color: "#00c"
  },
  {
    tag: V.comment,
    color: "#940"
  },
  {
    tag: V.invalid,
    color: "#f00"
  }
]), $G = /* @__PURE__ */ Oe.baseTheme({
  "&.cm-focused .cm-matchingBracket": { backgroundColor: "#328c8252" },
  "&.cm-focused .cm-nonmatchingBracket": { backgroundColor: "#bb555544" }
}), e$ = 1e4, t$ = "()[]{}", n$ = /* @__PURE__ */ we.define({
  combine(n) {
    return Or(n, {
      afterCursor: !0,
      brackets: t$,
      maxScanDistance: e$,
      renderMatch: MG
    });
  }
}), TG = /* @__PURE__ */ Te.mark({ class: "cm-matchingBracket" }), _G = /* @__PURE__ */ Te.mark({ class: "cm-nonmatchingBracket" });
function MG(n) {
  let e = [], t = n.matched ? TG : _G;
  return e.push(t.range(n.start.from, n.start.to)), n.end && e.push(t.range(n.end.from, n.end.to)), e;
}
const RG = /* @__PURE__ */ Pn.define({
  create() {
    return Te.none;
  },
  update(n, e) {
    if (!e.docChanged && !e.selection)
      return n;
    let t = [], i = e.state.facet(n$);
    for (let s of e.state.selection.ranges) {
      if (!s.empty)
        continue;
      let r = er(e.state, s.head, -1, i) || s.head > 0 && er(e.state, s.head - 1, 1, i) || i.afterCursor && (er(e.state, s.head, 1, i) || s.head < e.state.doc.length && er(e.state, s.head + 1, -1, i));
      r && (t = t.concat(i.renderMatch(r, e.state)));
    }
    return Te.set(t, !0);
  },
  provide: (n) => Oe.decorations.from(n)
}), DG = [
  RG,
  $G
];
function LG(n = {}) {
  return [n$.of(n), DG];
}
const NG = /* @__PURE__ */ new Ge();
function wb(n, e, t) {
  let i = n.prop(e < 0 ? Ge.openedBy : Ge.closedBy);
  if (i)
    return i;
  if (n.name.length == 1) {
    let s = t.indexOf(n.name);
    if (s > -1 && s % 2 == (e < 0 ? 1 : 0))
      return [t[s + e]];
  }
  return null;
}
function xb(n) {
  let e = n.type.prop(NG);
  return e ? e(n.node) : n;
}
function er(n, e, t, i = {}) {
  let s = i.maxScanDistance || e$, r = i.brackets || t$, o = mn(n), l = o.resolveInner(e, t);
  for (let a = l; a; a = a.parent) {
    let c = wb(a.type, t, r);
    if (c && a.from < a.to) {
      let u = xb(a);
      if (u && (t > 0 ? e >= u.from && e < u.to : e > u.from && e <= u.to))
        return IG(n, e, t, a, u, c, r);
    }
  }
  return QG(n, e, t, o, l.type, s, r);
}
function IG(n, e, t, i, s, r, o) {
  let l = i.parent, a = { from: s.from, to: s.to }, c = 0, u = l == null ? void 0 : l.cursor();
  if (u && (t < 0 ? u.childBefore(i.from) : u.childAfter(i.to)))
    do
      if (t < 0 ? u.to <= i.from : u.from >= i.to) {
        if (c == 0 && r.indexOf(u.type.name) > -1 && u.from < u.to) {
          let h = xb(u);
          return { start: a, end: h ? { from: h.from, to: h.to } : void 0, matched: !0 };
        } else if (wb(u.type, t, o))
          c++;
        else if (wb(u.type, -t, o)) {
          if (c == 0) {
            let h = xb(u);
            return {
              start: a,
              end: h && h.from < h.to ? { from: h.from, to: h.to } : void 0,
              matched: !1
            };
          }
          c--;
        }
      }
    while (t < 0 ? u.prevSibling() : u.nextSibling());
  return { start: a, matched: !1 };
}
function QG(n, e, t, i, s, r, o) {
  let l = t < 0 ? n.sliceDoc(e - 1, e) : n.sliceDoc(e, e + 1), a = o.indexOf(l);
  if (a < 0 || a % 2 == 0 != t > 0)
    return null;
  let c = { from: t < 0 ? e - 1 : e, to: t > 0 ? e + 1 : e }, u = n.doc.iterRange(e, t > 0 ? n.doc.length : 0), h = 0;
  for (let f = 0; !u.next().done && f <= r; ) {
    let d = u.value;
    t < 0 && (f += d.length);
    let p = e + f * t;
    for (let g = t > 0 ? 0 : d.length - 1, m = t > 0 ? d.length : -1; g != m; g += t) {
      let b = o.indexOf(d[g]);
      if (!(b < 0 || i.resolveInner(p + g, 1).type != s))
        if (b % 2 == 0 == t > 0)
          h++;
        else {
          if (h == 1)
            return { start: c, end: { from: p + g, to: p + g + 1 }, matched: b >> 1 == a >> 1 };
          h--;
        }
    }
    t > 0 && (f += d.length);
  }
  return u.done ? { start: c, matched: !1 } : null;
}
const BG = /* @__PURE__ */ Object.create(null), Lx = [xi.none], Nx = [], Ix = /* @__PURE__ */ Object.create(null), jG = /* @__PURE__ */ Object.create(null);
for (let [n, e] of [
  ["variable", "variableName"],
  ["variable-2", "variableName.special"],
  ["string-2", "string.special"],
  ["def", "variableName.definition"],
  ["tag", "tagName"],
  ["attribute", "attributeName"],
  ["type", "typeName"],
  ["builtin", "variableName.standard"],
  ["qualifier", "modifier"],
  ["error", "invalid"],
  ["header", "heading"],
  ["property", "propertyName"]
])
  jG[n] = /* @__PURE__ */ zG(BG, e);
function xm(n, e) {
  Nx.indexOf(n) > -1 || (Nx.push(n), console.warn(e));
}
function zG(n, e) {
  let t = [];
  for (let l of e.split(" ")) {
    let a = [];
    for (let c of l.split(".")) {
      let u = n[c] || V[c];
      u ? typeof u == "function" ? a.length ? a = a.map(u) : xm(c, `Modifier ${c} used at start of tag`) : a.length ? xm(c, `Tag ${c} used as modifier`) : a = Array.isArray(u) ? u : [u] : xm(c, `Unknown highlighting tag ${c}`);
    }
    for (let c of a)
      t.push(c);
  }
  if (!t.length)
    return 0;
  let i = e.replace(/ /g, "_"), s = i + " " + t.map((l) => l.id), r = Ix[s];
  if (r)
    return r.id;
  let o = Ix[s] = xi.define({
    id: Lx.length,
    name: i,
    props: [py({ [i]: t })]
  });
  return Lx.push(o), o.id;
}
Rt.RTL, Rt.LTR;
const ZG = (n) => {
  let { state: e } = n, t = e.doc.lineAt(e.selection.main.from), i = xy(n.state, t.from);
  return i.line ? FG(n) : i.block ? qG(n) : !1;
};
function wy(n, e) {
  return ({ state: t, dispatch: i }) => {
    if (t.readOnly)
      return !1;
    let s = n(e, t);
    return s ? (i(t.update(s)), !0) : !1;
  };
}
const FG = /* @__PURE__ */ wy(
  YG,
  0
  /* CommentOption.Toggle */
), VG = /* @__PURE__ */ wy(
  i$,
  0
  /* CommentOption.Toggle */
), qG = /* @__PURE__ */ wy(
  (n, e) => i$(n, e, XG(e)),
  0
  /* CommentOption.Toggle */
);
function xy(n, e) {
  let t = n.languageDataAt("commentTokens", e);
  return t.length ? t[0] : {};
}
const Jc = 50;
function WG(n, { open: e, close: t }, i, s) {
  let r = n.sliceDoc(i - Jc, i), o = n.sliceDoc(s, s + Jc), l = /\s*$/.exec(r)[0].length, a = /^\s*/.exec(o)[0].length, c = r.length - l;
  if (r.slice(c - e.length, c) == e && o.slice(a, a + t.length) == t)
    return {
      open: { pos: i - l, margin: l && 1 },
      close: { pos: s + a, margin: a && 1 }
    };
  let u, h;
  s - i <= 2 * Jc ? u = h = n.sliceDoc(i, s) : (u = n.sliceDoc(i, i + Jc), h = n.sliceDoc(s - Jc, s));
  let f = /^\s*/.exec(u)[0].length, d = /\s*$/.exec(h)[0].length, p = h.length - d - t.length;
  return u.slice(f, f + e.length) == e && h.slice(p, p + t.length) == t ? {
    open: {
      pos: i + f + e.length,
      margin: /\s/.test(u.charAt(f + e.length)) ? 1 : 0
    },
    close: {
      pos: s - d - t.length,
      margin: /\s/.test(h.charAt(p - 1)) ? 1 : 0
    }
  } : null;
}
function XG(n) {
  let e = [];
  for (let t of n.selection.ranges) {
    let i = n.doc.lineAt(t.from), s = t.to <= i.to ? i : n.doc.lineAt(t.to), r = e.length - 1;
    r >= 0 && e[r].to > i.from ? e[r].to = s.to : e.push({ from: i.from + /^\s*/.exec(i.text)[0].length, to: s.to });
  }
  return e;
}
function i$(n, e, t = e.selection.ranges) {
  let i = t.map((r) => xy(e, r.from).block);
  if (!i.every((r) => r))
    return null;
  let s = t.map((r, o) => WG(e, i[o], r.from, r.to));
  if (n != 2 && !s.every((r) => r))
    return { changes: e.changes(t.map((r, o) => s[o] ? [] : [{ from: r.from, insert: i[o].open + " " }, { from: r.to, insert: " " + i[o].close }])) };
  if (n != 1 && s.some((r) => r)) {
    let r = [];
    for (let o = 0, l; o < s.length; o++)
      if (l = s[o]) {
        let a = i[o], { open: c, close: u } = l;
        r.push({ from: c.pos - a.open.length, to: c.pos + c.margin }, { from: u.pos - u.margin, to: u.pos + a.close.length });
      }
    return { changes: r };
  }
  return null;
}
function YG(n, e, t = e.selection.ranges) {
  let i = [], s = -1;
  for (let { from: r, to: o } of t) {
    let l = i.length, a = 1e9, c = xy(e, r).line;
    if (c) {
      for (let u = r; u <= o; ) {
        let h = e.doc.lineAt(u);
        if (h.from > s && (r == o || o > h.from)) {
          s = h.from;
          let f = /^\s*/.exec(h.text)[0].length, d = f == h.length, p = h.text.slice(f, f + c.length) == c ? f : -1;
          f < h.text.length && f < a && (a = f), i.push({ line: h, comment: p, token: c, indent: f, empty: d, single: !1 });
        }
        u = h.to + 1;
      }
      if (a < 1e9)
        for (let u = l; u < i.length; u++)
          i[u].indent < i[u].line.text.length && (i[u].indent = a);
      i.length == l + 1 && (i[l].single = !0);
    }
  }
  if (n != 2 && i.some((r) => r.comment < 0 && (!r.empty || r.single))) {
    let r = [];
    for (let { line: l, token: a, indent: c, empty: u, single: h } of i)
      (h || !u) && r.push({ from: l.from + c, insert: a + " " });
    let o = e.changes(r);
    return { changes: o, selection: e.selection.map(o, 1) };
  } else if (n != 1 && i.some((r) => r.comment >= 0)) {
    let r = [];
    for (let { line: o, comment: l, token: a } of i)
      if (l >= 0) {
        let c = o.from + l, u = c + a.length;
        o.text[u - o.from] == " " && u++, r.push({ from: c, to: u });
      }
    return { changes: r };
  }
  return null;
}
const Sb = /* @__PURE__ */ Hr.define(), HG = /* @__PURE__ */ Hr.define(), GG = /* @__PURE__ */ we.define(), s$ = /* @__PURE__ */ we.define({
  combine(n) {
    return Or(n, {
      minDepth: 100,
      newGroupDelay: 500,
      joinToEvent: (e, t) => t
    }, {
      minDepth: Math.max,
      newGroupDelay: Math.min,
      joinToEvent: (e, t) => (i, s) => e(i, s) || t(i, s)
    });
  }
}), r$ = /* @__PURE__ */ Pn.define({
  create() {
    return tr.empty;
  },
  update(n, e) {
    let t = e.state.facet(s$), i = e.annotation(Sb);
    if (i) {
      let a = pi.fromTransaction(e, i.selection), c = i.side, u = c == 0 ? n.undone : n.done;
      return a ? u = tp(u, u.length, t.minDepth, a) : u = a$(u, e.startState.selection), new tr(c == 0 ? i.rest : u, c == 0 ? u : i.rest);
    }
    let s = e.annotation(HG);
    if ((s == "full" || s == "before") && (n = n.isolate()), e.annotation(en.addToHistory) === !1)
      return e.changes.empty ? n : n.addMapping(e.changes.desc);
    let r = pi.fromTransaction(e), o = e.annotation(en.time), l = e.annotation(en.userEvent);
    return r ? n = n.addChanges(r, o, l, t, e) : e.selection && (n = n.addSelection(e.startState.selection, o, l, t.newGroupDelay)), (s == "full" || s == "after") && (n = n.isolate()), n;
  },
  toJSON(n) {
    return { done: n.done.map((e) => e.toJSON()), undone: n.undone.map((e) => e.toJSON()) };
  },
  fromJSON(n) {
    return new tr(n.done.map(pi.fromJSON), n.undone.map(pi.fromJSON));
  }
});
function UG(n = {}) {
  return [
    r$,
    s$.of(n),
    Oe.domEventHandlers({
      beforeinput(e, t) {
        let i = e.inputType == "historyUndo" ? o$ : e.inputType == "historyRedo" ? Cb : null;
        return i ? (e.preventDefault(), i(t)) : !1;
      }
    })
  ];
}
function ag(n, e) {
  return function({ state: t, dispatch: i }) {
    if (!e && t.readOnly)
      return !1;
    let s = t.field(r$, !1);
    if (!s)
      return !1;
    let r = s.pop(n, t, e);
    return r ? (i(r), !0) : !1;
  };
}
const o$ = /* @__PURE__ */ ag(0, !1), Cb = /* @__PURE__ */ ag(1, !1), KG = /* @__PURE__ */ ag(0, !0), JG = /* @__PURE__ */ ag(1, !0);
class pi {
  constructor(e, t, i, s, r) {
    this.changes = e, this.effects = t, this.mapped = i, this.startSelection = s, this.selectionsAfter = r;
  }
  setSelAfter(e) {
    return new pi(this.changes, this.effects, this.mapped, this.startSelection, e);
  }
  toJSON() {
    var e, t, i;
    return {
      changes: (e = this.changes) === null || e === void 0 ? void 0 : e.toJSON(),
      mapped: (t = this.mapped) === null || t === void 0 ? void 0 : t.toJSON(),
      startSelection: (i = this.startSelection) === null || i === void 0 ? void 0 : i.toJSON(),
      selectionsAfter: this.selectionsAfter.map((s) => s.toJSON())
    };
  }
  static fromJSON(e) {
    return new pi(e.changes && dn.fromJSON(e.changes), [], e.mapped && lr.fromJSON(e.mapped), e.startSelection && J.fromJSON(e.startSelection), e.selectionsAfter.map(J.fromJSON));
  }
  // This does not check `addToHistory` and such, it assumes the
  // transaction needs to be converted to an item. Returns null when
  // there are no changes or effects in the transaction.
  static fromTransaction(e, t) {
    let i = Hi;
    for (let s of e.startState.facet(GG)) {
      let r = s(e);
      r.length && (i = i.concat(r));
    }
    return !i.length && e.changes.empty ? null : new pi(e.changes.invert(e.startState.doc), i, void 0, t || e.startState.selection, Hi);
  }
  static selection(e) {
    return new pi(void 0, Hi, void 0, void 0, e);
  }
}
function tp(n, e, t, i) {
  let s = e + 1 > t + 20 ? e - t - 1 : 0, r = n.slice(s, e);
  return r.push(i), r;
}
function eU(n, e) {
  let t = [], i = !1;
  return n.iterChangedRanges((s, r) => t.push(s, r)), e.iterChangedRanges((s, r, o, l) => {
    for (let a = 0; a < t.length; ) {
      let c = t[a++], u = t[a++];
      l >= c && o <= u && (i = !0);
    }
  }), i;
}
function tU(n, e) {
  return n.ranges.length == e.ranges.length && n.ranges.filter((t, i) => t.empty != e.ranges[i].empty).length === 0;
}
function l$(n, e) {
  return n.length ? e.length ? n.concat(e) : n : e;
}
const Hi = [], nU = 200;
function a$(n, e) {
  if (n.length) {
    let t = n[n.length - 1], i = t.selectionsAfter.slice(Math.max(0, t.selectionsAfter.length - nU));
    return i.length && i[i.length - 1].eq(e) ? n : (i.push(e), tp(n, n.length - 1, 1e9, t.setSelAfter(i)));
  } else
    return [pi.selection([e])];
}
function iU(n) {
  let e = n[n.length - 1], t = n.slice();
  return t[n.length - 1] = e.setSelAfter(e.selectionsAfter.slice(0, e.selectionsAfter.length - 1)), t;
}
function Sm(n, e) {
  if (!n.length)
    return n;
  let t = n.length, i = Hi;
  for (; t; ) {
    let s = sU(n[t - 1], e, i);
    if (s.changes && !s.changes.empty || s.effects.length) {
      let r = n.slice(0, t);
      return r[t - 1] = s, r;
    } else
      e = s.mapped, t--, i = s.selectionsAfter;
  }
  return i.length ? [pi.selection(i)] : Hi;
}
function sU(n, e, t) {
  let i = l$(n.selectionsAfter.length ? n.selectionsAfter.map((l) => l.map(e)) : Hi, t);
  if (!n.changes)
    return pi.selection(i);
  let s = n.changes.map(e), r = e.mapDesc(n.changes, !0), o = n.mapped ? n.mapped.composeDesc(r) : r;
  return new pi(s, Ve.mapEffects(n.effects, e), o, n.startSelection.map(r), i);
}
const rU = /^(input\.type|delete)($|\.)/;
class tr {
  constructor(e, t, i = 0, s = void 0) {
    this.done = e, this.undone = t, this.prevTime = i, this.prevUserEvent = s;
  }
  isolate() {
    return this.prevTime ? new tr(this.done, this.undone) : this;
  }
  addChanges(e, t, i, s, r) {
    let o = this.done, l = o[o.length - 1];
    return l && l.changes && !l.changes.empty && e.changes && (!i || rU.test(i)) && (!l.selectionsAfter.length && t - this.prevTime < s.newGroupDelay && s.joinToEvent(r, eU(l.changes, e.changes)) || // For compose (but not compose.start) events, always join with previous event
    i == "input.type.compose") ? o = tp(o, o.length - 1, s.minDepth, new pi(e.changes.compose(l.changes), l$(e.effects, l.effects), l.mapped, l.startSelection, Hi)) : o = tp(o, o.length, s.minDepth, e), new tr(o, Hi, t, i);
  }
  addSelection(e, t, i, s) {
    let r = this.done.length ? this.done[this.done.length - 1].selectionsAfter : Hi;
    return r.length > 0 && t - this.prevTime < s && i == this.prevUserEvent && i && /^select($|\.)/.test(i) && tU(r[r.length - 1], e) ? this : new tr(a$(this.done, e), this.undone, t, i);
  }
  addMapping(e) {
    return new tr(Sm(this.done, e), Sm(this.undone, e), this.prevTime, this.prevUserEvent);
  }
  pop(e, t, i) {
    let s = e == 0 ? this.done : this.undone;
    if (s.length == 0)
      return null;
    let r = s[s.length - 1], o = r.selectionsAfter[0] || t.selection;
    if (i && r.selectionsAfter.length)
      return t.update({
        selection: r.selectionsAfter[r.selectionsAfter.length - 1],
        annotations: Sb.of({ side: e, rest: iU(s), selection: o }),
        userEvent: e == 0 ? "select.undo" : "select.redo",
        scrollIntoView: !0
      });
    if (r.changes) {
      let l = s.length == 1 ? Hi : s.slice(0, s.length - 1);
      return r.mapped && (l = Sm(l, r.mapped)), t.update({
        changes: r.changes,
        selection: r.startSelection,
        effects: r.effects,
        annotations: Sb.of({ side: e, rest: l, selection: o }),
        filter: !1,
        userEvent: e == 0 ? "undo" : "redo",
        scrollIntoView: !0
      });
    } else
      return null;
  }
}
tr.empty = /* @__PURE__ */ new tr(Hi, Hi);
const oU = [
  { key: "Mod-z", run: o$, preventDefault: !0 },
  { key: "Mod-y", mac: "Mod-Shift-z", run: Cb, preventDefault: !0 },
  { linux: "Ctrl-Shift-z", run: Cb, preventDefault: !0 },
  { key: "Mod-u", run: KG, preventDefault: !0 },
  { key: "Alt-u", mac: "Mod-Shift-u", run: JG, preventDefault: !0 }
];
function Rc(n, e) {
  return J.create(n.ranges.map(e), n.mainIndex);
}
function wr(n, e) {
  return n.update({ selection: e, scrollIntoView: !0, userEvent: "select" });
}
function Is({ state: n, dispatch: e }, t) {
  let i = Rc(n.selection, t);
  return i.eq(n.selection, !0) ? !1 : (e(wr(n, i)), !0);
}
function cg(n, e) {
  return J.cursor(e ? n.to : n.from);
}
function c$(n, e) {
  return Is(n, (t) => t.empty ? n.moveByChar(t, e) : cg(t, e));
}
function Gn(n) {
  return n.textDirectionAt(n.state.selection.main.head) == Rt.LTR;
}
const u$ = (n) => c$(n, !Gn(n)), h$ = (n) => c$(n, Gn(n));
function f$(n, e) {
  return Is(n, (t) => t.empty ? n.moveByGroup(t, e) : cg(t, e));
}
const lU = (n) => f$(n, !Gn(n)), aU = (n) => f$(n, Gn(n));
function cU(n, e, t) {
  if (e.type.prop(t))
    return !0;
  let i = e.to - e.from;
  return i && (i > 2 || /[^\s,.;:]/.test(n.sliceDoc(e.from, e.to))) || e.firstChild;
}
function ug(n, e, t) {
  let i = mn(n).resolveInner(e.head), s = t ? Ge.closedBy : Ge.openedBy;
  for (let a = e.head; ; ) {
    let c = t ? i.childAfter(a) : i.childBefore(a);
    if (!c)
      break;
    cU(n, c, s) ? i = c : a = t ? c.to : c.from;
  }
  let r = i.type.prop(s), o, l;
  return r && (o = t ? er(n, i.from, 1) : er(n, i.to, -1)) && o.matched ? l = t ? o.end.to : o.end.from : l = t ? i.to : i.from, J.cursor(l, t ? -1 : 1);
}
const uU = (n) => Is(n, (e) => ug(n.state, e, !Gn(n))), hU = (n) => Is(n, (e) => ug(n.state, e, Gn(n)));
function d$(n, e) {
  return Is(n, (t) => {
    if (!t.empty)
      return cg(t, e);
    let i = n.moveVertically(t, e);
    return i.head != t.head ? i : n.moveToLineBoundary(t, e);
  });
}
const p$ = (n) => d$(n, !1), g$ = (n) => d$(n, !0);
function m$(n) {
  let e = n.scrollDOM.clientHeight < n.scrollDOM.scrollHeight - 2, t = 0, i = 0, s;
  if (e) {
    for (let r of n.state.facet(Oe.scrollMargins)) {
      let o = r(n);
      o != null && o.top && (t = Math.max(o == null ? void 0 : o.top, t)), o != null && o.bottom && (i = Math.max(o == null ? void 0 : o.bottom, i));
    }
    s = n.scrollDOM.clientHeight - t - i;
  } else
    s = (n.dom.ownerDocument.defaultView || window).innerHeight;
  return {
    marginTop: t,
    marginBottom: i,
    selfScroll: e,
    height: Math.max(n.defaultLineHeight, s - 5)
  };
}
function b$(n, e) {
  let t = m$(n), { state: i } = n, s = Rc(i.selection, (o) => o.empty ? n.moveVertically(o, e, t.height) : cg(o, e));
  if (s.eq(i.selection))
    return !1;
  let r;
  if (t.selfScroll) {
    let o = n.coordsAtPos(i.selection.main.head), l = n.scrollDOM.getBoundingClientRect(), a = l.top + t.marginTop, c = l.bottom - t.marginBottom;
    o && o.top > a && o.bottom < c && (r = Oe.scrollIntoView(s.main.head, { y: "start", yMargin: o.top - a }));
  }
  return n.dispatch(wr(i, s), { effects: r }), !0;
}
const Qx = (n) => b$(n, !1), kb = (n) => b$(n, !0);
function Wo(n, e, t) {
  let i = n.lineBlockAt(e.head), s = n.moveToLineBoundary(e, t);
  if (s.head == e.head && s.head != (t ? i.to : i.from) && (s = n.moveToLineBoundary(e, t, !1)), !t && s.head == i.from && i.length) {
    let r = /^\s*/.exec(n.state.sliceDoc(i.from, Math.min(i.from + 100, i.to)))[0].length;
    r && e.head != i.from + r && (s = J.cursor(i.from + r));
  }
  return s;
}
const fU = (n) => Is(n, (e) => Wo(n, e, !0)), dU = (n) => Is(n, (e) => Wo(n, e, !1)), pU = (n) => Is(n, (e) => Wo(n, e, !Gn(n))), gU = (n) => Is(n, (e) => Wo(n, e, Gn(n))), mU = (n) => Is(n, (e) => J.cursor(n.lineBlockAt(e.head).from, 1)), bU = (n) => Is(n, (e) => J.cursor(n.lineBlockAt(e.head).to, -1));
function vU(n, e, t) {
  let i = !1, s = Rc(n.selection, (r) => {
    let o = er(n, r.head, -1) || er(n, r.head, 1) || r.head > 0 && er(n, r.head - 1, 1) || r.head < n.doc.length && er(n, r.head + 1, -1);
    if (!o || !o.end)
      return r;
    i = !0;
    let l = o.start.from == r.head ? o.end.to : o.end.from;
    return t ? J.range(r.anchor, l) : J.cursor(l);
  });
  return i ? (e(wr(n, s)), !0) : !1;
}
const yU = ({ state: n, dispatch: e }) => vU(n, e, !1);
function os(n, e) {
  let t = Rc(n.state.selection, (i) => {
    let s = e(i);
    return J.range(i.anchor, s.head, s.goalColumn, s.bidiLevel || void 0);
  });
  return t.eq(n.state.selection) ? !1 : (n.dispatch(wr(n.state, t)), !0);
}
function v$(n, e) {
  return os(n, (t) => n.moveByChar(t, e));
}
const y$ = (n) => v$(n, !Gn(n)), O$ = (n) => v$(n, Gn(n));
function w$(n, e) {
  return os(n, (t) => n.moveByGroup(t, e));
}
const OU = (n) => w$(n, !Gn(n)), wU = (n) => w$(n, Gn(n)), xU = (n) => os(n, (e) => ug(n.state, e, !Gn(n))), SU = (n) => os(n, (e) => ug(n.state, e, Gn(n)));
function x$(n, e) {
  return os(n, (t) => n.moveVertically(t, e));
}
const S$ = (n) => x$(n, !1), C$ = (n) => x$(n, !0);
function k$(n, e) {
  return os(n, (t) => n.moveVertically(t, e, m$(n).height));
}
const Bx = (n) => k$(n, !1), jx = (n) => k$(n, !0), CU = (n) => os(n, (e) => Wo(n, e, !0)), kU = (n) => os(n, (e) => Wo(n, e, !1)), PU = (n) => os(n, (e) => Wo(n, e, !Gn(n))), AU = (n) => os(n, (e) => Wo(n, e, Gn(n))), EU = (n) => os(n, (e) => J.cursor(n.lineBlockAt(e.head).from)), $U = (n) => os(n, (e) => J.cursor(n.lineBlockAt(e.head).to)), zx = ({ state: n, dispatch: e }) => (e(wr(n, { anchor: 0 })), !0), Zx = ({ state: n, dispatch: e }) => (e(wr(n, { anchor: n.doc.length })), !0), Fx = ({ state: n, dispatch: e }) => (e(wr(n, { anchor: n.selection.main.anchor, head: 0 })), !0), Vx = ({ state: n, dispatch: e }) => (e(wr(n, { anchor: n.selection.main.anchor, head: n.doc.length })), !0), TU = ({ state: n, dispatch: e }) => (e(n.update({ selection: { anchor: 0, head: n.doc.length }, userEvent: "select" })), !0), _U = ({ state: n, dispatch: e }) => {
  let t = hg(n).map(({ from: i, to: s }) => J.range(i, Math.min(s + 1, n.doc.length)));
  return e(n.update({ selection: J.create(t), userEvent: "select" })), !0;
}, MU = ({ state: n, dispatch: e }) => {
  let t = Rc(n.selection, (i) => {
    var s;
    let r = mn(n).resolveStack(i.from, 1);
    for (let o = r; o; o = o.next) {
      let { node: l } = o;
      if ((l.from < i.from && l.to >= i.to || l.to > i.to && l.from <= i.from) && (!((s = l.parent) === null || s === void 0) && s.parent))
        return J.range(l.to, l.from);
    }
    return i;
  });
  return e(wr(n, t)), !0;
}, RU = ({ state: n, dispatch: e }) => {
  let t = n.selection, i = null;
  return t.ranges.length > 1 ? i = J.create([t.main]) : t.main.empty || (i = J.create([J.cursor(t.main.head)])), i ? (e(wr(n, i)), !0) : !1;
};
function Uh(n, e) {
  if (n.state.readOnly)
    return !1;
  let t = "delete.selection", { state: i } = n, s = i.changeByRange((r) => {
    let { from: o, to: l } = r;
    if (o == l) {
      let a = e(r);
      a < o ? (t = "delete.backward", a = If(n, a, !1)) : a > o && (t = "delete.forward", a = If(n, a, !0)), o = Math.min(o, a), l = Math.max(l, a);
    } else
      o = If(n, o, !1), l = If(n, l, !0);
    return o == l ? { range: r } : { changes: { from: o, to: l }, range: J.cursor(o, o < r.head ? -1 : 1) };
  });
  return s.changes.empty ? !1 : (n.dispatch(i.update(s, {
    scrollIntoView: !0,
    userEvent: t,
    effects: t == "delete.selection" ? Oe.announce.of(i.phrase("Selection deleted")) : void 0
  })), !0);
}
function If(n, e, t) {
  if (n instanceof Oe)
    for (let i of n.state.facet(Oe.atomicRanges).map((s) => s(n)))
      i.between(e, e, (s, r) => {
        s < e && r > e && (e = t ? r : s);
      });
  return e;
}
const P$ = (n, e) => Uh(n, (t) => {
  let i = t.from, { state: s } = n, r = s.doc.lineAt(i), o, l;
  if (!e && i > r.from && i < r.from + 200 && !/[^ \t]/.test(o = r.text.slice(0, i - r.from))) {
    if (o[o.length - 1] == "	")
      return i - 1;
    let a = Mc(o, s.tabSize), c = a % Kd(s) || Kd(s);
    for (let u = 0; u < c && o[o.length - 1 - u] == " "; u++)
      i--;
    l = i;
  } else
    l = Bn(r.text, i - r.from, e, e) + r.from, l == i && r.number != (e ? s.doc.lines : 1) ? l += e ? 1 : -1 : !e && /[\ufe00-\ufe0f]/.test(r.text.slice(l - r.from, i - r.from)) && (l = Bn(r.text, l - r.from, !1, !1) + r.from);
  return l;
}), Pb = (n) => P$(n, !1), A$ = (n) => P$(n, !0), E$ = (n, e) => Uh(n, (t) => {
  let i = t.head, { state: s } = n, r = s.doc.lineAt(i), o = s.charCategorizer(i);
  for (let l = null; ; ) {
    if (i == (e ? r.to : r.from)) {
      i == t.head && r.number != (e ? s.doc.lines : 1) && (i += e ? 1 : -1);
      break;
    }
    let a = Bn(r.text, i - r.from, e) + r.from, c = r.text.slice(Math.min(i, a) - r.from, Math.max(i, a) - r.from), u = o(c);
    if (l != null && u != l)
      break;
    (c != " " || i != t.head) && (l = u), i = a;
  }
  return i;
}), $$ = (n) => E$(n, !1), DU = (n) => E$(n, !0), LU = (n) => Uh(n, (e) => {
  let t = n.lineBlockAt(e.head).to;
  return e.head < t ? t : Math.min(n.state.doc.length, e.head + 1);
}), NU = (n) => Uh(n, (e) => {
  let t = n.moveToLineBoundary(e, !1).head;
  return e.head > t ? t : Math.max(0, e.head - 1);
}), IU = (n) => Uh(n, (e) => {
  let t = n.moveToLineBoundary(e, !0).head;
  return e.head < t ? t : Math.min(n.state.doc.length, e.head + 1);
}), QU = ({ state: n, dispatch: e }) => {
  if (n.readOnly)
    return !1;
  let t = n.changeByRange((i) => ({
    changes: { from: i.from, to: i.to, insert: ut.of(["", ""]) },
    range: J.cursor(i.from)
  }));
  return e(n.update(t, { scrollIntoView: !0, userEvent: "input" })), !0;
}, BU = ({ state: n, dispatch: e }) => {
  if (n.readOnly)
    return !1;
  let t = n.changeByRange((i) => {
    if (!i.empty || i.from == 0 || i.from == n.doc.length)
      return { range: i };
    let s = i.from, r = n.doc.lineAt(s), o = s == r.from ? s - 1 : Bn(r.text, s - r.from, !1) + r.from, l = s == r.to ? s + 1 : Bn(r.text, s - r.from, !0) + r.from;
    return {
      changes: { from: o, to: l, insert: n.doc.slice(s, l).append(n.doc.slice(o, s)) },
      range: J.cursor(l)
    };
  });
  return t.changes.empty ? !1 : (e(n.update(t, { scrollIntoView: !0, userEvent: "move.character" })), !0);
};
function hg(n) {
  let e = [], t = -1;
  for (let i of n.selection.ranges) {
    let s = n.doc.lineAt(i.from), r = n.doc.lineAt(i.to);
    if (!i.empty && i.to == r.from && (r = n.doc.lineAt(i.to - 1)), t >= s.number) {
      let o = e[e.length - 1];
      o.to = r.to, o.ranges.push(i);
    } else
      e.push({ from: s.from, to: r.to, ranges: [i] });
    t = r.number + 1;
  }
  return e;
}
function T$(n, e, t) {
  if (n.readOnly)
    return !1;
  let i = [], s = [];
  for (let r of hg(n)) {
    if (t ? r.to == n.doc.length : r.from == 0)
      continue;
    let o = n.doc.lineAt(t ? r.to + 1 : r.from - 1), l = o.length + 1;
    if (t) {
      i.push({ from: r.to, to: o.to }, { from: r.from, insert: o.text + n.lineBreak });
      for (let a of r.ranges)
        s.push(J.range(Math.min(n.doc.length, a.anchor + l), Math.min(n.doc.length, a.head + l)));
    } else {
      i.push({ from: o.from, to: r.from }, { from: r.to, insert: n.lineBreak + o.text });
      for (let a of r.ranges)
        s.push(J.range(a.anchor - l, a.head - l));
    }
  }
  return i.length ? (e(n.update({
    changes: i,
    scrollIntoView: !0,
    selection: J.create(s, n.selection.mainIndex),
    userEvent: "move.line"
  })), !0) : !1;
}
const jU = ({ state: n, dispatch: e }) => T$(n, e, !1), zU = ({ state: n, dispatch: e }) => T$(n, e, !0);
function _$(n, e, t) {
  if (n.readOnly)
    return !1;
  let i = [];
  for (let s of hg(n))
    t ? i.push({ from: s.from, insert: n.doc.slice(s.from, s.to) + n.lineBreak }) : i.push({ from: s.to, insert: n.lineBreak + n.doc.slice(s.from, s.to) });
  return e(n.update({ changes: i, scrollIntoView: !0, userEvent: "input.copyline" })), !0;
}
const ZU = ({ state: n, dispatch: e }) => _$(n, e, !1), FU = ({ state: n, dispatch: e }) => _$(n, e, !0), VU = (n) => {
  if (n.state.readOnly)
    return !1;
  let { state: e } = n, t = e.changes(hg(e).map(({ from: s, to: r }) => (s > 0 ? s-- : r < e.doc.length && r++, { from: s, to: r }))), i = Rc(e.selection, (s) => n.moveVertically(s, !0)).map(t);
  return n.dispatch({ changes: t, selection: i, scrollIntoView: !0, userEvent: "delete.line" }), !0;
};
function qU(n, e) {
  if (/\(\)|\[\]|\{\}/.test(n.sliceDoc(e - 1, e + 1)))
    return { from: e, to: e };
  let t = mn(n).resolveInner(e), i = t.childBefore(e), s = t.childAfter(e), r;
  return i && s && i.to <= e && s.from >= e && (r = i.type.prop(Ge.closedBy)) && r.indexOf(s.name) > -1 && n.doc.lineAt(i.to).from == n.doc.lineAt(s.from).from && !/\S/.test(n.sliceDoc(i.to, s.from)) ? { from: i.to, to: s.from } : null;
}
const WU = /* @__PURE__ */ M$(!1), XU = /* @__PURE__ */ M$(!0);
function M$(n) {
  return ({ state: e, dispatch: t }) => {
    if (e.readOnly)
      return !1;
    let i = e.changeByRange((s) => {
      let { from: r, to: o } = s, l = e.doc.lineAt(r), a = !n && r == o && qU(e, r);
      n && (r = o = (o <= l.to ? l : e.doc.lineAt(o)).to);
      let c = new rg(e, { simulateBreak: r, simulateDoubleBreak: !!a }), u = my(c, r);
      for (u == null && (u = Mc(/^\s*/.exec(e.doc.lineAt(r).text)[0], e.tabSize)); o < l.to && /\s/.test(l.text[o - l.from]); )
        o++;
      a ? { from: r, to: o } = a : r > l.from && r < l.from + 100 && !/\S/.test(l.text.slice(0, r)) && (r = l.from);
      let h = ["", lh(e, u)];
      return a && h.push(lh(e, c.lineIndent(l.from, -1))), {
        changes: { from: r, to: o, insert: ut.of(h) },
        range: J.cursor(r + 1 + h[1].length)
      };
    });
    return t(e.update(i, { scrollIntoView: !0, userEvent: "input" })), !0;
  };
}
function Sy(n, e) {
  let t = -1;
  return n.changeByRange((i) => {
    let s = [];
    for (let o = i.from; o <= i.to; ) {
      let l = n.doc.lineAt(o);
      l.number > t && (i.empty || i.to > l.from) && (e(l, s, i), t = l.number), o = l.to + 1;
    }
    let r = n.changes(s);
    return {
      changes: s,
      range: J.range(r.mapPos(i.anchor, 1), r.mapPos(i.head, 1))
    };
  });
}
const YU = ({ state: n, dispatch: e }) => {
  if (n.readOnly)
    return !1;
  let t = /* @__PURE__ */ Object.create(null), i = new rg(n, { overrideIndentation: (r) => {
    let o = t[r];
    return o ?? -1;
  } }), s = Sy(n, (r, o, l) => {
    let a = my(i, r.from);
    if (a == null)
      return;
    /\S/.test(r.text) || (a = 0);
    let c = /^\s*/.exec(r.text)[0], u = lh(n, a);
    (c != u || l.from < r.from + c.length) && (t[r.from] = a, o.push({ from: r.from, to: r.from + c.length, insert: u }));
  });
  return s.changes.empty || e(n.update(s, { userEvent: "indent" })), !0;
}, HU = ({ state: n, dispatch: e }) => n.readOnly ? !1 : (e(n.update(Sy(n, (t, i) => {
  i.push({ from: t.from, insert: n.facet(sg) });
}), { userEvent: "input.indent" })), !0), GU = ({ state: n, dispatch: e }) => n.readOnly ? !1 : (e(n.update(Sy(n, (t, i) => {
  let s = /^\s*/.exec(t.text)[0];
  if (!s)
    return;
  let r = Mc(s, n.tabSize), o = 0, l = lh(n, Math.max(0, r - Kd(n)));
  for (; o < s.length && o < l.length && s.charCodeAt(o) == l.charCodeAt(o); )
    o++;
  i.push({ from: t.from + o, to: t.from + s.length, insert: l.slice(o) });
}), { userEvent: "delete.dedent" })), !0), UU = [
  { key: "Ctrl-b", run: u$, shift: y$, preventDefault: !0 },
  { key: "Ctrl-f", run: h$, shift: O$ },
  { key: "Ctrl-p", run: p$, shift: S$ },
  { key: "Ctrl-n", run: g$, shift: C$ },
  { key: "Ctrl-a", run: mU, shift: EU },
  { key: "Ctrl-e", run: bU, shift: $U },
  { key: "Ctrl-d", run: A$ },
  { key: "Ctrl-h", run: Pb },
  { key: "Ctrl-k", run: LU },
  { key: "Ctrl-Alt-h", run: $$ },
  { key: "Ctrl-o", run: QU },
  { key: "Ctrl-t", run: BU },
  { key: "Ctrl-v", run: kb }
], KU = /* @__PURE__ */ [
  { key: "ArrowLeft", run: u$, shift: y$, preventDefault: !0 },
  { key: "Mod-ArrowLeft", mac: "Alt-ArrowLeft", run: lU, shift: OU, preventDefault: !0 },
  { mac: "Cmd-ArrowLeft", run: pU, shift: PU, preventDefault: !0 },
  { key: "ArrowRight", run: h$, shift: O$, preventDefault: !0 },
  { key: "Mod-ArrowRight", mac: "Alt-ArrowRight", run: aU, shift: wU, preventDefault: !0 },
  { mac: "Cmd-ArrowRight", run: gU, shift: AU, preventDefault: !0 },
  { key: "ArrowUp", run: p$, shift: S$, preventDefault: !0 },
  { mac: "Cmd-ArrowUp", run: zx, shift: Fx },
  { mac: "Ctrl-ArrowUp", run: Qx, shift: Bx },
  { key: "ArrowDown", run: g$, shift: C$, preventDefault: !0 },
  { mac: "Cmd-ArrowDown", run: Zx, shift: Vx },
  { mac: "Ctrl-ArrowDown", run: kb, shift: jx },
  { key: "PageUp", run: Qx, shift: Bx },
  { key: "PageDown", run: kb, shift: jx },
  { key: "Home", run: dU, shift: kU, preventDefault: !0 },
  { key: "Mod-Home", run: zx, shift: Fx },
  { key: "End", run: fU, shift: CU, preventDefault: !0 },
  { key: "Mod-End", run: Zx, shift: Vx },
  { key: "Enter", run: WU },
  { key: "Mod-a", run: TU },
  { key: "Backspace", run: Pb, shift: Pb },
  { key: "Delete", run: A$ },
  { key: "Mod-Backspace", mac: "Alt-Backspace", run: $$ },
  { key: "Mod-Delete", mac: "Alt-Delete", run: DU },
  { mac: "Mod-Backspace", run: NU },
  { mac: "Mod-Delete", run: IU }
].concat(/* @__PURE__ */ UU.map((n) => ({ mac: n.key, run: n.run, shift: n.shift }))), JU = /* @__PURE__ */ [
  { key: "Alt-ArrowLeft", mac: "Ctrl-ArrowLeft", run: uU, shift: xU },
  { key: "Alt-ArrowRight", mac: "Ctrl-ArrowRight", run: hU, shift: SU },
  { key: "Alt-ArrowUp", run: jU },
  { key: "Shift-Alt-ArrowUp", run: ZU },
  { key: "Alt-ArrowDown", run: zU },
  { key: "Shift-Alt-ArrowDown", run: FU },
  { key: "Escape", run: RU },
  { key: "Mod-Enter", run: XU },
  { key: "Alt-l", mac: "Ctrl-l", run: _U },
  { key: "Mod-i", run: MU, preventDefault: !0 },
  { key: "Mod-[", run: GU },
  { key: "Mod-]", run: HU },
  { key: "Mod-Alt-\\", run: YU },
  { key: "Shift-Mod-k", run: VU },
  { key: "Shift-Mod-\\", run: yU },
  { key: "Mod-/", run: ZG },
  { key: "Alt-A", run: VG }
].concat(KU);
function Ct() {
  var n = arguments[0];
  typeof n == "string" && (n = document.createElement(n));
  var e = 1, t = arguments[1];
  if (t && typeof t == "object" && t.nodeType == null && !Array.isArray(t)) {
    for (var i in t)
      if (Object.prototype.hasOwnProperty.call(t, i)) {
        var s = t[i];
        typeof s == "string" ? n.setAttribute(i, s) : s != null && (n[i] = s);
      }
    e++;
  }
  for (; e < arguments.length; e++)
    R$(n, arguments[e]);
  return n;
}
function R$(n, e) {
  if (typeof e == "string")
    n.appendChild(document.createTextNode(e));
  else if (e != null)
    if (e.nodeType != null)
      n.appendChild(e);
    else if (Array.isArray(e))
      for (var t = 0; t < e.length; t++)
        R$(n, e[t]);
    else
      throw new RangeError("Unsupported child node: " + e);
}
const qx = typeof String.prototype.normalize == "function" ? (n) => n.normalize("NFKD") : (n) => n;
class tc {
  /**
  Create a text cursor. The query is the search string, `from` to
  `to` provides the region to search.
  
  When `normalize` is given, it will be called, on both the query
  string and the content it is matched against, before comparing.
  You can, for example, create a case-insensitive search by
  passing `s => s.toLowerCase()`.
  
  Text is always normalized with
  [`.normalize("NFKD")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)
  (when supported).
  */
  constructor(e, t, i = 0, s = e.length, r, o) {
    this.test = o, this.value = { from: 0, to: 0 }, this.done = !1, this.matches = [], this.buffer = "", this.bufferPos = 0, this.iter = e.iterRange(i, s), this.bufferStart = i, this.normalize = r ? (l) => r(qx(l)) : qx, this.query = this.normalize(t);
  }
  peek() {
    if (this.bufferPos == this.buffer.length) {
      if (this.bufferStart += this.buffer.length, this.iter.next(), this.iter.done)
        return -1;
      this.bufferPos = 0, this.buffer = this.iter.value;
    }
    return Mn(this.buffer, this.bufferPos);
  }
  /**
  Look for the next match. Updates the iterator's
  [`value`](https://codemirror.net/6/docs/ref/#search.SearchCursor.value) and
  [`done`](https://codemirror.net/6/docs/ref/#search.SearchCursor.done) properties. Should be called
  at least once before using the cursor.
  */
  next() {
    for (; this.matches.length; )
      this.matches.pop();
    return this.nextOverlapping();
  }
  /**
  The `next` method will ignore matches that partially overlap a
  previous match. This method behaves like `next`, but includes
  such matches.
  */
  nextOverlapping() {
    for (; ; ) {
      let e = this.peek();
      if (e < 0)
        return this.done = !0, this;
      let t = Uv(e), i = this.bufferStart + this.bufferPos;
      this.bufferPos += Xi(e);
      let s = this.normalize(t);
      for (let r = 0, o = i; ; r++) {
        let l = s.charCodeAt(r), a = this.match(l, o, this.bufferPos + this.bufferStart);
        if (r == s.length - 1) {
          if (a)
            return this.value = a, this;
          break;
        }
        o == i && r < t.length && t.charCodeAt(r) == l && o++;
      }
    }
  }
  match(e, t, i) {
    let s = null;
    for (let r = 0; r < this.matches.length; r += 2) {
      let o = this.matches[r], l = !1;
      this.query.charCodeAt(o) == e && (o == this.query.length - 1 ? s = { from: this.matches[r + 1], to: i } : (this.matches[r]++, l = !0)), l || (this.matches.splice(r, 2), r -= 2);
    }
    return this.query.charCodeAt(0) == e && (this.query.length == 1 ? s = { from: t, to: i } : this.matches.push(1, t)), s && this.test && !this.test(s.from, s.to, this.buffer, this.bufferStart) && (s = null), s;
  }
}
typeof Symbol < "u" && (tc.prototype[Symbol.iterator] = function() {
  return this;
});
const D$ = { from: -1, to: -1, match: /* @__PURE__ */ /.*/.exec("") }, Cy = "gm" + (/x/.unicode == null ? "" : "u");
class L$ {
  /**
  Create a cursor that will search the given range in the given
  document. `query` should be the raw pattern (as you'd pass it to
  `new RegExp`).
  */
  constructor(e, t, i, s = 0, r = e.length) {
    if (this.text = e, this.to = r, this.curLine = "", this.done = !1, this.value = D$, /\\[sWDnr]|\n|\r|\[\^/.test(t))
      return new N$(e, t, i, s, r);
    this.re = new RegExp(t, Cy + (i != null && i.ignoreCase ? "i" : "")), this.test = i == null ? void 0 : i.test, this.iter = e.iter();
    let o = e.lineAt(s);
    this.curLineStart = o.from, this.matchPos = np(e, s), this.getLine(this.curLineStart);
  }
  getLine(e) {
    this.iter.next(e), this.iter.lineBreak ? this.curLine = "" : (this.curLine = this.iter.value, this.curLineStart + this.curLine.length > this.to && (this.curLine = this.curLine.slice(0, this.to - this.curLineStart)), this.iter.next());
  }
  nextLine() {
    this.curLineStart = this.curLineStart + this.curLine.length + 1, this.curLineStart > this.to ? this.curLine = "" : this.getLine(0);
  }
  /**
  Move to the next match, if there is one.
  */
  next() {
    for (let e = this.matchPos - this.curLineStart; ; ) {
      this.re.lastIndex = e;
      let t = this.matchPos <= this.to && this.re.exec(this.curLine);
      if (t) {
        let i = this.curLineStart + t.index, s = i + t[0].length;
        if (this.matchPos = np(this.text, s + (i == s ? 1 : 0)), i == this.curLineStart + this.curLine.length && this.nextLine(), (i < s || i > this.value.to) && (!this.test || this.test(i, s, t)))
          return this.value = { from: i, to: s, match: t }, this;
        e = this.matchPos - this.curLineStart;
      } else if (this.curLineStart + this.curLine.length < this.to)
        this.nextLine(), e = 0;
      else
        return this.done = !0, this;
    }
  }
}
const Cm = /* @__PURE__ */ new WeakMap();
class Aa {
  constructor(e, t) {
    this.from = e, this.text = t;
  }
  get to() {
    return this.from + this.text.length;
  }
  static get(e, t, i) {
    let s = Cm.get(e);
    if (!s || s.from >= i || s.to <= t) {
      let l = new Aa(t, e.sliceString(t, i));
      return Cm.set(e, l), l;
    }
    if (s.from == t && s.to == i)
      return s;
    let { text: r, from: o } = s;
    return o > t && (r = e.sliceString(t, o) + r, o = t), s.to < i && (r += e.sliceString(s.to, i)), Cm.set(e, new Aa(o, r)), new Aa(t, r.slice(t - o, i - o));
  }
}
class N$ {
  constructor(e, t, i, s, r) {
    this.text = e, this.to = r, this.done = !1, this.value = D$, this.matchPos = np(e, s), this.re = new RegExp(t, Cy + (i != null && i.ignoreCase ? "i" : "")), this.test = i == null ? void 0 : i.test, this.flat = Aa.get(e, s, this.chunkEnd(
      s + 5e3
      /* Chunk.Base */
    ));
  }
  chunkEnd(e) {
    return e >= this.to ? this.to : this.text.lineAt(e).to;
  }
  next() {
    for (; ; ) {
      let e = this.re.lastIndex = this.matchPos - this.flat.from, t = this.re.exec(this.flat.text);
      if (t && !t[0] && t.index == e && (this.re.lastIndex = e + 1, t = this.re.exec(this.flat.text)), t) {
        let i = this.flat.from + t.index, s = i + t[0].length;
        if ((this.flat.to >= this.to || t.index + t[0].length <= this.flat.text.length - 10) && (!this.test || this.test(i, s, t)))
          return this.value = { from: i, to: s, match: t }, this.matchPos = np(this.text, s + (i == s ? 1 : 0)), this;
      }
      if (this.flat.to == this.to)
        return this.done = !0, this;
      this.flat = Aa.get(this.text, this.flat.from, this.chunkEnd(this.flat.from + this.flat.text.length * 2));
    }
  }
}
typeof Symbol < "u" && (L$.prototype[Symbol.iterator] = N$.prototype[Symbol.iterator] = function() {
  return this;
});
function eK(n) {
  try {
    return new RegExp(n, Cy), !0;
  } catch {
    return !1;
  }
}
function np(n, e) {
  if (e >= n.length)
    return e;
  let t = n.lineAt(e), i;
  for (; e < t.to && (i = t.text.charCodeAt(e - t.from)) >= 56320 && i < 57344; )
    e++;
  return e;
}
function Ab(n) {
  let e = String(n.state.doc.lineAt(n.state.selection.main.head).number), t = Ct("input", { class: "cm-textfield", name: "line", value: e }), i = Ct("form", {
    class: "cm-gotoLine",
    onkeydown: (r) => {
      r.keyCode == 27 ? (r.preventDefault(), n.dispatch({ effects: ip.of(!1) }), n.focus()) : r.keyCode == 13 && (r.preventDefault(), s());
    },
    onsubmit: (r) => {
      r.preventDefault(), s();
    }
  }, Ct("label", n.state.phrase("Go to line"), ": ", t), " ", Ct("button", { class: "cm-button", type: "submit" }, n.state.phrase("go")));
  function s() {
    let r = /^([+-])?(\d+)?(:\d+)?(%)?$/.exec(t.value);
    if (!r)
      return;
    let { state: o } = n, l = o.doc.lineAt(o.selection.main.head), [, a, c, u, h] = r, f = u ? +u.slice(1) : 0, d = c ? +c : l.number;
    if (c && h) {
      let m = d / 100;
      a && (m = m * (a == "-" ? -1 : 1) + l.number / o.doc.lines), d = Math.round(o.doc.lines * m);
    } else
      c && a && (d = d * (a == "-" ? -1 : 1) + l.number);
    let p = o.doc.line(Math.max(1, Math.min(o.doc.lines, d))), g = J.cursor(p.from + Math.max(0, Math.min(f, p.length)));
    n.dispatch({
      effects: [ip.of(!1), Oe.scrollIntoView(g.from, { y: "center" })],
      selection: g
    }), n.focus();
  }
  return { dom: i };
}
const ip = /* @__PURE__ */ Ve.define(), Wx = /* @__PURE__ */ Pn.define({
  create() {
    return !0;
  },
  update(n, e) {
    for (let t of e.effects)
      t.is(ip) && (n = t.value);
    return n;
  },
  provide: (n) => sh.from(n, (e) => e ? Ab : null)
}), tK = (n) => {
  let e = ih(n, Ab);
  if (!e) {
    let t = [ip.of(!0)];
    n.state.field(Wx, !1) == null && t.push(Ve.appendConfig.of([Wx, nK])), n.dispatch({ effects: t }), e = ih(n, Ab);
  }
  return e && e.dom.querySelector("input").select(), !0;
}, nK = /* @__PURE__ */ Oe.baseTheme({
  ".cm-panel.cm-gotoLine": {
    padding: "2px 6px 4px",
    "& label": { fontSize: "80%" }
  }
}), iK = {
  highlightWordAroundCursor: !1,
  minSelectionLength: 1,
  maxMatches: 100,
  wholeWords: !1
}, I$ = /* @__PURE__ */ we.define({
  combine(n) {
    return Or(n, iK, {
      highlightWordAroundCursor: (e, t) => e || t,
      minSelectionLength: Math.min,
      maxMatches: Math.min
    });
  }
});
function sK(n) {
  let e = [cK, aK];
  return n && e.push(I$.of(n)), e;
}
const rK = /* @__PURE__ */ Te.mark({ class: "cm-selectionMatch" }), oK = /* @__PURE__ */ Te.mark({ class: "cm-selectionMatch cm-selectionMatch-main" });
function Xx(n, e, t, i) {
  return (t == 0 || n(e.sliceDoc(t - 1, t)) != Nt.Word) && (i == e.doc.length || n(e.sliceDoc(i, i + 1)) != Nt.Word);
}
function lK(n, e, t, i) {
  return n(e.sliceDoc(t, t + 1)) == Nt.Word && n(e.sliceDoc(i - 1, i)) == Nt.Word;
}
const aK = /* @__PURE__ */ on.fromClass(class {
  constructor(n) {
    this.decorations = this.getDeco(n);
  }
  update(n) {
    (n.selectionSet || n.docChanged || n.viewportChanged) && (this.decorations = this.getDeco(n.view));
  }
  getDeco(n) {
    let e = n.state.facet(I$), { state: t } = n, i = t.selection;
    if (i.ranges.length > 1)
      return Te.none;
    let s = i.main, r, o = null;
    if (s.empty) {
      if (!e.highlightWordAroundCursor)
        return Te.none;
      let a = t.wordAt(s.head);
      if (!a)
        return Te.none;
      o = t.charCategorizer(s.head), r = t.sliceDoc(a.from, a.to);
    } else {
      let a = s.to - s.from;
      if (a < e.minSelectionLength || a > 200)
        return Te.none;
      if (e.wholeWords) {
        if (r = t.sliceDoc(s.from, s.to), o = t.charCategorizer(s.head), !(Xx(o, t, s.from, s.to) && lK(o, t, s.from, s.to)))
          return Te.none;
      } else if (r = t.sliceDoc(s.from, s.to), !r)
        return Te.none;
    }
    let l = [];
    for (let a of n.visibleRanges) {
      let c = new tc(t.doc, r, a.from, a.to);
      for (; !c.next().done; ) {
        let { from: u, to: h } = c.value;
        if ((!o || Xx(o, t, u, h)) && (s.empty && u <= s.from && h >= s.to ? l.push(oK.range(u, h)) : (u >= s.to || h <= s.from) && l.push(rK.range(u, h)), l.length > e.maxMatches))
          return Te.none;
      }
    }
    return Te.set(l);
  }
}, {
  decorations: (n) => n.decorations
}), cK = /* @__PURE__ */ Oe.baseTheme({
  ".cm-selectionMatch": { backgroundColor: "#99ff7780" },
  ".cm-searchMatch .cm-selectionMatch": { backgroundColor: "transparent" }
}), uK = ({ state: n, dispatch: e }) => {
  let { selection: t } = n, i = J.create(t.ranges.map((s) => n.wordAt(s.head) || J.cursor(s.head)), t.mainIndex);
  return i.eq(t) ? !1 : (e(n.update({ selection: i })), !0);
};
function hK(n, e) {
  let { main: t, ranges: i } = n.selection, s = n.wordAt(t.head), r = s && s.from == t.from && s.to == t.to;
  for (let o = !1, l = new tc(n.doc, e, i[i.length - 1].to); ; )
    if (l.next(), l.done) {
      if (o)
        return null;
      l = new tc(n.doc, e, 0, Math.max(0, i[i.length - 1].from - 1)), o = !0;
    } else {
      if (o && i.some((a) => a.from == l.value.from))
        continue;
      if (r) {
        let a = n.wordAt(l.value.from);
        if (!a || a.from != l.value.from || a.to != l.value.to)
          continue;
      }
      return l.value;
    }
}
const fK = ({ state: n, dispatch: e }) => {
  let { ranges: t } = n.selection;
  if (t.some((r) => r.from === r.to))
    return uK({ state: n, dispatch: e });
  let i = n.sliceDoc(t[0].from, t[0].to);
  if (n.selection.ranges.some((r) => n.sliceDoc(r.from, r.to) != i))
    return !1;
  let s = hK(n, i);
  return s ? (e(n.update({
    selection: n.selection.addRange(J.range(s.from, s.to), !1),
    effects: Oe.scrollIntoView(s.to)
  })), !0) : !1;
}, Dc = /* @__PURE__ */ we.define({
  combine(n) {
    return Or(n, {
      top: !1,
      caseSensitive: !1,
      literal: !1,
      regexp: !1,
      wholeWord: !1,
      createPanel: (e) => new CK(e),
      scrollToMatch: (e) => Oe.scrollIntoView(e)
    });
  }
});
class Q$ {
  /**
  Create a query object.
  */
  constructor(e) {
    this.search = e.search, this.caseSensitive = !!e.caseSensitive, this.literal = !!e.literal, this.regexp = !!e.regexp, this.replace = e.replace || "", this.valid = !!this.search && (!this.regexp || eK(this.search)), this.unquoted = this.unquote(this.search), this.wholeWord = !!e.wholeWord;
  }
  /**
  @internal
  */
  unquote(e) {
    return this.literal ? e : e.replace(/\\([nrt\\])/g, (t, i) => i == "n" ? `
` : i == "r" ? "\r" : i == "t" ? "	" : "\\");
  }
  /**
  Compare this query to another query.
  */
  eq(e) {
    return this.search == e.search && this.replace == e.replace && this.caseSensitive == e.caseSensitive && this.regexp == e.regexp && this.wholeWord == e.wholeWord;
  }
  /**
  @internal
  */
  create() {
    return this.regexp ? new mK(this) : new pK(this);
  }
  /**
  Get a search cursor for this query, searching through the given
  range in the given state.
  */
  getCursor(e, t = 0, i) {
    let s = e.doc ? e : at.create({ doc: e });
    return i == null && (i = s.doc.length), this.regexp ? pa(this, s, t, i) : da(this, s, t, i);
  }
}
class B$ {
  constructor(e) {
    this.spec = e;
  }
}
function da(n, e, t, i) {
  return new tc(e.doc, n.unquoted, t, i, n.caseSensitive ? void 0 : (s) => s.toLowerCase(), n.wholeWord ? dK(e.doc, e.charCategorizer(e.selection.main.head)) : void 0);
}
function dK(n, e) {
  return (t, i, s, r) => ((r > t || r + s.length < i) && (r = Math.max(0, t - 2), s = n.sliceString(r, Math.min(n.length, i + 2))), (e(sp(s, t - r)) != Nt.Word || e(rp(s, t - r)) != Nt.Word) && (e(rp(s, i - r)) != Nt.Word || e(sp(s, i - r)) != Nt.Word));
}
class pK extends B$ {
  constructor(e) {
    super(e);
  }
  nextMatch(e, t, i) {
    let s = da(this.spec, e, i, e.doc.length).nextOverlapping();
    return s.done && (s = da(this.spec, e, 0, t).nextOverlapping()), s.done ? null : s.value;
  }
  // Searching in reverse is, rather than implementing an inverted search
  // cursor, done by scanning chunk after chunk forward.
  prevMatchInRange(e, t, i) {
    for (let s = i; ; ) {
      let r = Math.max(t, s - 1e4 - this.spec.unquoted.length), o = da(this.spec, e, r, s), l = null;
      for (; !o.nextOverlapping().done; )
        l = o.value;
      if (l)
        return l;
      if (r == t)
        return null;
      s -= 1e4;
    }
  }
  prevMatch(e, t, i) {
    return this.prevMatchInRange(e, 0, t) || this.prevMatchInRange(e, i, e.doc.length);
  }
  getReplacement(e) {
    return this.spec.unquote(this.spec.replace);
  }
  matchAll(e, t) {
    let i = da(this.spec, e, 0, e.doc.length), s = [];
    for (; !i.next().done; ) {
      if (s.length >= t)
        return null;
      s.push(i.value);
    }
    return s;
  }
  highlight(e, t, i, s) {
    let r = da(this.spec, e, Math.max(0, t - this.spec.unquoted.length), Math.min(i + this.spec.unquoted.length, e.doc.length));
    for (; !r.next().done; )
      s(r.value.from, r.value.to);
  }
}
function pa(n, e, t, i) {
  return new L$(e.doc, n.search, {
    ignoreCase: !n.caseSensitive,
    test: n.wholeWord ? gK(e.charCategorizer(e.selection.main.head)) : void 0
  }, t, i);
}
function sp(n, e) {
  return n.slice(Bn(n, e, !1), e);
}
function rp(n, e) {
  return n.slice(e, Bn(n, e));
}
function gK(n) {
  return (e, t, i) => !i[0].length || (n(sp(i.input, i.index)) != Nt.Word || n(rp(i.input, i.index)) != Nt.Word) && (n(rp(i.input, i.index + i[0].length)) != Nt.Word || n(sp(i.input, i.index + i[0].length)) != Nt.Word);
}
class mK extends B$ {
  nextMatch(e, t, i) {
    let s = pa(this.spec, e, i, e.doc.length).next();
    return s.done && (s = pa(this.spec, e, 0, t).next()), s.done ? null : s.value;
  }
  prevMatchInRange(e, t, i) {
    for (let s = 1; ; s++) {
      let r = Math.max(
        t,
        i - s * 1e4
        /* FindPrev.ChunkSize */
      ), o = pa(this.spec, e, r, i), l = null;
      for (; !o.next().done; )
        l = o.value;
      if (l && (r == t || l.from > r + 10))
        return l;
      if (r == t)
        return null;
    }
  }
  prevMatch(e, t, i) {
    return this.prevMatchInRange(e, 0, t) || this.prevMatchInRange(e, i, e.doc.length);
  }
  getReplacement(e) {
    return this.spec.unquote(this.spec.replace).replace(/\$([$&\d+])/g, (t, i) => i == "$" ? "$" : i == "&" ? e.match[0] : i != "0" && +i < e.match.length ? e.match[i] : t);
  }
  matchAll(e, t) {
    let i = pa(this.spec, e, 0, e.doc.length), s = [];
    for (; !i.next().done; ) {
      if (s.length >= t)
        return null;
      s.push(i.value);
    }
    return s;
  }
  highlight(e, t, i, s) {
    let r = pa(this.spec, e, Math.max(
      0,
      t - 250
      /* RegExp.HighlightMargin */
    ), Math.min(i + 250, e.doc.length));
    for (; !r.next().done; )
      s(r.value.from, r.value.to);
  }
}
const ah = /* @__PURE__ */ Ve.define(), ky = /* @__PURE__ */ Ve.define(), ko = /* @__PURE__ */ Pn.define({
  create(n) {
    return new km(Eb(n).create(), null);
  },
  update(n, e) {
    for (let t of e.effects)
      t.is(ah) ? n = new km(t.value.create(), n.panel) : t.is(ky) && (n = new km(n.query, t.value ? Py : null));
    return n;
  },
  provide: (n) => sh.from(n, (e) => e.panel)
});
class km {
  constructor(e, t) {
    this.query = e, this.panel = t;
  }
}
const bK = /* @__PURE__ */ Te.mark({ class: "cm-searchMatch" }), vK = /* @__PURE__ */ Te.mark({ class: "cm-searchMatch cm-searchMatch-selected" }), yK = /* @__PURE__ */ on.fromClass(class {
  constructor(n) {
    this.view = n, this.decorations = this.highlight(n.state.field(ko));
  }
  update(n) {
    let e = n.state.field(ko);
    (e != n.startState.field(ko) || n.docChanged || n.selectionSet || n.viewportChanged) && (this.decorations = this.highlight(e));
  }
  highlight({ query: n, panel: e }) {
    if (!e || !n.spec.valid)
      return Te.none;
    let { view: t } = this, i = new Eo();
    for (let s = 0, r = t.visibleRanges, o = r.length; s < o; s++) {
      let { from: l, to: a } = r[s];
      for (; s < o - 1 && a > r[s + 1].from - 2 * 250; )
        a = r[++s].to;
      n.highlight(t.state, l, a, (c, u) => {
        let h = t.state.selection.ranges.some((f) => f.from == c && f.to == u);
        i.add(c, u, h ? vK : bK);
      });
    }
    return i.finish();
  }
}, {
  decorations: (n) => n.decorations
});
function Kh(n) {
  return (e) => {
    let t = e.state.field(ko, !1);
    return t && t.query.spec.valid ? n(e, t) : Z$(e);
  };
}
const op = /* @__PURE__ */ Kh((n, { query: e }) => {
  let { to: t } = n.state.selection.main, i = e.nextMatch(n.state, t, t);
  if (!i)
    return !1;
  let s = J.single(i.from, i.to), r = n.state.facet(Dc);
  return n.dispatch({
    selection: s,
    effects: [Ay(n, i), r.scrollToMatch(s.main, n)],
    userEvent: "select.search"
  }), z$(n), !0;
}), lp = /* @__PURE__ */ Kh((n, { query: e }) => {
  let { state: t } = n, { from: i } = t.selection.main, s = e.prevMatch(t, i, i);
  if (!s)
    return !1;
  let r = J.single(s.from, s.to), o = n.state.facet(Dc);
  return n.dispatch({
    selection: r,
    effects: [Ay(n, s), o.scrollToMatch(r.main, n)],
    userEvent: "select.search"
  }), z$(n), !0;
}), OK = /* @__PURE__ */ Kh((n, { query: e }) => {
  let t = e.matchAll(n.state, 1e3);
  return !t || !t.length ? !1 : (n.dispatch({
    selection: J.create(t.map((i) => J.range(i.from, i.to))),
    userEvent: "select.search.matches"
  }), !0);
}), wK = ({ state: n, dispatch: e }) => {
  let t = n.selection;
  if (t.ranges.length > 1 || t.main.empty)
    return !1;
  let { from: i, to: s } = t.main, r = [], o = 0;
  for (let l = new tc(n.doc, n.sliceDoc(i, s)); !l.next().done; ) {
    if (r.length > 1e3)
      return !1;
    l.value.from == i && (o = r.length), r.push(J.range(l.value.from, l.value.to));
  }
  return e(n.update({
    selection: J.create(r, o),
    userEvent: "select.search.matches"
  })), !0;
}, Yx = /* @__PURE__ */ Kh((n, { query: e }) => {
  let { state: t } = n, { from: i, to: s } = t.selection.main;
  if (t.readOnly)
    return !1;
  let r = e.nextMatch(t, i, i);
  if (!r)
    return !1;
  let o = [], l, a, c = [];
  if (r.from == i && r.to == s && (a = t.toText(e.getReplacement(r)), o.push({ from: r.from, to: r.to, insert: a }), r = e.nextMatch(t, r.from, r.to), c.push(Oe.announce.of(t.phrase("replaced match on line $", t.doc.lineAt(i).number) + "."))), r) {
    let u = o.length == 0 || o[0].from >= r.to ? 0 : r.to - r.from - a.length;
    l = J.single(r.from - u, r.to - u), c.push(Ay(n, r)), c.push(t.facet(Dc).scrollToMatch(l.main, n));
  }
  return n.dispatch({
    changes: o,
    selection: l,
    effects: c,
    userEvent: "input.replace"
  }), !0;
}), xK = /* @__PURE__ */ Kh((n, { query: e }) => {
  if (n.state.readOnly)
    return !1;
  let t = e.matchAll(n.state, 1e9).map((s) => {
    let { from: r, to: o } = s;
    return { from: r, to: o, insert: e.getReplacement(s) };
  });
  if (!t.length)
    return !1;
  let i = n.state.phrase("replaced $ matches", t.length) + ".";
  return n.dispatch({
    changes: t,
    effects: Oe.announce.of(i),
    userEvent: "input.replace.all"
  }), !0;
});
function Py(n) {
  return n.state.facet(Dc).createPanel(n);
}
function Eb(n, e) {
  var t, i, s, r, o;
  let l = n.selection.main, a = l.empty || l.to > l.from + 100 ? "" : n.sliceDoc(l.from, l.to);
  if (e && !a)
    return e;
  let c = n.facet(Dc);
  return new Q$({
    search: ((t = e == null ? void 0 : e.literal) !== null && t !== void 0 ? t : c.literal) ? a : a.replace(/\n/g, "\\n"),
    caseSensitive: (i = e == null ? void 0 : e.caseSensitive) !== null && i !== void 0 ? i : c.caseSensitive,
    literal: (s = e == null ? void 0 : e.literal) !== null && s !== void 0 ? s : c.literal,
    regexp: (r = e == null ? void 0 : e.regexp) !== null && r !== void 0 ? r : c.regexp,
    wholeWord: (o = e == null ? void 0 : e.wholeWord) !== null && o !== void 0 ? o : c.wholeWord
  });
}
function j$(n) {
  let e = ih(n, Py);
  return e && e.dom.querySelector("[main-field]");
}
function z$(n) {
  let e = j$(n);
  e && e == n.root.activeElement && e.select();
}
const Z$ = (n) => {
  let e = n.state.field(ko, !1);
  if (e && e.panel) {
    let t = j$(n);
    if (t && t != n.root.activeElement) {
      let i = Eb(n.state, e.query.spec);
      i.valid && n.dispatch({ effects: ah.of(i) }), t.focus(), t.select();
    }
  } else
    n.dispatch({ effects: [
      ky.of(!0),
      e ? ah.of(Eb(n.state, e.query.spec)) : Ve.appendConfig.of(PK)
    ] });
  return !0;
}, F$ = (n) => {
  let e = n.state.field(ko, !1);
  if (!e || !e.panel)
    return !1;
  let t = ih(n, Py);
  return t && t.dom.contains(n.root.activeElement) && n.focus(), n.dispatch({ effects: ky.of(!1) }), !0;
}, SK = [
  { key: "Mod-f", run: Z$, scope: "editor search-panel" },
  { key: "F3", run: op, shift: lp, scope: "editor search-panel", preventDefault: !0 },
  { key: "Mod-g", run: op, shift: lp, scope: "editor search-panel", preventDefault: !0 },
  { key: "Escape", run: F$, scope: "editor search-panel" },
  { key: "Mod-Shift-l", run: wK },
  { key: "Mod-Alt-g", run: tK },
  { key: "Mod-d", run: fK, preventDefault: !0 }
];
class CK {
  constructor(e) {
    this.view = e;
    let t = this.query = e.state.field(ko).query.spec;
    this.commit = this.commit.bind(this), this.searchField = Ct("input", {
      value: t.search,
      placeholder: Ci(e, "Find"),
      "aria-label": Ci(e, "Find"),
      class: "cm-textfield",
      name: "search",
      form: "",
      "main-field": "true",
      onchange: this.commit,
      onkeyup: this.commit
    }), this.replaceField = Ct("input", {
      value: t.replace,
      placeholder: Ci(e, "Replace"),
      "aria-label": Ci(e, "Replace"),
      class: "cm-textfield",
      name: "replace",
      form: "",
      onchange: this.commit,
      onkeyup: this.commit
    }), this.caseField = Ct("input", {
      type: "checkbox",
      name: "case",
      form: "",
      checked: t.caseSensitive,
      onchange: this.commit
    }), this.reField = Ct("input", {
      type: "checkbox",
      name: "re",
      form: "",
      checked: t.regexp,
      onchange: this.commit
    }), this.wordField = Ct("input", {
      type: "checkbox",
      name: "word",
      form: "",
      checked: t.wholeWord,
      onchange: this.commit
    });
    function i(s, r, o) {
      return Ct("button", { class: "cm-button", name: s, onclick: r, type: "button" }, o);
    }
    this.dom = Ct("div", { onkeydown: (s) => this.keydown(s), class: "cm-search" }, [
      this.searchField,
      i("next", () => op(e), [Ci(e, "next")]),
      i("prev", () => lp(e), [Ci(e, "previous")]),
      i("select", () => OK(e), [Ci(e, "all")]),
      Ct("label", null, [this.caseField, Ci(e, "match case")]),
      Ct("label", null, [this.reField, Ci(e, "regexp")]),
      Ct("label", null, [this.wordField, Ci(e, "by word")]),
      ...e.state.readOnly ? [] : [
        Ct("br"),
        this.replaceField,
        i("replace", () => Yx(e), [Ci(e, "replace")]),
        i("replaceAll", () => xK(e), [Ci(e, "replace all")])
      ],
      Ct("button", {
        name: "close",
        onclick: () => F$(e),
        "aria-label": Ci(e, "close"),
        type: "button"
      }, ["×"])
    ]);
  }
  commit() {
    let e = new Q$({
      search: this.searchField.value,
      caseSensitive: this.caseField.checked,
      regexp: this.reField.checked,
      wholeWord: this.wordField.checked,
      replace: this.replaceField.value
    });
    e.eq(this.query) || (this.query = e, this.view.dispatch({ effects: ah.of(e) }));
  }
  keydown(e) {
    IY(this.view, e, "search-panel") ? e.preventDefault() : e.keyCode == 13 && e.target == this.searchField ? (e.preventDefault(), (e.shiftKey ? lp : op)(this.view)) : e.keyCode == 13 && e.target == this.replaceField && (e.preventDefault(), Yx(this.view));
  }
  update(e) {
    for (let t of e.transactions)
      for (let i of t.effects)
        i.is(ah) && !i.value.eq(this.query) && this.setQuery(i.value);
  }
  setQuery(e) {
    this.query = e, this.searchField.value = e.search, this.replaceField.value = e.replace, this.caseField.checked = e.caseSensitive, this.reField.checked = e.regexp, this.wordField.checked = e.wholeWord;
  }
  mount() {
    this.searchField.select();
  }
  get pos() {
    return 80;
  }
  get top() {
    return this.view.state.facet(Dc).top;
  }
}
function Ci(n, e) {
  return n.state.phrase(e);
}
const Qf = 30, Bf = /[\s\.,:;?!]/;
function Ay(n, { from: e, to: t }) {
  let i = n.state.doc.lineAt(e), s = n.state.doc.lineAt(t).to, r = Math.max(i.from, e - Qf), o = Math.min(s, t + Qf), l = n.state.sliceDoc(r, o);
  if (r != i.from) {
    for (let a = 0; a < Qf; a++)
      if (!Bf.test(l[a + 1]) && Bf.test(l[a])) {
        l = l.slice(a);
        break;
      }
  }
  if (o != s) {
    for (let a = l.length - 1; a > l.length - Qf; a--)
      if (!Bf.test(l[a - 1]) && Bf.test(l[a])) {
        l = l.slice(0, a);
        break;
      }
  }
  return Oe.announce.of(`${n.state.phrase("current match")}. ${l} ${n.state.phrase("on line")} ${i.number}.`);
}
const kK = /* @__PURE__ */ Oe.baseTheme({
  ".cm-panel.cm-search": {
    padding: "2px 6px 4px",
    position: "relative",
    "& [name=close]": {
      position: "absolute",
      top: "0",
      right: "4px",
      backgroundColor: "inherit",
      border: "none",
      font: "inherit",
      padding: 0,
      margin: 0
    },
    "& input, & button, & label": {
      margin: ".2em .6em .2em 0"
    },
    "& input[type=checkbox]": {
      marginRight: ".2em"
    },
    "& label": {
      fontSize: "80%",
      whiteSpace: "pre"
    }
  },
  "&light .cm-searchMatch": { backgroundColor: "#ffff0054" },
  "&dark .cm-searchMatch": { backgroundColor: "#00ffff8a" },
  "&light .cm-searchMatch-selected": { backgroundColor: "#ff6a0054" },
  "&dark .cm-searchMatch-selected": { backgroundColor: "#ff00ff8a" }
}), PK = [
  ko,
  /* @__PURE__ */ Kl.low(yK),
  kK
];
class V$ {
  /**
  Create a new completion context. (Mostly useful for testing
  completion sources—in the editor, the extension will create
  these for you.)
  */
  constructor(e, t, i) {
    this.state = e, this.pos = t, this.explicit = i, this.abortListeners = [];
  }
  /**
  Get the extent, content, and (if there is a token) type of the
  token before `this.pos`.
  */
  tokenBefore(e) {
    let t = mn(this.state).resolveInner(this.pos, -1);
    for (; t && e.indexOf(t.name) < 0; )
      t = t.parent;
    return t ? {
      from: t.from,
      to: this.pos,
      text: this.state.sliceDoc(t.from, this.pos),
      type: t.type
    } : null;
  }
  /**
  Get the match of the given expression directly before the
  cursor.
  */
  matchBefore(e) {
    let t = this.state.doc.lineAt(this.pos), i = Math.max(t.from, this.pos - 250), s = t.text.slice(i - t.from, this.pos - t.from), r = s.search(W$(e, !1));
    return r < 0 ? null : { from: i + r, to: this.pos, text: s.slice(r) };
  }
  /**
  Yields true when the query has been aborted. Can be useful in
  asynchronous queries to avoid doing work that will be ignored.
  */
  get aborted() {
    return this.abortListeners == null;
  }
  /**
  Allows you to register abort handlers, which will be called when
  the query is
  [aborted](https://codemirror.net/6/docs/ref/#autocomplete.CompletionContext.aborted).
  */
  addEventListener(e, t) {
    e == "abort" && this.abortListeners && this.abortListeners.push(t);
  }
}
function Hx(n) {
  let e = Object.keys(n).join(""), t = /\w/.test(e);
  return t && (e = e.replace(/\w/g, "")), `[${t ? "\\w" : ""}${e.replace(/[^\w\s]/g, "\\$&")}]`;
}
function AK(n) {
  let e = /* @__PURE__ */ Object.create(null), t = /* @__PURE__ */ Object.create(null);
  for (let { label: s } of n) {
    e[s[0]] = !0;
    for (let r = 1; r < s.length; r++)
      t[s[r]] = !0;
  }
  let i = Hx(e) + Hx(t) + "*$";
  return [new RegExp("^" + i), new RegExp(i)];
}
function q$(n) {
  let e = n.map((s) => typeof s == "string" ? { label: s } : s), [t, i] = e.every((s) => /^\w+$/.test(s.label)) ? [/\w*$/, /\w+$/] : AK(e);
  return (s) => {
    let r = s.matchBefore(i);
    return r || s.explicit ? { from: r ? r.from : s.pos, options: e, validFor: t } : null;
  };
}
function EK(n, e) {
  return (t) => {
    for (let i = mn(t.state).resolveInner(t.pos, -1); i; i = i.parent) {
      if (n.indexOf(i.name) > -1)
        return null;
      if (i.type.isTop)
        break;
    }
    return e(t);
  };
}
class Gx {
  constructor(e, t, i, s) {
    this.completion = e, this.source = t, this.match = i, this.score = s;
  }
}
function Po(n) {
  return n.selection.main.from;
}
function W$(n, e) {
  var t;
  let { source: i } = n, s = e && i[0] != "^", r = i[i.length - 1] != "$";
  return !s && !r ? n : new RegExp(`${s ? "^" : ""}(?:${i})${r ? "$" : ""}`, (t = n.flags) !== null && t !== void 0 ? t : n.ignoreCase ? "i" : "");
}
const X$ = /* @__PURE__ */ Hr.define();
function $K(n, e, t, i) {
  let { main: s } = n.selection, r = t - s.from, o = i - s.from;
  return Object.assign(Object.assign({}, n.changeByRange((l) => l != s && t != i && n.sliceDoc(l.from + r, l.from + o) != n.sliceDoc(t, i) ? { range: l } : {
    changes: { from: l.from + r, to: i == s.from ? l.to : l.from + o, insert: e },
    range: J.cursor(l.from + r + e.length)
  })), { scrollIntoView: !0, userEvent: "input.complete" });
}
const Ux = /* @__PURE__ */ new WeakMap();
function TK(n) {
  if (!Array.isArray(n))
    return n;
  let e = Ux.get(n);
  return e || Ux.set(n, e = q$(n)), e;
}
const ap = /* @__PURE__ */ Ve.define(), ch = /* @__PURE__ */ Ve.define();
class _K {
  constructor(e) {
    this.pattern = e, this.chars = [], this.folded = [], this.any = [], this.precise = [], this.byWord = [], this.score = 0, this.matched = [];
    for (let t = 0; t < e.length; ) {
      let i = Mn(e, t), s = Xi(i);
      this.chars.push(i);
      let r = e.slice(t, t + s), o = r.toUpperCase();
      this.folded.push(Mn(o == r ? r.toLowerCase() : o, 0)), t += s;
    }
    this.astral = e.length != this.chars.length;
  }
  ret(e, t) {
    return this.score = e, this.matched = t, !0;
  }
  // Matches a given word (completion) against the pattern (input).
  // Will return a boolean indicating whether there was a match and,
  // on success, set `this.score` to the score, `this.matched` to an
  // array of `from, to` pairs indicating the matched parts of `word`.
  //
  // The score is a number that is more negative the worse the match
  // is. See `Penalty` above.
  match(e) {
    if (this.pattern.length == 0)
      return this.ret(-100, []);
    if (e.length < this.pattern.length)
      return !1;
    let { chars: t, folded: i, any: s, precise: r, byWord: o } = this;
    if (t.length == 1) {
      let y = Mn(e, 0), v = Xi(y), O = v == e.length ? 0 : -100;
      if (y != t[0])
        if (y == i[0])
          O += -200;
        else
          return !1;
      return this.ret(O, [0, v]);
    }
    let l = e.indexOf(this.pattern);
    if (l == 0)
      return this.ret(e.length == this.pattern.length ? 0 : -100, [0, this.pattern.length]);
    let a = t.length, c = 0;
    if (l < 0) {
      for (let y = 0, v = Math.min(e.length, 200); y < v && c < a; ) {
        let O = Mn(e, y);
        (O == t[c] || O == i[c]) && (s[c++] = y), y += Xi(O);
      }
      if (c < a)
        return !1;
    }
    let u = 0, h = 0, f = !1, d = 0, p = -1, g = -1, m = /[a-z]/.test(e), b = !0;
    for (let y = 0, v = Math.min(e.length, 200), O = 0; y < v && h < a; ) {
      let x = Mn(e, y);
      l < 0 && (u < a && x == t[u] && (r[u++] = y), d < a && (x == t[d] || x == i[d] ? (d == 0 && (p = y), g = y + 1, d++) : d = 0));
      let S, C = x < 255 ? x >= 48 && x <= 57 || x >= 97 && x <= 122 ? 2 : x >= 65 && x <= 90 ? 1 : 0 : (S = Uv(x)) != S.toLowerCase() ? 1 : S != S.toUpperCase() ? 2 : 0;
      (!y || C == 1 && m || O == 0 && C != 0) && (t[h] == x || i[h] == x && (f = !0) ? o[h++] = y : o.length && (b = !1)), O = C, y += Xi(x);
    }
    return h == a && o[0] == 0 && b ? this.result(-100 + (f ? -200 : 0), o, e) : d == a && p == 0 ? this.ret(-200 - e.length + (g == e.length ? 0 : -100), [0, g]) : l > -1 ? this.ret(-700 - e.length, [l, l + this.pattern.length]) : d == a ? this.ret(-900 - e.length, [p, g]) : h == a ? this.result(-100 + (f ? -200 : 0) + -700 + (b ? 0 : -1100), o, e) : t.length == 2 ? !1 : this.result((s[0] ? -700 : 0) + -200 + -1100, s, e);
  }
  result(e, t, i) {
    let s = [], r = 0;
    for (let o of t) {
      let l = o + (this.astral ? Xi(Mn(i, o)) : 1);
      r && s[r - 1] == o ? s[r - 1] = l : (s[r++] = o, s[r++] = l);
    }
    return this.ret(e - i.length, s);
  }
}
const In = /* @__PURE__ */ we.define({
  combine(n) {
    return Or(n, {
      activateOnTyping: !0,
      activateOnTypingDelay: 100,
      selectOnOpen: !0,
      override: null,
      closeOnBlur: !0,
      maxRenderedOptions: 100,
      defaultKeymap: !0,
      tooltipClass: () => "",
      optionClass: () => "",
      aboveCursor: !1,
      icons: !0,
      addToOptions: [],
      positionInfo: MK,
      compareCompletions: (e, t) => e.label.localeCompare(t.label),
      interactionDelay: 75,
      updateSyncTime: 100
    }, {
      defaultKeymap: (e, t) => e && t,
      closeOnBlur: (e, t) => e && t,
      icons: (e, t) => e && t,
      tooltipClass: (e, t) => (i) => Kx(e(i), t(i)),
      optionClass: (e, t) => (i) => Kx(e(i), t(i)),
      addToOptions: (e, t) => e.concat(t)
    });
  }
});
function Kx(n, e) {
  return n ? e ? n + " " + e : n : e;
}
function MK(n, e, t, i, s, r) {
  let o = n.textDirection == Rt.RTL, l = o, a = !1, c = "top", u, h, f = e.left - s.left, d = s.right - e.right, p = i.right - i.left, g = i.bottom - i.top;
  if (l && f < Math.min(p, d) ? l = !1 : !l && d < Math.min(p, f) && (l = !0), p <= (l ? f : d))
    u = Math.max(s.top, Math.min(t.top, s.bottom - g)) - e.top, h = Math.min(400, l ? f : d);
  else {
    a = !0, h = Math.min(
      400,
      (o ? e.right : s.right - e.left) - 30
      /* Info.Margin */
    );
    let y = s.bottom - e.bottom;
    y >= g || y > e.top ? u = t.bottom - e.top : (c = "bottom", u = e.bottom - t.top);
  }
  let m = (e.bottom - e.top) / r.offsetHeight, b = (e.right - e.left) / r.offsetWidth;
  return {
    style: `${c}: ${u / m}px; max-width: ${h / b}px`,
    class: "cm-completionInfo-" + (a ? o ? "left-narrow" : "right-narrow" : l ? "left" : "right")
  };
}
function RK(n) {
  let e = n.addToOptions.slice();
  return n.icons && e.push({
    render(t) {
      let i = document.createElement("div");
      return i.classList.add("cm-completionIcon"), t.type && i.classList.add(...t.type.split(/\s+/g).map((s) => "cm-completionIcon-" + s)), i.setAttribute("aria-hidden", "true"), i;
    },
    position: 20
  }), e.push({
    render(t, i, s, r) {
      let o = document.createElement("span");
      o.className = "cm-completionLabel";
      let l = t.displayLabel || t.label, a = 0;
      for (let c = 0; c < r.length; ) {
        let u = r[c++], h = r[c++];
        u > a && o.appendChild(document.createTextNode(l.slice(a, u)));
        let f = o.appendChild(document.createElement("span"));
        f.appendChild(document.createTextNode(l.slice(u, h))), f.className = "cm-completionMatchedText", a = h;
      }
      return a < l.length && o.appendChild(document.createTextNode(l.slice(a))), o;
    },
    position: 50
  }, {
    render(t) {
      if (!t.detail)
        return null;
      let i = document.createElement("span");
      return i.className = "cm-completionDetail", i.textContent = t.detail, i;
    },
    position: 80
  }), e.sort((t, i) => t.position - i.position).map((t) => t.render);
}
function Pm(n, e, t) {
  if (n <= t)
    return { from: 0, to: n };
  if (e < 0 && (e = 0), e <= n >> 1) {
    let s = Math.floor(e / t);
    return { from: s * t, to: (s + 1) * t };
  }
  let i = Math.floor((n - e) / t);
  return { from: n - (i + 1) * t, to: n - i * t };
}
class DK {
  constructor(e, t, i) {
    this.view = e, this.stateField = t, this.applyCompletion = i, this.info = null, this.infoDestroy = null, this.placeInfoReq = {
      read: () => this.measureInfo(),
      write: (a) => this.placeInfo(a),
      key: this
    }, this.space = null, this.currentClass = "";
    let s = e.state.field(t), { options: r, selected: o } = s.open, l = e.state.facet(In);
    this.optionContent = RK(l), this.optionClass = l.optionClass, this.tooltipClass = l.tooltipClass, this.range = Pm(r.length, o, l.maxRenderedOptions), this.dom = document.createElement("div"), this.dom.className = "cm-tooltip-autocomplete", this.updateTooltipClass(e.state), this.dom.addEventListener("mousedown", (a) => {
      let { options: c } = e.state.field(t).open;
      for (let u = a.target, h; u && u != this.dom; u = u.parentNode)
        if (u.nodeName == "LI" && (h = /-(\d+)$/.exec(u.id)) && +h[1] < c.length) {
          this.applyCompletion(e, c[+h[1]]), a.preventDefault();
          return;
        }
    }), this.dom.addEventListener("focusout", (a) => {
      let c = e.state.field(this.stateField, !1);
      c && c.tooltip && e.state.facet(In).closeOnBlur && a.relatedTarget != e.contentDOM && e.dispatch({ effects: ch.of(null) });
    }), this.showOptions(r, s.id);
  }
  mount() {
    this.updateSel();
  }
  showOptions(e, t) {
    this.list && this.list.remove(), this.list = this.dom.appendChild(this.createListBox(e, t, this.range)), this.list.addEventListener("scroll", () => {
      this.info && this.view.requestMeasure(this.placeInfoReq);
    });
  }
  update(e) {
    var t;
    let i = e.state.field(this.stateField), s = e.startState.field(this.stateField);
    if (this.updateTooltipClass(e.state), i != s) {
      let { options: r, selected: o, disabled: l } = i.open;
      (!s.open || s.open.options != r) && (this.range = Pm(r.length, o, e.state.facet(In).maxRenderedOptions), this.showOptions(r, i.id)), this.updateSel(), l != ((t = s.open) === null || t === void 0 ? void 0 : t.disabled) && this.dom.classList.toggle("cm-tooltip-autocomplete-disabled", !!l);
    }
  }
  updateTooltipClass(e) {
    let t = this.tooltipClass(e);
    if (t != this.currentClass) {
      for (let i of this.currentClass.split(" "))
        i && this.dom.classList.remove(i);
      for (let i of t.split(" "))
        i && this.dom.classList.add(i);
      this.currentClass = t;
    }
  }
  positioned(e) {
    this.space = e, this.info && this.view.requestMeasure(this.placeInfoReq);
  }
  updateSel() {
    let e = this.view.state.field(this.stateField), t = e.open;
    if ((t.selected > -1 && t.selected < this.range.from || t.selected >= this.range.to) && (this.range = Pm(t.options.length, t.selected, this.view.state.facet(In).maxRenderedOptions), this.showOptions(t.options, e.id)), this.updateSelectedOption(t.selected)) {
      this.destroyInfo();
      let { completion: i } = t.options[t.selected], { info: s } = i;
      if (!s)
        return;
      let r = typeof s == "string" ? document.createTextNode(s) : s(i);
      if (!r)
        return;
      "then" in r ? r.then((o) => {
        o && this.view.state.field(this.stateField, !1) == e && this.addInfoPane(o, i);
      }).catch((o) => Ki(this.view.state, o, "completion info")) : this.addInfoPane(r, i);
    }
  }
  addInfoPane(e, t) {
    this.destroyInfo();
    let i = this.info = document.createElement("div");
    if (i.className = "cm-tooltip cm-completionInfo", e.nodeType != null)
      i.appendChild(e), this.infoDestroy = null;
    else {
      let { dom: s, destroy: r } = e;
      i.appendChild(s), this.infoDestroy = r || null;
    }
    this.dom.appendChild(i), this.view.requestMeasure(this.placeInfoReq);
  }
  updateSelectedOption(e) {
    let t = null;
    for (let i = this.list.firstChild, s = this.range.from; i; i = i.nextSibling, s++)
      i.nodeName != "LI" || !i.id ? s-- : s == e ? i.hasAttribute("aria-selected") || (i.setAttribute("aria-selected", "true"), t = i) : i.hasAttribute("aria-selected") && i.removeAttribute("aria-selected");
    return t && NK(this.list, t), t;
  }
  measureInfo() {
    let e = this.dom.querySelector("[aria-selected]");
    if (!e || !this.info)
      return null;
    let t = this.dom.getBoundingClientRect(), i = this.info.getBoundingClientRect(), s = e.getBoundingClientRect(), r = this.space;
    if (!r) {
      let o = this.dom.ownerDocument.defaultView || window;
      r = { left: 0, top: 0, right: o.innerWidth, bottom: o.innerHeight };
    }
    return s.top > Math.min(r.bottom, t.bottom) - 10 || s.bottom < Math.max(r.top, t.top) + 10 ? null : this.view.state.facet(In).positionInfo(this.view, t, s, i, r, this.dom);
  }
  placeInfo(e) {
    this.info && (e ? (e.style && (this.info.style.cssText = e.style), this.info.className = "cm-tooltip cm-completionInfo " + (e.class || "")) : this.info.style.cssText = "top: -1e6px");
  }
  createListBox(e, t, i) {
    const s = document.createElement("ul");
    s.id = t, s.setAttribute("role", "listbox"), s.setAttribute("aria-expanded", "true"), s.setAttribute("aria-label", this.view.state.phrase("Completions"));
    let r = null;
    for (let o = i.from; o < i.to; o++) {
      let { completion: l, match: a } = e[o], { section: c } = l;
      if (c) {
        let f = typeof c == "string" ? c : c.name;
        if (f != r && (o > i.from || i.from == 0))
          if (r = f, typeof c != "string" && c.header)
            s.appendChild(c.header(c));
          else {
            let d = s.appendChild(document.createElement("completion-section"));
            d.textContent = f;
          }
      }
      const u = s.appendChild(document.createElement("li"));
      u.id = t + "-" + o, u.setAttribute("role", "option");
      let h = this.optionClass(l);
      h && (u.className = h);
      for (let f of this.optionContent) {
        let d = f(l, this.view.state, this.view, a);
        d && u.appendChild(d);
      }
    }
    return i.from && s.classList.add("cm-completionListIncompleteTop"), i.to < e.length && s.classList.add("cm-completionListIncompleteBottom"), s;
  }
  destroyInfo() {
    this.info && (this.infoDestroy && this.infoDestroy(), this.info.remove(), this.info = null);
  }
  destroy() {
    this.destroyInfo();
  }
}
function LK(n, e) {
  return (t) => new DK(t, n, e);
}
function NK(n, e) {
  let t = n.getBoundingClientRect(), i = e.getBoundingClientRect(), s = t.height / n.offsetHeight;
  i.top < t.top ? n.scrollTop -= (t.top - i.top) / s : i.bottom > t.bottom && (n.scrollTop += (i.bottom - t.bottom) / s);
}
function Jx(n) {
  return (n.boost || 0) * 100 + (n.apply ? 10 : 0) + (n.info ? 5 : 0) + (n.type ? 1 : 0);
}
function IK(n, e) {
  let t = [], i = null, s = (a) => {
    t.push(a);
    let { section: c } = a.completion;
    if (c) {
      i || (i = []);
      let u = typeof c == "string" ? c : c.name;
      i.some((h) => h.name == u) || i.push(typeof c == "string" ? { name: u } : c);
    }
  };
  for (let a of n)
    if (a.hasResult()) {
      let c = a.result.getMatch;
      if (a.result.filter === !1)
        for (let u of a.result.options)
          s(new Gx(u, a.source, c ? c(u) : [], 1e9 - t.length));
      else {
        let u = new _K(e.sliceDoc(a.from, a.to));
        for (let h of a.result.options)
          if (u.match(h.label)) {
            let f = h.displayLabel ? c ? c(h, u.matched) : [] : u.matched;
            s(new Gx(h, a.source, f, u.score + (h.boost || 0)));
          }
      }
    }
  if (i) {
    let a = /* @__PURE__ */ Object.create(null), c = 0, u = (h, f) => {
      var d, p;
      return ((d = h.rank) !== null && d !== void 0 ? d : 1e9) - ((p = f.rank) !== null && p !== void 0 ? p : 1e9) || (h.name < f.name ? -1 : 1);
    };
    for (let h of i.sort(u))
      c -= 1e5, a[h.name] = c;
    for (let h of t) {
      let { section: f } = h.completion;
      f && (h.score += a[typeof f == "string" ? f : f.name]);
    }
  }
  let r = [], o = null, l = e.facet(In).compareCompletions;
  for (let a of t.sort((c, u) => u.score - c.score || l(c.completion, u.completion))) {
    let c = a.completion;
    !o || o.label != c.label || o.detail != c.detail || o.type != null && c.type != null && o.type != c.type || o.apply != c.apply || o.boost != c.boost ? r.push(a) : Jx(a.completion) > Jx(o) && (r[r.length - 1] = a), o = a.completion;
  }
  return r;
}
class ba {
  constructor(e, t, i, s, r, o) {
    this.options = e, this.attrs = t, this.tooltip = i, this.timestamp = s, this.selected = r, this.disabled = o;
  }
  setSelected(e, t) {
    return e == this.selected || e >= this.options.length ? this : new ba(this.options, eS(t, e), this.tooltip, this.timestamp, e, this.disabled);
  }
  static build(e, t, i, s, r) {
    let o = IK(e, t);
    if (!o.length)
      return s && e.some(
        (a) => a.state == 1
        /* State.Pending */
      ) ? new ba(s.options, s.attrs, s.tooltip, s.timestamp, s.selected, !0) : null;
    let l = t.facet(In).selectOnOpen ? 0 : -1;
    if (s && s.selected != l && s.selected != -1) {
      let a = s.options[s.selected].completion;
      for (let c = 0; c < o.length; c++)
        if (o[c].completion == a) {
          l = c;
          break;
        }
    }
    return new ba(o, eS(i, l), {
      pos: e.reduce((a, c) => c.hasResult() ? Math.min(a, c.from) : a, 1e8),
      create: ZK,
      above: r.aboveCursor
    }, s ? s.timestamp : Date.now(), l, !1);
  }
  map(e) {
    return new ba(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), { pos: e.mapPos(this.tooltip.pos) }), this.timestamp, this.selected, this.disabled);
  }
}
class cp {
  constructor(e, t, i) {
    this.active = e, this.id = t, this.open = i;
  }
  static start() {
    return new cp(jK, "cm-ac-" + Math.floor(Math.random() * 2e6).toString(36), null);
  }
  update(e) {
    let { state: t } = e, i = t.facet(In), r = (i.override || t.languageDataAt("autocomplete", Po(t)).map(TK)).map((l) => (this.active.find((c) => c.source == l) || new fi(
      l,
      this.active.some(
        (c) => c.state != 0
        /* State.Inactive */
      ) ? 1 : 0
      /* State.Inactive */
    )).update(e, i));
    r.length == this.active.length && r.every((l, a) => l == this.active[a]) && (r = this.active);
    let o = this.open;
    o && e.docChanged && (o = o.map(e.changes)), e.selection || r.some((l) => l.hasResult() && e.changes.touchesRange(l.from, l.to)) || !QK(r, this.active) ? o = ba.build(r, t, this.id, o, i) : o && o.disabled && !r.some(
      (l) => l.state == 1
      /* State.Pending */
    ) && (o = null), !o && r.every(
      (l) => l.state != 1
      /* State.Pending */
    ) && r.some((l) => l.hasResult()) && (r = r.map((l) => l.hasResult() ? new fi(
      l.source,
      0
      /* State.Inactive */
    ) : l));
    for (let l of e.effects)
      l.is(H$) && (o = o && o.setSelected(l.value, this.id));
    return r == this.active && o == this.open ? this : new cp(r, this.id, o);
  }
  get tooltip() {
    return this.open ? this.open.tooltip : null;
  }
  get attrs() {
    return this.open ? this.open.attrs : BK;
  }
}
function QK(n, e) {
  if (n == e)
    return !0;
  for (let t = 0, i = 0; ; ) {
    for (; t < n.length && !n[t].hasResult; )
      t++;
    for (; i < e.length && !e[i].hasResult; )
      i++;
    let s = t == n.length, r = i == e.length;
    if (s || r)
      return s == r;
    if (n[t++].result != e[i++].result)
      return !1;
  }
}
const BK = {
  "aria-autocomplete": "list"
};
function eS(n, e) {
  let t = {
    "aria-autocomplete": "list",
    "aria-haspopup": "listbox",
    "aria-controls": n
  };
  return e > -1 && (t["aria-activedescendant"] = n + "-" + e), t;
}
const jK = [];
function $b(n) {
  return n.isUserEvent("input.type") ? "input" : n.isUserEvent("delete.backward") ? "delete" : null;
}
class fi {
  constructor(e, t, i = -1) {
    this.source = e, this.state = t, this.explicitPos = i;
  }
  hasResult() {
    return !1;
  }
  update(e, t) {
    let i = $b(e), s = this;
    i ? s = s.handleUserEvent(e, i, t) : e.docChanged ? s = s.handleChange(e) : e.selection && s.state != 0 && (s = new fi(
      s.source,
      0
      /* State.Inactive */
    ));
    for (let r of e.effects)
      if (r.is(ap))
        s = new fi(s.source, 1, r.value ? Po(e.state) : -1);
      else if (r.is(ch))
        s = new fi(
          s.source,
          0
          /* State.Inactive */
        );
      else if (r.is(Y$))
        for (let o of r.value)
          o.source == s.source && (s = o);
    return s;
  }
  handleUserEvent(e, t, i) {
    return t == "delete" || !i.activateOnTyping ? this.map(e.changes) : new fi(
      this.source,
      1
      /* State.Pending */
    );
  }
  handleChange(e) {
    return e.changes.touchesRange(Po(e.startState)) ? new fi(
      this.source,
      0
      /* State.Inactive */
    ) : this.map(e.changes);
  }
  map(e) {
    return e.empty || this.explicitPos < 0 ? this : new fi(this.source, this.state, e.mapPos(this.explicitPos));
  }
}
class Ea extends fi {
  constructor(e, t, i, s, r) {
    super(e, 2, t), this.result = i, this.from = s, this.to = r;
  }
  hasResult() {
    return !0;
  }
  handleUserEvent(e, t, i) {
    var s;
    let r = e.changes.mapPos(this.from), o = e.changes.mapPos(this.to, 1), l = Po(e.state);
    if ((this.explicitPos < 0 ? l <= r : l < this.from) || l > o || t == "delete" && Po(e.startState) == this.from)
      return new fi(
        this.source,
        t == "input" && i.activateOnTyping ? 1 : 0
        /* State.Inactive */
      );
    let a = this.explicitPos < 0 ? -1 : e.changes.mapPos(this.explicitPos), c;
    return zK(this.result.validFor, e.state, r, o) ? new Ea(this.source, a, this.result, r, o) : this.result.update && (c = this.result.update(this.result, r, o, new V$(e.state, l, a >= 0))) ? new Ea(this.source, a, c, c.from, (s = c.to) !== null && s !== void 0 ? s : Po(e.state)) : new fi(this.source, 1, a);
  }
  handleChange(e) {
    return e.changes.touchesRange(this.from, this.to) ? new fi(
      this.source,
      0
      /* State.Inactive */
    ) : this.map(e.changes);
  }
  map(e) {
    return e.empty ? this : new Ea(this.source, this.explicitPos < 0 ? -1 : e.mapPos(this.explicitPos), this.result, e.mapPos(this.from), e.mapPos(this.to, 1));
  }
}
function zK(n, e, t, i) {
  if (!n)
    return !1;
  let s = e.sliceDoc(t, i);
  return typeof n == "function" ? n(s, t, i, e) : W$(n, !0).test(s);
}
const Y$ = /* @__PURE__ */ Ve.define({
  map(n, e) {
    return n.map((t) => t.map(e));
  }
}), H$ = /* @__PURE__ */ Ve.define(), Mi = /* @__PURE__ */ Pn.define({
  create() {
    return cp.start();
  },
  update(n, e) {
    return n.update(e);
  },
  provide: (n) => [
    cy.from(n, (e) => e.tooltip),
    Oe.contentAttributes.from(n, (e) => e.attrs)
  ]
});
function G$(n, e) {
  const t = e.completion.apply || e.completion.label;
  let i = n.state.field(Mi).active.find((s) => s.source == e.source);
  return i instanceof Ea ? (typeof t == "string" ? n.dispatch(Object.assign(Object.assign({}, $K(n.state, t, i.from, i.to)), { annotations: X$.of(e.completion) })) : t(n, e.completion, i.from, i.to), !0) : !1;
}
const ZK = /* @__PURE__ */ LK(Mi, G$);
function jf(n, e = "option") {
  return (t) => {
    let i = t.state.field(Mi, !1);
    if (!i || !i.open || i.open.disabled || Date.now() - i.open.timestamp < t.state.facet(In).interactionDelay)
      return !1;
    let s = 1, r;
    e == "page" && (r = TE(t, i.open.tooltip)) && (s = Math.max(2, Math.floor(r.dom.offsetHeight / r.dom.querySelector("li").offsetHeight) - 1));
    let { length: o } = i.open.options, l = i.open.selected > -1 ? i.open.selected + s * (n ? 1 : -1) : n ? 0 : o - 1;
    return l < 0 ? l = e == "page" ? 0 : o - 1 : l >= o && (l = e == "page" ? o - 1 : 0), t.dispatch({ effects: H$.of(l) }), !0;
  };
}
const FK = (n) => {
  let e = n.state.field(Mi, !1);
  return n.state.readOnly || !e || !e.open || e.open.selected < 0 || e.open.disabled || Date.now() - e.open.timestamp < n.state.facet(In).interactionDelay ? !1 : G$(n, e.open.options[e.open.selected]);
}, VK = (n) => n.state.field(Mi, !1) ? (n.dispatch({ effects: ap.of(!0) }), !0) : !1, qK = (n) => {
  let e = n.state.field(Mi, !1);
  return !e || !e.active.some(
    (t) => t.state != 0
    /* State.Inactive */
  ) ? !1 : (n.dispatch({ effects: ch.of(null) }), !0);
};
class WK {
  constructor(e, t) {
    this.active = e, this.context = t, this.time = Date.now(), this.updates = [], this.done = void 0;
  }
}
const XK = 50, YK = 1e3, HK = /* @__PURE__ */ on.fromClass(class {
  constructor(n) {
    this.view = n, this.debounceUpdate = -1, this.running = [], this.debounceAccept = -1, this.pendingStart = !1, this.composing = 0;
    for (let e of n.state.field(Mi).active)
      e.state == 1 && this.startQuery(e);
  }
  update(n) {
    let e = n.state.field(Mi);
    if (!n.selectionSet && !n.docChanged && n.startState.field(Mi) == e)
      return;
    let t = n.transactions.some((s) => (s.selection || s.docChanged) && !$b(s));
    for (let s = 0; s < this.running.length; s++) {
      let r = this.running[s];
      if (t || r.updates.length + n.transactions.length > XK && Date.now() - r.time > YK) {
        for (let o of r.context.abortListeners)
          try {
            o();
          } catch (l) {
            Ki(this.view.state, l);
          }
        r.context.abortListeners = null, this.running.splice(s--, 1);
      } else
        r.updates.push(...n.transactions);
    }
    this.debounceUpdate > -1 && clearTimeout(this.debounceUpdate), n.transactions.some((s) => s.effects.some((r) => r.is(ap))) && (this.pendingStart = !0);
    let i = this.pendingStart ? 50 : n.state.facet(In).activateOnTypingDelay;
    if (this.debounceUpdate = e.active.some((s) => s.state == 1 && !this.running.some((r) => r.active.source == s.source)) ? setTimeout(() => this.startUpdate(), i) : -1, this.composing != 0)
      for (let s of n.transactions)
        $b(s) == "input" ? this.composing = 2 : this.composing == 2 && s.selection && (this.composing = 3);
  }
  startUpdate() {
    this.debounceUpdate = -1, this.pendingStart = !1;
    let { state: n } = this.view, e = n.field(Mi);
    for (let t of e.active)
      t.state == 1 && !this.running.some((i) => i.active.source == t.source) && this.startQuery(t);
  }
  startQuery(n) {
    let { state: e } = this.view, t = Po(e), i = new V$(e, t, n.explicitPos == t), s = new WK(n, i);
    this.running.push(s), Promise.resolve(n.source(i)).then((r) => {
      s.context.aborted || (s.done = r || null, this.scheduleAccept());
    }, (r) => {
      this.view.dispatch({ effects: ch.of(null) }), Ki(this.view.state, r);
    });
  }
  scheduleAccept() {
    this.running.every((n) => n.done !== void 0) ? this.accept() : this.debounceAccept < 0 && (this.debounceAccept = setTimeout(() => this.accept(), this.view.state.facet(In).updateSyncTime));
  }
  // For each finished query in this.running, try to create a result
  // or, if appropriate, restart the query.
  accept() {
    var n;
    this.debounceAccept > -1 && clearTimeout(this.debounceAccept), this.debounceAccept = -1;
    let e = [], t = this.view.state.facet(In);
    for (let i = 0; i < this.running.length; i++) {
      let s = this.running[i];
      if (s.done === void 0)
        continue;
      if (this.running.splice(i--, 1), s.done) {
        let o = new Ea(s.active.source, s.active.explicitPos, s.done, s.done.from, (n = s.done.to) !== null && n !== void 0 ? n : Po(s.updates.length ? s.updates[0].startState : this.view.state));
        for (let l of s.updates)
          o = o.update(l, t);
        if (o.hasResult()) {
          e.push(o);
          continue;
        }
      }
      let r = this.view.state.field(Mi).active.find((o) => o.source == s.active.source);
      if (r && r.state == 1)
        if (s.done == null) {
          let o = new fi(
            s.active.source,
            0
            /* State.Inactive */
          );
          for (let l of s.updates)
            o = o.update(l, t);
          o.state != 1 && e.push(o);
        } else
          this.startQuery(r);
    }
    e.length && this.view.dispatch({ effects: Y$.of(e) });
  }
}, {
  eventHandlers: {
    blur(n) {
      let e = this.view.state.field(Mi, !1);
      if (e && e.tooltip && this.view.state.facet(In).closeOnBlur) {
        let t = e.open && TE(this.view, e.open.tooltip);
        (!t || !t.dom.contains(n.relatedTarget)) && setTimeout(() => this.view.dispatch({ effects: ch.of(null) }), 10);
      }
    },
    compositionstart() {
      this.composing = 1;
    },
    compositionend() {
      this.composing == 3 && setTimeout(() => this.view.dispatch({ effects: ap.of(!1) }), 20), this.composing = 0;
    }
  }
}), U$ = /* @__PURE__ */ Oe.baseTheme({
  ".cm-tooltip.cm-tooltip-autocomplete": {
    "& > ul": {
      fontFamily: "monospace",
      whiteSpace: "nowrap",
      overflow: "hidden auto",
      maxWidth_fallback: "700px",
      maxWidth: "min(700px, 95vw)",
      minWidth: "250px",
      maxHeight: "10em",
      height: "100%",
      listStyle: "none",
      margin: 0,
      padding: 0,
      "& > li, & > completion-section": {
        padding: "1px 3px",
        lineHeight: 1.2
      },
      "& > li": {
        overflowX: "hidden",
        textOverflow: "ellipsis",
        cursor: "pointer"
      },
      "& > completion-section": {
        display: "list-item",
        borderBottom: "1px solid silver",
        paddingLeft: "0.5em",
        opacity: 0.7
      }
    }
  },
  "&light .cm-tooltip-autocomplete ul li[aria-selected]": {
    background: "#17c",
    color: "white"
  },
  "&light .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
    background: "#777"
  },
  "&dark .cm-tooltip-autocomplete ul li[aria-selected]": {
    background: "#347",
    color: "white"
  },
  "&dark .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
    background: "#444"
  },
  ".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after": {
    content: '"···"',
    opacity: 0.5,
    display: "block",
    textAlign: "center"
  },
  ".cm-tooltip.cm-completionInfo": {
    position: "absolute",
    padding: "3px 9px",
    width: "max-content",
    maxWidth: "400px",
    boxSizing: "border-box"
  },
  ".cm-completionInfo.cm-completionInfo-left": { right: "100%" },
  ".cm-completionInfo.cm-completionInfo-right": { left: "100%" },
  ".cm-completionInfo.cm-completionInfo-left-narrow": { right: "30px" },
  ".cm-completionInfo.cm-completionInfo-right-narrow": { left: "30px" },
  "&light .cm-snippetField": { backgroundColor: "#00000022" },
  "&dark .cm-snippetField": { backgroundColor: "#ffffff22" },
  ".cm-snippetFieldPosition": {
    verticalAlign: "text-top",
    width: 0,
    height: "1.15em",
    display: "inline-block",
    margin: "0 -0.7px -.7em",
    borderLeft: "1.4px dotted #888"
  },
  ".cm-completionMatchedText": {
    textDecoration: "underline"
  },
  ".cm-completionDetail": {
    marginLeft: "0.5em",
    fontStyle: "italic"
  },
  ".cm-completionIcon": {
    fontSize: "90%",
    width: ".8em",
    display: "inline-block",
    textAlign: "center",
    paddingRight: ".6em",
    opacity: "0.6",
    boxSizing: "content-box"
  },
  ".cm-completionIcon-function, .cm-completionIcon-method": {
    "&:after": { content: "'ƒ'" }
  },
  ".cm-completionIcon-class": {
    "&:after": { content: "'○'" }
  },
  ".cm-completionIcon-interface": {
    "&:after": { content: "'◌'" }
  },
  ".cm-completionIcon-variable": {
    "&:after": { content: "'𝑥'" }
  },
  ".cm-completionIcon-constant": {
    "&:after": { content: "'𝐶'" }
  },
  ".cm-completionIcon-type": {
    "&:after": { content: "'𝑡'" }
  },
  ".cm-completionIcon-enum": {
    "&:after": { content: "'∪'" }
  },
  ".cm-completionIcon-property": {
    "&:after": { content: "'□'" }
  },
  ".cm-completionIcon-keyword": {
    "&:after": { content: "'🔑︎'" }
    // Disable emoji rendering
  },
  ".cm-completionIcon-namespace": {
    "&:after": { content: "'▢'" }
  },
  ".cm-completionIcon-text": {
    "&:after": { content: "'abc'", fontSize: "50%", verticalAlign: "middle" }
  }
});
class GK {
  constructor(e, t, i, s) {
    this.field = e, this.line = t, this.from = i, this.to = s;
  }
}
class Ey {
  constructor(e, t, i) {
    this.field = e, this.from = t, this.to = i;
  }
  map(e) {
    let t = e.mapPos(this.from, -1, Nn.TrackDel), i = e.mapPos(this.to, 1, Nn.TrackDel);
    return t == null || i == null ? null : new Ey(this.field, t, i);
  }
}
class $y {
  constructor(e, t) {
    this.lines = e, this.fieldPositions = t;
  }
  instantiate(e, t) {
    let i = [], s = [t], r = e.doc.lineAt(t), o = /^\s*/.exec(r.text)[0];
    for (let a of this.lines) {
      if (i.length) {
        let c = o, u = /^\t*/.exec(a)[0].length;
        for (let h = 0; h < u; h++)
          c += e.facet(sg);
        s.push(t + c.length - u), a = c + a.slice(u);
      }
      i.push(a), t += a.length + 1;
    }
    let l = this.fieldPositions.map((a) => new Ey(a.field, s[a.line] + a.from, s[a.line] + a.to));
    return { text: i, ranges: l };
  }
  static parse(e) {
    let t = [], i = [], s = [], r;
    for (let o of e.split(/\r\n?|\n/)) {
      for (; r = /[#$]\{(?:(\d+)(?::([^}]*))?|([^}]*))\}/.exec(o); ) {
        let l = r[1] ? +r[1] : null, a = r[2] || r[3] || "", c = -1;
        for (let u = 0; u < t.length; u++)
          (l != null ? t[u].seq == l : a && t[u].name == a) && (c = u);
        if (c < 0) {
          let u = 0;
          for (; u < t.length && (l == null || t[u].seq != null && t[u].seq < l); )
            u++;
          t.splice(u, 0, { seq: l, name: a }), c = u;
          for (let h of s)
            h.field >= c && h.field++;
        }
        s.push(new GK(c, i.length, r.index, r.index + a.length)), o = o.slice(0, r.index) + a + o.slice(r.index + r[0].length);
      }
      for (let l; l = /\\([{}])/.exec(o); ) {
        o = o.slice(0, l.index) + l[1] + o.slice(l.index + l[0].length);
        for (let a of s)
          a.line == i.length && a.from > l.index && (a.from--, a.to--);
      }
      i.push(o);
    }
    return new $y(i, s);
  }
}
let UK = /* @__PURE__ */ Te.widget({ widget: /* @__PURE__ */ new class extends Gr {
  toDOM() {
    let n = document.createElement("span");
    return n.className = "cm-snippetFieldPosition", n;
  }
  ignoreEvent() {
    return !1;
  }
}() }), KK = /* @__PURE__ */ Te.mark({ class: "cm-snippetField" });
class Lc {
  constructor(e, t) {
    this.ranges = e, this.active = t, this.deco = Te.set(e.map((i) => (i.from == i.to ? UK : KK).range(i.from, i.to)));
  }
  map(e) {
    let t = [];
    for (let i of this.ranges) {
      let s = i.map(e);
      if (!s)
        return null;
      t.push(s);
    }
    return new Lc(t, this.active);
  }
  selectionInsideField(e) {
    return e.ranges.every((t) => this.ranges.some((i) => i.field == this.active && i.from <= t.from && i.to >= t.to));
  }
}
const Jh = /* @__PURE__ */ Ve.define({
  map(n, e) {
    return n && n.map(e);
  }
}), JK = /* @__PURE__ */ Ve.define(), uh = /* @__PURE__ */ Pn.define({
  create() {
    return null;
  },
  update(n, e) {
    for (let t of e.effects) {
      if (t.is(Jh))
        return t.value;
      if (t.is(JK) && n)
        return new Lc(n.ranges, t.value);
    }
    return n && e.docChanged && (n = n.map(e.changes)), n && e.selection && !n.selectionInsideField(e.selection) && (n = null), n;
  },
  provide: (n) => Oe.decorations.from(n, (e) => e ? e.deco : Te.none)
});
function Ty(n, e) {
  return J.create(n.filter((t) => t.field == e).map((t) => J.range(t.from, t.to)));
}
function eJ(n) {
  let e = $y.parse(n);
  return (t, i, s, r) => {
    let { text: o, ranges: l } = e.instantiate(t.state, s), a = {
      changes: { from: s, to: r, insert: ut.of(o) },
      scrollIntoView: !0,
      annotations: i ? [X$.of(i), en.userEvent.of("input.complete")] : void 0
    };
    if (l.length && (a.selection = Ty(l, 0)), l.some((c) => c.field > 0)) {
      let c = new Lc(l, 0), u = a.effects = [Jh.of(c)];
      t.state.field(uh, !1) === void 0 && u.push(Ve.appendConfig.of([uh, rJ, oJ, U$]));
    }
    t.dispatch(t.state.update(a));
  };
}
function K$(n) {
  return ({ state: e, dispatch: t }) => {
    let i = e.field(uh, !1);
    if (!i || n < 0 && i.active == 0)
      return !1;
    let s = i.active + n, r = n > 0 && !i.ranges.some((o) => o.field == s + n);
    return t(e.update({
      selection: Ty(i.ranges, s),
      effects: Jh.of(r ? null : new Lc(i.ranges, s)),
      scrollIntoView: !0
    })), !0;
  };
}
const tJ = ({ state: n, dispatch: e }) => n.field(uh, !1) ? (e(n.update({ effects: Jh.of(null) })), !0) : !1, nJ = /* @__PURE__ */ K$(1), iJ = /* @__PURE__ */ K$(-1), sJ = [
  { key: "Tab", run: nJ, shift: iJ },
  { key: "Escape", run: tJ }
], tS = /* @__PURE__ */ we.define({
  combine(n) {
    return n.length ? n[0] : sJ;
  }
}), rJ = /* @__PURE__ */ Kl.highest(/* @__PURE__ */ ng.compute([tS], (n) => n.facet(tS)));
function ui(n, e) {
  return Object.assign(Object.assign({}, e), { apply: eJ(n) });
}
const oJ = /* @__PURE__ */ Oe.domEventHandlers({
  mousedown(n, e) {
    let t = e.state.field(uh, !1), i;
    if (!t || (i = e.posAtCoords({ x: n.clientX, y: n.clientY })) == null)
      return !1;
    let s = t.ranges.find((r) => r.from <= i && r.to >= i);
    return !s || s.field == t.active ? !1 : (e.dispatch({
      selection: Ty(t.ranges, s.field),
      effects: Jh.of(t.ranges.some((r) => r.field > s.field) ? new Lc(t.ranges, s.field) : null),
      scrollIntoView: !0
    }), !0);
  }
}), hh = {
  brackets: ["(", "[", "{", "'", '"'],
  before: ")]}:;>",
  stringPrefixes: []
}, gl = /* @__PURE__ */ Ve.define({
  map(n, e) {
    let t = e.mapPos(n, -1, Nn.TrackAfter);
    return t ?? void 0;
  }
}), _y = /* @__PURE__ */ new class extends Ql {
}();
_y.startSide = 1;
_y.endSide = -1;
const J$ = /* @__PURE__ */ Pn.define({
  create() {
    return it.empty;
  },
  update(n, e) {
    if (n = n.map(e.changes), e.selection) {
      let t = e.state.doc.lineAt(e.selection.main.head);
      n = n.update({ filter: (i) => i >= t.from && i <= t.to });
    }
    for (let t of e.effects)
      t.is(gl) && (n = n.update({ add: [_y.range(t.value, t.value + 1)] }));
    return n;
  }
});
function lJ() {
  return [cJ, J$];
}
const Am = "()[]{}<>";
function eT(n) {
  for (let e = 0; e < Am.length; e += 2)
    if (Am.charCodeAt(e) == n)
      return Am.charAt(e + 1);
  return Uv(n < 128 ? n : n + 1);
}
function tT(n, e) {
  return n.languageDataAt("closeBrackets", e)[0] || hh;
}
const aJ = typeof navigator == "object" && /* @__PURE__ */ /Android\b/.test(navigator.userAgent), cJ = /* @__PURE__ */ Oe.inputHandler.of((n, e, t, i) => {
  if ((aJ ? n.composing : n.compositionStarted) || n.state.readOnly)
    return !1;
  let s = n.state.selection.main;
  if (i.length > 2 || i.length == 2 && Xi(Mn(i, 0)) == 1 || e != s.from || t != s.to)
    return !1;
  let r = fJ(n.state, i);
  return r ? (n.dispatch(r), !0) : !1;
}), uJ = ({ state: n, dispatch: e }) => {
  if (n.readOnly)
    return !1;
  let i = tT(n, n.selection.main.head).brackets || hh.brackets, s = null, r = n.changeByRange((o) => {
    if (o.empty) {
      let l = dJ(n.doc, o.head);
      for (let a of i)
        if (a == l && fg(n.doc, o.head) == eT(Mn(a, 0)))
          return {
            changes: { from: o.head - a.length, to: o.head + a.length },
            range: J.cursor(o.head - a.length)
          };
    }
    return { range: s = o };
  });
  return s || e(n.update(r, { scrollIntoView: !0, userEvent: "delete.backward" })), !s;
}, hJ = [
  { key: "Backspace", run: uJ }
];
function fJ(n, e) {
  let t = tT(n, n.selection.main.head), i = t.brackets || hh.brackets;
  for (let s of i) {
    let r = eT(Mn(s, 0));
    if (e == s)
      return r == s ? mJ(n, s, i.indexOf(s + s + s) > -1, t) : pJ(n, s, r, t.before || hh.before);
    if (e == r && nT(n, n.selection.main.from))
      return gJ(n, s, r);
  }
  return null;
}
function nT(n, e) {
  let t = !1;
  return n.field(J$).between(0, n.doc.length, (i) => {
    i == e && (t = !0);
  }), t;
}
function fg(n, e) {
  let t = n.sliceString(e, e + 2);
  return t.slice(0, Xi(Mn(t, 0)));
}
function dJ(n, e) {
  let t = n.sliceString(e - 2, e);
  return Xi(Mn(t, 0)) == t.length ? t : t.slice(1);
}
function pJ(n, e, t, i) {
  let s = null, r = n.changeByRange((o) => {
    if (!o.empty)
      return {
        changes: [{ insert: e, from: o.from }, { insert: t, from: o.to }],
        effects: gl.of(o.to + e.length),
        range: J.range(o.anchor + e.length, o.head + e.length)
      };
    let l = fg(n.doc, o.head);
    return !l || /\s/.test(l) || i.indexOf(l) > -1 ? {
      changes: { insert: e + t, from: o.head },
      effects: gl.of(o.head + e.length),
      range: J.cursor(o.head + e.length)
    } : { range: s = o };
  });
  return s ? null : n.update(r, {
    scrollIntoView: !0,
    userEvent: "input.type"
  });
}
function gJ(n, e, t) {
  let i = null, s = n.changeByRange((r) => r.empty && fg(n.doc, r.head) == t ? {
    changes: { from: r.head, to: r.head + t.length, insert: t },
    range: J.cursor(r.head + t.length)
  } : i = { range: r });
  return i ? null : n.update(s, {
    scrollIntoView: !0,
    userEvent: "input.type"
  });
}
function mJ(n, e, t, i) {
  let s = i.stringPrefixes || hh.stringPrefixes, r = null, o = n.changeByRange((l) => {
    if (!l.empty)
      return {
        changes: [{ insert: e, from: l.from }, { insert: e, from: l.to }],
        effects: gl.of(l.to + e.length),
        range: J.range(l.anchor + e.length, l.head + e.length)
      };
    let a = l.head, c = fg(n.doc, a), u;
    if (c == e) {
      if (nS(n, a))
        return {
          changes: { insert: e + e, from: a },
          effects: gl.of(a + e.length),
          range: J.cursor(a + e.length)
        };
      if (nT(n, a)) {
        let f = t && n.sliceDoc(a, a + e.length * 3) == e + e + e ? e + e + e : e;
        return {
          changes: { from: a, to: a + f.length, insert: f },
          range: J.cursor(a + f.length)
        };
      }
    } else {
      if (t && n.sliceDoc(a - 2 * e.length, a) == e + e && (u = iS(n, a - 2 * e.length, s)) > -1 && nS(n, u))
        return {
          changes: { insert: e + e + e + e, from: a },
          effects: gl.of(a + e.length),
          range: J.cursor(a + e.length)
        };
      if (n.charCategorizer(a)(c) != Nt.Word && iS(n, a, s) > -1 && !bJ(n, a, e, s))
        return {
          changes: { insert: e + e, from: a },
          effects: gl.of(a + e.length),
          range: J.cursor(a + e.length)
        };
    }
    return { range: r = l };
  });
  return r ? null : n.update(o, {
    scrollIntoView: !0,
    userEvent: "input.type"
  });
}
function nS(n, e) {
  let t = mn(n).resolveInner(e + 1);
  return t.parent && t.from == e;
}
function bJ(n, e, t, i) {
  let s = mn(n).resolveInner(e, -1), r = i.reduce((o, l) => Math.max(o, l.length), 0);
  for (let o = 0; o < 5; o++) {
    let l = n.sliceDoc(s.from, Math.min(s.to, s.from + t.length + r)), a = l.indexOf(t);
    if (!a || a > -1 && i.indexOf(l.slice(0, a)) > -1) {
      let u = s.firstChild;
      for (; u && u.from == s.from && u.to - u.from > t.length + a; ) {
        if (n.sliceDoc(u.to - t.length, u.to) == t)
          return !1;
        u = u.firstChild;
      }
      return !0;
    }
    let c = s.to == e && s.parent;
    if (!c)
      break;
    s = c;
  }
  return !1;
}
function iS(n, e, t) {
  let i = n.charCategorizer(e);
  if (i(n.sliceDoc(e - 1, e)) != Nt.Word)
    return e;
  for (let s of t) {
    let r = e - s.length;
    if (n.sliceDoc(r, e) == s && i(n.sliceDoc(r - 1, r)) != Nt.Word)
      return r;
  }
  return -1;
}
function vJ(n = {}) {
  return [
    Mi,
    In.of(n),
    HK,
    yJ,
    U$
  ];
}
const iT = [
  { key: "Ctrl-Space", run: VK },
  { key: "Escape", run: qK },
  { key: "ArrowDown", run: /* @__PURE__ */ jf(!0) },
  { key: "ArrowUp", run: /* @__PURE__ */ jf(!1) },
  { key: "PageDown", run: /* @__PURE__ */ jf(!0, "page") },
  { key: "PageUp", run: /* @__PURE__ */ jf(!1, "page") },
  { key: "Enter", run: FK }
], yJ = /* @__PURE__ */ Kl.highest(/* @__PURE__ */ ng.computeN([In], (n) => n.facet(In).defaultKeymap ? [iT] : []));
class OJ {
  constructor(e, t, i) {
    this.from = e, this.to = t, this.diagnostic = i;
  }
}
class ll {
  constructor(e, t, i) {
    this.diagnostics = e, this.panel = t, this.selected = i;
  }
  static init(e, t, i) {
    let s = e, r = i.facet(oT).markerFilter;
    r && (s = r(s, i));
    let o = Te.set(s.map((l) => l.from == l.to || l.from == l.to - 1 && i.doc.lineAt(l.from).to == l.from ? Te.widget({
      widget: new $J(l),
      diagnostic: l
    }).range(l.from) : Te.mark({
      attributes: { class: "cm-lintRange cm-lintRange-" + l.severity + (l.markClass ? " " + l.markClass : "") },
      diagnostic: l,
      inclusive: !0
    }).range(l.from, l.to)), !0);
    return new ll(o, t, nc(o));
  }
}
function nc(n, e = null, t = 0) {
  let i = null;
  return n.between(t, 1e9, (s, r, { spec: o }) => {
    if (!(e && o.diagnostic != e))
      return i = new OJ(s, r, o.diagnostic), !1;
  }), i;
}
function wJ(n, e) {
  let t = n.startState.doc.lineAt(e.pos);
  return !!(n.effects.some((i) => i.is(sT)) || n.changes.touchesRange(t.from, t.to));
}
function xJ(n, e) {
  return n.field(Ni, !1) ? e : e.concat(Ve.appendConfig.of(MJ));
}
const sT = /* @__PURE__ */ Ve.define(), My = /* @__PURE__ */ Ve.define(), rT = /* @__PURE__ */ Ve.define(), Ni = /* @__PURE__ */ Pn.define({
  create() {
    return new ll(Te.none, null, null);
  },
  update(n, e) {
    if (e.docChanged) {
      let t = n.diagnostics.map(e.changes), i = null;
      if (n.selected) {
        let s = e.changes.mapPos(n.selected.from, 1);
        i = nc(t, n.selected.diagnostic, s) || nc(t, null, s);
      }
      n = new ll(t, n.panel, i);
    }
    for (let t of e.effects)
      t.is(sT) ? n = ll.init(t.value, n.panel, e.state) : t.is(My) ? n = new ll(n.diagnostics, t.value ? dg.open : null, n.selected) : t.is(rT) && (n = new ll(n.diagnostics, n.panel, t.value));
    return n;
  },
  provide: (n) => [
    sh.from(n, (e) => e.panel),
    Oe.decorations.from(n, (e) => e.diagnostics)
  ]
}), SJ = /* @__PURE__ */ Te.mark({ class: "cm-lintRange cm-lintRange-active", inclusive: !0 });
function CJ(n, e, t) {
  let { diagnostics: i } = n.state.field(Ni), s = [], r = 2e8, o = 0;
  i.between(e - (t < 0 ? 1 : 0), e + (t > 0 ? 1 : 0), (a, c, { spec: u }) => {
    e >= a && e <= c && (a == c || (e > a || t > 0) && (e < c || t < 0)) && (s.push(u.diagnostic), r = Math.min(a, r), o = Math.max(c, o));
  });
  let l = n.state.facet(oT).tooltipFilter;
  return l && (s = l(s, n.state)), s.length ? {
    pos: r,
    end: o,
    above: n.state.doc.lineAt(r).to < o,
    create() {
      return { dom: kJ(n, s) };
    }
  } : null;
}
function kJ(n, e) {
  return Ct("ul", { class: "cm-tooltip-lint" }, e.map((t) => aT(n, t, !1)));
}
const PJ = (n) => {
  let e = n.state.field(Ni, !1);
  (!e || !e.panel) && n.dispatch({ effects: xJ(n.state, [My.of(!0)]) });
  let t = ih(n, dg.open);
  return t && t.dom.querySelector(".cm-panel-lint ul").focus(), !0;
}, sS = (n) => {
  let e = n.state.field(Ni, !1);
  return !e || !e.panel ? !1 : (n.dispatch({ effects: My.of(!1) }), !0);
}, AJ = (n) => {
  let e = n.state.field(Ni, !1);
  if (!e)
    return !1;
  let t = n.state.selection.main, i = e.diagnostics.iter(t.to + 1);
  return !i.value && (i = e.diagnostics.iter(0), !i.value || i.from == t.from && i.to == t.to) ? !1 : (n.dispatch({ selection: { anchor: i.from, head: i.to }, scrollIntoView: !0 }), !0);
}, EJ = [
  { key: "Mod-Shift-m", run: PJ, preventDefault: !0 },
  { key: "F8", run: AJ }
], oT = /* @__PURE__ */ we.define({
  combine(n) {
    return Object.assign({ sources: n.map((e) => e.source).filter((e) => e != null) }, Or(n.map((e) => e.config), {
      delay: 750,
      markerFilter: null,
      tooltipFilter: null,
      needsRefresh: null
    }, {
      needsRefresh: (e, t) => e ? t ? (i) => e(i) || t(i) : e : t
    }));
  }
});
function lT(n) {
  let e = [];
  if (n)
    e:
      for (let { name: t } of n) {
        for (let i = 0; i < t.length; i++) {
          let s = t[i];
          if (/[a-zA-Z]/.test(s) && !e.some((r) => r.toLowerCase() == s.toLowerCase())) {
            e.push(s);
            continue e;
          }
        }
        e.push("");
      }
  return e;
}
function aT(n, e, t) {
  var i;
  let s = t ? lT(e.actions) : [];
  return Ct("li", { class: "cm-diagnostic cm-diagnostic-" + e.severity }, Ct("span", { class: "cm-diagnosticText" }, e.renderMessage ? e.renderMessage() : e.message), (i = e.actions) === null || i === void 0 ? void 0 : i.map((r, o) => {
    let l = !1, a = (f) => {
      if (f.preventDefault(), l)
        return;
      l = !0;
      let d = nc(n.state.field(Ni).diagnostics, e);
      d && r.apply(n, d.from, d.to);
    }, { name: c } = r, u = s[o] ? c.indexOf(s[o]) : -1, h = u < 0 ? c : [
      c.slice(0, u),
      Ct("u", c.slice(u, u + 1)),
      c.slice(u + 1)
    ];
    return Ct("button", {
      type: "button",
      class: "cm-diagnosticAction",
      onclick: a,
      onmousedown: a,
      "aria-label": ` Action: ${c}${u < 0 ? "" : ` (access key "${s[o]})"`}.`
    }, h);
  }), e.source && Ct("div", { class: "cm-diagnosticSource" }, e.source));
}
class $J extends Gr {
  constructor(e) {
    super(), this.diagnostic = e;
  }
  eq(e) {
    return e.diagnostic == this.diagnostic;
  }
  toDOM() {
    return Ct("span", { class: "cm-lintPoint cm-lintPoint-" + this.diagnostic.severity });
  }
}
class rS {
  constructor(e, t) {
    this.diagnostic = t, this.id = "item_" + Math.floor(Math.random() * 4294967295).toString(16), this.dom = aT(e, t, !0), this.dom.id = this.id, this.dom.setAttribute("role", "option");
  }
}
class dg {
  constructor(e) {
    this.view = e, this.items = [];
    let t = (s) => {
      if (s.keyCode == 27)
        sS(this.view), this.view.focus();
      else if (s.keyCode == 38 || s.keyCode == 33)
        this.moveSelection((this.selectedIndex - 1 + this.items.length) % this.items.length);
      else if (s.keyCode == 40 || s.keyCode == 34)
        this.moveSelection((this.selectedIndex + 1) % this.items.length);
      else if (s.keyCode == 36)
        this.moveSelection(0);
      else if (s.keyCode == 35)
        this.moveSelection(this.items.length - 1);
      else if (s.keyCode == 13)
        this.view.focus();
      else if (s.keyCode >= 65 && s.keyCode <= 90 && this.selectedIndex >= 0) {
        let { diagnostic: r } = this.items[this.selectedIndex], o = lT(r.actions);
        for (let l = 0; l < o.length; l++)
          if (o[l].toUpperCase().charCodeAt(0) == s.keyCode) {
            let a = nc(this.view.state.field(Ni).diagnostics, r);
            a && r.actions[l].apply(e, a.from, a.to);
          }
      } else
        return;
      s.preventDefault();
    }, i = (s) => {
      for (let r = 0; r < this.items.length; r++)
        this.items[r].dom.contains(s.target) && this.moveSelection(r);
    };
    this.list = Ct("ul", {
      tabIndex: 0,
      role: "listbox",
      "aria-label": this.view.state.phrase("Diagnostics"),
      onkeydown: t,
      onclick: i
    }), this.dom = Ct("div", { class: "cm-panel-lint" }, this.list, Ct("button", {
      type: "button",
      name: "close",
      "aria-label": this.view.state.phrase("close"),
      onclick: () => sS(this.view)
    }, "×")), this.update();
  }
  get selectedIndex() {
    let e = this.view.state.field(Ni).selected;
    if (!e)
      return -1;
    for (let t = 0; t < this.items.length; t++)
      if (this.items[t].diagnostic == e.diagnostic)
        return t;
    return -1;
  }
  update() {
    let { diagnostics: e, selected: t } = this.view.state.field(Ni), i = 0, s = !1, r = null;
    for (e.between(0, this.view.state.doc.length, (o, l, { spec: a }) => {
      let c = -1, u;
      for (let h = i; h < this.items.length; h++)
        if (this.items[h].diagnostic == a.diagnostic) {
          c = h;
          break;
        }
      c < 0 ? (u = new rS(this.view, a.diagnostic), this.items.splice(i, 0, u), s = !0) : (u = this.items[c], c > i && (this.items.splice(i, c - i), s = !0)), t && u.diagnostic == t.diagnostic ? u.dom.hasAttribute("aria-selected") || (u.dom.setAttribute("aria-selected", "true"), r = u) : u.dom.hasAttribute("aria-selected") && u.dom.removeAttribute("aria-selected"), i++;
    }); i < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0); )
      s = !0, this.items.pop();
    this.items.length == 0 && (this.items.push(new rS(this.view, {
      from: -1,
      to: -1,
      severity: "info",
      message: this.view.state.phrase("No diagnostics")
    })), s = !0), r ? (this.list.setAttribute("aria-activedescendant", r.id), this.view.requestMeasure({
      key: this,
      read: () => ({ sel: r.dom.getBoundingClientRect(), panel: this.list.getBoundingClientRect() }),
      write: ({ sel: o, panel: l }) => {
        let a = l.height / this.list.offsetHeight;
        o.top < l.top ? this.list.scrollTop -= (l.top - o.top) / a : o.bottom > l.bottom && (this.list.scrollTop += (o.bottom - l.bottom) / a);
      }
    })) : this.selectedIndex < 0 && this.list.removeAttribute("aria-activedescendant"), s && this.sync();
  }
  sync() {
    let e = this.list.firstChild;
    function t() {
      let i = e;
      e = i.nextSibling, i.remove();
    }
    for (let i of this.items)
      if (i.dom.parentNode == this.list) {
        for (; e != i.dom; )
          t();
        e = i.dom.nextSibling;
      } else
        this.list.insertBefore(i.dom, e);
    for (; e; )
      t();
  }
  moveSelection(e) {
    if (this.selectedIndex < 0)
      return;
    let t = this.view.state.field(Ni), i = nc(t.diagnostics, this.items[e].diagnostic);
    i && this.view.dispatch({
      selection: { anchor: i.from, head: i.to },
      scrollIntoView: !0,
      effects: rT.of(i)
    });
  }
  static open(e) {
    return new dg(e);
  }
}
function TJ(n, e = 'viewBox="0 0 40 40"') {
  return `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" ${e}>${encodeURIComponent(n)}</svg>')`;
}
function zf(n) {
  return TJ(`<path d="m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0" stroke="${n}" fill="none" stroke-width=".7"/>`, 'width="6" height="3"');
}
const _J = /* @__PURE__ */ Oe.baseTheme({
  ".cm-diagnostic": {
    padding: "3px 6px 3px 8px",
    marginLeft: "-1px",
    display: "block",
    whiteSpace: "pre-wrap"
  },
  ".cm-diagnostic-error": { borderLeft: "5px solid #d11" },
  ".cm-diagnostic-warning": { borderLeft: "5px solid orange" },
  ".cm-diagnostic-info": { borderLeft: "5px solid #999" },
  ".cm-diagnostic-hint": { borderLeft: "5px solid #66d" },
  ".cm-diagnosticAction": {
    font: "inherit",
    border: "none",
    padding: "2px 4px",
    backgroundColor: "#444",
    color: "white",
    borderRadius: "3px",
    marginLeft: "8px",
    cursor: "pointer"
  },
  ".cm-diagnosticSource": {
    fontSize: "70%",
    opacity: 0.7
  },
  ".cm-lintRange": {
    backgroundPosition: "left bottom",
    backgroundRepeat: "repeat-x",
    paddingBottom: "0.7px"
  },
  ".cm-lintRange-error": { backgroundImage: /* @__PURE__ */ zf("#d11") },
  ".cm-lintRange-warning": { backgroundImage: /* @__PURE__ */ zf("orange") },
  ".cm-lintRange-info": { backgroundImage: /* @__PURE__ */ zf("#999") },
  ".cm-lintRange-hint": { backgroundImage: /* @__PURE__ */ zf("#66d") },
  ".cm-lintRange-active": { backgroundColor: "#ffdd9980" },
  ".cm-tooltip-lint": {
    padding: 0,
    margin: 0
  },
  ".cm-lintPoint": {
    position: "relative",
    "&:after": {
      content: '""',
      position: "absolute",
      bottom: 0,
      left: "-2px",
      borderLeft: "3px solid transparent",
      borderRight: "3px solid transparent",
      borderBottom: "4px solid #d11"
    }
  },
  ".cm-lintPoint-warning": {
    "&:after": { borderBottomColor: "orange" }
  },
  ".cm-lintPoint-info": {
    "&:after": { borderBottomColor: "#999" }
  },
  ".cm-lintPoint-hint": {
    "&:after": { borderBottomColor: "#66d" }
  },
  ".cm-panel.cm-panel-lint": {
    position: "relative",
    "& ul": {
      maxHeight: "100px",
      overflowY: "auto",
      "& [aria-selected]": {
        backgroundColor: "#ddd",
        "& u": { textDecoration: "underline" }
      },
      "&:focus [aria-selected]": {
        background_fallback: "#bdf",
        backgroundColor: "Highlight",
        color_fallback: "white",
        color: "HighlightText"
      },
      "& u": { textDecoration: "none" },
      padding: 0,
      margin: 0
    },
    "& [name=close]": {
      position: "absolute",
      top: "0",
      right: "2px",
      background: "inherit",
      border: "none",
      font: "inherit",
      padding: 0,
      margin: 0
    }
  }
}), MJ = [
  Ni,
  /* @__PURE__ */ Oe.decorations.compute([Ni], (n) => {
    let { selected: e, panel: t } = n.field(Ni);
    return !e || !t || e.from == e.to ? Te.none : Te.set([
      SJ.range(e.from, e.to)
    ]);
  }),
  /* @__PURE__ */ SH(CJ, { hideOn: wJ }),
  _J
], dFe = [
  MH(),
  LH(),
  eH(),
  UG(),
  SG(),
  FY(),
  YY(),
  at.allowMultipleSelections.of(!0),
  uG(),
  kG(EG, { fallback: !0 }),
  LG(),
  lJ(),
  vJ(),
  fH(),
  gH(),
  oH(),
  sK(),
  ng.of([
    ...hJ,
    ...JU,
    ...SK,
    ...oU,
    ...yG,
    ...iT,
    ...EJ
  ])
];
let RJ = class Tb {
  /**
  @internal
  */
  constructor(e, t, i, s, r, o, l, a, c, u = 0, h) {
    this.p = e, this.stack = t, this.state = i, this.reducePos = s, this.pos = r, this.score = o, this.buffer = l, this.bufferBase = a, this.curContext = c, this.lookAhead = u, this.parent = h;
  }
  /**
  @internal
  */
  toString() {
    return `[${this.stack.filter((e, t) => t % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? "!" + this.score : ""}`;
  }
  // Start an empty stack
  /**
  @internal
  */
  static start(e, t, i = 0) {
    let s = e.parser.context;
    return new Tb(e, [], t, i, i, 0, [], 0, s ? new oS(s, s.start) : null, 0, null);
  }
  /**
  The stack's current [context](#lr.ContextTracker) value, if
  any. Its type will depend on the context tracker's type
  parameter, or it will be `null` if there is no context
  tracker.
  */
  get context() {
    return this.curContext ? this.curContext.context : null;
  }
  // Push a state onto the stack, tracking its start position as well
  // as the buffer base at that point.
  /**
  @internal
  */
  pushState(e, t) {
    this.stack.push(this.state, t, this.bufferBase + this.buffer.length), this.state = e;
  }
  // Apply a reduce action
  /**
  @internal
  */
  reduce(e) {
    var t;
    let i = e >> 19, s = e & 65535, { parser: r } = this.p, o = r.dynamicPrecedence(s);
    if (o && (this.score += o), i == 0) {
      this.pushState(r.getGoto(this.state, s, !0), this.reducePos), s < r.minRepeatTerm && this.storeNode(s, this.reducePos, this.reducePos, 4, !0), this.reduceContext(s, this.reducePos);
      return;
    }
    let l = this.stack.length - (i - 1) * 3 - (e & 262144 ? 6 : 0), a = l ? this.stack[l - 2] : this.p.ranges[0].from, c = this.reducePos - a;
    c >= 2e3 && !(!((t = this.p.parser.nodeSet.types[s]) === null || t === void 0) && t.isAnonymous) && (a == this.p.lastBigReductionStart ? (this.p.bigReductionCount++, this.p.lastBigReductionSize = c) : this.p.lastBigReductionSize < c && (this.p.bigReductionCount = 1, this.p.lastBigReductionStart = a, this.p.lastBigReductionSize = c));
    let u = l ? this.stack[l - 1] : 0, h = this.bufferBase + this.buffer.length - u;
    if (s < r.minRepeatTerm || e & 131072) {
      let f = r.stateFlag(
        this.state,
        1
        /* StateFlag.Skipped */
      ) ? this.pos : this.reducePos;
      this.storeNode(s, a, f, h + 4, !0);
    }
    if (e & 262144)
      this.state = this.stack[l];
    else {
      let f = this.stack[l - 3];
      this.state = r.getGoto(f, s, !0);
    }
    for (; this.stack.length > l; )
      this.stack.pop();
    this.reduceContext(s, a);
  }
  // Shift a value into the buffer
  /**
  @internal
  */
  storeNode(e, t, i, s = 4, r = !1) {
    if (e == 0 && (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {
      let o = this, l = this.buffer.length;
      if (l == 0 && o.parent && (l = o.bufferBase - o.parent.bufferBase, o = o.parent), l > 0 && o.buffer[l - 4] == 0 && o.buffer[l - 1] > -1) {
        if (t == i)
          return;
        if (o.buffer[l - 2] >= t) {
          o.buffer[l - 2] = i;
          return;
        }
      }
    }
    if (!r || this.pos == i)
      this.buffer.push(e, t, i, s);
    else {
      let o = this.buffer.length;
      if (o > 0 && this.buffer[o - 4] != 0)
        for (; o > 0 && this.buffer[o - 2] > i; )
          this.buffer[o] = this.buffer[o - 4], this.buffer[o + 1] = this.buffer[o - 3], this.buffer[o + 2] = this.buffer[o - 2], this.buffer[o + 3] = this.buffer[o - 1], o -= 4, s > 4 && (s -= 4);
      this.buffer[o] = e, this.buffer[o + 1] = t, this.buffer[o + 2] = i, this.buffer[o + 3] = s;
    }
  }
  // Apply a shift action
  /**
  @internal
  */
  shift(e, t, i, s) {
    if (e & 131072)
      this.pushState(e & 65535, this.pos);
    else if (e & 262144)
      this.pos = s, this.shiftContext(t, i), t <= this.p.parser.maxNode && this.buffer.push(t, i, s, 4);
    else {
      let r = e, { parser: o } = this.p;
      (s > this.pos || t <= o.maxNode) && (this.pos = s, o.stateFlag(
        r,
        1
        /* StateFlag.Skipped */
      ) || (this.reducePos = s)), this.pushState(r, i), this.shiftContext(t, i), t <= o.maxNode && this.buffer.push(t, i, s, 4);
    }
  }
  // Apply an action
  /**
  @internal
  */
  apply(e, t, i, s) {
    e & 65536 ? this.reduce(e) : this.shift(e, t, i, s);
  }
  // Add a prebuilt (reused) node into the buffer.
  /**
  @internal
  */
  useNode(e, t) {
    let i = this.p.reused.length - 1;
    (i < 0 || this.p.reused[i] != e) && (this.p.reused.push(e), i++);
    let s = this.pos;
    this.reducePos = this.pos = s + e.length, this.pushState(t, s), this.buffer.push(
      i,
      s,
      this.reducePos,
      -1
      /* size == -1 means this is a reused value */
    ), this.curContext && this.updateContext(this.curContext.tracker.reuse(this.curContext.context, e, this, this.p.stream.reset(this.pos - e.length)));
  }
  // Split the stack. Due to the buffer sharing and the fact
  // that `this.stack` tends to stay quite shallow, this isn't very
  // expensive.
  /**
  @internal
  */
  split() {
    let e = this, t = e.buffer.length;
    for (; t > 0 && e.buffer[t - 2] > e.reducePos; )
      t -= 4;
    let i = e.buffer.slice(t), s = e.bufferBase + t;
    for (; e && s == e.bufferBase; )
      e = e.parent;
    return new Tb(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, i, s, this.curContext, this.lookAhead, e);
  }
  // Try to recover from an error by 'deleting' (ignoring) one token.
  /**
  @internal
  */
  recoverByDelete(e, t) {
    let i = e <= this.p.parser.maxNode;
    i && this.storeNode(e, this.pos, t, 4), this.storeNode(0, this.pos, t, i ? 8 : 4), this.pos = this.reducePos = t, this.score -= 190;
  }
  /**
  Check if the given term would be able to be shifted (optionally
  after some reductions) on this stack. This can be useful for
  external tokenizers that want to make sure they only provide a
  given token when it applies.
  */
  canShift(e) {
    for (let t = new DJ(this); ; ) {
      let i = this.p.parser.stateSlot(
        t.state,
        4
        /* ParseState.DefaultReduce */
      ) || this.p.parser.hasAction(t.state, e);
      if (i == 0)
        return !1;
      if (!(i & 65536))
        return !0;
      t.reduce(i);
    }
  }
  // Apply up to Recover.MaxNext recovery actions that conceptually
  // inserts some missing token or rule.
  /**
  @internal
  */
  recoverByInsert(e) {
    if (this.stack.length >= 300)
      return [];
    let t = this.p.parser.nextStates(this.state);
    if (t.length > 8 || this.stack.length >= 120) {
      let s = [];
      for (let r = 0, o; r < t.length; r += 2)
        (o = t[r + 1]) != this.state && this.p.parser.hasAction(o, e) && s.push(t[r], o);
      if (this.stack.length < 120)
        for (let r = 0; s.length < 8 && r < t.length; r += 2) {
          let o = t[r + 1];
          s.some((l, a) => a & 1 && l == o) || s.push(t[r], o);
        }
      t = s;
    }
    let i = [];
    for (let s = 0; s < t.length && i.length < 4; s += 2) {
      let r = t[s + 1];
      if (r == this.state)
        continue;
      let o = this.split();
      o.pushState(r, this.pos), o.storeNode(0, o.pos, o.pos, 4, !0), o.shiftContext(t[s], this.pos), o.reducePos = this.pos, o.score -= 200, i.push(o);
    }
    return i;
  }
  // Force a reduce, if possible. Return false if that can't
  // be done.
  /**
  @internal
  */
  forceReduce() {
    let { parser: e } = this.p, t = e.stateSlot(
      this.state,
      5
      /* ParseState.ForcedReduce */
    );
    if (!(t & 65536))
      return !1;
    if (!e.validAction(this.state, t)) {
      let i = t >> 19, s = t & 65535, r = this.stack.length - i * 3;
      if (r < 0 || e.getGoto(this.stack[r], s, !1) < 0) {
        let o = this.findForcedReduction();
        if (o == null)
          return !1;
        t = o;
      }
      this.storeNode(0, this.pos, this.pos, 4, !0), this.score -= 100;
    }
    return this.reducePos = this.pos, this.reduce(t), !0;
  }
  /**
  Try to scan through the automaton to find some kind of reduction
  that can be applied. Used when the regular ForcedReduce field
  isn't a valid action. @internal
  */
  findForcedReduction() {
    let { parser: e } = this.p, t = [], i = (s, r) => {
      if (!t.includes(s))
        return t.push(s), e.allActions(s, (o) => {
          if (!(o & 393216))
            if (o & 65536) {
              let l = (o >> 19) - r;
              if (l > 1) {
                let a = o & 65535, c = this.stack.length - l * 3;
                if (c >= 0 && e.getGoto(this.stack[c], a, !1) >= 0)
                  return l << 19 | 65536 | a;
              }
            } else {
              let l = i(o, r + 1);
              if (l != null)
                return l;
            }
        });
    };
    return i(this.state, 0);
  }
  /**
  @internal
  */
  forceAll() {
    for (; !this.p.parser.stateFlag(
      this.state,
      2
      /* StateFlag.Accepting */
    ); )
      if (!this.forceReduce()) {
        this.storeNode(0, this.pos, this.pos, 4, !0);
        break;
      }
    return this;
  }
  /**
  Check whether this state has no further actions (assumed to be a direct descendant of the
  top state, since any other states must be able to continue
  somehow). @internal
  */
  get deadEnd() {
    if (this.stack.length != 3)
      return !1;
    let { parser: e } = this.p;
    return e.data[e.stateSlot(
      this.state,
      1
      /* ParseState.Actions */
    )] == 65535 && !e.stateSlot(
      this.state,
      4
      /* ParseState.DefaultReduce */
    );
  }
  /**
  Restart the stack (put it back in its start state). Only safe
  when this.stack.length == 3 (state is directly below the top
  state). @internal
  */
  restart() {
    this.storeNode(0, this.pos, this.pos, 4, !0), this.state = this.stack[0], this.stack.length = 0;
  }
  /**
  @internal
  */
  sameState(e) {
    if (this.state != e.state || this.stack.length != e.stack.length)
      return !1;
    for (let t = 0; t < this.stack.length; t += 3)
      if (this.stack[t] != e.stack[t])
        return !1;
    return !0;
  }
  /**
  Get the parser used by this stack.
  */
  get parser() {
    return this.p.parser;
  }
  /**
  Test whether a given dialect (by numeric ID, as exported from
  the terms file) is enabled.
  */
  dialectEnabled(e) {
    return this.p.parser.dialect.flags[e];
  }
  shiftContext(e, t) {
    this.curContext && this.updateContext(this.curContext.tracker.shift(this.curContext.context, e, this, this.p.stream.reset(t)));
  }
  reduceContext(e, t) {
    this.curContext && this.updateContext(this.curContext.tracker.reduce(this.curContext.context, e, this, this.p.stream.reset(t)));
  }
  /**
  @internal
  */
  emitContext() {
    let e = this.buffer.length - 1;
    (e < 0 || this.buffer[e] != -3) && this.buffer.push(this.curContext.hash, this.pos, this.pos, -3);
  }
  /**
  @internal
  */
  emitLookAhead() {
    let e = this.buffer.length - 1;
    (e < 0 || this.buffer[e] != -4) && this.buffer.push(this.lookAhead, this.pos, this.pos, -4);
  }
  updateContext(e) {
    if (e != this.curContext.context) {
      let t = new oS(this.curContext.tracker, e);
      t.hash != this.curContext.hash && this.emitContext(), this.curContext = t;
    }
  }
  /**
  @internal
  */
  setLookAhead(e) {
    e > this.lookAhead && (this.emitLookAhead(), this.lookAhead = e);
  }
  /**
  @internal
  */
  close() {
    this.curContext && this.curContext.tracker.strict && this.emitContext(), this.lookAhead > 0 && this.emitLookAhead();
  }
};
class oS {
  constructor(e, t) {
    this.tracker = e, this.context = t, this.hash = e.strict ? e.hash(t) : 0;
  }
}
class DJ {
  constructor(e) {
    this.start = e, this.state = e.state, this.stack = e.stack, this.base = this.stack.length;
  }
  reduce(e) {
    let t = e & 65535, i = e >> 19;
    i == 0 ? (this.stack == this.start.stack && (this.stack = this.stack.slice()), this.stack.push(this.state, 0, 0), this.base += 3) : this.base -= (i - 1) * 3;
    let s = this.start.p.parser.getGoto(this.stack[this.base - 3], t, !0);
    this.state = s;
  }
}
class up {
  constructor(e, t, i) {
    this.stack = e, this.pos = t, this.index = i, this.buffer = e.buffer, this.index == 0 && this.maybeNext();
  }
  static create(e, t = e.bufferBase + e.buffer.length) {
    return new up(e, t, t - e.bufferBase);
  }
  maybeNext() {
    let e = this.stack.parent;
    e != null && (this.index = this.stack.bufferBase - e.bufferBase, this.stack = e, this.buffer = e.buffer);
  }
  get id() {
    return this.buffer[this.index - 4];
  }
  get start() {
    return this.buffer[this.index - 3];
  }
  get end() {
    return this.buffer[this.index - 2];
  }
  get size() {
    return this.buffer[this.index - 1];
  }
  next() {
    this.index -= 4, this.pos -= 4, this.index == 0 && this.maybeNext();
  }
  fork() {
    return new up(this.stack, this.pos, this.index);
  }
}
function cu(n, e = Uint16Array) {
  if (typeof n != "string")
    return n;
  let t = null;
  for (let i = 0, s = 0; i < n.length; ) {
    let r = 0;
    for (; ; ) {
      let o = n.charCodeAt(i++), l = !1;
      if (o == 126) {
        r = 65535;
        break;
      }
      o >= 92 && o--, o >= 34 && o--;
      let a = o - 32;
      if (a >= 46 && (a -= 46, l = !0), r += a, l)
        break;
      r *= 46;
    }
    t ? t[s++] = r : t = new e(r);
  }
  return t;
}
class Sd {
  constructor() {
    this.start = -1, this.value = -1, this.end = -1, this.extended = -1, this.lookAhead = 0, this.mask = 0, this.context = 0;
  }
}
const lS = new Sd();
class LJ {
  /**
  @internal
  */
  constructor(e, t) {
    this.input = e, this.ranges = t, this.chunk = "", this.chunkOff = 0, this.chunk2 = "", this.chunk2Pos = 0, this.next = -1, this.token = lS, this.rangeIndex = 0, this.pos = this.chunkPos = t[0].from, this.range = t[0], this.end = t[t.length - 1].to, this.readNext();
  }
  /**
  @internal
  */
  resolveOffset(e, t) {
    let i = this.range, s = this.rangeIndex, r = this.pos + e;
    for (; r < i.from; ) {
      if (!s)
        return null;
      let o = this.ranges[--s];
      r -= i.from - o.to, i = o;
    }
    for (; t < 0 ? r > i.to : r >= i.to; ) {
      if (s == this.ranges.length - 1)
        return null;
      let o = this.ranges[++s];
      r += o.from - i.to, i = o;
    }
    return r;
  }
  /**
  @internal
  */
  clipPos(e) {
    if (e >= this.range.from && e < this.range.to)
      return e;
    for (let t of this.ranges)
      if (t.to > e)
        return Math.max(e, t.from);
    return this.end;
  }
  /**
  Look at a code unit near the stream position. `.peek(0)` equals
  `.next`, `.peek(-1)` gives you the previous character, and so
  on.
  
  Note that looking around during tokenizing creates dependencies
  on potentially far-away content, which may reduce the
  effectiveness incremental parsing—when looking forward—or even
  cause invalid reparses when looking backward more than 25 code
  units, since the library does not track lookbehind.
  */
  peek(e) {
    let t = this.chunkOff + e, i, s;
    if (t >= 0 && t < this.chunk.length)
      i = this.pos + e, s = this.chunk.charCodeAt(t);
    else {
      let r = this.resolveOffset(e, 1);
      if (r == null)
        return -1;
      if (i = r, i >= this.chunk2Pos && i < this.chunk2Pos + this.chunk2.length)
        s = this.chunk2.charCodeAt(i - this.chunk2Pos);
      else {
        let o = this.rangeIndex, l = this.range;
        for (; l.to <= i; )
          l = this.ranges[++o];
        this.chunk2 = this.input.chunk(this.chunk2Pos = i), i + this.chunk2.length > l.to && (this.chunk2 = this.chunk2.slice(0, l.to - i)), s = this.chunk2.charCodeAt(0);
      }
    }
    return i >= this.token.lookAhead && (this.token.lookAhead = i + 1), s;
  }
  /**
  Accept a token. By default, the end of the token is set to the
  current stream position, but you can pass an offset (relative to
  the stream position) to change that.
  */
  acceptToken(e, t = 0) {
    let i = t ? this.resolveOffset(t, -1) : this.pos;
    if (i == null || i < this.token.start)
      throw new RangeError("Token end out of bounds");
    this.token.value = e, this.token.end = i;
  }
  /**
  Accept a token ending at a specific given position.
  */
  acceptTokenTo(e, t) {
    this.token.value = e, this.token.end = t;
  }
  getChunk() {
    if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {
      let { chunk: e, chunkPos: t } = this;
      this.chunk = this.chunk2, this.chunkPos = this.chunk2Pos, this.chunk2 = e, this.chunk2Pos = t, this.chunkOff = this.pos - this.chunkPos;
    } else {
      this.chunk2 = this.chunk, this.chunk2Pos = this.chunkPos;
      let e = this.input.chunk(this.pos), t = this.pos + e.length;
      this.chunk = t > this.range.to ? e.slice(0, this.range.to - this.pos) : e, this.chunkPos = this.pos, this.chunkOff = 0;
    }
  }
  readNext() {
    return this.chunkOff >= this.chunk.length && (this.getChunk(), this.chunkOff == this.chunk.length) ? this.next = -1 : this.next = this.chunk.charCodeAt(this.chunkOff);
  }
  /**
  Move the stream forward N (defaults to 1) code units. Returns
  the new value of [`next`](#lr.InputStream.next).
  */
  advance(e = 1) {
    for (this.chunkOff += e; this.pos + e >= this.range.to; ) {
      if (this.rangeIndex == this.ranges.length - 1)
        return this.setDone();
      e -= this.range.to - this.pos, this.range = this.ranges[++this.rangeIndex], this.pos = this.range.from;
    }
    return this.pos += e, this.pos >= this.token.lookAhead && (this.token.lookAhead = this.pos + 1), this.readNext();
  }
  setDone() {
    return this.pos = this.chunkPos = this.end, this.range = this.ranges[this.rangeIndex = this.ranges.length - 1], this.chunk = "", this.next = -1;
  }
  /**
  @internal
  */
  reset(e, t) {
    if (t ? (this.token = t, t.start = e, t.lookAhead = e + 1, t.value = t.extended = -1) : this.token = lS, this.pos != e) {
      if (this.pos = e, e == this.end)
        return this.setDone(), this;
      for (; e < this.range.from; )
        this.range = this.ranges[--this.rangeIndex];
      for (; e >= this.range.to; )
        this.range = this.ranges[++this.rangeIndex];
      e >= this.chunkPos && e < this.chunkPos + this.chunk.length ? this.chunkOff = e - this.chunkPos : (this.chunk = "", this.chunkOff = 0), this.readNext();
    }
    return this;
  }
  /**
  @internal
  */
  read(e, t) {
    if (e >= this.chunkPos && t <= this.chunkPos + this.chunk.length)
      return this.chunk.slice(e - this.chunkPos, t - this.chunkPos);
    if (e >= this.chunk2Pos && t <= this.chunk2Pos + this.chunk2.length)
      return this.chunk2.slice(e - this.chunk2Pos, t - this.chunk2Pos);
    if (e >= this.range.from && t <= this.range.to)
      return this.input.read(e, t);
    let i = "";
    for (let s of this.ranges) {
      if (s.from >= t)
        break;
      s.to > e && (i += this.input.read(Math.max(s.from, e), Math.min(s.to, t)));
    }
    return i;
  }
}
class $a {
  constructor(e, t) {
    this.data = e, this.id = t;
  }
  token(e, t) {
    let { parser: i } = t.p;
    cT(this.data, e, t, this.id, i.data, i.tokenPrecTable);
  }
}
$a.prototype.contextual = $a.prototype.fallback = $a.prototype.extend = !1;
class _b {
  constructor(e, t, i) {
    this.precTable = t, this.elseToken = i, this.data = typeof e == "string" ? cu(e) : e;
  }
  token(e, t) {
    let i = e.pos, s = 0;
    for (; ; ) {
      let r = e.next < 0, o = e.resolveOffset(1, 1);
      if (cT(this.data, e, t, 0, this.data, this.precTable), e.token.value > -1)
        break;
      if (this.elseToken == null)
        return;
      if (r || s++, o == null)
        break;
      e.reset(o, e.token);
    }
    s && (e.reset(i, e.token), e.acceptToken(this.elseToken, s));
  }
}
_b.prototype.contextual = $a.prototype.fallback = $a.prototype.extend = !1;
class pg {
  /**
  Create a tokenizer. The first argument is the function that,
  given an input stream, scans for the types of tokens it
  recognizes at the stream's position, and calls
  [`acceptToken`](#lr.InputStream.acceptToken) when it finds
  one.
  */
  constructor(e, t = {}) {
    this.token = e, this.contextual = !!t.contextual, this.fallback = !!t.fallback, this.extend = !!t.extend;
  }
}
function cT(n, e, t, i, s, r) {
  let o = 0, l = 1 << i, { dialect: a } = t.p.parser;
  e:
    for (; l & n[o]; ) {
      let c = n[o + 1];
      for (let d = o + 3; d < c; d += 2)
        if ((n[d + 1] & l) > 0) {
          let p = n[d];
          if (a.allows(p) && (e.token.value == -1 || e.token.value == p || NJ(p, e.token.value, s, r))) {
            e.acceptToken(p);
            break;
          }
        }
      let u = e.next, h = 0, f = n[o + 2];
      if (e.next < 0 && f > h && n[c + f * 3 - 3] == 65535) {
        o = n[c + f * 3 - 1];
        continue e;
      }
      for (; h < f; ) {
        let d = h + f >> 1, p = c + d + (d << 1), g = n[p], m = n[p + 1] || 65536;
        if (u < g)
          f = d;
        else if (u >= m)
          h = d + 1;
        else {
          o = n[p + 2], e.advance();
          continue e;
        }
      }
      break;
    }
}
function aS(n, e, t) {
  for (let i = e, s; (s = n[i]) != 65535; i++)
    if (s == t)
      return i - e;
  return -1;
}
function NJ(n, e, t, i) {
  let s = aS(t, i, e);
  return s < 0 || aS(t, i, n) < s;
}
const ki = typeof process < "u" && process.env && /\bparse\b/.test(process.env.LOG);
let Em = null;
function cS(n, e, t) {
  let i = n.cursor(pn.IncludeAnonymous);
  for (i.moveTo(e); ; )
    if (!(t < 0 ? i.childBefore(e) : i.childAfter(e)))
      for (; ; ) {
        if ((t < 0 ? i.to < e : i.from > e) && !i.type.isError)
          return t < 0 ? Math.max(0, Math.min(
            i.to - 1,
            e - 25
            /* Safety.Margin */
          )) : Math.min(n.length, Math.max(
            i.from + 1,
            e + 25
            /* Safety.Margin */
          ));
        if (t < 0 ? i.prevSibling() : i.nextSibling())
          break;
        if (!i.parent())
          return t < 0 ? 0 : n.length;
      }
}
class IJ {
  constructor(e, t) {
    this.fragments = e, this.nodeSet = t, this.i = 0, this.fragment = null, this.safeFrom = -1, this.safeTo = -1, this.trees = [], this.start = [], this.index = [], this.nextFragment();
  }
  nextFragment() {
    let e = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];
    if (e) {
      for (this.safeFrom = e.openStart ? cS(e.tree, e.from + e.offset, 1) - e.offset : e.from, this.safeTo = e.openEnd ? cS(e.tree, e.to + e.offset, -1) - e.offset : e.to; this.trees.length; )
        this.trees.pop(), this.start.pop(), this.index.pop();
      this.trees.push(e.tree), this.start.push(-e.offset), this.index.push(0), this.nextStart = this.safeFrom;
    } else
      this.nextStart = 1e9;
  }
  // `pos` must be >= any previously given `pos` for this cursor
  nodeAt(e) {
    if (e < this.nextStart)
      return null;
    for (; this.fragment && this.safeTo <= e; )
      this.nextFragment();
    if (!this.fragment)
      return null;
    for (; ; ) {
      let t = this.trees.length - 1;
      if (t < 0)
        return this.nextFragment(), null;
      let i = this.trees[t], s = this.index[t];
      if (s == i.children.length) {
        this.trees.pop(), this.start.pop(), this.index.pop();
        continue;
      }
      let r = i.children[s], o = this.start[t] + i.positions[s];
      if (o > e)
        return this.nextStart = o, null;
      if (r instanceof tn) {
        if (o == e) {
          if (o < this.safeFrom)
            return null;
          let l = o + r.length;
          if (l <= this.safeTo) {
            let a = r.prop(Ge.lookAhead);
            if (!a || l + a < this.fragment.to)
              return r;
          }
        }
        this.index[t]++, o + r.length >= Math.max(this.safeFrom, e) && (this.trees.push(r), this.start.push(o), this.index.push(0));
      } else
        this.index[t]++, this.nextStart = o + r.length;
    }
  }
}
class QJ {
  constructor(e, t) {
    this.stream = t, this.tokens = [], this.mainToken = null, this.actions = [], this.tokens = e.tokenizers.map((i) => new Sd());
  }
  getActions(e) {
    let t = 0, i = null, { parser: s } = e.p, { tokenizers: r } = s, o = s.stateSlot(
      e.state,
      3
      /* ParseState.TokenizerMask */
    ), l = e.curContext ? e.curContext.hash : 0, a = 0;
    for (let c = 0; c < r.length; c++) {
      if (!(1 << c & o))
        continue;
      let u = r[c], h = this.tokens[c];
      if (!(i && !u.fallback) && ((u.contextual || h.start != e.pos || h.mask != o || h.context != l) && (this.updateCachedToken(h, u, e), h.mask = o, h.context = l), h.lookAhead > h.end + 25 && (a = Math.max(h.lookAhead, a)), h.value != 0)) {
        let f = t;
        if (h.extended > -1 && (t = this.addActions(e, h.extended, h.end, t)), t = this.addActions(e, h.value, h.end, t), !u.extend && (i = h, t > f))
          break;
      }
    }
    for (; this.actions.length > t; )
      this.actions.pop();
    return a && e.setLookAhead(a), !i && e.pos == this.stream.end && (i = new Sd(), i.value = e.p.parser.eofTerm, i.start = i.end = e.pos, t = this.addActions(e, i.value, i.end, t)), this.mainToken = i, this.actions;
  }
  getMainToken(e) {
    if (this.mainToken)
      return this.mainToken;
    let t = new Sd(), { pos: i, p: s } = e;
    return t.start = i, t.end = Math.min(i + 1, s.stream.end), t.value = i == s.stream.end ? s.parser.eofTerm : 0, t;
  }
  updateCachedToken(e, t, i) {
    let s = this.stream.clipPos(i.pos);
    if (t.token(this.stream.reset(s, e), i), e.value > -1) {
      let { parser: r } = i.p;
      for (let o = 0; o < r.specialized.length; o++)
        if (r.specialized[o] == e.value) {
          let l = r.specializers[o](this.stream.read(e.start, e.end), i);
          if (l >= 0 && i.p.parser.dialect.allows(l >> 1)) {
            l & 1 ? e.extended = l >> 1 : e.value = l >> 1;
            break;
          }
        }
    } else
      e.value = 0, e.end = this.stream.clipPos(s + 1);
  }
  putAction(e, t, i, s) {
    for (let r = 0; r < s; r += 3)
      if (this.actions[r] == e)
        return s;
    return this.actions[s++] = e, this.actions[s++] = t, this.actions[s++] = i, s;
  }
  addActions(e, t, i, s) {
    let { state: r } = e, { parser: o } = e.p, { data: l } = o;
    for (let a = 0; a < 2; a++)
      for (let c = o.stateSlot(
        r,
        a ? 2 : 1
        /* ParseState.Actions */
      ); ; c += 3) {
        if (l[c] == 65535)
          if (l[c + 1] == 1)
            c = Er(l, c + 2);
          else {
            s == 0 && l[c + 1] == 2 && (s = this.putAction(Er(l, c + 2), t, i, s));
            break;
          }
        l[c] == t && (s = this.putAction(Er(l, c + 1), t, i, s));
      }
    return s;
  }
}
class BJ {
  constructor(e, t, i, s) {
    this.parser = e, this.input = t, this.ranges = s, this.recovering = 0, this.nextStackID = 9812, this.minStackPos = 0, this.reused = [], this.stoppedAt = null, this.lastBigReductionStart = -1, this.lastBigReductionSize = 0, this.bigReductionCount = 0, this.stream = new LJ(t, s), this.tokens = new QJ(e, this.stream), this.topTerm = e.top[1];
    let { from: r } = s[0];
    this.stacks = [RJ.start(this, e.top[0], r)], this.fragments = i.length && this.stream.end - r > e.bufferLength * 4 ? new IJ(i, e.nodeSet) : null;
  }
  get parsedPos() {
    return this.minStackPos;
  }
  // Move the parser forward. This will process all parse stacks at
  // `this.pos` and try to advance them to a further position. If no
  // stack for such a position is found, it'll start error-recovery.
  //
  // When the parse is finished, this will return a syntax tree. When
  // not, it returns `null`.
  advance() {
    let e = this.stacks, t = this.minStackPos, i = this.stacks = [], s, r;
    if (this.bigReductionCount > 300 && e.length == 1) {
      let [o] = e;
      for (; o.forceReduce() && o.stack.length && o.stack[o.stack.length - 2] >= this.lastBigReductionStart; )
        ;
      this.bigReductionCount = this.lastBigReductionSize = 0;
    }
    for (let o = 0; o < e.length; o++) {
      let l = e[o];
      for (; ; ) {
        if (this.tokens.mainToken = null, l.pos > t)
          i.push(l);
        else {
          if (this.advanceStack(l, i, e))
            continue;
          {
            s || (s = [], r = []), s.push(l);
            let a = this.tokens.getMainToken(l);
            r.push(a.value, a.end);
          }
        }
        break;
      }
    }
    if (!i.length) {
      let o = s && ZJ(s);
      if (o)
        return ki && console.log("Finish with " + this.stackID(o)), this.stackToTree(o);
      if (this.parser.strict)
        throw ki && s && console.log("Stuck with token " + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : "none")), new SyntaxError("No parse at " + t);
      this.recovering || (this.recovering = 5);
    }
    if (this.recovering && s) {
      let o = this.stoppedAt != null && s[0].pos > this.stoppedAt ? s[0] : this.runRecovery(s, r, i);
      if (o)
        return ki && console.log("Force-finish " + this.stackID(o)), this.stackToTree(o.forceAll());
    }
    if (this.recovering) {
      let o = this.recovering == 1 ? 1 : this.recovering * 3;
      if (i.length > o)
        for (i.sort((l, a) => a.score - l.score); i.length > o; )
          i.pop();
      i.some((l) => l.reducePos > t) && this.recovering--;
    } else if (i.length > 1) {
      e:
        for (let o = 0; o < i.length - 1; o++) {
          let l = i[o];
          for (let a = o + 1; a < i.length; a++) {
            let c = i[a];
            if (l.sameState(c) || l.buffer.length > 500 && c.buffer.length > 500)
              if ((l.score - c.score || l.buffer.length - c.buffer.length) > 0)
                i.splice(a--, 1);
              else {
                i.splice(o--, 1);
                continue e;
              }
          }
        }
      i.length > 12 && i.splice(
        12,
        i.length - 12
        /* Rec.MaxStackCount */
      );
    }
    this.minStackPos = i[0].pos;
    for (let o = 1; o < i.length; o++)
      i[o].pos < this.minStackPos && (this.minStackPos = i[o].pos);
    return null;
  }
  stopAt(e) {
    if (this.stoppedAt != null && this.stoppedAt < e)
      throw new RangeError("Can't move stoppedAt forward");
    this.stoppedAt = e;
  }
  // Returns an updated version of the given stack, or null if the
  // stack can't advance normally. When `split` and `stacks` are
  // given, stacks split off by ambiguous operations will be pushed to
  // `split`, or added to `stacks` if they move `pos` forward.
  advanceStack(e, t, i) {
    let s = e.pos, { parser: r } = this, o = ki ? this.stackID(e) + " -> " : "";
    if (this.stoppedAt != null && s > this.stoppedAt)
      return e.forceReduce() ? e : null;
    if (this.fragments) {
      let c = e.curContext && e.curContext.tracker.strict, u = c ? e.curContext.hash : 0;
      for (let h = this.fragments.nodeAt(s); h; ) {
        let f = this.parser.nodeSet.types[h.type.id] == h.type ? r.getGoto(e.state, h.type.id) : -1;
        if (f > -1 && h.length && (!c || (h.prop(Ge.contextHash) || 0) == u))
          return e.useNode(h, f), ki && console.log(o + this.stackID(e) + ` (via reuse of ${r.getName(h.type.id)})`), !0;
        if (!(h instanceof tn) || h.children.length == 0 || h.positions[0] > 0)
          break;
        let d = h.children[0];
        if (d instanceof tn && h.positions[0] == 0)
          h = d;
        else
          break;
      }
    }
    let l = r.stateSlot(
      e.state,
      4
      /* ParseState.DefaultReduce */
    );
    if (l > 0)
      return e.reduce(l), ki && console.log(o + this.stackID(e) + ` (via always-reduce ${r.getName(
        l & 65535
        /* Action.ValueMask */
      )})`), !0;
    if (e.stack.length >= 8400)
      for (; e.stack.length > 6e3 && e.forceReduce(); )
        ;
    let a = this.tokens.getActions(e);
    for (let c = 0; c < a.length; ) {
      let u = a[c++], h = a[c++], f = a[c++], d = c == a.length || !i, p = d ? e : e.split(), g = this.tokens.mainToken;
      if (p.apply(u, h, g ? g.start : p.pos, f), ki && console.log(o + this.stackID(p) + ` (via ${u & 65536 ? `reduce of ${r.getName(
        u & 65535
        /* Action.ValueMask */
      )}` : "shift"} for ${r.getName(h)} @ ${s}${p == e ? "" : ", split"})`), d)
        return !0;
      p.pos > s ? t.push(p) : i.push(p);
    }
    return !1;
  }
  // Advance a given stack forward as far as it will go. Returns the
  // (possibly updated) stack if it got stuck, or null if it moved
  // forward and was given to `pushStackDedup`.
  advanceFully(e, t) {
    let i = e.pos;
    for (; ; ) {
      if (!this.advanceStack(e, null, null))
        return !1;
      if (e.pos > i)
        return uS(e, t), !0;
    }
  }
  runRecovery(e, t, i) {
    let s = null, r = !1;
    for (let o = 0; o < e.length; o++) {
      let l = e[o], a = t[o << 1], c = t[(o << 1) + 1], u = ki ? this.stackID(l) + " -> " : "";
      if (l.deadEnd && (r || (r = !0, l.restart(), ki && console.log(u + this.stackID(l) + " (restarted)"), this.advanceFully(l, i))))
        continue;
      let h = l.split(), f = u;
      for (let d = 0; h.forceReduce() && d < 10 && (ki && console.log(f + this.stackID(h) + " (via force-reduce)"), !this.advanceFully(h, i)); d++)
        ki && (f = this.stackID(h) + " -> ");
      for (let d of l.recoverByInsert(a))
        ki && console.log(u + this.stackID(d) + " (via recover-insert)"), this.advanceFully(d, i);
      this.stream.end > l.pos ? (c == l.pos && (c++, a = 0), l.recoverByDelete(a, c), ki && console.log(u + this.stackID(l) + ` (via recover-delete ${this.parser.getName(a)})`), uS(l, i)) : (!s || s.score < l.score) && (s = l);
    }
    return s;
  }
  // Convert the stack's buffer to a syntax tree.
  stackToTree(e) {
    return e.close(), tn.build({
      buffer: up.create(e),
      nodeSet: this.parser.nodeSet,
      topID: this.topTerm,
      maxBufferLength: this.parser.bufferLength,
      reused: this.reused,
      start: this.ranges[0].from,
      length: e.pos - this.ranges[0].from,
      minRepeatType: this.parser.minRepeatTerm
    });
  }
  stackID(e) {
    let t = (Em || (Em = /* @__PURE__ */ new WeakMap())).get(e);
    return t || Em.set(e, t = String.fromCodePoint(this.nextStackID++)), t + e;
  }
}
function uS(n, e) {
  for (let t = 0; t < e.length; t++) {
    let i = e[t];
    if (i.pos == n.pos && i.sameState(n)) {
      e[t].score < n.score && (e[t] = n);
      return;
    }
  }
  e.push(n);
}
class jJ {
  constructor(e, t, i) {
    this.source = e, this.flags = t, this.disabled = i;
  }
  allows(e) {
    return !this.disabled || this.disabled[e] == 0;
  }
}
const $m = (n) => n;
class zJ {
  /**
  Define a context tracker.
  */
  constructor(e) {
    this.start = e.start, this.shift = e.shift || $m, this.reduce = e.reduce || $m, this.reuse = e.reuse || $m, this.hash = e.hash || (() => 0), this.strict = e.strict !== !1;
  }
}
class fh extends QE {
  /**
  @internal
  */
  constructor(e) {
    if (super(), this.wrappers = [], e.version != 14)
      throw new RangeError(`Parser version (${e.version}) doesn't match runtime version (14)`);
    let t = e.nodeNames.split(" ");
    this.minRepeatTerm = t.length;
    for (let l = 0; l < e.repeatNodeCount; l++)
      t.push("");
    let i = Object.keys(e.topRules).map((l) => e.topRules[l][1]), s = [];
    for (let l = 0; l < t.length; l++)
      s.push([]);
    function r(l, a, c) {
      s[l].push([a, a.deserialize(String(c))]);
    }
    if (e.nodeProps)
      for (let l of e.nodeProps) {
        let a = l[0];
        typeof a == "string" && (a = Ge[a]);
        for (let c = 1; c < l.length; ) {
          let u = l[c++];
          if (u >= 0)
            r(u, a, l[c++]);
          else {
            let h = l[c + -u];
            for (let f = -u; f > 0; f--)
              r(l[c++], a, h);
            c++;
          }
        }
      }
    this.nodeSet = new uy(t.map((l, a) => xi.define({
      name: a >= this.minRepeatTerm ? void 0 : l,
      id: a,
      props: s[a],
      top: i.indexOf(a) > -1,
      error: a == 0,
      skipped: e.skippedNodes && e.skippedNodes.indexOf(a) > -1
    }))), e.propSources && (this.nodeSet = this.nodeSet.extend(...e.propSources)), this.strict = !1, this.bufferLength = DE;
    let o = cu(e.tokenData);
    this.context = e.context, this.specializerSpecs = e.specialized || [], this.specialized = new Uint16Array(this.specializerSpecs.length);
    for (let l = 0; l < this.specializerSpecs.length; l++)
      this.specialized[l] = this.specializerSpecs[l].term;
    this.specializers = this.specializerSpecs.map(hS), this.states = cu(e.states, Uint32Array), this.data = cu(e.stateData), this.goto = cu(e.goto), this.maxTerm = e.maxTerm, this.tokenizers = e.tokenizers.map((l) => typeof l == "number" ? new $a(o, l) : l), this.topRules = e.topRules, this.dialects = e.dialects || {}, this.dynamicPrecedences = e.dynamicPrecedences || null, this.tokenPrecTable = e.tokenPrec, this.termNames = e.termNames || null, this.maxNode = this.nodeSet.types.length - 1, this.dialect = this.parseDialect(), this.top = this.topRules[Object.keys(this.topRules)[0]];
  }
  createParse(e, t, i) {
    let s = new BJ(this, e, t, i);
    for (let r of this.wrappers)
      s = r(s, e, t, i);
    return s;
  }
  /**
  Get a goto table entry @internal
  */
  getGoto(e, t, i = !1) {
    let s = this.goto;
    if (t >= s[0])
      return -1;
    for (let r = s[t + 1]; ; ) {
      let o = s[r++], l = o & 1, a = s[r++];
      if (l && i)
        return a;
      for (let c = r + (o >> 1); r < c; r++)
        if (s[r] == e)
          return a;
      if (l)
        return -1;
    }
  }
  /**
  Check if this state has an action for a given terminal @internal
  */
  hasAction(e, t) {
    let i = this.data;
    for (let s = 0; s < 2; s++)
      for (let r = this.stateSlot(
        e,
        s ? 2 : 1
        /* ParseState.Actions */
      ), o; ; r += 3) {
        if ((o = i[r]) == 65535)
          if (i[r + 1] == 1)
            o = i[r = Er(i, r + 2)];
          else {
            if (i[r + 1] == 2)
              return Er(i, r + 2);
            break;
          }
        if (o == t || o == 0)
          return Er(i, r + 1);
      }
    return 0;
  }
  /**
  @internal
  */
  stateSlot(e, t) {
    return this.states[e * 6 + t];
  }
  /**
  @internal
  */
  stateFlag(e, t) {
    return (this.stateSlot(
      e,
      0
      /* ParseState.Flags */
    ) & t) > 0;
  }
  /**
  @internal
  */
  validAction(e, t) {
    return !!this.allActions(e, (i) => i == t ? !0 : null);
  }
  /**
  @internal
  */
  allActions(e, t) {
    let i = this.stateSlot(
      e,
      4
      /* ParseState.DefaultReduce */
    ), s = i ? t(i) : void 0;
    for (let r = this.stateSlot(
      e,
      1
      /* ParseState.Actions */
    ); s == null; r += 3) {
      if (this.data[r] == 65535)
        if (this.data[r + 1] == 1)
          r = Er(this.data, r + 2);
        else
          break;
      s = t(Er(this.data, r + 1));
    }
    return s;
  }
  /**
  Get the states that can follow this one through shift actions or
  goto jumps. @internal
  */
  nextStates(e) {
    let t = [];
    for (let i = this.stateSlot(
      e,
      1
      /* ParseState.Actions */
    ); ; i += 3) {
      if (this.data[i] == 65535)
        if (this.data[i + 1] == 1)
          i = Er(this.data, i + 2);
        else
          break;
      if (!(this.data[i + 2] & 1)) {
        let s = this.data[i + 1];
        t.some((r, o) => o & 1 && r == s) || t.push(this.data[i], s);
      }
    }
    return t;
  }
  /**
  Configure the parser. Returns a new parser instance that has the
  given settings modified. Settings not provided in `config` are
  kept from the original parser.
  */
  configure(e) {
    let t = Object.assign(Object.create(fh.prototype), this);
    if (e.props && (t.nodeSet = this.nodeSet.extend(...e.props)), e.top) {
      let i = this.topRules[e.top];
      if (!i)
        throw new RangeError(`Invalid top rule name ${e.top}`);
      t.top = i;
    }
    return e.tokenizers && (t.tokenizers = this.tokenizers.map((i) => {
      let s = e.tokenizers.find((r) => r.from == i);
      return s ? s.to : i;
    })), e.specializers && (t.specializers = this.specializers.slice(), t.specializerSpecs = this.specializerSpecs.map((i, s) => {
      let r = e.specializers.find((l) => l.from == i.external);
      if (!r)
        return i;
      let o = Object.assign(Object.assign({}, i), { external: r.to });
      return t.specializers[s] = hS(o), o;
    })), e.contextTracker && (t.context = e.contextTracker), e.dialect && (t.dialect = this.parseDialect(e.dialect)), e.strict != null && (t.strict = e.strict), e.wrap && (t.wrappers = t.wrappers.concat(e.wrap)), e.bufferLength != null && (t.bufferLength = e.bufferLength), t;
  }
  /**
  Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)
  are registered for this parser.
  */
  hasWrappers() {
    return this.wrappers.length > 0;
  }
  /**
  Returns the name associated with a given term. This will only
  work for all terms when the parser was generated with the
  `--names` option. By default, only the names of tagged terms are
  stored.
  */
  getName(e) {
    return this.termNames ? this.termNames[e] : String(e <= this.maxNode && this.nodeSet.types[e].name || e);
  }
  /**
  The eof term id is always allocated directly after the node
  types. @internal
  */
  get eofTerm() {
    return this.maxNode + 1;
  }
  /**
  The type of top node produced by the parser.
  */
  get topNode() {
    return this.nodeSet.types[this.top[1]];
  }
  /**
  @internal
  */
  dynamicPrecedence(e) {
    let t = this.dynamicPrecedences;
    return t == null ? 0 : t[e] || 0;
  }
  /**
  @internal
  */
  parseDialect(e) {
    let t = Object.keys(this.dialects), i = t.map(() => !1);
    if (e)
      for (let r of e.split(" ")) {
        let o = t.indexOf(r);
        o >= 0 && (i[o] = !0);
      }
    let s = null;
    for (let r = 0; r < t.length; r++)
      if (!i[r])
        for (let o = this.dialects[t[r]], l; (l = this.data[o++]) != 65535; )
          (s || (s = new Uint8Array(this.maxTerm + 1)))[l] = 1;
    return new jJ(e, i, s);
  }
  /**
  Used by the output of the parser generator. Not available to
  user code. @hide
  */
  static deserialize(e) {
    return new fh(e);
  }
}
function Er(n, e) {
  return n[e] | n[e + 1] << 16;
}
function ZJ(n) {
  let e = null;
  for (let t of n) {
    let i = t.p.stoppedAt;
    (t.pos == t.p.stream.end || i != null && t.pos > i) && t.p.parser.stateFlag(
      t.state,
      2
      /* StateFlag.Accepting */
    ) && (!e || e.score < t.score) && (e = t);
  }
  return e;
}
function hS(n) {
  if (n.external) {
    let e = n.extend ? 1 : 0;
    return (t, i) => n.external(t, i) << 1 | e;
  }
  return n.get;
}
const FJ = 309, fS = 1, VJ = 2, qJ = 3, WJ = 310, XJ = 312, YJ = 313, HJ = 4, GJ = 5, UJ = 0, Mb = [
  9,
  10,
  11,
  12,
  13,
  32,
  133,
  160,
  5760,
  8192,
  8193,
  8194,
  8195,
  8196,
  8197,
  8198,
  8199,
  8200,
  8201,
  8202,
  8232,
  8233,
  8239,
  8287,
  12288
], uT = 125, KJ = 59, Rb = 47, JJ = 42, eee = 43, tee = 45, nee = 60, iee = 44, see = new zJ({
  start: !1,
  shift(n, e) {
    return e == HJ || e == GJ || e == XJ ? n : e == YJ;
  },
  strict: !1
}), ree = new pg((n, e) => {
  let { next: t } = n;
  (t == uT || t == -1 || e.context) && n.acceptToken(WJ);
}, { contextual: !0, fallback: !0 }), oee = new pg((n, e) => {
  let { next: t } = n, i;
  Mb.indexOf(t) > -1 || t == Rb && ((i = n.peek(1)) == Rb || i == JJ) || t != uT && t != KJ && t != -1 && !e.context && n.acceptToken(FJ);
}, { contextual: !0 }), lee = new pg((n, e) => {
  let { next: t } = n;
  if ((t == eee || t == tee) && (n.advance(), t == n.next)) {
    n.advance();
    let i = !e.context && e.canShift(fS);
    n.acceptToken(i ? fS : VJ);
  }
}, { contextual: !0 });
function Tm(n, e) {
  return n >= 65 && n <= 90 || n >= 97 && n <= 122 || n == 95 || n >= 192 || !e && n >= 48 && n <= 57;
}
const aee = new pg((n, e) => {
  if (n.next != nee || !e.dialectEnabled(UJ) || (n.advance(), n.next == Rb))
    return;
  let t = 0;
  for (; Mb.indexOf(n.next) > -1; )
    n.advance(), t++;
  if (Tm(n.next, !0)) {
    for (n.advance(), t++; Tm(n.next, !1); )
      n.advance(), t++;
    for (; Mb.indexOf(n.next) > -1; )
      n.advance(), t++;
    if (n.next == iee)
      return;
    for (let i = 0; ; i++) {
      if (i == 7) {
        if (!Tm(n.next, !0))
          return;
        break;
      }
      if (n.next != "extends".charCodeAt(i))
        break;
      n.advance(), t++;
    }
  }
  n.acceptToken(qJ, -t);
}), cee = py({
  "get set async static": V.modifier,
  "for while do if else switch try catch finally return throw break continue default case": V.controlKeyword,
  "in of await yield void typeof delete instanceof": V.operatorKeyword,
  "let var const using function class extends": V.definitionKeyword,
  "import export from": V.moduleKeyword,
  "with debugger as new": V.keyword,
  TemplateString: V.special(V.string),
  super: V.atom,
  BooleanLiteral: V.bool,
  this: V.self,
  null: V.null,
  Star: V.modifier,
  VariableName: V.variableName,
  "CallExpression/VariableName TaggedTemplateExpression/VariableName": V.function(V.variableName),
  VariableDefinition: V.definition(V.variableName),
  Label: V.labelName,
  PropertyName: V.propertyName,
  PrivatePropertyName: V.special(V.propertyName),
  "CallExpression/MemberExpression/PropertyName": V.function(V.propertyName),
  "FunctionDeclaration/VariableDefinition": V.function(V.definition(V.variableName)),
  "ClassDeclaration/VariableDefinition": V.definition(V.className),
  PropertyDefinition: V.definition(V.propertyName),
  PrivatePropertyDefinition: V.definition(V.special(V.propertyName)),
  UpdateOp: V.updateOperator,
  "LineComment Hashbang": V.lineComment,
  BlockComment: V.blockComment,
  Number: V.number,
  String: V.string,
  Escape: V.escape,
  ArithOp: V.arithmeticOperator,
  LogicOp: V.logicOperator,
  BitOp: V.bitwiseOperator,
  CompareOp: V.compareOperator,
  RegExp: V.regexp,
  Equals: V.definitionOperator,
  Arrow: V.function(V.punctuation),
  ": Spread": V.punctuation,
  "( )": V.paren,
  "[ ]": V.squareBracket,
  "{ }": V.brace,
  "InterpolationStart InterpolationEnd": V.special(V.brace),
  ".": V.derefOperator,
  ", ;": V.separator,
  "@": V.meta,
  TypeName: V.typeName,
  TypeDefinition: V.definition(V.typeName),
  "type enum interface implements namespace module declare": V.definitionKeyword,
  "abstract global Privacy readonly override": V.modifier,
  "is keyof unique infer": V.operatorKeyword,
  JSXAttributeValue: V.attributeValue,
  JSXText: V.content,
  "JSXStartTag JSXStartCloseTag JSXSelfCloseEndTag JSXEndTag": V.angleBracket,
  "JSXIdentifier JSXNameSpacedName": V.tagName,
  "JSXAttribute/JSXIdentifier JSXAttribute/JSXNameSpacedName": V.attributeName,
  "JSXBuiltin/JSXIdentifier": V.standard(V.tagName)
}), uee = { __proto__: null, export: 18, as: 23, from: 31, default: 34, async: 39, function: 40, extends: 52, this: 56, true: 64, false: 64, null: 76, void: 80, typeof: 84, super: 102, new: 136, delete: 152, yield: 161, await: 165, class: 170, public: 227, private: 227, protected: 227, readonly: 229, instanceof: 248, satisfies: 251, in: 252, const: 254, import: 286, keyof: 339, unique: 343, infer: 349, is: 385, abstract: 405, implements: 407, type: 409, let: 412, var: 414, using: 417, interface: 423, enum: 427, namespace: 433, module: 435, declare: 439, global: 443, for: 462, of: 471, while: 474, with: 478, do: 482, if: 486, else: 488, switch: 492, case: 498, try: 504, catch: 508, finally: 512, return: 516, throw: 520, break: 524, continue: 528, debugger: 532 }, hee = { __proto__: null, async: 123, get: 125, set: 127, declare: 187, public: 189, private: 189, protected: 189, static: 191, abstract: 193, override: 195, readonly: 201, accessor: 203, new: 389 }, fee = { __proto__: null, "<": 143 }, dee = fh.deserialize({
  version: 14,
  states: "$<UO%TQ^OOO%[Q^OOO'_Q`OOP(lOWOOO*zQ08SO'#ChO+RO!bO'#CiO+aO#tO'#CiO+oO?MpO'#D^O.QQ^O'#DdO.bQ^O'#DoO%[Q^O'#DyO0fQ^O'#EROOQ07b'#EZ'#EZO1PQWO'#EWOOQO'#El'#ElOOQO'#Ie'#IeO1XQWO'#GmO1dQWO'#EkO1iQWO'#EkO3kQ08SO'#JiO6[Q08SO'#JjO6xQWO'#FZO6}Q&jO'#FqOOQ07b'#Fc'#FcO7YO,YO'#FcO7hQ7[O'#FxO9UQWO'#FwOOQ07b'#Jj'#JjOOQ07`'#Ji'#JiO9ZQWO'#GqOOQU'#KU'#KUO9fQWO'#IRO9kQ07hO'#ISOOQU'#JW'#JWOOQU'#IW'#IWQ`Q^OOO`Q^OOO%[Q^O'#DqO9sQ^O'#D}O9zQ^O'#EPO9aQWO'#GmO:RQ7[O'#CnO:aQWO'#EjO:lQWO'#EuO:qQ7[O'#FbO;`QWO'#GmOOQO'#KV'#KVO;eQWO'#KVO;sQWO'#GuO;sQWO'#GvO;sQWO'#GxO9aQWO'#G{O<jQWO'#HOO>RQWO'#CdO>cQWO'#H[O>kQWO'#HbO>kQWO'#HdO`Q^O'#HfO>kQWO'#HhO>kQWO'#HkO>pQWO'#HqO>uQ07iO'#HwO%[Q^O'#HyO?QQ07iO'#H{O?]Q07iO'#H}O9kQ07hO'#IPO?hQ08SO'#ChO@jQ`O'#DiQOQWOOO%[Q^O'#EPOAQQWO'#ESO:RQ7[O'#EjOA]QWO'#EjOAhQpO'#FbOOQU'#Cf'#CfOOQ07`'#Dn'#DnOOQ07`'#Jm'#JmO%[Q^O'#JmOOQO'#Jq'#JqOOQO'#Ib'#IbOBhQ`O'#EcOOQ07`'#Eb'#EbOCdQ07pO'#EcOCnQ`O'#EVOOQO'#Jp'#JpODSQ`O'#JqOEaQ`O'#EVOCnQ`O'#EcPEnO!0LbO'#CaPOOO)CDu)CDuOOOO'#IX'#IXOEyO!bO,59TOOQ07b,59T,59TOOOO'#IY'#IYOFXO#tO,59TO%[Q^O'#D`OOOO'#I['#I[OFgO?MpO,59xOOQ07b,59x,59xOFuQ^O'#I]OGYQWO'#JkOI[QrO'#JkO+}Q^O'#JkOIcQWO,5:OOIyQWO'#ElOJWQWO'#JyOJcQWO'#JxOJcQWO'#JxOJkQWO,5;YOJpQWO'#JwOOQ07f,5:Z,5:ZOJwQ^O,5:ZOLxQ08SO,5:eOMiQWO,5:mONSQ07hO'#JvONZQWO'#JuO9ZQWO'#JuONoQWO'#JuONwQWO,5;XON|QWO'#JuO!#UQrO'#JjOOQ07b'#Ch'#ChO%[Q^O'#ERO!#tQpO,5:rOOQO'#Jr'#JrOOQO-E<c-E<cO9aQWO,5=XO!$[QWO,5=XO!$aQ^O,5;VO!&dQ7[O'#EgO!'}QWO,5;VO!)mQ7[O'#DsO!)tQ^O'#DxO!*OQ`O,5;`O!*WQ`O,5;`O%[Q^O,5;`OOQU'#FR'#FROOQU'#FT'#FTO%[Q^O,5;aO%[Q^O,5;aO%[Q^O,5;aO%[Q^O,5;aO%[Q^O,5;aO%[Q^O,5;aO%[Q^O,5;aO%[Q^O,5;aO%[Q^O,5;aO%[Q^O,5;aO%[Q^O,5;aOOQU'#FX'#FXO!*fQ^O,5;rOOQ07b,5;w,5;wOOQ07b,5;x,5;xO!,iQWO,5;xOOQ07b,5;y,5;yO%[Q^O'#IiO!,qQ07hO,5<eO!&dQ7[O,5;aO!-`Q7[O,5;aO%[Q^O,5;uO!-gQ&jO'#FgO!.dQ&jO'#J}O!.OQ&jO'#J}O!.kQ&jO'#J}OOQO'#J}'#J}O!/PQ&jO,5<POOOS,5<],5<]O!/bQ^O'#FsOOOS'#Ih'#IhO7YO,YO,5;}O!/iQ&jO'#FuOOQ07b,5;},5;}O!0YQMhO'#CuOOQ07b'#Cy'#CyO!0mQWO'#CyO!0rO?MpO'#C}O!1`Q7[O,5<bO!1gQWO,5<dO!3SQ!LQO'#GSO!3aQWO'#GTO!3fQWO'#GTO!3kQ!LQO'#GXO!4jQ`O'#G]OOQO'#Gh'#GhO!(SQ7[O'#GgOOQO'#Gj'#GjO!(SQ7[O'#GiO!5]QMhO'#JdOOQ07b'#Jd'#JdO!5gQWO'#JcO!5uQWO'#JbO!5}QWO'#CtOOQ07b'#Cw'#CwOOQ07b'#DR'#DROOQ07b'#DT'#DTO1SQWO'#DVO!(SQ7[O'#FzO!(SQ7[O'#F|O!6VQWO'#GOO!6[QWO'#GPO!3fQWO'#GVO!(SQ7[O'#G[O!6aQWO'#EmO!7OQWO,5<cOOQ07`'#Cq'#CqO!7WQWO'#EnO!8QQ`O'#EoOOQ07`'#Jw'#JwO!8XQ07hO'#KWO9kQ07hO,5=]O`Q^O,5>mOOQU'#J`'#J`OOQU,5>n,5>nOOQU-E<U-E<UO!:ZQ08SO,5:]O!<wQ08SO,5:iO%[Q^O,5:iO!?bQ08SO,5:kOOQO,5@q,5@qO!@RQ7[O,5=XO!@aQ07hO'#JaO9UQWO'#JaO!@rQ07hO,59YO!@}Q`O,59YO!AVQ7[O,59YO:RQ7[O,59YO!AbQWO,5;VO!AjQWO'#HZO!BOQWO'#KZO%[Q^O,5;zO!7{Q`O,5;|O!BWQWO,5=tO!B]QWO,5=tO!BbQWO,5=tO9kQ07hO,5=tO;sQWO,5=dOOQO'#Cu'#CuO!BpQ`O,5=aO!BxQ7[O,5=bO!CTQWO,5=dO!CYQpO,5=gO!CbQWO'#KVO>pQWO'#HQO9aQWO'#HSO!CgQWO'#HSO:RQ7[O'#HUO!ClQWO'#HUOOQU,5=j,5=jO!CqQWO'#HVO!DSQWO'#CnO!DXQWO,59OO!DcQWO,59OO!FhQ^O,59OOOQU,59O,59OO!FxQ07hO,59OO%[Q^O,59OO!ITQ^O'#H^OOQU'#H_'#H_OOQU'#H`'#H`O`Q^O,5=vO!IkQWO,5=vO`Q^O,5=|O`Q^O,5>OO!IpQWO,5>QO`Q^O,5>SO!IuQWO,5>VO!IzQ^O,5>]OOQU,5>c,5>cO%[Q^O,5>cO9kQ07hO,5>eOOQU,5>g,5>gO!NUQWO,5>gOOQU,5>i,5>iO!NUQWO,5>iOOQU,5>k,5>kO!NZQ`O'#D[O%[Q^O'#JmO!NxQ`O'#JmO# gQ`O'#DjO# xQ`O'#DjO#$ZQ^O'#DjO#$bQWO'#JlO#$jQWO,5:TO#$oQWO'#EpO#$}QWO'#JzO#%VQWO,5;ZO#%[Q`O'#DjO#%iQ`O'#EUOOQ07b,5:n,5:nO%[Q^O,5:nO#%pQWO,5:nO>pQWO,5;UO!@}Q`O,5;UO!AVQ7[O,5;UO:RQ7[O,5;UO#%xQWO,5@XO#%}Q$ISO,5:rOOQO-E<`-E<`O#'TQ07pO,5:}OCnQ`O,5:qO#'_Q`O,5:qOCnQ`O,5:}O!@rQ07hO,5:qOOQ07`'#Ef'#EfOOQO,5:},5:}O%[Q^O,5:}O#'lQ07hO,5:}O#'wQ07hO,5:}O!@}Q`O,5:qOOQO,5;T,5;TO#(VQ07hO,5:}POOO'#IV'#IVP#(kO!0LbO,58{POOO,58{,58{OOOO-E<V-E<VOOQ07b1G.o1G.oOOOO-E<W-E<WO#(vQpO,59zOOOO-E<Y-E<YOOQ07b1G/d1G/dO#({QrO,5>wO+}Q^O,5>wOOQO,5>},5>}O#)VQ^O'#I]OOQO-E<Z-E<ZO#)dQWO,5@VO#)lQrO,5@VO#)sQWO,5@dOOQ07b1G/j1G/jO%[Q^O,5@eO#){QWO'#IcOOQO-E<a-E<aO#)sQWO,5@dOOQ07`1G0t1G0tOOQ07f1G/u1G/uOOQ07f1G0X1G0XO%[Q^O,5@bO#*aQ07hO,5@bO#*rQ07hO,5@bO#*yQWO,5@aO9ZQWO,5@aO#+RQWO,5@aO#+aQWO'#IfO#*yQWO,5@aOOQ07`1G0s1G0sO!*OQ`O,5:tO!*ZQ`O,5:tOOQO,5:v,5:vO#,RQWO,5:vO#,ZQ7[O1G2sO9aQWO1G2sOOQ07b1G0q1G0qO#,iQ08SO1G0qO#-nQ08QO,5;ROOQ07b'#GR'#GRO#.[Q08SO'#JdO!$aQ^O1G0qO#0dQ7[O'#JnO#0nQWO,5:_O#0sQrO'#JoO%[Q^O'#JoO#0}QWO,5:dOOQ07b'#D['#D[OOQ07b1G0z1G0zO%[Q^O1G0zOOQ07b1G1d1G1dO#1SQWO1G0zO#3kQ08SO1G0{O#3rQ08SO1G0{O#6]Q08SO1G0{O#6dQ08SO1G0{O#8nQ08SO1G0{O#9UQ08SO1G0{O#<OQ08SO1G0{O#<VQ08SO1G0{O#>jQ08SO1G0{O#>wQ08SO1G0{O#@uQ08SO1G0{O#CuQ(CYO'#ChO#EsQ(CYO1G1^O#EzQ(CYO'#JjO!,lQWO1G1dO#F[Q08SO,5?TOOQ07`-E<g-E<gO#GOQ08SO1G0{OOQ07b1G0{1G0{O#IZQ08SO1G1aO#I}Q&jO,5<TO#JVQ&jO,5<UO#J_Q&jO'#FlO#JvQWO'#FkOOQO'#KO'#KOOOQO'#Ig'#IgO#J{Q&jO1G1kOOQ07b1G1k1G1kOOOS1G1v1G1vO#K^Q(CYO'#JiO#KhQWO,5<_O!*fQ^O,5<_OOOS-E<f-E<fOOQ07b1G1i1G1iO#KmQ`O'#J}OOQ07b,5<a,5<aO#KuQ`O,5<aOOQ07b,59e,59eO!&dQ7[O'#DPOOOO'#IZ'#IZO#KzO?MpO,59iOOQ07b,59i,59iO%[Q^O1G1|O!6[QWO'#IkO#LVQ7[O,5<uOOQ07b,5<r,5<rO!(SQ7[O'#InO#LuQ7[O,5=RO!(SQ7[O'#IpO#MhQ7[O,5=TO!&dQ7[O,5=VOOQO1G2O1G2OO#MrQpO'#CqO#NVQpO,5<nO#N^QWO'#KRO9aQWO'#KRO#NlQWO,5<pO!(SQ7[O,5<oO#NqQWO'#GUO#N|QWO,5<oO$ RQpO'#GRO$ `QpO'#KSO$ jQWO'#KSO!&dQ7[O'#KSO$ oQWO,5<sO$ tQ`O'#G^O!4eQ`O'#G^O$!VQWO'#G`O$![QWO'#GbO!3fQWO'#GeO$!aQ07hO'#ImO$!lQ`O,5<wOOQ07f,5<w,5<wO$!sQ`O'#G^O$#RQ`O'#G_O$#ZQ`O'#G_O$#`Q7[O,5=RO$#pQ7[O,5=TOOQ07b,5=W,5=WO!(SQ7[O,5?}O!(SQ7[O,5?}O$$QQWO'#IrO$$]QWO,5?|O$$eQWO,59`O$%UQ7[O,59qOOQ07b,59q,59qO$%wQ7[O,5<fO$&jQ7[O,5<hO@bQWO,5<jOOQ07b,5<k,5<kO$&tQWO,5<qO$&yQ7[O,5<vO$'ZQWO'#JuO!$aQ^O1G1}O$'`QWO1G1}O9ZQWO'#JxO9ZQWO'#EpO%[Q^O'#EpO9ZQWO'#ItO$'eQ07hO,5@rOOQU1G2w1G2wOOQU1G4X1G4XOOQ07b1G/w1G/wO!,iQWO1G/wO$)jQ08SO1G0TOOQU1G2s1G2sO!&dQ7[O1G2sO%[Q^O1G2sO#,^QWO1G2sO$+nQ7[O'#EgOOQ07`,5?{,5?{O$+xQ07hO,5?{OOQU1G.t1G.tO!@rQ07hO1G.tO!@}Q`O1G.tO!AVQ7[O1G.tO$,ZQWO1G0qO$,`QWO'#ChO$,kQWO'#K[O$,sQWO,5=uO$,xQWO'#K[O$,}QWO'#K[O$-]QWO'#IzO$-kQWO,5@uO$-sQrO1G1fOOQ07b1G1h1G1hO9aQWO1G3`O@bQWO1G3`O$-zQWO1G3`O$.PQWO1G3`OOQU1G3`1G3`O!CTQWO1G3OO!&dQ7[O1G2{O$.UQWO1G2{OOQU1G2|1G2|O!&dQ7[O1G2|O$.ZQWO1G2|O$.cQ`O'#GzOOQU1G3O1G3OO!4eQ`O'#IvO!CYQpO1G3ROOQU1G3R1G3ROOQU,5=l,5=lO$.kQ7[O,5=nO9aQWO,5=nO$![QWO,5=pO9UQWO,5=pO!@}Q`O,5=pO!AVQ7[O,5=pO:RQ7[O,5=pO$.yQWO'#KYO$/UQWO,5=qOOQU1G.j1G.jO$/ZQ07hO1G.jO@bQWO1G.jO$/fQWO1G.jO9kQ07hO1G.jO$1kQrO,5@wO$1{QWO,5@wO9ZQWO,5@wO$2WQ^O,5=xO$2_QWO,5=xOOQU1G3b1G3bO`Q^O1G3bOOQU1G3h1G3hOOQU1G3j1G3jO>kQWO1G3lO$2dQ^O1G3nO$6hQ^O'#HmOOQU1G3q1G3qO$6uQWO'#HsO>pQWO'#HuOOQU1G3w1G3wO$6}Q^O1G3wO9kQ07hO1G3}OOQU1G4P1G4POOQ07`'#GY'#GYO9kQ07hO1G4RO9kQ07hO1G4TO$;UQWO,5@XO!*fQ^O,5;[O9ZQWO,5;[O>pQWO,5:UO!*fQ^O,5:UO!@}Q`O,5:UO$;ZQ(CYO,5:UOOQO,5;[,5;[O$;eQ`O'#I^O$;{QWO,5@WOOQ07b1G/o1G/oO$<TQ`O'#IdO$<_QWO,5@fOOQ07`1G0u1G0uO# xQ`O,5:UOOQO'#Ia'#IaO$<gQ`O,5:pOOQ07f,5:p,5:pO#%sQWO1G0YOOQ07b1G0Y1G0YO%[Q^O1G0YOOQ07b1G0p1G0pO>pQWO1G0pO!@}Q`O1G0pO!AVQ7[O1G0pOOQ07`1G5s1G5sO!@rQ07hO1G0]OOQO1G0i1G0iO%[Q^O1G0iO$<nQ07hO1G0iO$<yQ07hO1G0iO!@}Q`O1G0]OCnQ`O1G0]O$=XQ07hO1G0iOOQO1G0]1G0]O$=mQ08SO1G0iPOOO-E<T-E<TPOOO1G.g1G.gOOOO1G/f1G/fO$=wQpO,5<eO$>PQrO1G4cOOQO1G4i1G4iO%[Q^O,5>wO$>ZQWO1G5qO$>cQWO1G6OO$>kQrO1G6PO9ZQWO,5>}O$>uQ08SO1G5|O%[Q^O1G5|O$?VQ07hO1G5|O$?hQWO1G5{O$?hQWO1G5{O9ZQWO1G5{O$?pQWO,5?QO9ZQWO,5?QOOQO,5?Q,5?QO$@UQWO,5?QO$'ZQWO,5?QOOQO-E<d-E<dOOQO1G0`1G0`OOQO1G0b1G0bO!,lQWO1G0bOOQU7+(_7+(_O!&dQ7[O7+(_O%[Q^O7+(_O$@dQWO7+(_O$@oQ7[O7+(_O$@}Q08SO,5=RO$CYQ08SO,5=TO$EeQ08SO,5=RO$GvQ08SO,5=TO$JXQ08SO,59qO$LaQ08SO,5<fO$NlQ08SO,5<hO%!wQ08SO,5<vOOQ07b7+&]7+&]O%%YQ08SO7+&]O%%|Q7[O'#I_O%&WQWO,5@YOOQ07b1G/y1G/yO%&`Q^O'#I`O%&mQWO,5@ZO%&uQrO,5@ZOOQ07b1G0O1G0OO%'PQWO7+&fOOQ07b7+&f7+&fO%'UQ(CYO,5:eO%[Q^O7+&xO%'`Q(CYO,5:]O%'mQ(CYO,5:iO%'wQ(CYO,5:kOOQ07b7+'O7+'OOOQO1G1o1G1oOOQO1G1p1G1pO%(RQtO,5<WO!*fQ^O,5<VOOQO-E<e-E<eOOQ07b7+'V7+'VOOOS7+'b7+'bOOOS1G1y1G1yO%(^QWO1G1yOOQ07b1G1{1G1{O%(cQpO,59kOOOO-E<X-E<XOOQ07b1G/T1G/TO%(jQ08SO7+'hOOQ07b,5?V,5?VO%)^QpO,5?VOOQ07b1G2a1G2aP!&dQ7[O'#IkPOQ07b-E<i-E<iO%)|Q7[O,5?YOOQ07b-E<l-E<lO%*oQ7[O,5?[OOQ07b-E<n-E<nO%*yQpO1G2qOOQ07b1G2Y1G2YO%+QQWO'#IjO%+`QWO,5@mO%+`QWO,5@mO%+hQWO,5@mO%+sQWO,5@mOOQO1G2[1G2[O%,RQ7[O1G2ZO!(SQ7[O1G2ZO%,cQ!LQO'#IlO%,sQWO,5@nO!&dQ7[O,5@nO%,{QpO,5@nOOQ07b1G2_1G2_OOQ07`,5<x,5<xOOQ07`,5<y,5<yO$'ZQWO,5<yOC_QWO,5<yO!@}Q`O,5<xOOQO'#Ga'#GaO%-VQWO,5<zOOQ07`,5<|,5<|O$'ZQWO,5=POOQO,5?X,5?XOOQO-E<k-E<kOOQ07f1G2c1G2cO!4eQ`O,5<xO%-_QWO,5<yO$!VQWO,5<zO!4eQ`O,5<yO!(SQ7[O'#InO%.RQ7[O1G2mO!(SQ7[O'#IpO%.tQ7[O1G2oO%/OQ7[O1G5iO%/YQ7[O1G5iOOQO,5?^,5?^OOQO-E<p-E<pOOQO1G.z1G.zO!7{Q`O,59sO%[Q^O,59sO%/gQWO1G2UO!(SQ7[O1G2]O%/lQ08SO7+'iOOQ07b7+'i7+'iO!$aQ^O7+'iO%0`QWO,5;[OOQ07`,5?`,5?`OOQ07`-E<r-E<rOOQ07b7+%c7+%cO%0eQpO'#KTO#%sQWO7+(_O%0oQrO7+(_O$@gQWO7+(_O%0vQ08QO'#ChO%1ZQ08QO,5<}O%1{QWO,5<}OOQ07`1G5g1G5gOOQU7+$`7+$`O!@rQ07hO7+$`O!@}Q`O7+$`O!$aQ^O7+&]O%2QQWO'#IyO%2iQWO,5@vOOQO1G3a1G3aO9aQWO,5@vO%2iQWO,5@vO%2qQWO,5@vOOQO,5?f,5?fOOQO-E<x-E<xOOQ07b7+'Q7+'QO%2vQWO7+(zO9kQ07hO7+(zO9aQWO7+(zO@bQWO7+(zOOQU7+(j7+(jO%2{Q08QO7+(gO!&dQ7[O7+(gO%3VQpO7+(hOOQU7+(h7+(hO!&dQ7[O7+(hO%3^QWO'#KXO%3iQWO,5=fOOQO,5?b,5?bOOQO-E<t-E<tOOQU7+(m7+(mO%4xQ`O'#HTOOQU1G3Y1G3YO!&dQ7[O1G3YO%[Q^O1G3YO%5PQWO1G3YO%5[Q7[O1G3YO9kQ07hO1G3[O$![QWO1G3[O9UQWO1G3[O!@}Q`O1G3[O!AVQ7[O1G3[O%5jQWO'#IxO%6OQWO,5@tO%6WQ`O,5@tOOQ07`1G3]1G3]OOQU7+$U7+$UO@bQWO7+$UO9kQ07hO7+$UO%6cQWO7+$UO%[Q^O1G6cO%[Q^O1G6dO%6hQ07hO1G6cO%6rQ^O1G3dO%6yQWO1G3dO%7OQ^O1G3dOOQU7+(|7+(|O9kQ07hO7+)WO`Q^O7+)YOOQU'#K_'#K_OOQU'#I{'#I{O%7VQ^O,5>XOOQU,5>X,5>XO%[Q^O'#HnO%7dQWO'#HpOOQU,5>_,5>_O9ZQWO,5>_OOQU,5>a,5>aOOQU7+)c7+)cOOQU7+)i7+)iOOQU7+)m7+)mOOQU7+)o7+)oO%7iQ`O1G5sO%7}Q(CYO1G0vO%8XQWO1G0vOOQO1G/p1G/pO%8dQ(CYO1G/pO>pQWO1G/pO!*fQ^O'#DjOOQO,5>x,5>xOOQO-E<[-E<[OOQO,5?O,5?OOOQO-E<b-E<bO!@}Q`O1G/pOOQO-E<_-E<_OOQ07f1G0[1G0[OOQ07b7+%t7+%tO#%sQWO7+%tOOQ07b7+&[7+&[O>pQWO7+&[O!@}Q`O7+&[OOQO7+%w7+%wO$=mQ08SO7+&TOOQO7+&T7+&TO%[Q^O7+&TO%8nQ07hO7+&TO!@rQ07hO7+%wO!@}Q`O7+%wO%8yQ07hO7+&TO%9XQ08SO7++hO%[Q^O7++hO%9iQWO7++gO%9iQWO7++gOOQO1G4l1G4lO9ZQWO1G4lO%9qQWO1G4lOOQO7+%|7+%|O#%sQWO<<KyO%0oQrO<<KyO%:PQWO<<KyOOQU<<Ky<<KyO!&dQ7[O<<KyO%[Q^O<<KyO%:XQWO<<KyO%:dQ08SO,5?YO%<oQ08SO,5?[O%>zQ08SO1G2ZO%A]Q08SO1G2mO%ChQ08SO1G2oO%EsQ7[O,5>yOOQO-E<]-E<]O%E}QrO,5>zO%[Q^O,5>zOOQO-E<^-E<^O%FXQWO1G5uOOQ07b<<JQ<<JQO%FaQ(CYO1G0qO%HkQ(CYO1G0{O%HrQ(CYO1G0{O%JvQ(CYO1G0{O%J}Q(CYO1G0{O%LrQ(CYO1G0{O%MYQ(CYO1G0{O& mQ(CYO1G0{O& tQ(CYO1G0{O&#rQ(CYO1G0{O&$PQ(CYO1G0{O&%}Q(CYO1G0{O&&bQ08SO<<JdO&'gQ(CYO1G0{O&)]Q(CYO'#JdO&+`Q(CYO1G1aO&+mQ(CYO1G0TO!*fQ^O'#FnOOQO'#KP'#KPOOQO1G1r1G1rO&+wQWO1G1qO&+|Q(CYO,5?TOOOS7+'e7+'eOOOO1G/V1G/VOOQ07b1G4q1G4qO!(SQ7[O7+(]O&,WQWO,5?UO9aQWO,5?UOOQO-E<h-E<hO&,fQWO1G6XO&,fQWO1G6XO&,nQWO1G6XO&,yQ7[O7+'uO&-ZQpO,5?WO&-eQWO,5?WO!&dQ7[O,5?WOOQO-E<j-E<jO&-jQpO1G6YO&-tQWO1G6YOOQ07`1G2e1G2eO$'ZQWO1G2eOOQ07`1G2d1G2dO&-|QWO1G2fO!&dQ7[O1G2fOOQ07`1G2k1G2kO!@}Q`O1G2dOC_QWO1G2eO&.RQWO1G2fO&.ZQWO1G2eO&.}Q7[O,5?YOOQ07b-E<m-E<mO&/pQ7[O,5?[OOQ07b-E<o-E<oO!(SQ7[O7++TOOQ07b1G/_1G/_O&/zQWO1G/_OOQ07b7+'p7+'pO&0PQ7[O7+'wO&0aQ08SO<<KTOOQ07b<<KT<<KTO&1TQWO1G0vO!&dQ7[O'#IsO&1YQWO,5@oO!&dQ7[O1G2iOOQU<<Gz<<GzO!@rQ07hO<<GzO&1bQ08SO<<IwOOQ07b<<Iw<<IwOOQO,5?e,5?eO&2UQWO,5?eO&2ZQWO,5?eOOQO-E<w-E<wO&2iQWO1G6bO&2iQWO1G6bO9aQWO1G6bO@bQWO<<LfOOQU<<Lf<<LfO&2qQWO<<LfO9kQ07hO<<LfOOQU<<LR<<LRO%2{Q08QO<<LROOQU<<LS<<LSO%3VQpO<<LSO&2vQ`O'#IuO&3RQWO,5@sO!*fQ^O,5@sOOQU1G3Q1G3QO&3ZQ^O'#JmOOQO'#Iw'#IwO9kQ07hO'#IwO&3eQ`O,5=oOOQU,5=o,5=oO&3lQ`O'#EcO&4QQWO7+(tO&4VQWO7+(tOOQU7+(t7+(tO!&dQ7[O7+(tO%[Q^O7+(tO&4_QWO7+(tOOQU7+(v7+(vO9kQ07hO7+(vO$![QWO7+(vO9UQWO7+(vO!@}Q`O7+(vO&4jQWO,5?dOOQO-E<v-E<vOOQO'#HW'#HWO&4uQWO1G6`O9kQ07hO<<GpOOQU<<Gp<<GpO@bQWO<<GpO&4}QWO7++}O&5SQWO7+,OO%[Q^O7++}O%[Q^O7+,OOOQU7+)O7+)OO&5XQWO7+)OO&5^Q^O7+)OO&5eQWO7+)OOOQU<<Lr<<LrOOQU<<Lt<<LtOOQU-E<y-E<yOOQU1G3s1G3sO&5jQWO,5>YOOQU,5>[,5>[O&5oQWO1G3yO9ZQWO7+&bO!*fQ^O7+&bOOQO7+%[7+%[O&5tQ(CYO1G6PO>pQWO7+%[OOQ07b<<I`<<I`OOQ07b<<Iv<<IvO>pQWO<<IvOOQO<<Io<<IoO$=mQ08SO<<IoO%[Q^O<<IoOOQO<<Ic<<IcO!@rQ07hO<<IcO&6OQ07hO<<IoO&6ZQ08SO<= SO&6kQWO<= ROOQO7+*W7+*WO9ZQWO7+*WOOQUANAeANAeO&6sQWOANAeO!&dQ7[OANAeO#%sQWOANAeO%0oQrOANAeO%[Q^OANAeO&6{Q08SO7+'uO&9^Q08SO,5?YO&;iQ08SO,5?[O&=tQ08SO7+'wO&@VQrO1G4fO&@aQ(CYO7+&]O&BeQ(CYO,5=RO&DlQ(CYO,5=TO&D|Q(CYO,5=RO&E^Q(CYO,5=TO&EnQ(CYO,59qO&GqQ(CYO,5<fO&ItQ(CYO,5<hO&KwQ(CYO,5<vO&MmQ(CYO7+'hO&MzQ(CYO7+'iO&NXQWO,5<YOOQO7+']7+']O&N^Q7[O<<KwOOQO1G4p1G4pO&NeQWO1G4pO&NpQWO1G4pO' OQWO7++sO' OQWO7++sO!&dQ7[O1G4rO' WQpO1G4rO' bQWO7++tOOQ07`7+(P7+(PO$'ZQWO7+(QO' jQpO7+(QOOQ07`7+(O7+(OO$'ZQWO7+(PO' qQWO7+(QO!&dQ7[O7+(QOC_QWO7+(PO' vQ7[O<<NoOOQ07b7+$y7+$yO'!QQpO,5?_OOQO-E<q-E<qO'![Q08QO7+(TOOQUAN=fAN=fO9aQWO1G5POOQO1G5P1G5PO'!lQWO1G5PO'!qQWO7++|O'!qQWO7++|O9kQ07hOANBQO@bQWOANBQOOQUANBQANBQOOQUANAmANAmOOQUANAnANAnO'!yQWO,5?aOOQO-E<s-E<sO'#UQ(CYO1G6_O'%fQrO'#ChOOQO,5?c,5?cOOQO-E<u-E<uOOQU1G3Z1G3ZO&3ZQ^O,5<zOOQU<<L`<<L`O!&dQ7[O<<L`O&4QQWO<<L`O'%pQWO<<L`O%[Q^O<<L`OOQU<<Lb<<LbO9kQ07hO<<LbO$![QWO<<LbO9UQWO<<LbO'%xQ`O1G5OO'&TQWO7++zOOQUAN=[AN=[O9kQ07hOAN=[OOQU<= i<= iOOQU<= j<= jO'&]QWO<= iO'&bQWO<= jOOQU<<Lj<<LjO'&gQWO<<LjO'&lQ^O<<LjOOQU1G3t1G3tO>pQWO7+)eO'&sQWO<<I|O''OQ(CYO<<I|OOQO<<Hv<<HvOOQ07bAN?bAN?bOOQOAN?ZAN?ZO$=mQ08SOAN?ZOOQOAN>}AN>}O%[Q^OAN?ZOOQO<<Mr<<MrOOQUG27PG27PO!&dQ7[OG27PO#%sQWOG27PO''YQWOG27PO%0oQrOG27PO''bQ(CYO<<JdO''oQ(CYO1G2ZO')eQ(CYO,5?YO'+hQ(CYO,5?[O'-kQ(CYO1G2mO'/nQ(CYO1G2oO'1qQ(CYO<<KTO'2OQ(CYO<<IwOOQO1G1t1G1tO!(SQ7[OANAcOOQO7+*[7+*[O'2]QWO7+*[O'2hQWO<= _O'2pQpO7+*^OOQ07`<<Kl<<KlO$'ZQWO<<KlOOQ07`<<Kk<<KkO'2zQpO<<KlO$'ZQWO<<KkOOQO7+*k7+*kO9aQWO7+*kO'3RQWO<= hOOQUG27lG27lO9kQ07hOG27lO!*fQ^O1G4{O'3ZQWO7++yO&4QQWOANAzOOQUANAzANAzO!&dQ7[OANAzO'3cQWOANAzOOQUANA|ANA|O9kQ07hOANA|O$![QWOANA|OOQO'#HX'#HXOOQO7+*j7+*jOOQUG22vG22vOOQUANETANETOOQUANEUANEUOOQUANBUANBUO'3kQWOANBUOOQU<<MP<<MPO!*fQ^OAN?hOOQOG24uG24uO$=mQ08SOG24uO#%sQWOLD,kOOQULD,kLD,kO!&dQ7[OLD,kO'3pQWOLD,kO'3xQ(CYO7+'uO'5nQ(CYO,5?YO'7qQ(CYO,5?[O'9tQ(CYO7+'wO';jQ7[OG26}OOQO<<Mv<<MvOOQ07`ANAWANAWO$'ZQWOANAWOOQ07`ANAVANAVOOQO<<NV<<NVOOQULD-WLD-WO';zQ(CYO7+*gOOQUG27fG27fO&4QQWOG27fO!&dQ7[OG27fOOQUG27hG27hO9kQ07hOG27hOOQUG27pG27pO'<UQ(CYOG25SOOQOLD*aLD*aOOQU!$(!V!$(!VO#%sQWO!$(!VO!&dQ7[O!$(!VO'<`Q08SOG26}OOQ07`G26rG26rOOQULD-QLD-QO&4QQWOLD-QOOQULD-SLD-SOOQU!)9Eq!)9EqO#%sQWO!)9EqOOQU!$(!l!$(!lOOQU!.K;]!.K;]O'>qQ(CYOG26}O!*fQ^O'#DyO1PQWO'#EWO'@gQrO'#JiO!*fQ^O'#DqO'@nQ^O'#D}O'@uQrO'#ChO'C]QrO'#ChO!*fQ^O'#EPO'CmQ^O,5;VO!*fQ^O,5;aO!*fQ^O,5;aO!*fQ^O,5;aO!*fQ^O,5;aO!*fQ^O,5;aO!*fQ^O,5;aO!*fQ^O,5;aO!*fQ^O,5;aO!*fQ^O,5;aO!*fQ^O,5;aO!*fQ^O,5;aO!*fQ^O'#IiO'EpQWO,5<eO'ExQ7[O,5;aO'GcQ7[O,5;aO!*fQ^O,5;uO!&dQ7[O'#GgO'ExQ7[O'#GgO!&dQ7[O'#GiO'ExQ7[O'#GiO1SQWO'#DVO1SQWO'#DVO!&dQ7[O'#FzO'ExQ7[O'#FzO!&dQ7[O'#F|O'ExQ7[O'#F|O!&dQ7[O'#G[O'ExQ7[O'#G[O!*fQ^O,5:iO!*fQ^O,5@eO'CmQ^O1G0qO'GjQ(CYO'#ChO!*fQ^O1G1|O!&dQ7[O'#InO'ExQ7[O'#InO!&dQ7[O'#IpO'ExQ7[O'#IpO!&dQ7[O,5<oO'ExQ7[O,5<oO'CmQ^O1G1}O!*fQ^O7+&xO!&dQ7[O1G2ZO'ExQ7[O1G2ZO!&dQ7[O'#InO'ExQ7[O'#InO!&dQ7[O'#IpO'ExQ7[O'#IpO!&dQ7[O1G2]O'ExQ7[O1G2]O'CmQ^O7+'iO'CmQ^O7+&]O!&dQ7[OANAcO'ExQ7[OANAcO'GtQWO'#EkO'GyQWO'#EkO'HRQWO'#FZO'HWQWO'#EuO'H]QWO'#JyO'HhQWO'#JwO'HsQWO,5;VO'HxQ7[O,5<bO'IPQWO'#GTO'IUQWO'#GTO'IZQWO,5<cO'IcQWO,5;VO'IkQ(CYO1G1^O'IrQWO,5<oO'IwQWO,5<oO'I|QWO,5<qO'JRQWO,5<qO'JWQWO1G1}O'J]QWO1G0qO'JbQ7[O<<KwO'JiQ7[O<<KwO7hQ7[O'#FxO9UQWO'#FwOA]QWO'#EjO!*fQ^O,5;rO!3fQWO'#GTO!3fQWO'#GTO!3fQWO'#GVO!3fQWO'#GVO!(SQ7[O7+(]O!(SQ7[O7+(]O%*yQpO1G2qO%*yQpO1G2qO!&dQ7[O,5=VO!&dQ7[O,5=V",
  stateData: "'Km~O'tOS'uOSSOS'vRQ~OPYOQYORfOX!VO`qOczOdyOlkOnYOokOpkOvkOxYOzYO!PWO!TkO!UkO![XO!fuO!kZO!nYO!oYO!pYO!rvO!twO!wxO!{]O#s!PO$T|O%b}O%d!QO%f!OO%g!OO%h!OO%k!RO%m!SO%p!TO%q!TO%s!UO&P!WO&V!XO&X!YO&Z!ZO&]![O&`!]O&f!^O&l!_O&n!`O&p!aO&r!bO&t!cO'{SO'}TO(QUO(XVO(g[O(tiO~OVtO~P`OPYOQYORfOc!jOd!iOlkOnYOokOpkOvkOxYOzYO!PWO!TkO!UkO![!eO!fuO!kZO!nYO!oYO!pYO!rvO!t!gO!w!hO$T!kO'{!dO'}TO(QUO(XVO(g[O(tiO~O`!vOo!nO!P!oO!_!xO!`!uO!a!uO!{:dO#P!pO#Q!pO#R!wO#S!pO#T!pO#W!yO#X!yO'|!lO'}TO(QUO([!mO(g!sO~O'v!zO~OP[XZ[X`[Xn[X|[X}[X!P[X!Y[X!h[X!i[X!k[X!o[X#[[X#geX#j[X#k[X#l[X#m[X#n[X#o[X#p[X#q[X#r[X#t[X#v[X#x[X#y[X$O[X'r[X(X[X(h[X(o[X(p[X~O!d$|X~P(qO^!|O'}#OO(O!|O(P#OO~O^#PO(P#OO(Q#OO(R#PO~Ot#RO!R#SO(Y#SO(Z#UO~OPYOQYORfOc!jOd!iOlkOnYOokOpkOvkOxYOzYO!PWO!TkO!UkO![!eO!fuO!kZO!nYO!oYO!pYO!rvO!t!gO!w!hO$T!kO'{:hO'}TO(QUO(XVO(g[O(tiO~O!X#YO!Y#VO!V(_P!V(lP~P+}O!Z#bO~P`OPYOQYORfOc!jOd!iOnYOokOpkOvkOxYOzYO!PWO!TkO!UkO![!eO!fuO!kZO!nYO!oYO!pYO!rvO!t!gO!w!hO$T!kO'}TO(QUO(XVO(g[O(tiO~Ol#lO!X#hO!{]O#e#kO#f#hO'{:iO!j(iP~P.iO!k#nO'{#mO~O!w#rO!{]O%b#sO~O#g#tO~O!d#uO#g#tO~OP$]OZ$dOn$QO|#yO}#zO!P#{O!Y$aO!h$SO!i#wO!k#xO!o$]O#j$OO#k$PO#l$PO#m$PO#n$RO#o$SO#p$SO#q$cO#r$SO#t$TO#v$VO#x$XO#y$YO(XVO(h$ZO(o#|O(p#}O~O`(]X'r(]X'p(]X!j(]X!V(]X![(]X%c(]X!d(]X~P1qO#[$eO$O$eOP(^XZ(^Xn(^X|(^X}(^X!P(^X!Y(^X!h(^X!k(^X!o(^X#j(^X#k(^X#l(^X#m(^X#n(^X#o(^X#p(^X#q(^X#r(^X#t(^X#v(^X#x(^X#y(^X(X(^X(h(^X(o(^X(p(^X![(^X%c(^X~O`(^X!i(^X'r(^X'p(^X!V(^X!j(^Xr(^X!d(^X~P4XO#[$eO~O$Y$gO$[$fO$c$lO~ORfO![$mO$f$nO$h$pO~Og%VOl%WOn$tOo$sOp$sOv%XOx%YOz%ZO!P${O![$|O!f%`O!k$xO#f%aO$T%^O$o%[O$q%]O$t%_O'{$rO'}TO(QUO(X$uO(o$}O(p%POf(UP~O!k%bO~O!P%eO![%fO'{%dO~O!d%jO~O`%kO'r%kO~O'|!lO~P%[O%h%rO~P%[Og%VO!k%bO'{%dO'|!lO~Od%yO!k%bO'{%dO~O#r$SO~O|&OO![%{O!k%}O%d&RO'{%dO'|!lO'}TO(QUO_(}P~O!w#rO~O%m&TO!P(yX![(yX'{(yX~O'{&UO~O!t&ZO#s!PO%d!QO%f!OO%g!OO%h!OO%k!RO%m!SO%p!TO%q!TO~Oc&`Od&_O!w&]O%b&^O%u&[O~P;xOc&cOdyO![&bO!t&ZO!wxO!{]O#s!PO%b}O%f!OO%g!OO%h!OO%k!RO%m!SO%p!TO%q!TO%s!UO~Oa&fO#[&iO%d&dO'|!lO~P<}O!k&jO!t&nO~O!k#nO~O![XO~O`%kO'q&vO'r%kO~O`%kO'q&yO'r%kO~O`%kO'q&{O'r%kO~O'p[X!V[Xr[X!j[X&T[X![[X%c[X!d[X~P(qO!_'YO!`'RO!a'RO'|!lO'}TO(QUO~Oo'PO!P'OO!X'SO([&}O!Z(`P!Z(nP~P@UOj']O!['ZO'{%dO~Od'bO!k%bO'{%dO~O|&OO!k%}O~Oo!nO!P!oO!{:dO#P!pO#Q!pO#S!pO#T!pO'|!lO'}TO(QUO([!mO(g!sO~O!_'hO!`'gO!a'gO#R!pO#W'iO#X'iO~PApO`%kOg%VO!d#uO!k%bO'r%kO(h'kO~O!o'oO#['mO~PCOOo!nO!P!oO'}TO(QUO([!mO(g!sO~O![XOo(eX!P(eX!_(eX!`(eX!a(eX!{(eX#P(eX#Q(eX#R(eX#S(eX#T(eX#W(eX#X(eX'|(eX'}(eX(Q(eX([(eX(g(eX~O!`'gO!a'gO'|!lO~PCnO'w'sO'x'sO'y'uO~O^!|O'}'wO(O!|O(P'wO~O^#PO(P'wO(Q'wO(R#PO~Ot#RO!R#SO(Y#SO(Z'{O~O!X'}O!V'PX!V'VX!Y'PX!Y'VX~P+}O!Y(PO!V(_X~OP$]OZ$dOn$QO|#yO}#zO!P#{O!Y(PO!h$SO!i#wO!k#xO!o$]O#j$OO#k$PO#l$PO#m$PO#n$RO#o$SO#p$SO#q$cO#r$SO#t$TO#v$VO#x$XO#y$YO(XVO(h$ZO(o#|O(p#}O~O!V(_X~PGbO!V(UO~O!V(kX!Y(kX!d(kX!j(kX(h(kX~O#[(kX#g#`X!Z(kX~PIhO#[(VO!V(mX!Y(mX~O!Y(WO!V(lX~O!V(ZO~O#[$eO~PIhO!Z([O~P`O|#yO}#zO!P#{O!i#wO!k#xO(XVOP!maZ!man!ma!Y!ma!h!ma!o!ma#j!ma#k!ma#l!ma#m!ma#n!ma#o!ma#p!ma#q!ma#r!ma#t!ma#v!ma#x!ma#y!ma(h!ma(o!ma(p!ma~O`!ma'r!ma'p!ma!V!ma!j!mar!ma![!ma%c!ma!d!ma~PKOO!j(]O~O!d#uO#[(^O(h'kO!Y(jX`(jX'r(jX~O!j(jX~PMnO!P%eO![%fO!{]O#e(cO#f(bO'{%dO~O!Y(dO!j(iX~O!j(fO~O!P%eO![%fO#f(bO'{%dO~OP(^XZ(^Xn(^X|(^X}(^X!P(^X!Y(^X!h(^X!i(^X!k(^X!o(^X#j(^X#k(^X#l(^X#m(^X#n(^X#o(^X#p(^X#q(^X#r(^X#t(^X#v(^X#x(^X#y(^X(X(^X(h(^X(o(^X(p(^X~O!d#uO!j(^X~P! [O|(gO}(hO!i#wO!k#xO!{!za!P!za~O!w!za%b!za![!za#e!za#f!za'{!za~P!#`O!w(lO~OPYOQYORfOc!jOd!iOlkOnYOokOpkOvkOxYOzYO!PWO!TkO!UkO![XO!fuO!kZO!nYO!oYO!pYO!rvO!t!gO!w!hO$T!kO'{!dO'}TO(QUO(XVO(g[O(tiO~Og%VOl%WOn$tOo$sOp$sOv%XOx%YOz;QO!P${O![$|O!f<`O!k$xO#f;WO$T%^O$o;SO$q;UO$t%_O'{(pO'}TO(QUO(X$uO(o$}O(p%PO~O#g(rO~Og%VOl%WOn$tOo$sOp$sOv%XOx%YOz%ZO!P${O![$|O!f%`O!k$xO#f%aO$T%^O$o%[O$q%]O$t%_O'{(pO'}TO(QUO(X$uO(o$}O(p%PO~Of(bP~P!(SO!X(vO!j(cP~P%[O([(xO(g[O~O!P(zO!k#xO([(xO(g[O~OP:cOQ:cORfOc<[Od!iOlkOn:cOokOpkOvkOx:cOz:cO!PWO!TkO!UkO![!eO!f:fO!kZO!n:cO!o:cO!p:cO!r:gO!t:jO!w!hO$T!kO'{)YO'}TO(QUO(XVO(g[O(t<YO~O})]O!k#xO~O!Y$aO`$ma'r$ma'p$ma!j$ma!V$ma![$ma%c$ma!d$ma~O#s)aO~P!&dO|)dO!d)cO![$ZX$W$ZX$Y$ZX$[$ZX$c$ZX~O!d)cO![(qX$W(qX$Y(qX$[(qX$c(qX~O|)dO~P!.OO|)dO![(qX$W(qX$Y(qX$[(qX$c(qX~O![)fO$W)jO$Y)eO$[)eO$c)kO~O!X)nO~P!*fO$Y$gO$[$fO$c)rO~Oj$uX|$uX!P$uX!i$uX(o$uX(p$uX~OfiXf$uXjiX!YiX#[iX~P!/tOo)tO~Ot)uO(Y)vO(Z)xO~Oj*RO|)zO!P){O(o$}O(p%PO~Of)yO~P!0}Of*SO~Og%VOl%WOn$tOo$sOp$sOv%XOx%YOz;QO!P${O![$|O!f<`O!k$xO#f;WO$T%^O$o;SO$q;UO$t%_O'}TO(QUO(X$uO(o$}O(p%PO~O!X*WO'{*TO!j(uP~P!1lO#g*YO~O!k*ZO~O!X*`O'{*]O!V(vP~P!1lOn*lO!P*dO!_*jO!`*cO!a*cO!k*ZO#W*kO%Y*fO'|!lO([!mO~O!Z*iO~P!3xO!i#wOj(WX|(WX!P(WX(o(WX(p(WX!Y(WX#[(WX~Of(WX#|(WX~P!4qOj*qO#[*pOf(VX!Y(VX~O!Y*rOf(UX~O'{&UOf(UP~O!k*yO~O'{(pO~Ol*}O!P%eO!X#hO![%fO!{]O#e#kO#f#hO'{%dO!j(iP~O!d#uO#g+OO~O!P%eO!X+QO!Y(WO![%fO'{%dO!V(lP~Oo'VO!P+SO!X+RO'}TO(QUO([(xO~O!Z(nP~P!7lO!Y+TO`(zX'r(zX~OP$]OZ$dOn$QO|#yO}#zO!P#{O!h$SO!i#wO!k#xO!o$]O#j$OO#k$PO#l$PO#m$PO#n$RO#o$SO#p$SO#q$cO#r$SO#t$TO#v$VO#x$XO#y$YO(XVO(h$ZO(o#|O(p#}O~O`!ea!Y!ea'r!ea'p!ea!V!ea!j!ear!ea![!ea%c!ea!d!ea~P!8dO|#yO}#zO!P#{O!i#wO!k#xO(XVOP!qaZ!qan!qa!Y!qa!h!qa!o!qa#j!qa#k!qa#l!qa#m!qa#n!qa#o!qa#p!qa#q!qa#r!qa#t!qa#v!qa#x!qa#y!qa(h!qa(o!qa(p!qa~O`!qa'r!qa'p!qa!V!qa!j!qar!qa![!qa%c!qa!d!qa~P!:}O|#yO}#zO!P#{O!i#wO!k#xO(XVOP!saZ!san!sa!Y!sa!h!sa!o!sa#j!sa#k!sa#l!sa#m!sa#n!sa#o!sa#p!sa#q!sa#r!sa#t!sa#v!sa#x!sa#y!sa(h!sa(o!sa(p!sa~O`!sa'r!sa'p!sa!V!sa!j!sar!sa![!sa%c!sa!d!sa~P!=hOg%VOj+^O!['ZO%c+]O~O!d+`O`(TX![(TX'r(TX!Y(TX~O`%kO![XO'r%kO~Og%VO!k%bO~Og%VO!k%bO'{%dO~O!d#uO#g(rO~Oa+kO%d+lO'{+hO'}TO(QUO!Z)OP~O!Y+mO_(}X~OZ+qO~O_+rO~O![%{O'{%dO'|!lO_(}P~Og%VO#[+wO~Og%VOj+zO![$|O~O![+|O~O|,OO![XO~O%h%rO~O!w,TO~Od,YO~Oa,ZO'{#mO'}TO(QUO!Z(|P~Od%yO~O%d!QO'{&UO~P<}OZ,`O_,_O~OPYOQYORfOczOdyOlkOnYOokOpkOvkOxYOzYO!PWO!TkO!UkO!fuO!kZO!nYO!oYO!pYO!rvO!wxO!{]O%b}O'}TO(QUO(XVO(g[O(tiO~O![!eO!t!gO$T!kO'{!dO~P!DkO_,_O`%kO'r%kO~OPYOQYORfOc!jOd!iOlkOnYOokOpkOvkOxYOzYO!PWO!TkO!UkO![!eO!fuO!kZO!nYO!oYO!pYO!rvO!w!hO$T!kO'{!dO'}TO(QUO(XVO(g[O(tiO~O`,eO!twO#s!OO%f!OO%g!OO%h!OO~P!GTO!k&jO~O&V,kO~O![,mO~O&h,oO&j,pOP&eaQ&eaR&eaX&ea`&eac&ead&eal&ean&eao&eap&eav&eax&eaz&ea!P&ea!T&ea!U&ea![&ea!f&ea!k&ea!n&ea!o&ea!p&ea!r&ea!t&ea!w&ea!{&ea#s&ea$T&ea%b&ea%d&ea%f&ea%g&ea%h&ea%k&ea%m&ea%p&ea%q&ea%s&ea&P&ea&V&ea&X&ea&Z&ea&]&ea&`&ea&f&ea&l&ea&n&ea&p&ea&r&ea&t&ea'p&ea'{&ea'}&ea(Q&ea(X&ea(g&ea(t&ea!Z&ea&^&eaa&ea&c&ea~O'{,uO~Og!bX!Y!OX!Y!bX!Z!OX!Z!bX!d!OX!d!bX!k!bX#[!OX~O!d,zO#[,yOg(aX!Y#dX!Y(aX!Z#dX!Z(aX!d(aX!k(aX~Og%VO!d,|O!k%bO!Y!^X!Z!^X~Oo!nO!P!oO'}TO(QUO([!mO~OP:cOQ:cORfOc<[Od!iOlkOn:cOokOpkOvkOx:cOz:cO!PWO!TkO!UkO![!eO!f:fO!kZO!n:cO!o:cO!p:cO!r:gO!t:jO!w!hO$T!kO'}TO(QUO(XVO(g[O(t<YO~O'{;]O~P#!ZO!Y-QO!Z(`X~O!Z-SO~O!d,zO#[,yO!Y#dX!Z#dX~O!Y-TO!Z(nX~O!Z-VO~O!`-WO!a-WO'|!lO~P# xO!Z-ZO~P'_Oj-^O!['ZO~O!V-cO~Oo!za!_!za!`!za!a!za#P!za#Q!za#R!za#S!za#T!za#W!za#X!za'|!za'}!za(Q!za([!za(g!za~P!#`O!o-hO#[-fO~PCOO!`-jO!a-jO'|!lO~PCnO`%kO#[-fO'r%kO~O`%kO!d#uO#[-fO'r%kO~O`%kO!d#uO!o-hO#[-fO'r%kO(h'kO~O'w'sO'x'sO'y-oO~Or-pO~O!V'Pa!Y'Pa~P!8dO!X-tO!V'PX!Y'PX~P%[O!Y(PO!V(_a~O!V(_a~PGbO!Y(WO!V(la~O!P%eO!X-xO![%fO'{%dO!V'VX!Y'VX~O#[-zO!Y(ja!j(ja`(ja'r(ja~O!d#uO~P#*aO!Y(dO!j(ia~O!P%eO![%fO#f.OO'{%dO~Ol.TO!P%eO!X.QO![%fO!{]O#e.SO#f.QO'{%dO!Y'YX!j'YX~O}.XO!k#xO~Og%VOj.[O!['ZO%c.ZO~O`#_i!Y#_i'r#_i'p#_i!V#_i!j#_ir#_i![#_i%c#_i!d#_i~P!8dOj<fO|)zO!P){O(o$}O(p%PO~O#g#Za`#Za#[#Za'r#Za!Y#Za!j#Za![#Za!V#Za~P#-]O#g(WXP(WXZ(WX`(WXn(WX}(WX!h(WX!k(WX!o(WX#j(WX#k(WX#l(WX#m(WX#n(WX#o(WX#p(WX#q(WX#r(WX#t(WX#v(WX#x(WX#y(WX'r(WX(X(WX(h(WX!j(WX!V(WX'p(WXr(WX![(WX%c(WX!d(WX~P!4qO!Y.iOf(bX~P!0}Of.kO~O!Y.lO!j(cX~P!8dO!j.oO~O!V.qO~OP$]O|#yO}#zO!P#{O!i#wO!k#xO!o$]O(XVOZ#ii`#iin#ii!Y#ii!h#ii#k#ii#l#ii#m#ii#n#ii#o#ii#p#ii#q#ii#r#ii#t#ii#v#ii#x#ii#y#ii'r#ii(h#ii(o#ii(p#ii'p#ii!V#ii!j#iir#ii![#ii%c#ii!d#ii~O#j#ii~P#1XO#j$OO~P#1XOP$]O|#yO}#zO!P#{O!i#wO!k#xO!o$]O#j$OO#k$PO#l$PO#m$PO(XVOZ#ii`#ii!Y#ii!h#ii#n#ii#o#ii#p#ii#q#ii#r#ii#t#ii#v#ii#x#ii#y#ii'r#ii(h#ii(o#ii(p#ii'p#ii!V#ii!j#iir#ii![#ii%c#ii!d#ii~On#ii~P#3yOn$QO~P#3yOP$]On$QO|#yO}#zO!P#{O!i#wO!k#xO!o$]O#j$OO#k$PO#l$PO#m$PO#n$RO(XVO`#ii!Y#ii#t#ii#v#ii#x#ii#y#ii'r#ii(h#ii(o#ii(p#ii'p#ii!V#ii!j#iir#ii![#ii%c#ii!d#ii~OZ#ii!h#ii#o#ii#p#ii#q#ii#r#ii~P#6kOZ$dO!h$SO#o$SO#p$SO#q$cO#r$SO~P#6kOP$]OZ$dOn$QO|#yO}#zO!P#{O!h$SO!i#wO!k#xO!o$]O#j$OO#k$PO#l$PO#m$PO#n$RO#o$SO#p$SO#q$cO#r$SO#t$TO(XVO(p#}O`#ii!Y#ii#x#ii#y#ii'r#ii(h#ii(o#ii'p#ii!V#ii!j#iir#ii![#ii%c#ii!d#ii~O#v$VO~P#9lO#v#ii~P#9lOP$]OZ$dOn$QO|#yO}#zO!P#{O!h$SO!i#wO!k#xO!o$]O#j$OO#k$PO#l$PO#m$PO#n$RO#o$SO#p$SO#q$cO#r$SO#t$TO(XVO`#ii!Y#ii#x#ii#y#ii'r#ii(h#ii'p#ii!V#ii!j#iir#ii![#ii%c#ii!d#ii~O#v#ii(o#ii(p#ii~P#<^O#v$VO(o#|O(p#}O~P#<^OP$]OZ$dOn$QO|#yO}#zO!P#{O!h$SO!i#wO!k#xO!o$]O#j$OO#k$PO#l$PO#m$PO#n$RO#o$SO#p$SO#q$cO#r$SO#t$TO#v$VO#x$XO(XVO(o#|O(p#}O~O`#ii!Y#ii#y#ii'r#ii(h#ii'p#ii!V#ii!j#iir#ii![#ii%c#ii!d#ii~P#?UOP[XZ[Xn[X|[X}[X!P[X!h[X!i[X!k[X!o[X#[[X#geX#j[X#k[X#l[X#m[X#n[X#o[X#p[X#q[X#r[X#t[X#v[X#x[X#y[X$O[X(X[X(h[X(o[X(p[X!Y[X!Z[X~O#|[X~P#AoOP$]OZ:zOn:nO|#yO}#zO!P#{O!h:pO!i#wO!k#xO!o$]O#j:lO#k:mO#l:mO#m:mO#n:oO#o:pO#p:pO#q:yO#r:pO#t:qO#v:sO#x:uO#y:vO(XVO(h$ZO(o#|O(p#}O~O#|.sO~P#C|O#[:{O$O:{O#|(^X!Z(^X~P! [O`']a!Y']a'r']a'p']a!j']a!V']ar']a![']a%c']a!d']a~P!8dOP#iiZ#ii`#iin#ii}#ii!Y#ii!h#ii!i#ii!k#ii!o#ii#j#ii#k#ii#l#ii#m#ii#n#ii#o#ii#p#ii#q#ii#r#ii#t#ii#v#ii#x#ii#y#ii'r#ii(X#ii(h#ii'p#ii!V#ii!j#iir#ii![#ii%c#ii!d#ii~P#-]O`#}i!Y#}i'r#}i'p#}i!V#}i!j#}ir#}i![#}i%c#}i!d#}i~P!8dO$Y.xO$[.xO~O$Y.yO$[.yO~O!d)cO#[.zO![$`X$W$`X$Y$`X$[$`X$c$`X~O!X.{O~O![)fO$W.}O$Y)eO$[)eO$c/OO~O!Y:wO!Z(]X~P#C|O!Z/PO~O!d)cO$c(qX~O$c/RO~Ot)uO(Y)vO(Z/UO~O!V/YO~P!&dO(o$}Oj%Za|%Za!P%Za(p%Za!Y%Za#[%Za~Of%Za#|%Za~P#L^O(p%POj%]a|%]a!P%]a(o%]a!Y%]a#[%]a~Of%]a#|%]a~P#MPO!YeX!deX!jeX!j$uX(heX~P!/tO!j/bO~P#-]O!Y/cO!d#uO(h'kO!j(uX~O!j/hO~O!X*WO'{%dO!j(uP~O#g/jO~O!V$uX!Y$uX!d$|X~P!/tO!Y/kO!V(vX~P#-]O!d/mO~O!V/oO~Og%VOn/sO!d#uO!k%bO(h'kO~O'{/uO~O!d+`O~O`%kO!Y/yO'r%kO~O!Z/{O~P!3xO!`/|O!a/|O'|!lO([!mO~O!P0OO([!mO~O#W0PO~Of%Za!Y%Za#[%Za#|%Za~P!0}Of%]a!Y%]a#[%]a#|%]a~P!0}O'{&UOf'fX!Y'fX~O!Y*rOf(Ua~Of0YO~O|0ZO}0ZO!P0[Ojya(oya(pya!Yya#[ya~Ofya#|ya~P$$jO|)zO!P){Oj$na(o$na(p$na!Y$na#[$na~Of$na#|$na~P$%`O|)zO!P){Oj$pa(o$pa(p$pa!Y$pa#[$pa~Of$pa#|$pa~P$&RO#g0^O~Of%Oa!Y%Oa#[%Oa#|%Oa~P!0}O!d#uO~O#g0aO~O!Y+TO`(za'r(za~O|#yO}#zO!P#{O!i#wO!k#xO(XVOP!qiZ!qin!qi!Y!qi!h!qi!o!qi#j!qi#k!qi#l!qi#m!qi#n!qi#o!qi#p!qi#q!qi#r!qi#t!qi#v!qi#x!qi#y!qi(h!qi(o!qi(p!qi~O`!qi'r!qi'p!qi!V!qi!j!qir!qi![!qi%c!qi!d!qi~P$'pOg%VOn$tOo$sOp$sOv%XOx%YOz;QO!P${O![$|O!f<`O!k$xO#f;WO$T%^O$o;SO$q;UO$t%_O'}TO(QUO(X$uO(o$}O(p%PO~Ol0kO'{0jO~P$*ZO!d+`O`(Ta![(Ta'r(Ta!Y(Ta~O#g0qO~OZ[X!YeX!ZeX~O!Y0rO!Z)OX~O!Z0tO~OZ0uO~Oa0wO'{+hO'}TO(QUO~O![%{O'{%dO_'nX!Y'nX~O!Y+mO_(}a~O!j0zO~P!8dOZ0}O~O_1OO~O#[1RO~Oj1UO![$|O~O([(xO!Z({P~Og%VOj1_O![1[O%c1^O~OZ1iO!Y1gO!Z(|X~O!Z1jO~O_1lO`%kO'r%kO~O'{#mO'}TO(QUO~O#[$eO$O$eOP(^XZ(^Xn(^X|(^X}(^X!P(^X!Y(^X!h(^X!k(^X!o(^X#j(^X#k(^X#l(^X#m(^X#n(^X#o(^X#p(^X#q(^X#t(^X#v(^X#x(^X#y(^X(X(^X(h(^X(o(^X(p(^X~O#r1oO&T1pO`(^X!i(^X~P$/qO#[$eO#r1oO&T1pO~O`1rO~P%[O`1tO~O&^1wOP&[iQ&[iR&[iX&[i`&[ic&[id&[il&[in&[io&[ip&[iv&[ix&[iz&[i!P&[i!T&[i!U&[i![&[i!f&[i!k&[i!n&[i!o&[i!p&[i!r&[i!t&[i!w&[i!{&[i#s&[i$T&[i%b&[i%d&[i%f&[i%g&[i%h&[i%k&[i%m&[i%p&[i%q&[i%s&[i&P&[i&V&[i&X&[i&Z&[i&]&[i&`&[i&f&[i&l&[i&n&[i&p&[i&r&[i&t&[i'p&[i'{&[i'}&[i(Q&[i(X&[i(g&[i(t&[i!Z&[ia&[i&c&[i~Oa1}O!Z1{O&c1|O~P`O![XO!k2PO~O&j,pOP&eiQ&eiR&eiX&ei`&eic&eid&eil&ein&eio&eip&eiv&eix&eiz&ei!P&ei!T&ei!U&ei![&ei!f&ei!k&ei!n&ei!o&ei!p&ei!r&ei!t&ei!w&ei!{&ei#s&ei$T&ei%b&ei%d&ei%f&ei%g&ei%h&ei%k&ei%m&ei%p&ei%q&ei%s&ei&P&ei&V&ei&X&ei&Z&ei&]&ei&`&ei&f&ei&l&ei&n&ei&p&ei&r&ei&t&ei'p&ei'{&ei'}&ei(Q&ei(X&ei(g&ei(t&ei!Z&ei&^&eia&ei&c&ei~O!V2VO~O!Y!^a!Z!^a~P#C|Oo!nO!P!oO!X2]O([!mO!Y'QX!Z'QX~P@UO!Y-QO!Z(`a~O!Y'WX!Z'WX~P!7lO!Y-TO!Z(na~O!Z2dO~P'_O`%kO#[2mO'r%kO~O`%kO!d#uO#[2mO'r%kO~O`%kO!d#uO!o2qO#[2mO'r%kO(h'kO~O`%kO'r%kO~P!8dO!Y$aOr$ma~O!V'Pi!Y'Pi~P!8dO!Y(PO!V(_i~O!Y(WO!V(li~O!V(mi!Y(mi~P!8dO!Y(ji!j(ji`(ji'r(ji~P!8dO#[2sO!Y(ji!j(ji`(ji'r(ji~O!Y(dO!j(ii~O!P%eO![%fO!{]O#e2xO#f2wO'{%dO~O!P%eO![%fO#f2wO'{%dO~Oj3PO!['ZO%c3OO~Og%VOj3PO!['ZO%c3OO~O#g%ZaP%ZaZ%Za`%Zan%Za}%Za!h%Za!i%Za!k%Za!o%Za#j%Za#k%Za#l%Za#m%Za#n%Za#o%Za#p%Za#q%Za#r%Za#t%Za#v%Za#x%Za#y%Za'r%Za(X%Za(h%Za!j%Za!V%Za'p%Zar%Za![%Za%c%Za!d%Za~P#L^O#g%]aP%]aZ%]a`%]an%]a}%]a!h%]a!i%]a!k%]a!o%]a#j%]a#k%]a#l%]a#m%]a#n%]a#o%]a#p%]a#q%]a#r%]a#t%]a#v%]a#x%]a#y%]a'r%]a(X%]a(h%]a!j%]a!V%]a'p%]ar%]a![%]a%c%]a!d%]a~P#MPO#g%ZaP%ZaZ%Za`%Zan%Za}%Za!Y%Za!h%Za!i%Za!k%Za!o%Za#j%Za#k%Za#l%Za#m%Za#n%Za#o%Za#p%Za#q%Za#r%Za#t%Za#v%Za#x%Za#y%Za'r%Za(X%Za(h%Za!j%Za!V%Za'p%Za#[%Zar%Za![%Za%c%Za!d%Za~P#-]O#g%]aP%]aZ%]a`%]an%]a}%]a!Y%]a!h%]a!i%]a!k%]a!o%]a#j%]a#k%]a#l%]a#m%]a#n%]a#o%]a#p%]a#q%]a#r%]a#t%]a#v%]a#x%]a#y%]a'r%]a(X%]a(h%]a!j%]a!V%]a'p%]a#[%]ar%]a![%]a%c%]a!d%]a~P#-]O#gyaPyaZya`yanya!hya!iya!kya!oya#jya#kya#lya#mya#nya#oya#pya#qya#rya#tya#vya#xya#yya'rya(Xya(hya!jya!Vya'pyarya![ya%cya!dya~P$$jO#g$naP$naZ$na`$nan$na}$na!h$na!i$na!k$na!o$na#j$na#k$na#l$na#m$na#n$na#o$na#p$na#q$na#r$na#t$na#v$na#x$na#y$na'r$na(X$na(h$na!j$na!V$na'p$nar$na![$na%c$na!d$na~P$%`O#g$paP$paZ$pa`$pan$pa}$pa!h$pa!i$pa!k$pa!o$pa#j$pa#k$pa#l$pa#m$pa#n$pa#o$pa#p$pa#q$pa#r$pa#t$pa#v$pa#x$pa#y$pa'r$pa(X$pa(h$pa!j$pa!V$pa'p$par$pa![$pa%c$pa!d$pa~P$&RO#g%OaP%OaZ%Oa`%Oan%Oa}%Oa!Y%Oa!h%Oa!i%Oa!k%Oa!o%Oa#j%Oa#k%Oa#l%Oa#m%Oa#n%Oa#o%Oa#p%Oa#q%Oa#r%Oa#t%Oa#v%Oa#x%Oa#y%Oa'r%Oa(X%Oa(h%Oa!j%Oa!V%Oa'p%Oa#[%Oar%Oa![%Oa%c%Oa!d%Oa~P#-]O`#_q!Y#_q'r#_q'p#_q!V#_q!j#_qr#_q![#_q%c#_q!d#_q~P!8dOf'RX!Y'RX~P!(SO!Y.iOf(ba~O!X3ZO!Y'SX!j'SX~P%[O!Y.lO!j(ca~O!Y.lO!j(ca~P!8dO!V3^O~O#|!ma!Z!ma~PKOO#|!ea!Y!ea!Z!ea~P#C|O#|!qa!Z!qa~P!:}O#|!sa!Z!sa~P!=hORfO![3pO$a3qO~O!Z3uO~Or3vO~P#-]O`$jq!Y$jq'r$jq'p$jq!V$jq!j$jqr$jq![$jq%c$jq!d$jq~P!8dO!V3wO~P#-]O|)zO!P){O(p%POj'ba(o'ba!Y'ba#['ba~Of'ba#|'ba~P%)eO|)zO!P){Oj'da(o'da(p'da!Y'da#['da~Of'da#|'da~P%*WO(h$ZO~P#-]O!X3zO'{%dO!Y'^X!j'^X~O!Y/cO!j(ua~O!Y/cO!d#uO!j(ua~O!Y/cO!d#uO(h'kO!j(ua~Of$wi!Y$wi#[$wi#|$wi~P!0}O!X4SO'{*]O!V'`X!Y'`X~P!1lO!Y/kO!V(va~O!Y/kO!V(va~P#-]O!d#uO#r4[O~On4_O!d#uO(h'kO~O(o$}Oj%Zi|%Zi!P%Zi(p%Zi!Y%Zi#[%Zi~Of%Zi#|%Zi~P%-jO(p%POj%]i|%]i!P%]i(o%]i!Y%]i#[%]i~Of%]i#|%]i~P%.]Of(Vi!Y(Vi~P!0}O#[4fOf(Vi!Y(Vi~P!0}O!j4iO~O`$kq!Y$kq'r$kq'p$kq!V$kq!j$kqr$kq![$kq%c$kq!d$kq~P!8dO!V4mO~O!Y4nO![(wX~P#-]O!i#wO~P4XO`$uX![$uX%W[X'r$uX!Y$uX~P!/tO%W4pO`kXjkX|kX!PkX![kX'rkX(okX(pkX!YkX~O%W4pO~Oa4vO%d4wO'{+hO'}TO(QUO!Y'mX!Z'mX~O!Y0rO!Z)Oa~OZ4{O~O_4|O~O`%kO'r%kO~P#-]O![$|O~P#-]O!Y5UO#[5WO!Z({X~O!Z5XO~Oo!nO!P5YO!_!xO!`!uO!a!uO!{:dO#P!pO#Q!pO#R!pO#S!pO#T!pO#W5_O#X!yO'|!lO'}TO(QUO([!mO(g!sO~O!Z5^O~P%3nOj5dO![1[O%c5cO~Og%VOj5dO![1[O%c5cO~Oa5kO'{#mO'}TO(QUO!Y'lX!Z'lX~O!Y1gO!Z(|a~O'}TO(QUO([5mO~O_5qO~O#r5tO&T5uO~PMnO!j5vO~P%[O`5xO~O`5xO~P%[Oa1}O!Z5}O&c1|O~P`O!d6PO~O!d6ROg(ai!Y(ai!Z(ai!d(ai!k(ai~O!Y#di!Z#di~P#C|O#[6SO!Y#di!Z#di~O!Y!^i!Z!^i~P#C|O`%kO#[6]O'r%kO~O`%kO!d#uO#[6]O'r%kO~O!Y(jq!j(jq`(jq'r(jq~P!8dO!Y(dO!j(iq~O!P%eO![%fO#f6dO'{%dO~O!['ZO%c6gO~Oj6jO!['ZO%c6gO~O#g'baP'baZ'ba`'ban'ba}'ba!h'ba!i'ba!k'ba!o'ba#j'ba#k'ba#l'ba#m'ba#n'ba#o'ba#p'ba#q'ba#r'ba#t'ba#v'ba#x'ba#y'ba'r'ba(X'ba(h'ba!j'ba!V'ba'p'bar'ba!['ba%c'ba!d'ba~P%)eO#g'daP'daZ'da`'dan'da}'da!h'da!i'da!k'da!o'da#j'da#k'da#l'da#m'da#n'da#o'da#p'da#q'da#r'da#t'da#v'da#x'da#y'da'r'da(X'da(h'da!j'da!V'da'p'dar'da!['da%c'da!d'da~P%*WO#g$wiP$wiZ$wi`$win$wi}$wi!Y$wi!h$wi!i$wi!k$wi!o$wi#j$wi#k$wi#l$wi#m$wi#n$wi#o$wi#p$wi#q$wi#r$wi#t$wi#v$wi#x$wi#y$wi'r$wi(X$wi(h$wi!j$wi!V$wi'p$wi#[$wir$wi![$wi%c$wi!d$wi~P#-]O#g%ZiP%ZiZ%Zi`%Zin%Zi}%Zi!h%Zi!i%Zi!k%Zi!o%Zi#j%Zi#k%Zi#l%Zi#m%Zi#n%Zi#o%Zi#p%Zi#q%Zi#r%Zi#t%Zi#v%Zi#x%Zi#y%Zi'r%Zi(X%Zi(h%Zi!j%Zi!V%Zi'p%Zir%Zi![%Zi%c%Zi!d%Zi~P%-jO#g%]iP%]iZ%]i`%]in%]i}%]i!h%]i!i%]i!k%]i!o%]i#j%]i#k%]i#l%]i#m%]i#n%]i#o%]i#p%]i#q%]i#r%]i#t%]i#v%]i#x%]i#y%]i'r%]i(X%]i(h%]i!j%]i!V%]i'p%]ir%]i![%]i%c%]i!d%]i~P%.]Of'Ra!Y'Ra~P!0}O!Y'Sa!j'Sa~P!8dO!Y.lO!j(ci~O#|#_i!Y#_i!Z#_i~P#C|OP$]O|#yO}#zO!P#{O!i#wO!k#xO!o$]O(XVOZ#iin#ii!h#ii#k#ii#l#ii#m#ii#n#ii#o#ii#p#ii#q#ii#r#ii#t#ii#v#ii#x#ii#y#ii#|#ii(h#ii(o#ii(p#ii!Y#ii!Z#ii~O#j#ii~P%FnO#j:lO~P%FnOP$]O|#yO}#zO!P#{O!i#wO!k#xO!o$]O#j:lO#k:mO#l:mO#m:mO(XVOZ#ii!h#ii#n#ii#o#ii#p#ii#q#ii#r#ii#t#ii#v#ii#x#ii#y#ii#|#ii(h#ii(o#ii(p#ii!Y#ii!Z#ii~On#ii~P%HyOn:nO~P%HyOP$]On:nO|#yO}#zO!P#{O!i#wO!k#xO!o$]O#j:lO#k:mO#l:mO#m:mO#n:oO(XVO#t#ii#v#ii#x#ii#y#ii#|#ii(h#ii(o#ii(p#ii!Y#ii!Z#ii~OZ#ii!h#ii#o#ii#p#ii#q#ii#r#ii~P%KUOZ:zO!h:pO#o:pO#p:pO#q:yO#r:pO~P%KUOP$]OZ:zOn:nO|#yO}#zO!P#{O!h:pO!i#wO!k#xO!o$]O#j:lO#k:mO#l:mO#m:mO#n:oO#o:pO#p:pO#q:yO#r:pO#t:qO(XVO(p#}O#x#ii#y#ii#|#ii(h#ii(o#ii!Y#ii!Z#ii~O#v:sO~P%MpO#v#ii~P%MpOP$]OZ:zOn:nO|#yO}#zO!P#{O!h:pO!i#wO!k#xO!o$]O#j:lO#k:mO#l:mO#m:mO#n:oO#o:pO#p:pO#q:yO#r:pO#t:qO(XVO#x#ii#y#ii#|#ii(h#ii!Y#ii!Z#ii~O#v#ii(o#ii(p#ii~P& {O#v:sO(o#|O(p#}O~P& {OP$]OZ:zOn:nO|#yO}#zO!P#{O!h:pO!i#wO!k#xO!o$]O#j:lO#k:mO#l:mO#m:mO#n:oO#o:pO#p:pO#q:yO#r:pO#t:qO#v:sO#x:uO(XVO(o#|O(p#}O~O#y#ii#|#ii(h#ii!Y#ii!Z#ii~P&$^O`#zy!Y#zy'r#zy'p#zy!V#zy!j#zyr#zy![#zy%c#zy!d#zy~P!8dOj<gO|)zO!P){O(o$}O(p%PO~OP#iiZ#iin#ii}#ii!h#ii!i#ii!k#ii!o#ii#j#ii#k#ii#l#ii#m#ii#n#ii#o#ii#p#ii#q#ii#r#ii#t#ii#v#ii#x#ii#y#ii#|#ii(X#ii(h#ii!Y#ii!Z#ii~P&'UO!i#wOP(WXZ(WXj(WXn(WX|(WX}(WX!P(WX!h(WX!k(WX!o(WX#j(WX#k(WX#l(WX#m(WX#n(WX#o(WX#p(WX#q(WX#r(WX#t(WX#v(WX#x(WX#y(WX#|(WX(X(WX(h(WX(o(WX(p(WX!Y(WX!Z(WX~O#|#}i!Y#}i!Z#}i~P#C|O#|!qi!Z!qi~P$'pO!Z6|O~O!Y']a!Z']a~P#C|O!d#uO(h'kO!Y'^a!j'^a~O!Y/cO!j(ui~O!Y/cO!d#uO!j(ui~Of$wq!Y$wq#[$wq#|$wq~P!0}O!V'`a!Y'`a~P#-]O!d7TO~O!Y/kO!V(vi~P#-]O!Y/kO!V(vi~O!V7XO~O!d#uO#r7^O~On7_O!d#uO(h'kO~O|)zO!P){O(p%POj'ca(o'ca!Y'ca#['ca~Of'ca#|'ca~P&.fO|)zO!P){Oj'ea(o'ea(p'ea!Y'ea#['ea~Of'ea#|'ea~P&/XO!V7aO~Of$yq!Y$yq#[$yq#|$yq~P!0}O`$ky!Y$ky'r$ky'p$ky!V$ky!j$kyr$ky![$ky%c$ky!d$ky~P!8dO!d6RO~O!Y4nO![(wa~O`#_y!Y#_y'r#_y'p#_y!V#_y!j#_yr#_y![#_y%c#_y!d#_y~P!8dOZ7fO~Oa7hO'{+hO'}TO(QUO~O!Y0rO!Z)Oi~O_7lO~O([(xO!Y'iX!Z'iX~O!Y5UO!Z({a~OlkO'{7sO~P.iO!Z7vO~P%3nOo!nO!P7wO'}TO(QUO([!mO(g!sO~O![1[O~O![1[O%c7yO~Oj7|O![1[O%c7yO~OZ8RO!Y'la!Z'la~O!Y1gO!Z(|i~O!j8VO~O!j8WO~O!j8ZO~O!j8ZO~P%[O`8]O~O!d8^O~O!j8_O~O!Y(mi!Z(mi~P#C|O`%kO#[8gO'r%kO~O!Y(jy!j(jy`(jy'r(jy~P!8dO!Y(dO!j(iy~O!['ZO%c8jO~O#g$wqP$wqZ$wq`$wqn$wq}$wq!Y$wq!h$wq!i$wq!k$wq!o$wq#j$wq#k$wq#l$wq#m$wq#n$wq#o$wq#p$wq#q$wq#r$wq#t$wq#v$wq#x$wq#y$wq'r$wq(X$wq(h$wq!j$wq!V$wq'p$wq#[$wqr$wq![$wq%c$wq!d$wq~P#-]O#g'caP'caZ'ca`'can'ca}'ca!h'ca!i'ca!k'ca!o'ca#j'ca#k'ca#l'ca#m'ca#n'ca#o'ca#p'ca#q'ca#r'ca#t'ca#v'ca#x'ca#y'ca'r'ca(X'ca(h'ca!j'ca!V'ca'p'car'ca!['ca%c'ca!d'ca~P&.fO#g'eaP'eaZ'ea`'ean'ea}'ea!h'ea!i'ea!k'ea!o'ea#j'ea#k'ea#l'ea#m'ea#n'ea#o'ea#p'ea#q'ea#r'ea#t'ea#v'ea#x'ea#y'ea'r'ea(X'ea(h'ea!j'ea!V'ea'p'ear'ea!['ea%c'ea!d'ea~P&/XO#g$yqP$yqZ$yq`$yqn$yq}$yq!Y$yq!h$yq!i$yq!k$yq!o$yq#j$yq#k$yq#l$yq#m$yq#n$yq#o$yq#p$yq#q$yq#r$yq#t$yq#v$yq#x$yq#y$yq'r$yq(X$yq(h$yq!j$yq!V$yq'p$yq#[$yqr$yq![$yq%c$yq!d$yq~P#-]O!Y'Si!j'Si~P!8dO#|#_q!Y#_q!Z#_q~P#C|O(o$}OP%ZaZ%Zan%Za}%Za!h%Za!i%Za!k%Za!o%Za#j%Za#k%Za#l%Za#m%Za#n%Za#o%Za#p%Za#q%Za#r%Za#t%Za#v%Za#x%Za#y%Za#|%Za(X%Za(h%Za!Y%Za!Z%Za~Oj%Za|%Za!P%Za(p%Za~P&@nO(p%POP%]aZ%]an%]a}%]a!h%]a!i%]a!k%]a!o%]a#j%]a#k%]a#l%]a#m%]a#n%]a#o%]a#p%]a#q%]a#r%]a#t%]a#v%]a#x%]a#y%]a#|%]a(X%]a(h%]a!Y%]a!Z%]a~Oj%]a|%]a!P%]a(o%]a~P&BuOj<gO|)zO!P){O(p%PO~P&@nOj<gO|)zO!P){O(o$}O~P&BuO|0ZO}0ZO!P0[OPyaZyajyanya!hya!iya!kya!oya#jya#kya#lya#mya#nya#oya#pya#qya#rya#tya#vya#xya#yya#|ya(Xya(hya(oya(pya!Yya!Zya~O|)zO!P){OP$naZ$naj$nan$na}$na!h$na!i$na!k$na!o$na#j$na#k$na#l$na#m$na#n$na#o$na#p$na#q$na#r$na#t$na#v$na#x$na#y$na#|$na(X$na(h$na(o$na(p$na!Y$na!Z$na~O|)zO!P){OP$paZ$paj$pan$pa}$pa!h$pa!i$pa!k$pa!o$pa#j$pa#k$pa#l$pa#m$pa#n$pa#o$pa#p$pa#q$pa#r$pa#t$pa#v$pa#x$pa#y$pa#|$pa(X$pa(h$pa(o$pa(p$pa!Y$pa!Z$pa~OP%OaZ%Oan%Oa}%Oa!h%Oa!i%Oa!k%Oa!o%Oa#j%Oa#k%Oa#l%Oa#m%Oa#n%Oa#o%Oa#p%Oa#q%Oa#r%Oa#t%Oa#v%Oa#x%Oa#y%Oa#|%Oa(X%Oa(h%Oa!Y%Oa!Z%Oa~P&'UO#|$jq!Y$jq!Z$jq~P#C|O#|$kq!Y$kq!Z$kq~P#C|O!Z8vO~O#|8wO~P!0}O!d#uO!Y'^i!j'^i~O!d#uO(h'kO!Y'^i!j'^i~O!Y/cO!j(uq~O!V'`i!Y'`i~P#-]O!Y/kO!V(vq~O!V8}O~P#-]O!V8}O~Of(Vy!Y(Vy~P!0}O!Y'ga!['ga~P#-]O`%Vq![%Vq'r%Vq!Y%Vq~P#-]OZ9SO~O!Y0rO!Z)Oq~O#[9WO!Y'ia!Z'ia~O!Y5UO!Z({i~P#C|OP[XZ[Xn[X|[X}[X!P[X!V[X!Y[X!h[X!i[X!k[X!o[X#[[X#geX#j[X#k[X#l[X#m[X#n[X#o[X#p[X#q[X#r[X#t[X#v[X#x[X#y[X$O[X(X[X(h[X(o[X(p[X~O!d%TX#r%TX~P'#`O![1[O%c9[O~O'}TO(QUO([9aO~O!Y1gO!Z(|q~O!j9dO~O!j9eO~O!j9fO~O!j9fO~P%[O#[9iO!Y#dy!Z#dy~O!Y#dy!Z#dy~P#C|O!['ZO%c9nO~O#|#zy!Y#zy!Z#zy~P#C|OP$wiZ$win$wi}$wi!h$wi!i$wi!k$wi!o$wi#j$wi#k$wi#l$wi#m$wi#n$wi#o$wi#p$wi#q$wi#r$wi#t$wi#v$wi#x$wi#y$wi#|$wi(X$wi(h$wi!Y$wi!Z$wi~P&'UO|)zO!P){O(p%POP'baZ'baj'ban'ba}'ba!h'ba!i'ba!k'ba!o'ba#j'ba#k'ba#l'ba#m'ba#n'ba#o'ba#p'ba#q'ba#r'ba#t'ba#v'ba#x'ba#y'ba#|'ba(X'ba(h'ba(o'ba!Y'ba!Z'ba~O|)zO!P){OP'daZ'daj'dan'da}'da!h'da!i'da!k'da!o'da#j'da#k'da#l'da#m'da#n'da#o'da#p'da#q'da#r'da#t'da#v'da#x'da#y'da#|'da(X'da(h'da(o'da(p'da!Y'da!Z'da~O(o$}OP%ZiZ%Zij%Zin%Zi|%Zi}%Zi!P%Zi!h%Zi!i%Zi!k%Zi!o%Zi#j%Zi#k%Zi#l%Zi#m%Zi#n%Zi#o%Zi#p%Zi#q%Zi#r%Zi#t%Zi#v%Zi#x%Zi#y%Zi#|%Zi(X%Zi(h%Zi(p%Zi!Y%Zi!Z%Zi~O(p%POP%]iZ%]ij%]in%]i|%]i}%]i!P%]i!h%]i!i%]i!k%]i!o%]i#j%]i#k%]i#l%]i#m%]i#n%]i#o%]i#p%]i#q%]i#r%]i#t%]i#v%]i#x%]i#y%]i#|%]i(X%]i(h%]i(o%]i!Y%]i!Z%]i~O#|$ky!Y$ky!Z$ky~P#C|O#|#_y!Y#_y!Z#_y~P#C|O!d#uO!Y'^q!j'^q~O!Y/cO!j(uy~O!V'`q!Y'`q~P#-]O!V9wO~P#-]O!Y0rO!Z)Oy~O!Y5UO!Z({q~O![1[O%c:OO~O!j:RO~O!['ZO%c:WO~OP$wqZ$wqn$wq}$wq!h$wq!i$wq!k$wq!o$wq#j$wq#k$wq#l$wq#m$wq#n$wq#o$wq#p$wq#q$wq#r$wq#t$wq#v$wq#x$wq#y$wq#|$wq(X$wq(h$wq!Y$wq!Z$wq~P&'UO|)zO!P){O(p%POP'caZ'caj'can'ca}'ca!h'ca!i'ca!k'ca!o'ca#j'ca#k'ca#l'ca#m'ca#n'ca#o'ca#p'ca#q'ca#r'ca#t'ca#v'ca#x'ca#y'ca#|'ca(X'ca(h'ca(o'ca!Y'ca!Z'ca~O|)zO!P){OP'eaZ'eaj'ean'ea}'ea!h'ea!i'ea!k'ea!o'ea#j'ea#k'ea#l'ea#m'ea#n'ea#o'ea#p'ea#q'ea#r'ea#t'ea#v'ea#x'ea#y'ea#|'ea(X'ea(h'ea(o'ea(p'ea!Y'ea!Z'ea~OP$yqZ$yqn$yq}$yq!h$yq!i$yq!k$yq!o$yq#j$yq#k$yq#l$yq#m$yq#n$yq#o$yq#p$yq#q$yq#r$yq#t$yq#v$yq#x$yq#y$yq#|$yq(X$yq(h$yq!Y$yq!Z$yq~P&'UOf%_!Z!Y%_!Z#[%_!Z#|%_!Z~P!0}O!Y'iq!Z'iq~P#C|O!Y#d!Z!Z#d!Z~P#C|O#g%_!ZP%_!ZZ%_!Z`%_!Zn%_!Z}%_!Z!Y%_!Z!h%_!Z!i%_!Z!k%_!Z!o%_!Z#j%_!Z#k%_!Z#l%_!Z#m%_!Z#n%_!Z#o%_!Z#p%_!Z#q%_!Z#r%_!Z#t%_!Z#v%_!Z#x%_!Z#y%_!Z'r%_!Z(X%_!Z(h%_!Z!j%_!Z!V%_!Z'p%_!Z#[%_!Zr%_!Z![%_!Z%c%_!Z!d%_!Z~P#-]OP%_!ZZ%_!Zn%_!Z}%_!Z!h%_!Z!i%_!Z!k%_!Z!o%_!Z#j%_!Z#k%_!Z#l%_!Z#m%_!Z#n%_!Z#o%_!Z#p%_!Z#q%_!Z#r%_!Z#t%_!Z#v%_!Z#x%_!Z#y%_!Z#|%_!Z(X%_!Z(h%_!Z!Y%_!Z!Z%_!Z~P&'UOr(]X~P1qO'|!lO~P!*fO!VeX!YeX#[eX~P'#`OP[XZ[Xn[X|[X}[X!P[X!Y[X!YeX!h[X!i[X!k[X!o[X#[[X#[eX#geX#j[X#k[X#l[X#m[X#n[X#o[X#p[X#q[X#r[X#t[X#v[X#x[X#y[X$O[X(X[X(h[X(o[X(p[X~O!deX!j[X!jeX(heX~P'ASOP:cOQ:cORfOc<[Od!iOlkOn:cOokOpkOvkOx:cOz:cO!PWO!TkO!UkO![XO!f:fO!kZO!n:cO!o:cO!p:cO!r:gO!t:jO!w!hO$T!kO'{)YO'}TO(QUO(XVO(g[O(t<YO~O!Y:wO!Z$ma~Og%VOl%WOn$tOo$sOp$sOv%XOx%YOz;RO!P${O![$|O!f<aO!k$xO#f;XO$T%^O$o;TO$q;VO$t%_O'{(pO'}TO(QUO(X$uO(o$}O(p%PO~O#s)aO~P'ExO!Z[X!ZeX~P'ASO#g:kO~O!d#uO#g:kO~O#[:{O~O#r:pO~O#[;ZO!Y(mX!Z(mX~O#[:{O!Y(kX!Z(kX~O#g;[O~Of;^O~P!0}O#g;cO~O#g;dO~O!d#uO#g;eO~O!d#uO#g;[O~O#|;fO~P#C|O#g;gO~O#g;hO~O#g;mO~O#g;nO~O#g;oO~O#g;pO~O#|;qO~P!0}O#|;rO~P!0}O!i#P#Q#S#T#W#e#f#q(t$o$q$t%W%b%c%d%k%m%p%q%s%u~'vS#k!U't'|#lo#j#mn|'u$Y'u'{$[([~",
  goto: "$2p)SPPPPP)TPP)WP)iP*x.|PPPP5pPP6WPP<S?gP?zP?zPPP?zPAxP?zP?zP?zPA|PPBRPBlPGdPPPGhPPPPGhJiPPPJoKjPGhPMxPPPP!!WGhPPPGhPGhP!$fGhP!'z!(|!)VP!)y!)}!)yPPPPP!-Y!(|PP!-v!.pP!1dGhGh!1i!4s!9Y!9Y!=OPPP!=VGhPPPPPPPPPPP!@dP!AqPPGh!CSPGhPGhGhGhGhPGh!DfP!GnP!JrP!Jv!KQ!KU!KUP!GkP!KY!KYP!N^P!NbGhGh!Nh##k?zP?zP?z?zP#$v?z?z#'O?z#)k?z#+m?z?z#,[#.f#.f#.j#.r#.f#.zP#.fP?z#/d?z#3R?z?z5pPPP#6vPPP#7a#7aP#7aP#7w#7aPP#7}P#7tP#7t#8b#7t#8|#9S5m)W#9V)WP#9^#9^#9^P)WP)WP)WP)WPP)WP#9d#9gP#9g)WP#9kP#9nP)WP)WP)WP)WP)WP)W)WPP#9t#9z#:V#:]#:c#:i#:o#:}#;T#;Z#;e#;k#;u#<U#<[#<|#=`#=f#=l#=z#>a#@O#@^#@d#Ax#BW#Cr#DQ#DW#D^#Dd#Dn#Dt#Dz#EU#Eh#EnPPPPPPPPPP#EtPPPPPPP#Fi#Ip#KP#KW#K`PPPP$!d$%Z$+r$+u$+x$,q$,t$,w$-O$-WPP$-^$-b$.Y$/X$/]$/qPP$/u$/{$0PP$0S$0W$0Z$1P$1h$2P$2T$2W$2Z$2a$2d$2h$2lR!{RoqOXst!Z#c%j&m&o&p&r,h,m1w1zY!uQ'Z-Y1[5]Q%pvQ%xyQ&P|Q&e!VS'R!e-QQ'a!iS'g!r!xS*c$|*hQ+f%yQ+s&RQ,X&_Q-W'YQ-b'bQ-j'hQ/|*jQ1f,YR;Y:g%OdOPWXYZstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$a$e%j%p%}&f&i&m&o&p&r&v'O']'m'}(P(V(^(r(v(z)y+O+S,e,h,m-^-f-t-z.l.s0[0a0q1_1o1p1r1t1w1z1|2m2s3Z5Y5d5t5u5x6]7w7|8]8gS#p]:d!r)[$[$m'S)n,y,|.{2]3p5W6S9W9i:c:f:g:j:k:l:m:n:o:p:q:r:s:t:u:v:w:{;Y;Z;[;^;e;f;o;p<]Q*u%ZQ+k%{Q,Z&bQ,b&jQ.c;QQ0h+^Q0l+`Q0w+lQ1n,`Q2{.[Q4v0rQ5k1gQ6i3PQ6u;RQ7h4wR8m6j&|kOPWXYZstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$[$a$e$m%j%p%}&f&i&j&m&o&p&r&v'O'S']'m'}(P(V(^(r(v(z)n)y+O+S+^,e,h,m,y,|-^-f-t-z.[.l.s.{0[0a0q1_1o1p1r1t1w1z1|2]2m2s3P3Z3p5W5Y5d5t5u5x6S6]6j7w7|8]8g9W9i:c:f:g:j:k:l:m:n:o:p:q:r:s:t:u:v:w:{;Y;Z;[;^;e;f;o;p<]t!nQ!r!u!x!y'R'Y'Z'g'h'i-Q-W-Y-j1[5]5_$v$si#u#w$c$d$x${%O%Q%[%]%a)u){)}*P*R*Y*`*p*q+]+`+w+z.Z.i/Z/j/k/m0Q0S0^1R1U1^3O3x4S4[4f4n4p5c6g7T7^7y8j8w9[9n:O:W:y:z:|:};O;P;S;T;U;V;W;X;_;`;a;b;c;d;g;h;i;j;k;l;m;n;q;r<Y<b<c<f<gQ&S|Q'P!eS'V%f-TQ+k%{Q,Z&bQ0]*yQ0w+lQ0|+rQ1m,_Q1n,`Q4v0rQ5P1OQ5k1gQ5n1iQ5o1lQ7h4wQ7k4|Q8U5qQ9V7lR9b8RrnOXst!V!Z#c%j&d&m&o&p&r,h,m1w1zR,]&f&v^OPXYstuvwz!Z!`!g!j!o#R#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$[$a$e$m%j%p%}&f&i&j&m&o&p&r&v'O']'m(P(V(^(r(v(z)n)y+O+S+^,e,h,m,y,|-^-f-t-z.[.l.s.{0[0a0q1_1o1p1r1t1w1z1|2]2m2s3P3Z3p5W5Y5d5t5u5x6S6]6j7w7|8]8g9W9i:c:f:g:j:k:l:m:n:o:p:q:r:s:t:u:v:w:{;Y;Z;[;^;e;f;o;p<[<][#[WZ#V#Y'S'}!S%gm#g#h#k%b%e(W(b(c(d+Q+R+T,d,z-x.O.P.Q.S2P2w2x6R6dQ%sxQ%wyS%||&RQ&Y!TQ'^!hQ'`!iQ(k#rS*V$x*ZS+e%x%yQ+i%{Q,S&]Q,W&_S-a'a'bQ.^(lQ/g*WQ0p+fQ0v+lQ0x+mQ0{+qQ1a,TS1e,X,YQ2i-bQ3y/cQ4u0rQ4y0uQ5O0}Q5j1fQ7Q3zQ7g4wQ7j4{Q9R7fR9y9S!O$zi#w%O%Q%[%]%a)}*P*Y*p*q.i/j0Q0S0^3x4f8w<Y<b<c!S%uy!i!t%w%x%y'Q'`'a'b'f'p*b+e+f,}-a-b-i/t0p2b2i2p4^Q+_%sQ+x&VQ+{&WQ,V&_Q.](kQ1`,SU1d,W,X,YQ3Q.^Q5e1aS5i1e1fQ8Q5j#W<^#u$c$d$x${)u){*R*`+]+`+w+z.Z/Z/k/m1R1U1^3O4S4[4n4p5c6g7T7^7y8j9[9n:O:W:|;O;S;U;W;_;a;c;g;i;k;m;q<f<go<_:y:z:};P;T;V;X;`;b;d;h;j;l;n;rW%Ti%V*r<YS&V!Q&dQ&W!RQ&X!SR+v&T$w%Si#u#w$c$d$x${%O%Q%[%]%a)u){)}*P*R*Y*`*p*q+]+`+w+z.Z.i/Z/j/k/m0Q0S0^1R1U1^3O3x4S4[4f4n4p5c6g7T7^7y8j8w9[9n:O:W:y:z:|:};O;P;S;T;U;V;W;X;_;`;a;b;c;d;g;h;i;j;k;l;m;n;q;r<Y<b<c<f<gT)v$u)wV*v%Z;Q;RU'V!e%f-TS(y#y#zQ+p&OS.V(g(hQ1V+|Q4g0ZR7p5U&|kOPWXYZstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$[$a$e$m%j%p%}&f&i&j&m&o&p&r&v'O'S']'m'}(P(V(^(r(v(z)n)y+O+S+^,e,h,m,y,|-^-f-t-z.[.l.s.{0[0a0q1_1o1p1r1t1w1z1|2]2m2s3P3Z3p5W5Y5d5t5u5x6S6]6j7w7|8]8g9W9i:c:f:g:j:k:l:m:n:o:p:q:r:s:t:u:v:w:{;Y;Z;[;^;e;f;o;p<]$i$`c#X#d%n%o%q'|(S(n(u(})O)P)Q)R)S)T)U)V)W)X)Z)^)b)l+Z+o-O-m-r-w-y.h.n.r.t.u.v/V0_2W2Z2k2r3Y3_3`3a3b3c3d3e3f3g3h3i3j3k3n3o3t4k4s6U6[6a6o6p6y6z7r8a8e8n8t8u9k9{:S:e<PT#SV#T&}kOPWXYZstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$[$a$e$m%j%p%}&f&i&j&m&o&p&r&v'O'S']'m'}(P(V(^(r(v(z)n)y+O+S+^,e,h,m,y,|-^-f-t-z.[.l.s.{0[0a0q1_1o1p1r1t1w1z1|2]2m2s3P3Z3p5W5Y5d5t5u5x6S6]6j7w7|8]8g9W9i:c:f:g:j:k:l:m:n:o:p:q:r:s:t:u:v:w:{;Y;Z;[;^;e;f;o;p<]Q'T!eR2^-Qv!nQ!e!r!u!x!y'R'Y'Z'g'h'i-Q-W-Y-j1[5]5_S*b$|*hS/t*c*jQ/}*kQ1X,OQ4^/|R4a0PnqOXst!Z#c%j&m&o&p&r,h,m1w1zQ&t!^Q'q!wS(m#t:kQ+c%vQ,Q&YQ,R&[Q-_'_Q-l'jS.g(r;[S0`+O;eQ0n+dQ1Z,PQ2O,oQ2Q,pQ2Y,{Q2g-`Q2j-dS4l0a;oQ4q0oS4t0q;pQ6T2[Q6X2hQ6^2oQ7e4rQ8b6VQ8c6YQ8f6_R9h8_$d$_c#X#d%o%q'|(S(n(u(})O)P)Q)R)S)T)U)V)W)X)Z)^)b)l+Z+o-O-m-r-w-y.h.n.r.u.v/V0_2W2Z2k2r3Y3_3`3a3b3c3d3e3f3g3h3i3j3k3n3o3t4k4s6U6[6a6o6p6y6z7r8a8e8n8t8u9k9{:S:e<PS(j#o'dU*o%R(q3mS+Y%n.tQ2|0hQ6f2{Q8l6iR9o8m$d$^c#X#d%o%q'|(S(n(u(})O)P)Q)R)S)T)U)V)W)X)Z)^)b)l+Z+o-O-m-r-w-y.h.n.r.u.v/V0_2W2Z2k2r3Y3_3`3a3b3c3d3e3f3g3h3i3j3k3n3o3t4k4s6U6[6a6o6p6y6z7r8a8e8n8t8u9k9{:S:e<PS(i#o'dS({#z$_S+X%n.tS.W(h(jQ.w)]Q0e+YR2y.X&|kOPWXYZstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$[$a$e$m%j%p%}&f&i&j&m&o&p&r&v'O'S']'m'}(P(V(^(r(v(z)n)y+O+S+^,e,h,m,y,|-^-f-t-z.[.l.s.{0[0a0q1_1o1p1r1t1w1z1|2]2m2s3P3Z3p5W5Y5d5t5u5x6S6]6j7w7|8]8g9W9i:c:f:g:j:k:l:m:n:o:p:q:r:s:t:u:v:w:{;Y;Z;[;^;e;f;o;p<]S#p]:dQ&o!XQ&p!YQ&r![Q&s!]R1v,kQ'[!hQ+[%sQ-]'^S.Y(k+_Q2e-[W2}.].^0g0iQ6W2fU6e2z2|3QS8i6f6hS9m8k8lS:U9l9oQ:^:VR:a:_U!vQ'Z-YT5Z1[5]!Q_OXZ`st!V!Z#c#g%b%j&d&f&m&o&p&r(d,h,m.P1w1z]!pQ!r'Z-Y1[5]T#p]:d%Y{OPWXYZstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$a$e%j%p%}&f&i&j&m&o&p&r&v'O']'m'}(P(V(^(r(v(z)y+O+S+^,e,h,m-^-f-t-z.[.l.s0[0a0q1_1o1p1r1t1w1z1|2m2s3P3Z5Y5d5t5u5x6]6j7w7|8]8gS(y#y#zS.V(g(h!s;v$[$m'S)n,y,|.{2]3p5W6S9W9i:c:f:g:j:k:l:m:n:o:p:q:r:s:t:u:v:w:{;Y;Z;[;^;e;f;o;p<]Y!tQ'Z-Y1[5]Q'f!rS'p!u!xS'r!y5_S-i'g'hQ-k'iR2p-jQ'o!tS(`#f1qS-h'f'rQ/f*VQ/r*bQ2q-kQ4O/gS4X/s/}Q7P3yS7[4_4aQ8y7QR9Q7_Q#vbQ'n!tS(_#f1qS(a#l*}Q+P%cQ+a%tQ+g%zU-g'f'o'rQ-{(`Q/e*VQ/q*bQ/w*eQ0m+bQ1b,US2n-h-kQ2v.TS3}/f/gS4W/r/}Q4Z/vQ4]/xQ5g1cQ6`2qQ7O3yQ7S4OS7W4X4aQ7]4`Q8O5hS8x7P7QQ8|7XQ9O7[Q9_8PQ9u8yQ9v8}Q9x9QQ:Q9`Q:Y9wQ;y;tQ<U;}R<V<OV!vQ'Z-Y%YaOPWXYZstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$a$e%j%p%}&f&i&j&m&o&p&r&v'O']'m'}(P(V(^(r(v(z)y+O+S+^,e,h,m-^-f-t-z.[.l.s0[0a0q1_1o1p1r1t1w1z1|2m2s3P3Z5Y5d5t5u5x6]6j7w7|8]8gS#vz!j!r;s$[$m'S)n,y,|.{2]3p5W6S9W9i:c:f:g:j:k:l:m:n:o:p:q:r:s:t:u:v:w:{;Y;Z;[;^;e;f;o;p<]R;y<[%YbOPWXYZstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$a$e%j%p%}&f&i&j&m&o&p&r&v'O']'m'}(P(V(^(r(v(z)y+O+S+^,e,h,m-^-f-t-z.[.l.s0[0a0q1_1o1p1r1t1w1z1|2m2s3P3Z5Y5d5t5u5x6]6j7w7|8]8gQ%cj!S%ty!i!t%w%x%y'Q'`'a'b'f'p*b+e+f,}-a-b-i/t0p2b2i2p4^S%zz!jQ+b%uQ,U&_W1c,V,W,X,YU5h1d1e1fS8P5i5jQ9`8Q!r;t$[$m'S)n,y,|.{2]3p5W6S9W9i:c:f:g:j:k:l:m:n:o:p:q:r:s:t:u:v:w:{;Y;Z;[;^;e;f;o;p<]Q;}<ZR<O<[$|eOPXYstuvw!Z!`!g!o#R#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$a$e%j%p%}&f&i&m&o&p&r&v'O']'m(P(V(^(r(v(z)y+O+S+^,e,h,m-^-f-t-z.[.l.s0[0a0q1_1o1p1r1t1w1z1|2m2s3P3Z5Y5d5t5u5x6]6j7w7|8]8gY#aWZ#V#Y'}!S%gm#g#h#k%b%e(W(b(c(d+Q+R+T,d,z-x.O.P.Q.S2P2w2x6R6dQ,c&j!p;u$[$m)n,y,|.{2]3p5W6S9W9i:c:f:g:j:k:l:m:n:o:p:q:r:s:t:u:v:w:{;Y;Z;[;^;e;f;o;p<]R;x'SS'W!e%fR2`-T%OdOPWXYZstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$a$e%j%p%}&f&i&m&o&p&r&v'O']'m'}(P(V(^(r(v(z)y+O+S,e,h,m-^-f-t-z.l.s0[0a0q1_1o1p1r1t1w1z1|2m2s3Z5Y5d5t5u5x6]7w7|8]8g!r)[$[$m'S)n,y,|.{2]3p5W6S9W9i:c:f:g:j:k:l:m:n:o:p:q:r:s:t:u:v:w:{;Y;Z;[;^;e;f;o;p<]Q,b&jQ0h+^Q2{.[Q6i3PR8m6j!b$Uc#X%n'|(S(n(u)W)X)^)b+o-m-r-w-y.h.n/V0_2k2r3Y3k4k4s6[6a6o8e9k:e!P:r)Z)l-O.t2W2Z3_3i3j3n3t6U6p6y6z7r8a8n8t8u9{:S<P!f$Wc#X%n'|(S(n(u)T)U)W)X)^)b+o-m-r-w-y.h.n/V0_2k2r3Y3k4k4s6[6a6o8e9k:e!T:t)Z)l-O.t2W2Z3_3f3g3i3j3n3t6U6p6y6z7r8a8n8t8u9{:S<P!^$[c#X%n'|(S(n(u)^)b+o-m-r-w-y.h.n/V0_2k2r3Y3k4k4s6[6a6o8e9k:eQ3x/az<])Z)l-O.t2W2Z3_3n3t6U6p6y6z7r8a8n8t8u9{:S<PQ<b<dR<c<e&|kOPWXYZstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$[$a$e$m%j%p%}&f&i&j&m&o&p&r&v'O'S']'m'}(P(V(^(r(v(z)n)y+O+S+^,e,h,m,y,|-^-f-t-z.[.l.s.{0[0a0q1_1o1p1r1t1w1z1|2]2m2s3P3Z3p5W5Y5d5t5u5x6S6]6j7w7|8]8g9W9i:c:f:g:j:k:l:m:n:o:p:q:r:s:t:u:v:w:{;Y;Z;[;^;e;f;o;p<]S$nh$oR3q.z'TgOPWXYZhstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$[$a$e$m$o%j%p%}&f&i&j&m&o&p&r&v'O'S']'m'}(P(V(^(r(v(z)n)y+O+S+^,e,h,m,y,|-^-f-t-z.[.l.s.z.{0[0a0q1_1o1p1r1t1w1z1|2]2m2s3P3Z3p5W5Y5d5t5u5x6S6]6j7w7|8]8g9W9i:c:f:g:j:k:l:m:n:o:p:q:r:s:t:u:v:w:{;Y;Z;[;^;e;f;o;p<]T$jf$pQ$hfS)e$k)iR)q$pT$if$pT)g$k)i'ThOPWXYZhstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$[$a$e$m$o%j%p%}&f&i&j&m&o&p&r&v'O'S']'m'}(P(V(^(r(v(z)n)y+O+S+^,e,h,m,y,|-^-f-t-z.[.l.s.z.{0[0a0q1_1o1p1r1t1w1z1|2]2m2s3P3Z3p5W5Y5d5t5u5x6S6]6j7w7|8]8g9W9i:c:f:g:j:k:l:m:n:o:p:q:r:s:t:u:v:w:{;Y;Z;[;^;e;f;o;p<]T$nh$oQ$qhR)p$o%YjOPWXYZstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$a$e%j%p%}&f&i&j&m&o&p&r&v'O']'m'}(P(V(^(r(v(z)y+O+S+^,e,h,m-^-f-t-z.[.l.s0[0a0q1_1o1p1r1t1w1z1|2m2s3P3Z5Y5d5t5u5x6]6j7w7|8]8g!s<Z$[$m'S)n,y,|.{2]3p5W6S9W9i:c:f:g:j:k:l:m:n:o:p:q:r:s:t:u:v:w:{;Y;Z;[;^;e;f;o;p<]#clOPXZst!Z!`!o#R#c#n#{$m%j&f&i&j&m&o&p&r&v'O'](z)n+S+^,e,h,m-^.[.{0[1_1o1p1r1t1w1z1|3P3p5Y5d5t5u5x6j7w7|8]!O%Ri#w%O%Q%[%]%a)}*P*Y*p*q.i/j0Q0S0^3x4f8w<Y<b<c#W(q#u$c$d$x${)u){*R*`+]+`+w+z.Z/Z/k/m1R1U1^3O4S4[4n4p5c6g7T7^7y8j9[9n:O:W:|;O;S;U;W;_;a;c;g;i;k;m;q<f<gQ*z%_Q/W)zo3m:y:z:};P;T;V;X;`;b;d;h;j;l;n;r!O$yi#w%O%Q%[%]%a)}*P*Y*p*q.i/j0Q0S0^3x4f8w<Y<b<cQ*[$zS*e$|*hQ*{%`Q/x*f#W;{#u$c$d$x${)u){*R*`+]+`+w+z.Z/Z/k/m1R1U1^3O4S4[4n4p5c6g7T7^7y8j9[9n:O:W:|;O;S;U;W;_;a;c;g;i;k;m;q<f<gn;|:y:z:};P;T;V;X;`;b;d;h;j;l;n;rQ<Q<^Q<R<_Q<S<`R<T<a!O%Ri#w%O%Q%[%]%a)}*P*Y*p*q.i/j0Q0S0^3x4f8w<Y<b<c#W(q#u$c$d$x${)u){*R*`+]+`+w+z.Z/Z/k/m1R1U1^3O4S4[4n4p5c6g7T7^7y8j9[9n:O:W:|;O;S;U;W;_;a;c;g;i;k;m;q<f<go3m:y:z:};P;T;V;X;`;b;d;h;j;l;n;rnoOXst!Z#c%j&m&o&p&r,h,m1w1zQ*_${Q,v&yQ,w&{R4R/k$v%Si#u#w$c$d$x${%O%Q%[%]%a)u){)}*P*R*Y*`*p*q+]+`+w+z.Z.i/Z/j/k/m0Q0S0^1R1U1^3O3x4S4[4f4n4p5c6g7T7^7y8j8w9[9n:O:W:y:z:|:};O;P;S;T;U;V;W;X;_;`;a;b;c;d;g;h;i;j;k;l;m;n;q;r<Y<b<c<f<gQ+y&WQ1T+{Q5S1SR7o5TT*g$|*hS*g$|*hT5[1[5]S/v*d5YT4`0O7wQ+a%tQ/w*eQ0m+bQ1b,UQ5g1cQ8O5hQ9_8PR:Q9`!O%Oi#w%O%Q%[%]%a)}*P*Y*p*q.i/j0Q0S0^3x4f8w<Y<b<cr)}$v(s*O*n*|/i0U0V3W4P4j6}7`9t;z<W<XS0Q*m0R#W:|#u$c$d$x${)u){*R*`+]+`+w+z.Z/Z/k/m1R1U1^3O4S4[4n4p5c6g7T7^7y8j9[9n:O:W:|;O;S;U;W;_;a;c;g;i;k;m;q<f<gn:}:y:z:};P;T;V;X;`;b;d;h;j;l;n;r!^;_(o)`*U*^._.b.f/S/X/a/n0f1Q1S3T4Q4U5R5T6k6n7U7Y7b7d8{9P:X<d<e`;`3l6q6t6x8o9p9s:bS;i.a3UT;j6s8r!O%Qi#w%O%Q%[%]%a)}*P*Y*p*q.i/j0Q0S0^3x4f8w<Y<b<cv*P$v(s*Q*m*|/]/i0U0V3W4P4b4j6}7`9t;z<W<XS0S*n0T#W;O#u$c$d$x${)u){*R*`+]+`+w+z.Z/Z/k/m1R1U1^3O4S4[4n4p5c6g7T7^7y8j9[9n:O:W:|;O;S;U;W;_;a;c;g;i;k;m;q<f<gn;P:y:z:};P;T;V;X;`;b;d;h;j;l;n;r!b;a(o)`*U*^.`.a.f/S/X/a/n0f1Q1S3R3T4Q4U5R5T6k6l6n7U7Y7b7d8{9P:X<d<ed;b3l6r6s6x8o8p9p9q9s:bS;k.b3VT;l6t8srnOXst!V!Z#c%j&d&m&o&p&r,h,m1w1zQ&a!UR,e&jrnOXst!V!Z#c%j&d&m&o&p&r,h,m1w1zR&a!UQ+}&XR1P+vsnOXst!V!Z#c%j&d&m&o&p&r,h,m1w1zQ1],SS5b1`1aU7x5`5a5eS9Z7z7{S9|9Y9]Q:Z9}R:`:[Q&h!VR,^&dR5n1iS%||&RR0x+mQ&m!WR,h&nR,n&sT1x,m1zR,r&tQ,q&tR2R,rQ't!zR-n'tSsOtQ#cXT%ms#cQ!}TR'v!}Q#QUR'x#QQ)w$uR/T)wQ#TVR'z#TQ#WWU(Q#W(R-uQ(R#XR-u(SQ-R'TR2_-RQ.j(sR3X.jQ.m(uS3[.m3]R3].nQ-Y'ZR2c-YY!rQ'Z-Y1[5]R'e!rS#^W%eU(X#^(Y-vQ(Y#_R-v(TQ-U'WR2a-Ut`OXst!V!Z#c%j&d&f&m&o&p&r,h,m1w1zS#gZ%bU#q`#g.PR.P(dQ(e#iQ-|(aW.U(e-|2t6bQ2t-}R6b2uQ)i$kR.|)iQ$ohR)o$oQ$bcU)_$b-q:xQ-q:eR:x)lQ/d*VW3{/d3|7R8zU3|/e/f/gS7R3}4OR8z7S$X)|$v(o(s)`*U*^*m*n*w*x*|.a.b.d.e.f/S/X/]/_/a/i/n0U0V0f1Q1S3R3S3T3W3l4P4Q4U4b4d4j5R5T6k6l6m6n6s6t6v6w6x6}7U7Y7`7b7d8o8p8q8{9P9p9q9r9s9t:X:b;z<W<X<d<eQ/l*^U4T/l4V7VQ4V/nR7V4UQ*h$|R/z*hr*O$v(s*m*n*|/i0U0V3W4P4j6}7`9t;z<W<X!^._(o)`*U*^.a.b.f/S/X/a/n0f1Q1S3T4Q4U5R5T6k6n7U7Y7b7d8{9P:X<d<eU/^*O._6qa6q3l6s6t6x8o9p9s:bQ0R*mQ3U.aU4c0R3U8rR8r6sv*Q$v(s*m*n*|/]/i0U0V3W4P4b4j6}7`9t;z<W<X!b.`(o)`*U*^.a.b.f/S/X/a/n0f1Q1S3R3T4Q4U5R5T6k6l6n7U7Y7b7d8{9P:X<d<eU/`*Q.`6re6r3l6s6t6x8o8p9p9q9s:bQ0T*nQ3V.bU4e0T3V8sR8s6tQ*s%UR0X*sQ4o0fR7c4oQ+U%hR0d+UQ5V1VS7q5V9XR9X7rQ,P&YR1Y,PQ5]1[R7u5]Q1h,ZS5l1h8SR8S5nQ0s+iW4x0s4z7i9TQ4z0vQ7i4yR9T7jQ+n%|R0y+nQ1z,mR5|1zYrOXst#cQ&q!ZQ+W%jQ,g&mQ,i&oQ,j&pQ,l&rQ1u,hS1x,m1zR5{1wQ%lpQ&u!_Q&x!aQ&z!bQ&|!cQ'l!tQ+V%iQ+c%vQ+u&SQ,]&hQ,t&wW-e'f'n'o'rQ-l'jQ/y*gQ0n+dS1k,^,aQ2S,sQ2T,vQ2U,wQ2j-dW2l-g-h-k-mQ4q0oQ4}0|Q5Q1QQ5f1bQ5p1mQ5z1vU6Z2k2n2qQ6^2oQ7e4rQ7m5PQ7n5RQ7t5[Q7}5gQ8T5oS8d6[6`Q8f6_Q9U7kQ9^8OQ9c8UQ9j8eQ9z9VQ:P9_Q:T9kR:]:QQ%vyQ'_!iQ'j!tU+d%w%x%yQ,{'QU-`'`'a'bS-d'f'pQ/p*bS0o+e+fQ2[,}S2h-a-bQ2o-iQ4Y/tQ4r0pQ6V2bQ6Y2iQ6_2pR7Z4^S$wi<YR*t%VU%Ui%V<YR0W*rQ$viS(o#u+`Q(s#wS)`$c$dQ*U$xQ*^${Q*m%OQ*n%QQ*w%[Q*x%]Q*|%aQ.a:|Q.b;OQ.d;SQ.e;UQ.f;WQ/S)uS/X){/ZQ/])}Q/_*PQ/a*RQ/i*YQ/n*`Q0U*pQ0V*qh0f+].Z1^3O5c6g7y8j9[9n:O:WQ1Q+wQ1S+zQ3R;_Q3S;aQ3T;cQ3W.iS3l:y:zQ4P/jQ4Q/kQ4U/mQ4b0QQ4d0SQ4j0^Q5R1RQ5T1UQ6k;gQ6l;iQ6m;kQ6n;mQ6s:}Q6t;PQ6v;TQ6w;VQ6x;XQ6}3xQ7U4SQ7Y4[Q7`4fQ7b4nQ7d4pQ8o;dQ8p;`Q8q;bQ8{7TQ9P7^Q9p;hQ9q;jQ9r;lQ9s;nQ9t8wQ:X;qQ:b;rQ;z<YQ<W<bQ<X<cQ<d<fR<e<gnpOXst!Z#c%j&m&o&p&r,h,m1w1zQ!fPS#eZ#nQ&w!`U'c!o5Y7wQ'y#RQ(|#{Q)m$mS,a&f&iQ,f&jQ,s&vQ,x'OQ-[']Q.p(zQ/Q)nQ0b+SQ0i+^Q1s,eQ2f-^Q2|.[Q3s.{Q4h0[Q5a1_Q5r1oQ5s1pQ5w1rQ5y1tQ6O1|Q6f3PQ6{3pQ7{5dQ8X5tQ8Y5uQ8[5xQ8l6jQ9]7|R9g8]#WcOPXZst!Z!`!o#c#n#{%j&f&i&j&m&o&p&r&v'O'](z+S+^,e,h,m-^.[0[1_1o1p1r1t1w1z1|3P5Y5d5t5u5x6j7w7|8]Q#XWQ#dYQ%nuQ%ovS%qw!gS'|#V(PQ(S#YQ(n#tQ(u#xQ(}$OQ)O$PQ)P$QQ)Q$RQ)R$SQ)S$TQ)T$UQ)U$VQ)V$WQ)W$XQ)X$YQ)Z$[Q)^$aQ)b$eW)l$m)n.{3pQ+Z%pQ+o%}S-O'S2]Q-m'mS-r'}-tQ-w(VQ-y(^Q.h(rQ.n(vQ.r:cQ.t:fQ.u:gQ.v:jQ/V)yQ0_+OQ2W,yQ2Z,|Q2k-fQ2r-zQ3Y.lQ3_:kQ3`:lQ3a:mQ3b:nQ3c:oQ3d:pQ3e:qQ3f:rQ3g:sQ3h:tQ3i:uQ3j:vQ3k.sQ3n:{Q3o;YQ3t:wQ4k0aQ4s0qQ6U;ZQ6[2mQ6a2sQ6o3ZQ6p;[Q6y;^Q6z;eQ7r5WQ8a6SQ8e6]Q8n;fQ8t;oQ8u;pQ9k8gQ9{9WQ:S9iQ:e#RR<P<]R#ZWR'U!eY!tQ'Z-Y1[5]S'Q!e-QQ'f!rS'p!u!xS'r!y5_S,}'R'YS-i'g'hQ-k'iQ2b-WR2p-jR(t#wR(w#xQ!fQT-X'Z-Y]!qQ!r'Z-Y1[5]Q#o]R'd:dT#jZ%bS#iZ%bS%hm,dU(a#g#h#kS-}(b(cQ.R(dQ0c+TQ2u.OU2v.P.Q.SS6c2w2xR8h6d`#]W#V#Y%e'}(W+Q-xr#fZm#g#h#k%b(b(c(d+T.O.P.Q.S2w2x6dQ1q,dQ2X,zQ6Q2PQ8`6RT;w'S+RT#`W%eS#_W%eS(O#V(WS(T#Y+QS-P'S+RT-s'}-xT'X!e%fQ$kfR)s$pT)h$k)iR3r.zT*X$x*ZR*a${Q0g+]Q2z.ZQ5`1^Q6h3OQ7z5cQ8k6gQ9Y7yQ9l8jQ9}9[Q:V9nQ:[:OR:_:WnqOXst!Z#c%j&m&o&p&r,h,m1w1zQ&g!VR,]&dtmOXst!U!V!Z#c%j&d&m&o&p&r,h,m1w1zR,d&jT%im,dR1W+|R,[&bQ&Q|R+t&RR+j%{T&k!W&nT&l!W&nT1y,m1z",
  nodeNames: "⚠ ArithOp ArithOp JSXStartTag LineComment BlockComment Script Hashbang ExportDeclaration export Star as VariableName String Escape from ; default FunctionDeclaration async function VariableDefinition > < TypeParamList TypeDefinition extends ThisType this LiteralType ArithOp Number BooleanLiteral TemplateType InterpolationEnd Interpolation InterpolationStart NullType null VoidType void TypeofType typeof MemberExpression . ?. PropertyName [ TemplateString Escape Interpolation super RegExp ] ArrayExpression Spread , } { ObjectExpression Property async get set PropertyDefinition Block : NewExpression new TypeArgList CompareOp < ) ( ArgList UnaryExpression delete LogicOp BitOp YieldExpression yield AwaitExpression await ParenthesizedExpression ClassExpression class ClassBody MethodDeclaration Decorator @ MemberExpression PrivatePropertyName CallExpression declare Privacy static abstract override PrivatePropertyDefinition PropertyDeclaration readonly accessor Optional TypeAnnotation Equals StaticBlock FunctionExpression ArrowFunction ParamList ParamList ArrayPattern ObjectPattern PatternProperty Privacy readonly Arrow MemberExpression BinaryExpression ArithOp ArithOp ArithOp ArithOp BitOp CompareOp instanceof satisfies in const CompareOp BitOp BitOp BitOp LogicOp LogicOp ConditionalExpression LogicOp LogicOp AssignmentExpression UpdateOp PostfixExpression CallExpression TaggedTemplateExpression DynamicImport import ImportMeta JSXElement JSXSelfCloseEndTag JSXSelfClosingTag JSXIdentifier JSXBuiltin JSXIdentifier JSXNamespacedName JSXMemberExpression JSXSpreadAttribute JSXAttribute JSXAttributeValue JSXEscape JSXEndTag JSXOpenTag JSXFragmentTag JSXText JSXEscape JSXStartCloseTag JSXCloseTag PrefixCast ArrowFunction TypeParamList SequenceExpression KeyofType keyof UniqueType unique ImportType InferredType infer TypeName ParenthesizedType FunctionSignature ParamList NewSignature IndexedType TupleType Label ArrayType ReadonlyType ObjectType MethodType PropertyType IndexSignature PropertyDefinition CallSignature TypePredicate is NewSignature new UnionType LogicOp IntersectionType LogicOp ConditionalType ParameterizedType ClassDeclaration abstract implements type VariableDeclaration let var using TypeAliasDeclaration InterfaceDeclaration interface EnumDeclaration enum EnumBody NamespaceDeclaration namespace module AmbientDeclaration declare GlobalDeclaration global ClassDeclaration ClassBody AmbientFunctionDeclaration ExportGroup VariableName VariableName ImportDeclaration ImportGroup ForStatement for ForSpec ForInSpec ForOfSpec of WhileStatement while WithStatement with DoStatement do IfStatement if else SwitchStatement switch SwitchBody CaseLabel case DefaultLabel TryStatement try CatchClause catch FinallyClause finally ReturnStatement return ThrowStatement throw BreakStatement break ContinueStatement continue DebuggerStatement debugger LabeledStatement ExpressionStatement SingleExpression SingleClassItem",
  maxTerm: 371,
  context: see,
  nodeProps: [
    ["isolate", -8, 4, 5, 13, 33, 35, 48, 50, 52, ""],
    ["group", -26, 8, 16, 18, 65, 201, 205, 209, 210, 212, 215, 218, 228, 230, 236, 238, 240, 242, 245, 251, 257, 259, 261, 263, 265, 267, 268, "Statement", -32, 12, 13, 28, 31, 32, 38, 48, 51, 52, 54, 59, 67, 75, 79, 81, 83, 84, 106, 107, 116, 117, 134, 137, 139, 140, 141, 142, 144, 145, 164, 165, 167, "Expression", -23, 27, 29, 33, 37, 39, 41, 168, 170, 172, 173, 175, 176, 177, 179, 180, 181, 183, 184, 185, 195, 197, 199, 200, "Type", -3, 87, 99, 105, "ClassItem"],
    ["openedBy", 22, "<", 34, "InterpolationStart", 53, "[", 57, "{", 72, "(", 157, "JSXStartCloseTag"],
    ["closedBy", 23, ">", 36, "InterpolationEnd", 47, "]", 58, "}", 73, ")", 162, "JSXEndTag"]
  ],
  propSources: [cee],
  skippedNodes: [0, 4, 5, 271],
  repeatNodeCount: 37,
  tokenData: "$Fj(CSR!bOX%ZXY+gYZ-yZ[+g[]%Z]^.c^p%Zpq+gqr/mrs3cst:_tuEruvJSvwLkwx! Yxy!'iyz!(sz{!)}{|!,q|}!.O}!O!,q!O!P!/Y!P!Q!9j!Q!R#8g!R![#:v![!]#Gv!]!^#IS!^!_#J^!_!`#Ns!`!a$#_!a!b$(l!b!c$,k!c!}Er!}#O$-u#O#P$/P#P#Q$4h#Q#R$5r#R#SEr#S#T$7P#T#o$8Z#o#p$<k#p#q$=a#q#r$>q#r#s$?}#s$f%Z$f$g+g$g#BYEr#BY#BZ$AX#BZ$ISEr$IS$I_$AX$I_$I|Er$I|$I}$Dd$I}$JO$Dd$JO$JTEr$JT$JU$AX$JU$KVEr$KV$KW$AX$KW&FUEr&FU&FV$AX&FV;'SEr;'S;=`I|<%l?HTEr?HT?HU$AX?HUOEr(n%d_$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&j&hT$f&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c&j&zP;=`<%l&c'|'U]$f&j(R!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!b(SU(R!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!b(iP;=`<%l'}'|(oP;=`<%l&}'[(y]$f&j(OpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(rp)wU(OpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)rp*^P;=`<%l)r'[*dP;=`<%l(r#S*nX(Op(R!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g#S+^P;=`<%l*g(n+dP;=`<%l%Z(CS+rq$f&j(Op(R!b't(;dOX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p$f%Z$f$g+g$g#BY%Z#BY#BZ+g#BZ$IS%Z$IS$I_+g$I_$JT%Z$JT$JU+g$JU$KV%Z$KV$KW+g$KW&FU%Z&FU&FV+g&FV;'S%Z;'S;=`+a<%l?HT%Z?HT?HU+g?HUO%Z(CS.ST(P#S$f&j'u(;dO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c(CS.n_$f&j(Op(R!b'u(;dOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#`/x`$f&j!o$Ip(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S1V`#t$Id$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`2X!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S2d_#t$Id$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/|3l_'}$(n$f&j(R!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k(^4r_$f&j(R!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k&z5vX$f&jOr5qrs6cs!^5q!^!_6y!_#o5q#o#p6y#p;'S5q;'S;=`7h<%lO5q&z6jT$a`$f&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c`6|TOr6yrs7]s;'S6y;'S;=`7b<%lO6y`7bO$a``7eP;=`<%l6y&z7kP;=`<%l5q(^7w]$a`$f&j(R!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!r8uZ(R!bOY8pYZ6yZr8prs9hsw8pwx6yx#O8p#O#P6y#P;'S8p;'S;=`:R<%lO8p!r9oU$a`(R!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!r:UP;=`<%l8p(^:[P;=`<%l4k#%|:hh$f&j(Op(R!bOY%ZYZ&cZq%Zqr<Srs&}st%ZtuCruw%Zwx(rx!^%Z!^!_*g!_!c%Z!c!}Cr!}#O%Z#O#P&c#P#R%Z#R#SCr#S#T%Z#T#oCr#o#p*g#p$g%Z$g;'SCr;'S;=`El<%lOCr(r<__VS$f&j(Op(R!bOY<SYZ&cZr<Srs=^sw<Swx@nx!^<S!^!_Bm!_#O<S#O#P>`#P#o<S#o#pBm#p;'S<S;'S;=`Cl<%lO<S(Q=g]VS$f&j(R!bOY=^YZ&cZw=^wx>`x!^=^!^!_?q!_#O=^#O#P>`#P#o=^#o#p?q#p;'S=^;'S;=`@h<%lO=^&n>gXVS$f&jOY>`YZ&cZ!^>`!^!_?S!_#o>`#o#p?S#p;'S>`;'S;=`?k<%lO>`S?XSVSOY?SZ;'S?S;'S;=`?e<%lO?SS?hP;=`<%l?S&n?nP;=`<%l>`!f?xWVS(R!bOY?qZw?qwx?Sx#O?q#O#P?S#P;'S?q;'S;=`@b<%lO?q!f@eP;=`<%l?q(Q@kP;=`<%l=^'`@w]VS$f&j(OpOY@nYZ&cZr@nrs>`s!^@n!^!_Ap!_#O@n#O#P>`#P#o@n#o#pAp#p;'S@n;'S;=`Bg<%lO@ntAwWVS(OpOYApZrAprs?Ss#OAp#O#P?S#P;'SAp;'S;=`Ba<%lOAptBdP;=`<%lAp'`BjP;=`<%l@n#WBvYVS(Op(R!bOYBmZrBmrs?qswBmwxApx#OBm#O#P?S#P;'SBm;'S;=`Cf<%lOBm#WCiP;=`<%lBm(rCoP;=`<%l<S#%|C}i$f&j(g!L^(Op(R!bOY%ZYZ&cZr%Zrs&}st%ZtuCruw%Zwx(rx!Q%Z!Q![Cr![!^%Z!^!_*g!_!c%Z!c!}Cr!}#O%Z#O#P&c#P#R%Z#R#SCr#S#T%Z#T#oCr#o#p*g#p$g%Z$g;'SCr;'S;=`El<%lOCr#%|EoP;=`<%lCr(CSFRk$f&j(Op(R!b$Y#t'{&;d([!LYOY%ZYZ&cZr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$g%Z$g;'SEr;'S;=`I|<%lOEr+dHRk$f&j(Op(R!b$Y#tOY%ZYZ&cZr%Zrs&}st%ZtuGvuw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Gv![!^%Z!^!_*g!_!c%Z!c!}Gv!}#O%Z#O#P&c#P#R%Z#R#SGv#S#T%Z#T#oGv#o#p*g#p$g%Z$g;'SGv;'S;=`Iv<%lOGv+dIyP;=`<%lGv(CSJPP;=`<%lEr%#SJ_`$f&j(Op(R!b#l$IdOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#SKl_$f&j$O$Id(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&COLva(p&;`$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sv%ZvwM{wx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#SNW`$f&j#x$Id(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/|! c_(Q$)`$f&j(OpOY!!bYZ!#hZr!!brs!#hsw!!bwx!$xx!^!!b!^!_!%z!_#O!!b#O#P!#h#P#o!!b#o#p!%z#p;'S!!b;'S;=`!'c<%lO!!b'l!!i_$f&j(OpOY!!bYZ!#hZr!!brs!#hsw!!bwx!$xx!^!!b!^!_!%z!_#O!!b#O#P!#h#P#o!!b#o#p!%z#p;'S!!b;'S;=`!'c<%lO!!b&z!#mX$f&jOw!#hwx6cx!^!#h!^!_!$Y!_#o!#h#o#p!$Y#p;'S!#h;'S;=`!$r<%lO!#h`!$]TOw!$Ywx7]x;'S!$Y;'S;=`!$l<%lO!$Y`!$oP;=`<%l!$Y&z!$uP;=`<%l!#h'l!%R]$a`$f&j(OpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(r!Q!&PZ(OpOY!%zYZ!$YZr!%zrs!$Ysw!%zwx!&rx#O!%z#O#P!$Y#P;'S!%z;'S;=`!']<%lO!%z!Q!&yU$a`(OpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)r!Q!'`P;=`<%l!%z'l!'fP;=`<%l!!b(*Q!'t_!k(!b$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z!'l!)O_!jM|$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'+h!*[b$f&j(Op(R!b'|#)d#m$IdOY%ZYZ&cZr%Zrs&}sw%Zwx(rxz%Zz{!+d{!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S!+o`$f&j(Op(R!b#j$IdOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&-O!,|`$f&j(Op(R!bn&%`OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&C[!.Z_!Y&;l$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(CS!/ec$f&j(Op(R!b|'<nOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!0p!P!Q%Z!Q![!3Y![!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z!'d!0ya$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!2O!P!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z!'d!2Z_!XMt$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l!3eg$f&j(Op(R!bo$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!3Y![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S!3Y#S#X%Z#X#Y!4|#Y#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l!5Vg$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx{%Z{|!6n|}%Z}!O!6n!O!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l!6wc$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l!8_c$f&j(Op(R!bo$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(CS!9uf$f&j(Op(R!b#k$IdOY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Kpxz!;Zz{#,f{!P!;Z!P!Q#-{!Q!^!;Z!^!_#'Z!_!`#5k!`!a#7Q!a!}!;Z!}#O#*}#O#P!Dj#P#o!;Z#o#p#'Z#p;'S!;Z;'S;=`#,`<%lO!;Z(r!;fb$f&j(Op(R!b!USOY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Kpx!P!;Z!P!Q#%Z!Q!^!;Z!^!_#'Z!_!}!;Z!}#O#*}#O#P!Dj#P#o!;Z#o#p#'Z#p;'S!;Z;'S;=`#,`<%lO!;Z(Q!<w`$f&j(R!b!USOY!<nYZ&cZw!<nwx!=yx!P!<n!P!Q!Eb!Q!^!<n!^!_!GY!_!}!<n!}#O!Ja#O#P!Dj#P#o!<n#o#p!GY#p;'S!<n;'S;=`!Kj<%lO!<n&n!>Q^$f&j!USOY!=yYZ&cZ!P!=y!P!Q!>|!Q!^!=y!^!_!@Y!_!}!=y!}#O!Bw#O#P!Dj#P#o!=y#o#p!@Y#p;'S!=y;'S;=`!E[<%lO!=y&n!?Ta$f&j!USO!^&c!_#Z&c#Z#[!>|#[#]&c#]#^!>|#^#a&c#a#b!>|#b#g&c#g#h!>|#h#i&c#i#j!>|#j#m&c#m#n!>|#n#o&c#p;'S&c;'S;=`&w<%lO&cS!@_X!USOY!@YZ!P!@Y!P!Q!@z!Q!}!@Y!}#O!Ac#O#P!Bb#P;'S!@Y;'S;=`!Bq<%lO!@YS!APU!US#Z#[!@z#]#^!@z#a#b!@z#g#h!@z#i#j!@z#m#n!@zS!AfVOY!AcZ#O!Ac#O#P!A{#P#Q!@Y#Q;'S!Ac;'S;=`!B[<%lO!AcS!BOSOY!AcZ;'S!Ac;'S;=`!B[<%lO!AcS!B_P;=`<%l!AcS!BeSOY!@YZ;'S!@Y;'S;=`!Bq<%lO!@YS!BtP;=`<%l!@Y&n!B|[$f&jOY!BwYZ&cZ!^!Bw!^!_!Ac!_#O!Bw#O#P!Cr#P#Q!=y#Q#o!Bw#o#p!Ac#p;'S!Bw;'S;=`!Dd<%lO!Bw&n!CwX$f&jOY!BwYZ&cZ!^!Bw!^!_!Ac!_#o!Bw#o#p!Ac#p;'S!Bw;'S;=`!Dd<%lO!Bw&n!DgP;=`<%l!Bw&n!DoX$f&jOY!=yYZ&cZ!^!=y!^!_!@Y!_#o!=y#o#p!@Y#p;'S!=y;'S;=`!E[<%lO!=y&n!E_P;=`<%l!=y(Q!Eki$f&j(R!b!USOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#Z&}#Z#[!Eb#[#]&}#]#^!Eb#^#a&}#a#b!Eb#b#g&}#g#h!Eb#h#i&}#i#j!Eb#j#m&}#m#n!Eb#n#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!f!GaZ(R!b!USOY!GYZw!GYwx!@Yx!P!GY!P!Q!HS!Q!}!GY!}#O!Ic#O#P!Bb#P;'S!GY;'S;=`!JZ<%lO!GY!f!HZb(R!b!USOY'}Zw'}x#O'}#P#Z'}#Z#[!HS#[#]'}#]#^!HS#^#a'}#a#b!HS#b#g'}#g#h!HS#h#i'}#i#j!HS#j#m'}#m#n!HS#n;'S'};'S;=`(f<%lO'}!f!IhX(R!bOY!IcZw!Icwx!Acx#O!Ic#O#P!A{#P#Q!GY#Q;'S!Ic;'S;=`!JT<%lO!Ic!f!JWP;=`<%l!Ic!f!J^P;=`<%l!GY(Q!Jh^$f&j(R!bOY!JaYZ&cZw!Jawx!Bwx!^!Ja!^!_!Ic!_#O!Ja#O#P!Cr#P#Q!<n#Q#o!Ja#o#p!Ic#p;'S!Ja;'S;=`!Kd<%lO!Ja(Q!KgP;=`<%l!Ja(Q!KmP;=`<%l!<n'`!Ky`$f&j(Op!USOY!KpYZ&cZr!Kprs!=ys!P!Kp!P!Q!L{!Q!^!Kp!^!_!Ns!_!}!Kp!}#O##z#O#P!Dj#P#o!Kp#o#p!Ns#p;'S!Kp;'S;=`#%T<%lO!Kp'`!MUi$f&j(Op!USOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#Z(r#Z#[!L{#[#](r#]#^!L{#^#a(r#a#b!L{#b#g(r#g#h!L{#h#i(r#i#j!L{#j#m(r#m#n!L{#n#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(rt!NzZ(Op!USOY!NsZr!Nsrs!@Ys!P!Ns!P!Q# m!Q!}!Ns!}#O#!|#O#P!Bb#P;'S!Ns;'S;=`##t<%lO!Nst# tb(Op!USOY)rZr)rs#O)r#P#Z)r#Z#[# m#[#])r#]#^# m#^#a)r#a#b# m#b#g)r#g#h# m#h#i)r#i#j# m#j#m)r#m#n# m#n;'S)r;'S;=`*Z<%lO)rt##RX(OpOY#!|Zr#!|rs!Acs#O#!|#O#P!A{#P#Q!Ns#Q;'S#!|;'S;=`##n<%lO#!|t##qP;=`<%l#!|t##wP;=`<%l!Ns'`#$R^$f&j(OpOY##zYZ&cZr##zrs!Bws!^##z!^!_#!|!_#O##z#O#P!Cr#P#Q!Kp#Q#o##z#o#p#!|#p;'S##z;'S;=`#$}<%lO##z'`#%QP;=`<%l##z'`#%WP;=`<%l!Kp(r#%fk$f&j(Op(R!b!USOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#Z%Z#Z#[#%Z#[#]%Z#]#^#%Z#^#a%Z#a#b#%Z#b#g%Z#g#h#%Z#h#i%Z#i#j#%Z#j#m%Z#m#n#%Z#n#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#W#'d](Op(R!b!USOY#'ZZr#'Zrs!GYsw#'Zwx!Nsx!P#'Z!P!Q#(]!Q!}#'Z!}#O#)w#O#P!Bb#P;'S#'Z;'S;=`#*w<%lO#'Z#W#(fe(Op(R!b!USOY*gZr*grs'}sw*gwx)rx#O*g#P#Z*g#Z#[#(]#[#]*g#]#^#(]#^#a*g#a#b#(]#b#g*g#g#h#(]#h#i*g#i#j#(]#j#m*g#m#n#(]#n;'S*g;'S;=`+Z<%lO*g#W#*OZ(Op(R!bOY#)wZr#)wrs!Icsw#)wwx#!|x#O#)w#O#P!A{#P#Q#'Z#Q;'S#)w;'S;=`#*q<%lO#)w#W#*tP;=`<%l#)w#W#*zP;=`<%l#'Z(r#+W`$f&j(Op(R!bOY#*}YZ&cZr#*}rs!Jasw#*}wx##zx!^#*}!^!_#)w!_#O#*}#O#P!Cr#P#Q!;Z#Q#o#*}#o#p#)w#p;'S#*};'S;=`#,Y<%lO#*}(r#,]P;=`<%l#*}(r#,cP;=`<%l!;Z(CS#,sb$f&j(Op(R!b'v(;d!USOY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Kpx!P!;Z!P!Q#%Z!Q!^!;Z!^!_#'Z!_!}!;Z!}#O#*}#O#P!Dj#P#o!;Z#o#p#'Z#p;'S!;Z;'S;=`#,`<%lO!;Z(CS#.W_$f&j(Op(R!bS(;dOY#-{YZ&cZr#-{rs#/Vsw#-{wx#2gx!^#-{!^!_#4f!_#O#-{#O#P#0X#P#o#-{#o#p#4f#p;'S#-{;'S;=`#5e<%lO#-{(Bb#/`]$f&j(R!bS(;dOY#/VYZ&cZw#/Vwx#0Xx!^#/V!^!_#1j!_#O#/V#O#P#0X#P#o#/V#o#p#1j#p;'S#/V;'S;=`#2a<%lO#/V(AO#0`X$f&jS(;dOY#0XYZ&cZ!^#0X!^!_#0{!_#o#0X#o#p#0{#p;'S#0X;'S;=`#1d<%lO#0X(;d#1QSS(;dOY#0{Z;'S#0{;'S;=`#1^<%lO#0{(;d#1aP;=`<%l#0{(AO#1gP;=`<%l#0X(<v#1qW(R!bS(;dOY#1jZw#1jwx#0{x#O#1j#O#P#0{#P;'S#1j;'S;=`#2Z<%lO#1j(<v#2^P;=`<%l#1j(Bb#2dP;=`<%l#/V(Ap#2p]$f&j(OpS(;dOY#2gYZ&cZr#2grs#0Xs!^#2g!^!_#3i!_#O#2g#O#P#0X#P#o#2g#o#p#3i#p;'S#2g;'S;=`#4`<%lO#2g(<U#3pW(OpS(;dOY#3iZr#3irs#0{s#O#3i#O#P#0{#P;'S#3i;'S;=`#4Y<%lO#3i(<U#4]P;=`<%l#3i(Ap#4cP;=`<%l#2g(=h#4oY(Op(R!bS(;dOY#4fZr#4frs#1jsw#4fwx#3ix#O#4f#O#P#0{#P;'S#4f;'S;=`#5_<%lO#4f(=h#5bP;=`<%l#4f(CS#5hP;=`<%l#-{%#W#5xb$f&j$O$Id(Op(R!b!USOY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Kpx!P!;Z!P!Q#%Z!Q!^!;Z!^!_#'Z!_!}!;Z!}#O#*}#O#P!Dj#P#o!;Z#o#p#'Z#p;'S!;Z;'S;=`#,`<%lO!;Z+h#7_b$W#t$f&j(Op(R!b!USOY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Kpx!P!;Z!P!Q#%Z!Q!^!;Z!^!_#'Z!_!}!;Z!}#O#*}#O#P!Dj#P#o!;Z#o#p#'Z#p;'S!;Z;'S;=`#,`<%lO!;Z$/l#8rp$f&j(Op(R!bo$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!3Y!P!Q%Z!Q![#:v![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S#:v#S#U%Z#U#V#>Q#V#X%Z#X#Y!4|#Y#b%Z#b#c#<v#c#d#AY#d#l%Z#l#m#D[#m#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#;Rk$f&j(Op(R!bo$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!3Y!P!Q%Z!Q![#:v![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S#:v#S#X%Z#X#Y!4|#Y#b%Z#b#c#<v#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#=R_$f&j(Op(R!bo$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#>Zd$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#?i!R!S#?i!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#?i#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#?tf$f&j(Op(R!bo$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#?i!R!S#?i!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#?i#S#b%Z#b#c#<v#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#Acc$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#Bn!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#Bn#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#Bye$f&j(Op(R!bo$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#Bn!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#Bn#S#b%Z#b#c#<v#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#Deg$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#E|![!^%Z!^!_*g!_!c%Z!c!i#E|!i#O%Z#O#P&c#P#R%Z#R#S#E|#S#T%Z#T#Z#E|#Z#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#FXi$f&j(Op(R!bo$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#E|![!^%Z!^!_*g!_!c%Z!c!i#E|!i#O%Z#O#P&c#P#R%Z#R#S#E|#S#T%Z#T#Z#E|#Z#b%Z#b#c#<v#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%Gh#HT_!d$b$f&j#|%<f(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z)[#I__`l$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(@^#Jk^g!*v!h'.r(Op(R!b(tSOY*gZr*grs'}sw*gwx)rx!P*g!P!Q#Kg!Q!^*g!^!_#L]!_!`#M}!`#O*g#P;'S*g;'S;=`+Z<%lO*g(n#KpX$h&j(Op(R!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g$Kh#LfZ#n$Id(Op(R!bOY*gZr*grs'}sw*gwx)rx!_*g!_!`#MX!`#O*g#P;'S*g;'S;=`+Z<%lO*g$Kh#MbX$O$Id(Op(R!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g$Kh#NWX#o$Id(Op(R!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g%Gh$ Oa#[%?x$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`!a$!T!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#W$!`_#g$Ih$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%Gh$#nafBf#o$Id$c#|$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`$$s!`!a$%}!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S$%O_#o$Id$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S$&Ya#n$Id$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`!a$'_!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S$'j`#n$Id$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'+h$(wc(h$Ip$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P$*S!P!^%Z!^!_*g!_!a%Z!a!b$+^!b#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'+`$*__}'#p$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S$+i`$f&j#y$Id(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#&^$,v_!{!Ln$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(@^$.Q_!P(8n$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(n$/UZ$f&jO!^$/w!^!_$0_!_#i$/w#i#j$0d#j#l$/w#l#m$2V#m#o$/w#o#p$0_#p;'S$/w;'S;=`$4b<%lO$/w(n$0OT^#S$f&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c#S$0dO^#S(n$0i[$f&jO!Q&c!Q![$1_![!^&c!_!c&c!c!i$1_!i#T&c#T#Z$1_#Z#o&c#o#p$3u#p;'S&c;'S;=`&w<%lO&c(n$1dZ$f&jO!Q&c!Q![$2V![!^&c!_!c&c!c!i$2V!i#T&c#T#Z$2V#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$2[Z$f&jO!Q&c!Q![$2}![!^&c!_!c&c!c!i$2}!i#T&c#T#Z$2}#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$3SZ$f&jO!Q&c!Q![$/w![!^&c!_!c&c!c!i$/w!i#T&c#T#Z$/w#Z#o&c#p;'S&c;'S;=`&w<%lO&c#S$3xR!Q![$4R!c!i$4R#T#Z$4R#S$4US!Q![$4R!c!i$4R#T#Z$4R#q#r$0_(n$4eP;=`<%l$/w!2r$4s_!V!+S$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S$5}`#v$Id$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&,v$7[_$f&j(Op(R!b(X&%WOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(CS$8jk$f&j(Op(R!b'{&;d$[#t([!LYOY%ZYZ&cZr%Zrs&}st%Ztu$8Zuw%Zwx(rx}%Z}!O$:_!O!Q%Z!Q![$8Z![!^%Z!^!_*g!_!c%Z!c!}$8Z!}#O%Z#O#P&c#P#R%Z#R#S$8Z#S#T%Z#T#o$8Z#o#p*g#p$g%Z$g;'S$8Z;'S;=`$<e<%lO$8Z+d$:jk$f&j(Op(R!b$[#tOY%ZYZ&cZr%Zrs&}st%Ztu$:_uw%Zwx(rx}%Z}!O$:_!O!Q%Z!Q![$:_![!^%Z!^!_*g!_!c%Z!c!}$:_!}#O%Z#O#P&c#P#R%Z#R#S$:_#S#T%Z#T#o$:_#o#p*g#p$g%Z$g;'S$:_;'S;=`$<_<%lO$:_+d$<bP;=`<%l$:_(CS$<hP;=`<%l$8Z!5p$<tX![!3l(Op(R!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g&CO$=la(o&;`$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p#q$+^#q;'S%Z;'S;=`+a<%lO%Z%#`$?O_!Z$I`r`$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(r$@Y_!pS$f&j(Op(R!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(CS$Aj|$f&j(Op(R!b't(;d$Y#t'{&;d([!LYOX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$f%Z$f$g+g$g#BYEr#BY#BZ$AX#BZ$ISEr$IS$I_$AX$I_$JTEr$JT$JU$AX$JU$KVEr$KV$KW$AX$KW&FUEr&FU&FV$AX&FV;'SEr;'S;=`I|<%l?HTEr?HT?HU$AX?HUOEr(CS$Duk$f&j(Op(R!b'u(;d$Y#t'{&;d([!LYOY%ZYZ&cZr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$g%Z$g;'SEr;'S;=`I|<%lOEr",
  tokenizers: [oee, lee, aee, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, ree, new _b("$S~RRtu[#O#Pg#S#T#|~_P#o#pb~gOt~~jVO#i!P#i#j!U#j#l!P#l#m!q#m;'S!P;'S;=`#v<%lO!P~!UO!R~~!XS!Q![!e!c!i!e#T#Z!e#o#p#Z~!hR!Q![!q!c!i!q#T#Z!q~!tR!Q![!}!c!i!}#T#Z!}~#QR!Q![!P!c!i!P#T#Z!P~#^R!Q![#g!c!i#g#T#Z#g~#jS!Q![#g!c!i#g#T#Z#g#q#r!P~#yP;=`<%l!P~$RO(Z~~", 141, 332), new _b("j~RQYZXz{^~^O'x~~aP!P!Qd~iO'y~~", 25, 315)],
  topRules: { Script: [0, 6], SingleExpression: [1, 269], SingleClassItem: [2, 270] },
  dialects: { jsx: 0, ts: 14614 },
  dynamicPrecedences: { 69: 1, 79: 1, 81: 1, 165: 1, 193: 1 },
  specialized: [{ term: 319, get: (n) => uee[n] || -1 }, { term: 334, get: (n) => hee[n] || -1 }, { term: 70, get: (n) => fee[n] || -1 }],
  tokenPrec: 14638
}), hT = [
  /* @__PURE__ */ ui("function ${name}(${params}) {\n	${}\n}", {
    label: "function",
    detail: "definition",
    type: "keyword"
  }),
  /* @__PURE__ */ ui("for (let ${index} = 0; ${index} < ${bound}; ${index}++) {\n	${}\n}", {
    label: "for",
    detail: "loop",
    type: "keyword"
  }),
  /* @__PURE__ */ ui("for (let ${name} of ${collection}) {\n	${}\n}", {
    label: "for",
    detail: "of loop",
    type: "keyword"
  }),
  /* @__PURE__ */ ui("do {\n	${}\n} while (${})", {
    label: "do",
    detail: "loop",
    type: "keyword"
  }),
  /* @__PURE__ */ ui("while (${}) {\n	${}\n}", {
    label: "while",
    detail: "loop",
    type: "keyword"
  }),
  /* @__PURE__ */ ui(`try {
	\${}
} catch (\${error}) {
	\${}
}`, {
    label: "try",
    detail: "/ catch block",
    type: "keyword"
  }),
  /* @__PURE__ */ ui("if (${}) {\n	${}\n}", {
    label: "if",
    detail: "block",
    type: "keyword"
  }),
  /* @__PURE__ */ ui(`if (\${}) {
	\${}
} else {
	\${}
}`, {
    label: "if",
    detail: "/ else block",
    type: "keyword"
  }),
  /* @__PURE__ */ ui(`class \${name} {
	constructor(\${params}) {
		\${}
	}
}`, {
    label: "class",
    detail: "definition",
    type: "keyword"
  }),
  /* @__PURE__ */ ui('import {${names}} from "${module}"\n${}', {
    label: "import",
    detail: "named",
    type: "keyword"
  }),
  /* @__PURE__ */ ui('import ${name} from "${module}"\n${}', {
    label: "import",
    detail: "default",
    type: "keyword"
  })
], pee = /* @__PURE__ */ hT.concat([
  /* @__PURE__ */ ui("interface ${name} {\n	${}\n}", {
    label: "interface",
    detail: "definition",
    type: "keyword"
  }),
  /* @__PURE__ */ ui("type ${name} = ${type}", {
    label: "type",
    detail: "definition",
    type: "keyword"
  }),
  /* @__PURE__ */ ui("enum ${name} {\n	${}\n}", {
    label: "enum",
    detail: "definition",
    type: "keyword"
  })
]), dS = /* @__PURE__ */ new ZH(), fT = /* @__PURE__ */ new Set([
  "Script",
  "Block",
  "FunctionExpression",
  "FunctionDeclaration",
  "ArrowFunction",
  "MethodDeclaration",
  "ForStatement"
]);
function eu(n) {
  return (e, t) => {
    let i = e.node.getChild("VariableDefinition");
    return i && t(i, n), !0;
  };
}
const gee = ["FunctionDeclaration"], mee = {
  FunctionDeclaration: /* @__PURE__ */ eu("function"),
  ClassDeclaration: /* @__PURE__ */ eu("class"),
  ClassExpression: () => !0,
  EnumDeclaration: /* @__PURE__ */ eu("constant"),
  TypeAliasDeclaration: /* @__PURE__ */ eu("type"),
  NamespaceDeclaration: /* @__PURE__ */ eu("namespace"),
  VariableDefinition(n, e) {
    n.matchContext(gee) || e(n, "variable");
  },
  TypeDefinition(n, e) {
    e(n, "type");
  },
  __proto__: null
};
function dT(n, e) {
  let t = dS.get(e);
  if (t)
    return t;
  let i = [], s = !0;
  function r(o, l) {
    let a = n.sliceString(o.from, o.to);
    i.push({ label: a, type: l });
  }
  return e.cursor(pn.IncludeAnonymous).iterate((o) => {
    if (s)
      s = !1;
    else if (o.name) {
      let l = mee[o.name];
      if (l && l(o, r) || fT.has(o.name))
        return !1;
    } else if (o.to - o.from > 8192) {
      for (let l of dT(n, o.node))
        i.push(l);
      return !1;
    }
  }), dS.set(e, i), i;
}
const pS = /^[\w$\xa1-\uffff][\w$\d\xa1-\uffff]*$/, pT = [
  "TemplateString",
  "String",
  "RegExp",
  "LineComment",
  "BlockComment",
  "VariableDefinition",
  "TypeDefinition",
  "Label",
  "PropertyDefinition",
  "PropertyName",
  "PrivatePropertyDefinition",
  "PrivatePropertyName",
  ".",
  "?."
];
function bee(n) {
  let e = mn(n.state).resolveInner(n.pos, -1);
  if (pT.indexOf(e.name) > -1)
    return null;
  let t = e.name == "VariableName" || e.to - e.from < 20 && pS.test(n.state.sliceDoc(e.from, e.to));
  if (!t && !n.explicit)
    return null;
  let i = [];
  for (let s = e; s; s = s.parent)
    fT.has(s.name) && (i = i.concat(dT(n.state.doc, s)));
  return {
    options: i,
    from: t ? e.from : n.pos,
    validFor: pS
  };
}
const Al = /* @__PURE__ */ oh.define({
  name: "javascript",
  parser: /* @__PURE__ */ dee.configure({
    props: [
      /* @__PURE__ */ by.add({
        IfStatement: /* @__PURE__ */ Au({ except: /^\s*({|else\b)/ }),
        TryStatement: /* @__PURE__ */ Au({ except: /^\s*({|catch\b|finally\b)/ }),
        LabeledStatement: aG,
        SwitchBody: (n) => {
          let e = n.textAfter, t = /^\s*\}/.test(e), i = /^\s*(case|default)\b/.test(e);
          return n.baseIndent + (t ? 0 : i ? 1 : 2) * n.unit;
        },
        Block: /* @__PURE__ */ lG({ closing: "}" }),
        ArrowFunction: (n) => n.baseIndent + n.unit,
        "TemplateString BlockComment": () => null,
        "Statement Property": /* @__PURE__ */ Au({ except: /^{/ }),
        JSXElement(n) {
          let e = /^\s*<\//.test(n.textAfter);
          return n.lineIndent(n.node.from) + (e ? 0 : n.unit);
        },
        JSXEscape(n) {
          let e = /\s*\}/.test(n.textAfter);
          return n.lineIndent(n.node.from) + (e ? 0 : n.unit);
        },
        "JSXOpenTag JSXSelfClosingTag"(n) {
          return n.column(n.node.from) + n.unit;
        }
      }),
      /* @__PURE__ */ yy.add({
        "Block ClassBody SwitchBody EnumBody ObjectExpression ArrayExpression ObjectType": WE,
        BlockComment(n) {
          return { from: n.from + 2, to: n.to - 2 };
        }
      })
    ]
  }),
  languageData: {
    closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] },
    commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
    indentOnInput: /^\s*(?:case |default:|\{|\}|<\/)$/,
    wordChars: "$"
  }
}), gT = {
  test: (n) => /^JSX/.test(n.name),
  facet: /* @__PURE__ */ zE({ commentTokens: { block: { open: "{/*", close: "*/}" } } })
}, vee = /* @__PURE__ */ Al.configure({ dialect: "ts" }, "typescript"), yee = /* @__PURE__ */ Al.configure({
  dialect: "jsx",
  props: [/* @__PURE__ */ gy.add((n) => n.isTop ? [gT] : void 0)]
}), Oee = /* @__PURE__ */ Al.configure({
  dialect: "jsx ts",
  props: [/* @__PURE__ */ gy.add((n) => n.isTop ? [gT] : void 0)]
}, "typescript");
let mT = (n) => ({ label: n, type: "keyword" });
const bT = /* @__PURE__ */ "break case const continue default delete export extends false finally in instanceof let new return static super switch this throw true typeof var yield".split(" ").map(mT), wee = /* @__PURE__ */ bT.concat(/* @__PURE__ */ ["declare", "implements", "private", "protected", "public"].map(mT));
function pFe(n = {}) {
  let e = n.jsx ? n.typescript ? Oee : yee : n.typescript ? vee : Al, t = n.typescript ? pee.concat(wee) : hT.concat(bT);
  return new FE(e, [
    Al.data.of({
      autocomplete: EK(pT, q$(t))
    }),
    Al.data.of({
      autocomplete: bee
    }),
    n.jsx ? Cee : []
  ]);
}
function xee(n) {
  for (; ; ) {
    if (n.name == "JSXOpenTag" || n.name == "JSXSelfClosingTag" || n.name == "JSXFragmentTag")
      return n;
    if (n.name == "JSXEscape" || !n.parent)
      return null;
    n = n.parent;
  }
}
function gS(n, e, t = n.length) {
  for (let i = e == null ? void 0 : e.firstChild; i; i = i.nextSibling)
    if (i.name == "JSXIdentifier" || i.name == "JSXBuiltin" || i.name == "JSXNamespacedName" || i.name == "JSXMemberExpression")
      return n.sliceString(i.from, Math.min(i.to, t));
  return "";
}
const See = typeof navigator == "object" && /* @__PURE__ */ /Android\b/.test(navigator.userAgent), Cee = /* @__PURE__ */ Oe.inputHandler.of((n, e, t, i, s) => {
  if ((See ? n.composing : n.compositionStarted) || n.state.readOnly || e != t || i != ">" && i != "/" || !Al.isActiveAt(n.state, e, -1))
    return !1;
  let r = s(), { state: o } = r, l = o.changeByRange((a) => {
    var c;
    let { head: u } = a, h = mn(o).resolveInner(u - 1, -1), f;
    if (h.name == "JSXStartTag" && (h = h.parent), !(o.doc.sliceString(u - 1, u) != i || h.name == "JSXAttributeValue" && h.to > u)) {
      if (i == ">" && h.name == "JSXFragmentTag")
        return { range: a, changes: { from: u, insert: "</>" } };
      if (i == "/" && h.name == "JSXStartCloseTag") {
        let d = h.parent, p = d.parent;
        if (p && d.from == u - 2 && ((f = gS(o.doc, p.firstChild, u)) || ((c = p.firstChild) === null || c === void 0 ? void 0 : c.name) == "JSXFragmentTag")) {
          let g = `${f}>`;
          return { range: J.cursor(u + g.length, -1), changes: { from: u, insert: g } };
        }
      } else if (i == ">") {
        let d = xee(h);
        if (d && d.name == "JSXOpenTag" && !/^\/?>|^<\//.test(o.doc.sliceString(u, u + 2)) && (f = gS(o.doc, d, u)))
          return { range: a, changes: { from: u, insert: `</${f}>` } };
      }
    }
    return { range: a };
  });
  return l.changes.empty ? !1 : (n.dispatch([
    r,
    o.update(l, { userEvent: "input.complete", scrollIntoView: !0 })
  ]), !0);
});
/*! medium-zoom 1.1.0 | MIT License | https://github.com/francoischalifour/medium-zoom */
var il = Object.assign || function(n) {
  for (var e = 1; e < arguments.length; e++) {
    var t = arguments[e];
    for (var i in t)
      Object.prototype.hasOwnProperty.call(t, i) && (n[i] = t[i]);
  }
  return n;
}, Zf = function(e) {
  return e.tagName === "IMG";
}, kee = function(e) {
  return NodeList.prototype.isPrototypeOf(e);
}, Cd = function(e) {
  return e && e.nodeType === 1;
}, mS = function(e) {
  var t = e.currentSrc || e.src;
  return t.substr(-4).toLowerCase() === ".svg";
}, bS = function(e) {
  try {
    return Array.isArray(e) ? e.filter(Zf) : kee(e) ? [].slice.call(e).filter(Zf) : Cd(e) ? [e].filter(Zf) : typeof e == "string" ? [].slice.call(document.querySelectorAll(e)).filter(Zf) : [];
  } catch {
    throw new TypeError(`The provided selector is invalid.
Expects a CSS selector, a Node element, a NodeList or an array.
See: https://github.com/francoischalifour/medium-zoom`);
  }
}, Pee = function(e) {
  var t = document.createElement("div");
  return t.classList.add("medium-zoom-overlay"), t.style.background = e, t;
}, Aee = function(e) {
  var t = e.getBoundingClientRect(), i = t.top, s = t.left, r = t.width, o = t.height, l = e.cloneNode(), a = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0, c = window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft || 0;
  return l.removeAttribute("id"), l.style.position = "absolute", l.style.top = i + a + "px", l.style.left = s + c + "px", l.style.width = r + "px", l.style.height = o + "px", l.style.transform = "", l;
}, aa = function(e, t) {
  var i = il({
    bubbles: !1,
    cancelable: !1,
    detail: void 0
  }, t);
  if (typeof window.CustomEvent == "function")
    return new CustomEvent(e, i);
  var s = document.createEvent("CustomEvent");
  return s.initCustomEvent(e, i.bubbles, i.cancelable, i.detail), s;
}, Eee = function n(e) {
  var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, i = window.Promise || function(M) {
    function j() {
    }
    M(j, j);
  }, s = function(M) {
    var j = M.target;
    if (j === E) {
      p();
      return;
    }
    v.indexOf(j) !== -1 && g({ target: j });
  }, r = function() {
    if (!(x || !k.original)) {
      var M = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;
      Math.abs(S - M) > C.scrollOffset && setTimeout(p, 150);
    }
  }, o = function(M) {
    var j = M.key || M.keyCode;
    (j === "Escape" || j === "Esc" || j === 27) && p();
  }, l = function() {
    var M = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, j = M;
    if (M.background && (E.style.background = M.background), M.container && M.container instanceof Object && (j.container = il({}, C.container, M.container)), M.template) {
      var D = Cd(M.template) ? M.template : document.querySelector(M.template);
      j.template = D;
    }
    return C = il({}, C, j), v.forEach(function(P) {
      P.dispatchEvent(aa("medium-zoom:update", {
        detail: { zoom: $ }
      }));
    }), $;
  }, a = function() {
    var M = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    return n(il({}, C, M));
  }, c = function() {
    for (var M = arguments.length, j = Array(M), D = 0; D < M; D++)
      j[D] = arguments[D];
    var P = j.reduce(function(A, Q) {
      return [].concat(A, bS(Q));
    }, []);
    return P.filter(function(A) {
      return v.indexOf(A) === -1;
    }).forEach(function(A) {
      v.push(A), A.classList.add("medium-zoom-image");
    }), O.forEach(function(A) {
      var Q = A.type, X = A.listener, z = A.options;
      P.forEach(function(q) {
        q.addEventListener(Q, X, z);
      });
    }), $;
  }, u = function() {
    for (var M = arguments.length, j = Array(M), D = 0; D < M; D++)
      j[D] = arguments[D];
    k.zoomed && p();
    var P = j.length > 0 ? j.reduce(function(A, Q) {
      return [].concat(A, bS(Q));
    }, []) : v;
    return P.forEach(function(A) {
      A.classList.remove("medium-zoom-image"), A.dispatchEvent(aa("medium-zoom:detach", {
        detail: { zoom: $ }
      }));
    }), v = v.filter(function(A) {
      return P.indexOf(A) === -1;
    }), $;
  }, h = function(M, j) {
    var D = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    return v.forEach(function(P) {
      P.addEventListener("medium-zoom:" + M, j, D);
    }), O.push({ type: "medium-zoom:" + M, listener: j, options: D }), $;
  }, f = function(M, j) {
    var D = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    return v.forEach(function(P) {
      P.removeEventListener("medium-zoom:" + M, j, D);
    }), O = O.filter(function(P) {
      return !(P.type === "medium-zoom:" + M && P.listener.toString() === j.toString());
    }), $;
  }, d = function() {
    var M = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, j = M.target, D = function() {
      var A = {
        width: document.documentElement.clientWidth,
        height: document.documentElement.clientHeight,
        left: 0,
        top: 0,
        right: 0,
        bottom: 0
      }, Q = void 0, X = void 0;
      if (C.container)
        if (C.container instanceof Object)
          A = il({}, A, C.container), Q = A.width - A.left - A.right - C.margin * 2, X = A.height - A.top - A.bottom - C.margin * 2;
        else {
          var z = Cd(C.container) ? C.container : document.querySelector(C.container), q = z.getBoundingClientRect(), re = q.width, H = q.height, G = q.left, U = q.top;
          A = il({}, A, {
            width: re,
            height: H,
            left: G,
            top: U
          });
        }
      Q = Q || A.width - C.margin * 2, X = X || A.height - C.margin * 2;
      var le = k.zoomedHd || k.original, ce = mS(le) ? Q : le.naturalWidth || Q, K = mS(le) ? X : le.naturalHeight || X, he = le.getBoundingClientRect(), Ne = he.top, ae = he.left, $e = he.width, lt = he.height, En = Math.min(Math.max($e, ce), Q) / $e, ii = Math.min(Math.max(lt, K), X) / lt, Si = Math.min(En, ii), ls = (-ae + (Q - $e) / 2 + C.margin + A.left) / Si, as = (-Ne + (X - lt) / 2 + C.margin + A.top) / Si, cs = "scale(" + Si + ") translate3d(" + ls + "px, " + as + "px, 0)";
      k.zoomed.style.transform = cs, k.zoomedHd && (k.zoomedHd.style.transform = cs);
    };
    return new i(function(P) {
      if (j && v.indexOf(j) === -1) {
        P($);
        return;
      }
      var A = function re() {
        x = !1, k.zoomed.removeEventListener("transitionend", re), k.original.dispatchEvent(aa("medium-zoom:opened", {
          detail: { zoom: $ }
        })), P($);
      };
      if (k.zoomed) {
        P($);
        return;
      }
      if (j)
        k.original = j;
      else if (v.length > 0) {
        var Q = v;
        k.original = Q[0];
      } else {
        P($);
        return;
      }
      if (k.original.dispatchEvent(aa("medium-zoom:open", {
        detail: { zoom: $ }
      })), S = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0, x = !0, k.zoomed = Aee(k.original), document.body.appendChild(E), C.template) {
        var X = Cd(C.template) ? C.template : document.querySelector(C.template);
        k.template = document.createElement("div"), k.template.appendChild(X.content.cloneNode(!0)), document.body.appendChild(k.template);
      }
      if (k.original.parentElement && k.original.parentElement.tagName === "PICTURE" && k.original.currentSrc && (k.zoomed.src = k.original.currentSrc), document.body.appendChild(k.zoomed), window.requestAnimationFrame(function() {
        document.body.classList.add("medium-zoom--opened");
      }), k.original.classList.add("medium-zoom-image--hidden"), k.zoomed.classList.add("medium-zoom-image--opened"), k.zoomed.addEventListener("click", p), k.zoomed.addEventListener("transitionend", A), k.original.getAttribute("data-zoom-src")) {
        k.zoomedHd = k.zoomed.cloneNode(), k.zoomedHd.removeAttribute("srcset"), k.zoomedHd.removeAttribute("sizes"), k.zoomedHd.removeAttribute("loading"), k.zoomedHd.src = k.zoomed.getAttribute("data-zoom-src"), k.zoomedHd.onerror = function() {
          clearInterval(z), console.warn("Unable to reach the zoom image target " + k.zoomedHd.src), k.zoomedHd = null, D();
        };
        var z = setInterval(function() {
          k.zoomedHd.complete && (clearInterval(z), k.zoomedHd.classList.add("medium-zoom-image--opened"), k.zoomedHd.addEventListener("click", p), document.body.appendChild(k.zoomedHd), D());
        }, 10);
      } else if (k.original.hasAttribute("srcset")) {
        k.zoomedHd = k.zoomed.cloneNode(), k.zoomedHd.removeAttribute("sizes"), k.zoomedHd.removeAttribute("loading");
        var q = k.zoomedHd.addEventListener("load", function() {
          k.zoomedHd.removeEventListener("load", q), k.zoomedHd.classList.add("medium-zoom-image--opened"), k.zoomedHd.addEventListener("click", p), document.body.appendChild(k.zoomedHd), D();
        });
      } else
        D();
    });
  }, p = function() {
    return new i(function(M) {
      if (x || !k.original) {
        M($);
        return;
      }
      var j = function D() {
        k.original.classList.remove("medium-zoom-image--hidden"), document.body.removeChild(k.zoomed), k.zoomedHd && document.body.removeChild(k.zoomedHd), document.body.removeChild(E), k.zoomed.classList.remove("medium-zoom-image--opened"), k.template && document.body.removeChild(k.template), x = !1, k.zoomed.removeEventListener("transitionend", D), k.original.dispatchEvent(aa("medium-zoom:closed", {
          detail: { zoom: $ }
        })), k.original = null, k.zoomed = null, k.zoomedHd = null, k.template = null, M($);
      };
      x = !0, document.body.classList.remove("medium-zoom--opened"), k.zoomed.style.transform = "", k.zoomedHd && (k.zoomedHd.style.transform = ""), k.template && (k.template.style.transition = "opacity 150ms", k.template.style.opacity = 0), k.original.dispatchEvent(aa("medium-zoom:close", {
        detail: { zoom: $ }
      })), k.zoomed.addEventListener("transitionend", j);
    });
  }, g = function() {
    var M = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, j = M.target;
    return k.original ? p() : d({ target: j });
  }, m = function() {
    return C;
  }, b = function() {
    return v;
  }, y = function() {
    return k.original;
  }, v = [], O = [], x = !1, S = 0, C = t, k = {
    original: null,
    zoomed: null,
    zoomedHd: null,
    template: null
    // If the selector is omitted, it's replaced by the options
  };
  Object.prototype.toString.call(e) === "[object Object]" ? C = e : (e || typeof e == "string") && c(e), C = il({
    margin: 0,
    background: "#fff",
    scrollOffset: 40,
    container: null,
    template: null
  }, C);
  var E = Pee(C.background);
  document.addEventListener("click", s), document.addEventListener("keyup", o), document.addEventListener("scroll", r), window.addEventListener("resize", p);
  var $ = {
    open: d,
    close: p,
    toggle: g,
    update: l,
    clone: a,
    attach: c,
    detach: u,
    on: h,
    off: f,
    getOptions: m,
    getImages: b,
    getZoomedImage: y
  };
  return $;
};
function $ee(n, e) {
  e === void 0 && (e = {});
  var t = e.insertAt;
  if (!(!n || typeof document > "u")) {
    var i = document.head || document.getElementsByTagName("head")[0], s = document.createElement("style");
    s.type = "text/css", t === "top" && i.firstChild ? i.insertBefore(s, i.firstChild) : i.appendChild(s), s.styleSheet ? s.styleSheet.cssText = n : s.appendChild(document.createTextNode(n));
  }
}
var Tee = ".medium-zoom-overlay{position:fixed;top:0;right:0;bottom:0;left:0;opacity:0;transition:opacity .3s;will-change:opacity}.medium-zoom--opened .medium-zoom-overlay{cursor:pointer;cursor:zoom-out;opacity:1}.medium-zoom-image{cursor:pointer;cursor:zoom-in;transition:transform .3s cubic-bezier(.2,0,.2,1)!important}.medium-zoom-image--hidden{visibility:hidden}.medium-zoom-image--opened{position:relative;cursor:pointer;cursor:zoom-out;will-change:transform}";
$ee(Tee);
const _ee = Eee;
var Mee = function() {
  var n = document.getSelection();
  if (!n.rangeCount)
    return function() {
    };
  for (var e = document.activeElement, t = [], i = 0; i < n.rangeCount; i++)
    t.push(n.getRangeAt(i));
  switch (e.tagName.toUpperCase()) {
    case "INPUT":
    case "TEXTAREA":
      e.blur();
      break;
    default:
      e = null;
      break;
  }
  return n.removeAllRanges(), function() {
    n.type === "Caret" && n.removeAllRanges(), n.rangeCount || t.forEach(function(s) {
      n.addRange(s);
    }), e && e.focus();
  };
}, Ree = Mee, vS = {
  "text/plain": "Text",
  "text/html": "Url",
  default: "Text"
}, Dee = "Copy to clipboard: #{key}, Enter";
function Lee(n) {
  var e = (/mac os x/i.test(navigator.userAgent) ? "⌘" : "Ctrl") + "+C";
  return n.replace(/#{\s*key\s*}/g, e);
}
function Nee(n, e) {
  var t, i, s, r, o, l, a = !1;
  e || (e = {}), t = e.debug || !1;
  try {
    s = Ree(), r = document.createRange(), o = document.getSelection(), l = document.createElement("span"), l.textContent = n, l.ariaHidden = "true", l.style.all = "unset", l.style.position = "fixed", l.style.top = 0, l.style.clip = "rect(0, 0, 0, 0)", l.style.whiteSpace = "pre", l.style.webkitUserSelect = "text", l.style.MozUserSelect = "text", l.style.msUserSelect = "text", l.style.userSelect = "text", l.addEventListener("copy", function(u) {
      if (u.stopPropagation(), e.format)
        if (u.preventDefault(), typeof u.clipboardData > "u") {
          t && console.warn("unable to use e.clipboardData"), t && console.warn("trying IE specific stuff"), window.clipboardData.clearData();
          var h = vS[e.format] || vS.default;
          window.clipboardData.setData(h, n);
        } else
          u.clipboardData.clearData(), u.clipboardData.setData(e.format, n);
      e.onCopy && (u.preventDefault(), e.onCopy(u.clipboardData));
    }), document.body.appendChild(l), r.selectNodeContents(l), o.addRange(r);
    var c = document.execCommand("copy");
    if (!c)
      throw new Error("copy command was unsuccessful");
    a = !0;
  } catch (u) {
    t && console.error("unable to copy using execCommand: ", u), t && console.warn("trying IE specific stuff");
    try {
      window.clipboardData.setData(e.format || "text", n), e.onCopy && e.onCopy(window.clipboardData), a = !0;
    } catch (h) {
      t && console.error("unable to copy using clipboardData: ", h), t && console.error("falling back to prompt"), i = Lee("message" in e ? e.message : Dee), window.prompt(i, n);
    }
  } finally {
    o && (typeof o.removeRange == "function" ? o.removeRange(r) : o.removeAllRanges()), l && document.body.removeChild(l), s();
  }
  return a;
}
var Iee = Nee;
const Qee = /* @__PURE__ */ Wh(Iee);
var gt = {};
const Bee = "Á", jee = "á", zee = "Ă", Zee = "ă", Fee = "∾", Vee = "∿", qee = "∾̳", Wee = "Â", Xee = "â", Yee = "´", Hee = "А", Gee = "а", Uee = "Æ", Kee = "æ", Jee = "⁡", ete = "𝔄", tte = "𝔞", nte = "À", ite = "à", ste = "ℵ", rte = "ℵ", ote = "Α", lte = "α", ate = "Ā", cte = "ā", ute = "⨿", hte = "&", fte = "&", dte = "⩕", pte = "⩓", gte = "∧", mte = "⩜", bte = "⩘", vte = "⩚", yte = "∠", Ote = "⦤", wte = "∠", xte = "⦨", Ste = "⦩", Cte = "⦪", kte = "⦫", Pte = "⦬", Ate = "⦭", Ete = "⦮", $te = "⦯", Tte = "∡", _te = "∟", Mte = "⊾", Rte = "⦝", Dte = "∢", Lte = "Å", Nte = "⍼", Ite = "Ą", Qte = "ą", Bte = "𝔸", jte = "𝕒", zte = "⩯", Zte = "≈", Fte = "⩰", Vte = "≊", qte = "≋", Wte = "'", Xte = "⁡", Yte = "≈", Hte = "≊", Gte = "Å", Ute = "å", Kte = "𝒜", Jte = "𝒶", ene = "≔", tne = "*", nne = "≈", ine = "≍", sne = "Ã", rne = "ã", one = "Ä", lne = "ä", ane = "∳", cne = "⨑", une = "≌", hne = "϶", fne = "‵", dne = "∽", pne = "⋍", gne = "∖", mne = "⫧", bne = "⊽", vne = "⌅", yne = "⌆", One = "⌅", wne = "⎵", xne = "⎶", Sne = "≌", Cne = "Б", kne = "б", Pne = "„", Ane = "∵", Ene = "∵", $ne = "∵", Tne = "⦰", _ne = "϶", Mne = "ℬ", Rne = "ℬ", Dne = "Β", Lne = "β", Nne = "ℶ", Ine = "≬", Qne = "𝔅", Bne = "𝔟", jne = "⋂", zne = "◯", Zne = "⋃", Fne = "⨀", Vne = "⨁", qne = "⨂", Wne = "⨆", Xne = "★", Yne = "▽", Hne = "△", Gne = "⨄", Une = "⋁", Kne = "⋀", Jne = "⤍", eie = "⧫", tie = "▪", nie = "▴", iie = "▾", sie = "◂", rie = "▸", oie = "␣", lie = "▒", aie = "░", cie = "▓", uie = "█", hie = "=⃥", fie = "≡⃥", die = "⫭", pie = "⌐", gie = "𝔹", mie = "𝕓", bie = "⊥", vie = "⊥", yie = "⋈", Oie = "⧉", wie = "┐", xie = "╕", Sie = "╖", Cie = "╗", kie = "┌", Pie = "╒", Aie = "╓", Eie = "╔", $ie = "─", Tie = "═", _ie = "┬", Mie = "╤", Rie = "╥", Die = "╦", Lie = "┴", Nie = "╧", Iie = "╨", Qie = "╩", Bie = "⊟", jie = "⊞", zie = "⊠", Zie = "┘", Fie = "╛", Vie = "╜", qie = "╝", Wie = "└", Xie = "╘", Yie = "╙", Hie = "╚", Gie = "│", Uie = "║", Kie = "┼", Jie = "╪", ese = "╫", tse = "╬", nse = "┤", ise = "╡", sse = "╢", rse = "╣", ose = "├", lse = "╞", ase = "╟", cse = "╠", use = "‵", hse = "˘", fse = "˘", dse = "¦", pse = "𝒷", gse = "ℬ", mse = "⁏", bse = "∽", vse = "⋍", yse = "⧅", Ose = "\\", wse = "⟈", xse = "•", Sse = "•", Cse = "≎", kse = "⪮", Pse = "≏", Ase = "≎", Ese = "≏", $se = "Ć", Tse = "ć", _se = "⩄", Mse = "⩉", Rse = "⩋", Dse = "∩", Lse = "⋒", Nse = "⩇", Ise = "⩀", Qse = "ⅅ", Bse = "∩︀", jse = "⁁", zse = "ˇ", Zse = "ℭ", Fse = "⩍", Vse = "Č", qse = "č", Wse = "Ç", Xse = "ç", Yse = "Ĉ", Hse = "ĉ", Gse = "∰", Use = "⩌", Kse = "⩐", Jse = "Ċ", ere = "ċ", tre = "¸", nre = "¸", ire = "⦲", sre = "¢", rre = "·", ore = "·", lre = "𝔠", are = "ℭ", cre = "Ч", ure = "ч", hre = "✓", fre = "✓", dre = "Χ", pre = "χ", gre = "ˆ", mre = "≗", bre = "↺", vre = "↻", yre = "⊛", Ore = "⊚", wre = "⊝", xre = "⊙", Sre = "®", Cre = "Ⓢ", kre = "⊖", Pre = "⊕", Are = "⊗", Ere = "○", $re = "⧃", Tre = "≗", _re = "⨐", Mre = "⫯", Rre = "⧂", Dre = "∲", Lre = "”", Nre = "’", Ire = "♣", Qre = "♣", Bre = ":", jre = "∷", zre = "⩴", Zre = "≔", Fre = "≔", Vre = ",", qre = "@", Wre = "∁", Xre = "∘", Yre = "∁", Hre = "ℂ", Gre = "≅", Ure = "⩭", Kre = "≡", Jre = "∮", eoe = "∯", toe = "∮", noe = "𝕔", ioe = "ℂ", soe = "∐", roe = "∐", ooe = "©", loe = "©", aoe = "℗", coe = "∳", uoe = "↵", hoe = "✗", foe = "⨯", doe = "𝒞", poe = "𝒸", goe = "⫏", moe = "⫑", boe = "⫐", voe = "⫒", yoe = "⋯", Ooe = "⤸", woe = "⤵", xoe = "⋞", Soe = "⋟", Coe = "↶", koe = "⤽", Poe = "⩈", Aoe = "⩆", Eoe = "≍", $oe = "∪", Toe = "⋓", _oe = "⩊", Moe = "⊍", Roe = "⩅", Doe = "∪︀", Loe = "↷", Noe = "⤼", Ioe = "⋞", Qoe = "⋟", Boe = "⋎", joe = "⋏", zoe = "¤", Zoe = "↶", Foe = "↷", Voe = "⋎", qoe = "⋏", Woe = "∲", Xoe = "∱", Yoe = "⌭", Hoe = "†", Goe = "‡", Uoe = "ℸ", Koe = "↓", Joe = "↡", ele = "⇓", tle = "‐", nle = "⫤", ile = "⊣", sle = "⤏", rle = "˝", ole = "Ď", lle = "ď", ale = "Д", cle = "д", ule = "‡", hle = "⇊", fle = "ⅅ", dle = "ⅆ", ple = "⤑", gle = "⩷", mle = "°", ble = "∇", vle = "Δ", yle = "δ", Ole = "⦱", wle = "⥿", xle = "𝔇", Sle = "𝔡", Cle = "⥥", kle = "⇃", Ple = "⇂", Ale = "´", Ele = "˙", $le = "˝", Tle = "`", _le = "˜", Mle = "⋄", Rle = "⋄", Dle = "⋄", Lle = "♦", Nle = "♦", Ile = "¨", Qle = "ⅆ", Ble = "ϝ", jle = "⋲", zle = "÷", Zle = "÷", Fle = "⋇", Vle = "⋇", qle = "Ђ", Wle = "ђ", Xle = "⌞", Yle = "⌍", Hle = "$", Gle = "𝔻", Ule = "𝕕", Kle = "¨", Jle = "˙", eae = "⃜", tae = "≐", nae = "≑", iae = "≐", sae = "∸", rae = "∔", oae = "⊡", lae = "⌆", aae = "∯", cae = "¨", uae = "⇓", hae = "⇐", fae = "⇔", dae = "⫤", pae = "⟸", gae = "⟺", mae = "⟹", bae = "⇒", vae = "⊨", yae = "⇑", Oae = "⇕", wae = "∥", xae = "⤓", Sae = "↓", Cae = "↓", kae = "⇓", Pae = "⇵", Aae = "̑", Eae = "⇊", $ae = "⇃", Tae = "⇂", _ae = "⥐", Mae = "⥞", Rae = "⥖", Dae = "↽", Lae = "⥟", Nae = "⥗", Iae = "⇁", Qae = "↧", Bae = "⊤", jae = "⤐", zae = "⌟", Zae = "⌌", Fae = "𝒟", Vae = "𝒹", qae = "Ѕ", Wae = "ѕ", Xae = "⧶", Yae = "Đ", Hae = "đ", Gae = "⋱", Uae = "▿", Kae = "▾", Jae = "⇵", ece = "⥯", tce = "⦦", nce = "Џ", ice = "џ", sce = "⟿", rce = "É", oce = "é", lce = "⩮", ace = "Ě", cce = "ě", uce = "Ê", hce = "ê", fce = "≖", dce = "≕", pce = "Э", gce = "э", mce = "⩷", bce = "Ė", vce = "ė", yce = "≑", Oce = "ⅇ", wce = "≒", xce = "𝔈", Sce = "𝔢", Cce = "⪚", kce = "È", Pce = "è", Ace = "⪖", Ece = "⪘", $ce = "⪙", Tce = "∈", _ce = "⏧", Mce = "ℓ", Rce = "⪕", Dce = "⪗", Lce = "Ē", Nce = "ē", Ice = "∅", Qce = "∅", Bce = "◻", jce = "∅", zce = "▫", Zce = " ", Fce = " ", Vce = " ", qce = "Ŋ", Wce = "ŋ", Xce = " ", Yce = "Ę", Hce = "ę", Gce = "𝔼", Uce = "𝕖", Kce = "⋕", Jce = "⧣", eue = "⩱", tue = "ε", nue = "Ε", iue = "ε", sue = "ϵ", rue = "≖", oue = "≕", lue = "≂", aue = "⪖", cue = "⪕", uue = "⩵", hue = "=", fue = "≂", due = "≟", pue = "⇌", gue = "≡", mue = "⩸", bue = "⧥", vue = "⥱", yue = "≓", Oue = "ℯ", wue = "ℰ", xue = "≐", Sue = "⩳", Cue = "≂", kue = "Η", Pue = "η", Aue = "Ð", Eue = "ð", $ue = "Ë", Tue = "ë", _ue = "€", Mue = "!", Rue = "∃", Due = "∃", Lue = "ℰ", Nue = "ⅇ", Iue = "ⅇ", Que = "≒", Bue = "Ф", jue = "ф", zue = "♀", Zue = "ﬃ", Fue = "ﬀ", Vue = "ﬄ", que = "𝔉", Wue = "𝔣", Xue = "ﬁ", Yue = "◼", Hue = "▪", Gue = "fj", Uue = "♭", Kue = "ﬂ", Jue = "▱", ehe = "ƒ", the = "𝔽", nhe = "𝕗", ihe = "∀", she = "∀", rhe = "⋔", ohe = "⫙", lhe = "ℱ", ahe = "⨍", che = "½", uhe = "⅓", hhe = "¼", fhe = "⅕", dhe = "⅙", phe = "⅛", ghe = "⅔", mhe = "⅖", bhe = "¾", vhe = "⅗", yhe = "⅜", Ohe = "⅘", whe = "⅚", xhe = "⅝", She = "⅞", Che = "⁄", khe = "⌢", Phe = "𝒻", Ahe = "ℱ", Ehe = "ǵ", $he = "Γ", The = "γ", _he = "Ϝ", Mhe = "ϝ", Rhe = "⪆", Dhe = "Ğ", Lhe = "ğ", Nhe = "Ģ", Ihe = "Ĝ", Qhe = "ĝ", Bhe = "Г", jhe = "г", zhe = "Ġ", Zhe = "ġ", Fhe = "≥", Vhe = "≧", qhe = "⪌", Whe = "⋛", Xhe = "≥", Yhe = "≧", Hhe = "⩾", Ghe = "⪩", Uhe = "⩾", Khe = "⪀", Jhe = "⪂", efe = "⪄", tfe = "⋛︀", nfe = "⪔", ife = "𝔊", sfe = "𝔤", rfe = "≫", ofe = "⋙", lfe = "⋙", afe = "ℷ", cfe = "Ѓ", ufe = "ѓ", hfe = "⪥", ffe = "≷", dfe = "⪒", pfe = "⪤", gfe = "⪊", mfe = "⪊", bfe = "⪈", vfe = "≩", yfe = "⪈", Ofe = "≩", wfe = "⋧", xfe = "𝔾", Sfe = "𝕘", Cfe = "`", kfe = "≥", Pfe = "⋛", Afe = "≧", Efe = "⪢", $fe = "≷", Tfe = "⩾", _fe = "≳", Mfe = "𝒢", Rfe = "ℊ", Dfe = "≳", Lfe = "⪎", Nfe = "⪐", Ife = "⪧", Qfe = "⩺", Bfe = ">", jfe = ">", zfe = "≫", Zfe = "⋗", Ffe = "⦕", Vfe = "⩼", qfe = "⪆", Wfe = "⥸", Xfe = "⋗", Yfe = "⋛", Hfe = "⪌", Gfe = "≷", Ufe = "≳", Kfe = "≩︀", Jfe = "≩︀", ede = "ˇ", tde = " ", nde = "½", ide = "ℋ", sde = "Ъ", rde = "ъ", ode = "⥈", lde = "↔", ade = "⇔", cde = "↭", ude = "^", hde = "ℏ", fde = "Ĥ", dde = "ĥ", pde = "♥", gde = "♥", mde = "…", bde = "⊹", vde = "𝔥", yde = "ℌ", Ode = "ℋ", wde = "⤥", xde = "⤦", Sde = "⇿", Cde = "∻", kde = "↩", Pde = "↪", Ade = "𝕙", Ede = "ℍ", $de = "―", Tde = "─", _de = "𝒽", Mde = "ℋ", Rde = "ℏ", Dde = "Ħ", Lde = "ħ", Nde = "≎", Ide = "≏", Qde = "⁃", Bde = "‐", jde = "Í", zde = "í", Zde = "⁣", Fde = "Î", Vde = "î", qde = "И", Wde = "и", Xde = "İ", Yde = "Е", Hde = "е", Gde = "¡", Ude = "⇔", Kde = "𝔦", Jde = "ℑ", epe = "Ì", tpe = "ì", npe = "ⅈ", ipe = "⨌", spe = "∭", rpe = "⧜", ope = "℩", lpe = "Ĳ", ape = "ĳ", cpe = "Ī", upe = "ī", hpe = "ℑ", fpe = "ⅈ", dpe = "ℐ", ppe = "ℑ", gpe = "ı", mpe = "ℑ", bpe = "⊷", vpe = "Ƶ", ype = "⇒", Ope = "℅", wpe = "∞", xpe = "⧝", Spe = "ı", Cpe = "⊺", kpe = "∫", Ppe = "∬", Ape = "ℤ", Epe = "∫", $pe = "⊺", Tpe = "⋂", _pe = "⨗", Mpe = "⨼", Rpe = "⁣", Dpe = "⁢", Lpe = "Ё", Npe = "ё", Ipe = "Į", Qpe = "į", Bpe = "𝕀", jpe = "𝕚", zpe = "Ι", Zpe = "ι", Fpe = "⨼", Vpe = "¿", qpe = "𝒾", Wpe = "ℐ", Xpe = "∈", Ype = "⋵", Hpe = "⋹", Gpe = "⋴", Upe = "⋳", Kpe = "∈", Jpe = "⁢", ege = "Ĩ", tge = "ĩ", nge = "І", ige = "і", sge = "Ï", rge = "ï", oge = "Ĵ", lge = "ĵ", age = "Й", cge = "й", uge = "𝔍", hge = "𝔧", fge = "ȷ", dge = "𝕁", pge = "𝕛", gge = "𝒥", mge = "𝒿", bge = "Ј", vge = "ј", yge = "Є", Oge = "є", wge = "Κ", xge = "κ", Sge = "ϰ", Cge = "Ķ", kge = "ķ", Pge = "К", Age = "к", Ege = "𝔎", $ge = "𝔨", Tge = "ĸ", _ge = "Х", Mge = "х", Rge = "Ќ", Dge = "ќ", Lge = "𝕂", Nge = "𝕜", Ige = "𝒦", Qge = "𝓀", Bge = "⇚", jge = "Ĺ", zge = "ĺ", Zge = "⦴", Fge = "ℒ", Vge = "Λ", qge = "λ", Wge = "⟨", Xge = "⟪", Yge = "⦑", Hge = "⟨", Gge = "⪅", Uge = "ℒ", Kge = "«", Jge = "⇤", eme = "⤟", tme = "←", nme = "↞", ime = "⇐", sme = "⤝", rme = "↩", ome = "↫", lme = "⤹", ame = "⥳", cme = "↢", ume = "⤙", hme = "⤛", fme = "⪫", dme = "⪭", pme = "⪭︀", gme = "⤌", mme = "⤎", bme = "❲", vme = "{", yme = "[", Ome = "⦋", wme = "⦏", xme = "⦍", Sme = "Ľ", Cme = "ľ", kme = "Ļ", Pme = "ļ", Ame = "⌈", Eme = "{", $me = "Л", Tme = "л", _me = "⤶", Mme = "“", Rme = "„", Dme = "⥧", Lme = "⥋", Nme = "↲", Ime = "≤", Qme = "≦", Bme = "⟨", jme = "⇤", zme = "←", Zme = "←", Fme = "⇐", Vme = "⇆", qme = "↢", Wme = "⌈", Xme = "⟦", Yme = "⥡", Hme = "⥙", Gme = "⇃", Ume = "⌊", Kme = "↽", Jme = "↼", e0e = "⇇", t0e = "↔", n0e = "↔", i0e = "⇔", s0e = "⇆", r0e = "⇋", o0e = "↭", l0e = "⥎", a0e = "↤", c0e = "⊣", u0e = "⥚", h0e = "⋋", f0e = "⧏", d0e = "⊲", p0e = "⊴", g0e = "⥑", m0e = "⥠", b0e = "⥘", v0e = "↿", y0e = "⥒", O0e = "↼", w0e = "⪋", x0e = "⋚", S0e = "≤", C0e = "≦", k0e = "⩽", P0e = "⪨", A0e = "⩽", E0e = "⩿", $0e = "⪁", T0e = "⪃", _0e = "⋚︀", M0e = "⪓", R0e = "⪅", D0e = "⋖", L0e = "⋚", N0e = "⪋", I0e = "⋚", Q0e = "≦", B0e = "≶", j0e = "≶", z0e = "⪡", Z0e = "≲", F0e = "⩽", V0e = "≲", q0e = "⥼", W0e = "⌊", X0e = "𝔏", Y0e = "𝔩", H0e = "≶", G0e = "⪑", U0e = "⥢", K0e = "↽", J0e = "↼", ebe = "⥪", tbe = "▄", nbe = "Љ", ibe = "љ", sbe = "⇇", rbe = "≪", obe = "⋘", lbe = "⌞", abe = "⇚", cbe = "⥫", ube = "◺", hbe = "Ŀ", fbe = "ŀ", dbe = "⎰", pbe = "⎰", gbe = "⪉", mbe = "⪉", bbe = "⪇", vbe = "≨", ybe = "⪇", Obe = "≨", wbe = "⋦", xbe = "⟬", Sbe = "⇽", Cbe = "⟦", kbe = "⟵", Pbe = "⟵", Abe = "⟸", Ebe = "⟷", $be = "⟷", Tbe = "⟺", _be = "⟼", Mbe = "⟶", Rbe = "⟶", Dbe = "⟹", Lbe = "↫", Nbe = "↬", Ibe = "⦅", Qbe = "𝕃", Bbe = "𝕝", jbe = "⨭", zbe = "⨴", Zbe = "∗", Fbe = "_", Vbe = "↙", qbe = "↘", Wbe = "◊", Xbe = "◊", Ybe = "⧫", Hbe = "(", Gbe = "⦓", Ube = "⇆", Kbe = "⌟", Jbe = "⇋", eve = "⥭", tve = "‎", nve = "⊿", ive = "‹", sve = "𝓁", rve = "ℒ", ove = "↰", lve = "↰", ave = "≲", cve = "⪍", uve = "⪏", hve = "[", fve = "‘", dve = "‚", pve = "Ł", gve = "ł", mve = "⪦", bve = "⩹", vve = "<", yve = "<", Ove = "≪", wve = "⋖", xve = "⋋", Sve = "⋉", Cve = "⥶", kve = "⩻", Pve = "◃", Ave = "⊴", Eve = "◂", $ve = "⦖", Tve = "⥊", _ve = "⥦", Mve = "≨︀", Rve = "≨︀", Dve = "¯", Lve = "♂", Nve = "✠", Ive = "✠", Qve = "↦", Bve = "↦", jve = "↧", zve = "↤", Zve = "↥", Fve = "▮", Vve = "⨩", qve = "М", Wve = "м", Xve = "—", Yve = "∺", Hve = "∡", Gve = " ", Uve = "ℳ", Kve = "𝔐", Jve = "𝔪", eye = "℧", tye = "µ", nye = "*", iye = "⫰", sye = "∣", rye = "·", oye = "⊟", lye = "−", aye = "∸", cye = "⨪", uye = "∓", hye = "⫛", fye = "…", dye = "∓", pye = "⊧", gye = "𝕄", mye = "𝕞", bye = "∓", vye = "𝓂", yye = "ℳ", Oye = "∾", wye = "Μ", xye = "μ", Sye = "⊸", Cye = "⊸", kye = "∇", Pye = "Ń", Aye = "ń", Eye = "∠⃒", $ye = "≉", Tye = "⩰̸", _ye = "≋̸", Mye = "ŉ", Rye = "≉", Dye = "♮", Lye = "ℕ", Nye = "♮", Iye = " ", Qye = "≎̸", Bye = "≏̸", jye = "⩃", zye = "Ň", Zye = "ň", Fye = "Ņ", Vye = "ņ", qye = "≇", Wye = "⩭̸", Xye = "⩂", Yye = "Н", Hye = "н", Gye = "–", Uye = "⤤", Kye = "↗", Jye = "⇗", eOe = "↗", tOe = "≠", nOe = "≐̸", iOe = "​", sOe = "​", rOe = "​", oOe = "​", lOe = "≢", aOe = "⤨", cOe = "≂̸", uOe = "≫", hOe = "≪", fOe = `
`, dOe = "∄", pOe = "∄", gOe = "𝔑", mOe = "𝔫", bOe = "≧̸", vOe = "≱", yOe = "≱", OOe = "≧̸", wOe = "⩾̸", xOe = "⩾̸", SOe = "⋙̸", COe = "≵", kOe = "≫⃒", POe = "≯", AOe = "≯", EOe = "≫̸", $Oe = "↮", TOe = "⇎", _Oe = "⫲", MOe = "∋", ROe = "⋼", DOe = "⋺", LOe = "∋", NOe = "Њ", IOe = "њ", QOe = "↚", BOe = "⇍", jOe = "‥", zOe = "≦̸", ZOe = "≰", FOe = "↚", VOe = "⇍", qOe = "↮", WOe = "⇎", XOe = "≰", YOe = "≦̸", HOe = "⩽̸", GOe = "⩽̸", UOe = "≮", KOe = "⋘̸", JOe = "≴", e1e = "≪⃒", t1e = "≮", n1e = "⋪", i1e = "⋬", s1e = "≪̸", r1e = "∤", o1e = "⁠", l1e = " ", a1e = "𝕟", c1e = "ℕ", u1e = "⫬", h1e = "¬", f1e = "≢", d1e = "≭", p1e = "∦", g1e = "∉", m1e = "≠", b1e = "≂̸", v1e = "∄", y1e = "≯", O1e = "≱", w1e = "≧̸", x1e = "≫̸", S1e = "≹", C1e = "⩾̸", k1e = "≵", P1e = "≎̸", A1e = "≏̸", E1e = "∉", $1e = "⋵̸", T1e = "⋹̸", _1e = "∉", M1e = "⋷", R1e = "⋶", D1e = "⧏̸", L1e = "⋪", N1e = "⋬", I1e = "≮", Q1e = "≰", B1e = "≸", j1e = "≪̸", z1e = "⩽̸", Z1e = "≴", F1e = "⪢̸", V1e = "⪡̸", q1e = "∌", W1e = "∌", X1e = "⋾", Y1e = "⋽", H1e = "⊀", G1e = "⪯̸", U1e = "⋠", K1e = "∌", J1e = "⧐̸", ewe = "⋫", twe = "⋭", nwe = "⊏̸", iwe = "⋢", swe = "⊐̸", rwe = "⋣", owe = "⊂⃒", lwe = "⊈", awe = "⊁", cwe = "⪰̸", uwe = "⋡", hwe = "≿̸", fwe = "⊃⃒", dwe = "⊉", pwe = "≁", gwe = "≄", mwe = "≇", bwe = "≉", vwe = "∤", ywe = "∦", Owe = "∦", wwe = "⫽⃥", xwe = "∂̸", Swe = "⨔", Cwe = "⊀", kwe = "⋠", Pwe = "⊀", Awe = "⪯̸", Ewe = "⪯̸", $we = "⤳̸", Twe = "↛", _we = "⇏", Mwe = "↝̸", Rwe = "↛", Dwe = "⇏", Lwe = "⋫", Nwe = "⋭", Iwe = "⊁", Qwe = "⋡", Bwe = "⪰̸", jwe = "𝒩", zwe = "𝓃", Zwe = "∤", Fwe = "∦", Vwe = "≁", qwe = "≄", Wwe = "≄", Xwe = "∤", Ywe = "∦", Hwe = "⋢", Gwe = "⋣", Uwe = "⊄", Kwe = "⫅̸", Jwe = "⊈", exe = "⊂⃒", txe = "⊈", nxe = "⫅̸", ixe = "⊁", sxe = "⪰̸", rxe = "⊅", oxe = "⫆̸", lxe = "⊉", axe = "⊃⃒", cxe = "⊉", uxe = "⫆̸", hxe = "≹", fxe = "Ñ", dxe = "ñ", pxe = "≸", gxe = "⋪", mxe = "⋬", bxe = "⋫", vxe = "⋭", yxe = "Ν", Oxe = "ν", wxe = "#", xxe = "№", Sxe = " ", Cxe = "≍⃒", kxe = "⊬", Pxe = "⊭", Axe = "⊮", Exe = "⊯", $xe = "≥⃒", Txe = ">⃒", _xe = "⤄", Mxe = "⧞", Rxe = "⤂", Dxe = "≤⃒", Lxe = "<⃒", Nxe = "⊴⃒", Ixe = "⤃", Qxe = "⊵⃒", Bxe = "∼⃒", jxe = "⤣", zxe = "↖", Zxe = "⇖", Fxe = "↖", Vxe = "⤧", qxe = "Ó", Wxe = "ó", Xxe = "⊛", Yxe = "Ô", Hxe = "ô", Gxe = "⊚", Uxe = "О", Kxe = "о", Jxe = "⊝", eSe = "Ő", tSe = "ő", nSe = "⨸", iSe = "⊙", sSe = "⦼", rSe = "Œ", oSe = "œ", lSe = "⦿", aSe = "𝔒", cSe = "𝔬", uSe = "˛", hSe = "Ò", fSe = "ò", dSe = "⧁", pSe = "⦵", gSe = "Ω", mSe = "∮", bSe = "↺", vSe = "⦾", ySe = "⦻", OSe = "‾", wSe = "⧀", xSe = "Ō", SSe = "ō", CSe = "Ω", kSe = "ω", PSe = "Ο", ASe = "ο", ESe = "⦶", $Se = "⊖", TSe = "𝕆", _Se = "𝕠", MSe = "⦷", RSe = "“", DSe = "‘", LSe = "⦹", NSe = "⊕", ISe = "↻", QSe = "⩔", BSe = "∨", jSe = "⩝", zSe = "ℴ", ZSe = "ℴ", FSe = "ª", VSe = "º", qSe = "⊶", WSe = "⩖", XSe = "⩗", YSe = "⩛", HSe = "Ⓢ", GSe = "𝒪", USe = "ℴ", KSe = "Ø", JSe = "ø", eCe = "⊘", tCe = "Õ", nCe = "õ", iCe = "⨶", sCe = "⨷", rCe = "⊗", oCe = "Ö", lCe = "ö", aCe = "⌽", cCe = "‾", uCe = "⏞", hCe = "⎴", fCe = "⏜", dCe = "¶", pCe = "∥", gCe = "∥", mCe = "⫳", bCe = "⫽", vCe = "∂", yCe = "∂", OCe = "П", wCe = "п", xCe = "%", SCe = ".", CCe = "‰", kCe = "⊥", PCe = "‱", ACe = "𝔓", ECe = "𝔭", $Ce = "Φ", TCe = "φ", _Ce = "ϕ", MCe = "ℳ", RCe = "☎", DCe = "Π", LCe = "π", NCe = "⋔", ICe = "ϖ", QCe = "ℏ", BCe = "ℎ", jCe = "ℏ", zCe = "⨣", ZCe = "⊞", FCe = "⨢", VCe = "+", qCe = "∔", WCe = "⨥", XCe = "⩲", YCe = "±", HCe = "±", GCe = "⨦", UCe = "⨧", KCe = "±", JCe = "ℌ", eke = "⨕", tke = "𝕡", nke = "ℙ", ike = "£", ske = "⪷", rke = "⪻", oke = "≺", lke = "≼", ake = "⪷", cke = "≺", uke = "≼", hke = "≺", fke = "⪯", dke = "≼", pke = "≾", gke = "⪯", mke = "⪹", bke = "⪵", vke = "⋨", yke = "⪯", Oke = "⪳", wke = "≾", xke = "′", Ske = "″", Cke = "ℙ", kke = "⪹", Pke = "⪵", Ake = "⋨", Eke = "∏", $ke = "∏", Tke = "⌮", _ke = "⌒", Mke = "⌓", Rke = "∝", Dke = "∝", Lke = "∷", Nke = "∝", Ike = "≾", Qke = "⊰", Bke = "𝒫", jke = "𝓅", zke = "Ψ", Zke = "ψ", Fke = " ", Vke = "𝔔", qke = "𝔮", Wke = "⨌", Xke = "𝕢", Yke = "ℚ", Hke = "⁗", Gke = "𝒬", Uke = "𝓆", Kke = "ℍ", Jke = "⨖", e2e = "?", t2e = "≟", n2e = '"', i2e = '"', s2e = "⇛", r2e = "∽̱", o2e = "Ŕ", l2e = "ŕ", a2e = "√", c2e = "⦳", u2e = "⟩", h2e = "⟫", f2e = "⦒", d2e = "⦥", p2e = "⟩", g2e = "»", m2e = "⥵", b2e = "⇥", v2e = "⤠", y2e = "⤳", O2e = "→", w2e = "↠", x2e = "⇒", S2e = "⤞", C2e = "↪", k2e = "↬", P2e = "⥅", A2e = "⥴", E2e = "⤖", $2e = "↣", T2e = "↝", _2e = "⤚", M2e = "⤜", R2e = "∶", D2e = "ℚ", L2e = "⤍", N2e = "⤏", I2e = "⤐", Q2e = "❳", B2e = "}", j2e = "]", z2e = "⦌", Z2e = "⦎", F2e = "⦐", V2e = "Ř", q2e = "ř", W2e = "Ŗ", X2e = "ŗ", Y2e = "⌉", H2e = "}", G2e = "Р", U2e = "р", K2e = "⤷", J2e = "⥩", ePe = "”", tPe = "”", nPe = "↳", iPe = "ℜ", sPe = "ℛ", rPe = "ℜ", oPe = "ℝ", lPe = "ℜ", aPe = "▭", cPe = "®", uPe = "®", hPe = "∋", fPe = "⇋", dPe = "⥯", pPe = "⥽", gPe = "⌋", mPe = "𝔯", bPe = "ℜ", vPe = "⥤", yPe = "⇁", OPe = "⇀", wPe = "⥬", xPe = "Ρ", SPe = "ρ", CPe = "ϱ", kPe = "⟩", PPe = "⇥", APe = "→", EPe = "→", $Pe = "⇒", TPe = "⇄", _Pe = "↣", MPe = "⌉", RPe = "⟧", DPe = "⥝", LPe = "⥕", NPe = "⇂", IPe = "⌋", QPe = "⇁", BPe = "⇀", jPe = "⇄", zPe = "⇌", ZPe = "⇉", FPe = "↝", VPe = "↦", qPe = "⊢", WPe = "⥛", XPe = "⋌", YPe = "⧐", HPe = "⊳", GPe = "⊵", UPe = "⥏", KPe = "⥜", JPe = "⥔", eAe = "↾", tAe = "⥓", nAe = "⇀", iAe = "˚", sAe = "≓", rAe = "⇄", oAe = "⇌", lAe = "‏", aAe = "⎱", cAe = "⎱", uAe = "⫮", hAe = "⟭", fAe = "⇾", dAe = "⟧", pAe = "⦆", gAe = "𝕣", mAe = "ℝ", bAe = "⨮", vAe = "⨵", yAe = "⥰", OAe = ")", wAe = "⦔", xAe = "⨒", SAe = "⇉", CAe = "⇛", kAe = "›", PAe = "𝓇", AAe = "ℛ", EAe = "↱", $Ae = "↱", TAe = "]", _Ae = "’", MAe = "’", RAe = "⋌", DAe = "⋊", LAe = "▹", NAe = "⊵", IAe = "▸", QAe = "⧎", BAe = "⧴", jAe = "⥨", zAe = "℞", ZAe = "Ś", FAe = "ś", VAe = "‚", qAe = "⪸", WAe = "Š", XAe = "š", YAe = "⪼", HAe = "≻", GAe = "≽", UAe = "⪰", KAe = "⪴", JAe = "Ş", eEe = "ş", tEe = "Ŝ", nEe = "ŝ", iEe = "⪺", sEe = "⪶", rEe = "⋩", oEe = "⨓", lEe = "≿", aEe = "С", cEe = "с", uEe = "⊡", hEe = "⋅", fEe = "⩦", dEe = "⤥", pEe = "↘", gEe = "⇘", mEe = "↘", bEe = "§", vEe = ";", yEe = "⤩", OEe = "∖", wEe = "∖", xEe = "✶", SEe = "𝔖", CEe = "𝔰", kEe = "⌢", PEe = "♯", AEe = "Щ", EEe = "щ", $Ee = "Ш", TEe = "ш", _Ee = "↓", MEe = "←", REe = "∣", DEe = "∥", LEe = "→", NEe = "↑", IEe = "­", QEe = "Σ", BEe = "σ", jEe = "ς", zEe = "ς", ZEe = "∼", FEe = "⩪", VEe = "≃", qEe = "≃", WEe = "⪞", XEe = "⪠", YEe = "⪝", HEe = "⪟", GEe = "≆", UEe = "⨤", KEe = "⥲", JEe = "←", e$e = "∘", t$e = "∖", n$e = "⨳", i$e = "⧤", s$e = "∣", r$e = "⌣", o$e = "⪪", l$e = "⪬", a$e = "⪬︀", c$e = "Ь", u$e = "ь", h$e = "⌿", f$e = "⧄", d$e = "/", p$e = "𝕊", g$e = "𝕤", m$e = "♠", b$e = "♠", v$e = "∥", y$e = "⊓", O$e = "⊓︀", w$e = "⊔", x$e = "⊔︀", S$e = "√", C$e = "⊏", k$e = "⊑", P$e = "⊏", A$e = "⊑", E$e = "⊐", $$e = "⊒", T$e = "⊐", _$e = "⊒", M$e = "□", R$e = "□", D$e = "⊓", L$e = "⊏", N$e = "⊑", I$e = "⊐", Q$e = "⊒", B$e = "⊔", j$e = "▪", z$e = "□", Z$e = "▪", F$e = "→", V$e = "𝒮", q$e = "𝓈", W$e = "∖", X$e = "⌣", Y$e = "⋆", H$e = "⋆", G$e = "☆", U$e = "★", K$e = "ϵ", J$e = "ϕ", eTe = "¯", tTe = "⊂", nTe = "⋐", iTe = "⪽", sTe = "⫅", rTe = "⊆", oTe = "⫃", lTe = "⫁", aTe = "⫋", cTe = "⊊", uTe = "⪿", hTe = "⥹", fTe = "⊂", dTe = "⋐", pTe = "⊆", gTe = "⫅", mTe = "⊆", bTe = "⊊", vTe = "⫋", yTe = "⫇", OTe = "⫕", wTe = "⫓", xTe = "⪸", STe = "≻", CTe = "≽", kTe = "≻", PTe = "⪰", ATe = "≽", ETe = "≿", $Te = "⪰", TTe = "⪺", _Te = "⪶", MTe = "⋩", RTe = "≿", DTe = "∋", LTe = "∑", NTe = "∑", ITe = "♪", QTe = "¹", BTe = "²", jTe = "³", zTe = "⊃", ZTe = "⋑", FTe = "⪾", VTe = "⫘", qTe = "⫆", WTe = "⊇", XTe = "⫄", YTe = "⊃", HTe = "⊇", GTe = "⟉", UTe = "⫗", KTe = "⥻", JTe = "⫂", e_e = "⫌", t_e = "⊋", n_e = "⫀", i_e = "⊃", s_e = "⋑", r_e = "⊇", o_e = "⫆", l_e = "⊋", a_e = "⫌", c_e = "⫈", u_e = "⫔", h_e = "⫖", f_e = "⤦", d_e = "↙", p_e = "⇙", g_e = "↙", m_e = "⤪", b_e = "ß", v_e = "	", y_e = "⌖", O_e = "Τ", w_e = "τ", x_e = "⎴", S_e = "Ť", C_e = "ť", k_e = "Ţ", P_e = "ţ", A_e = "Т", E_e = "т", $_e = "⃛", T_e = "⌕", __e = "𝔗", M_e = "𝔱", R_e = "∴", D_e = "∴", L_e = "∴", N_e = "Θ", I_e = "θ", Q_e = "ϑ", B_e = "ϑ", j_e = "≈", z_e = "∼", Z_e = "  ", F_e = " ", V_e = " ", q_e = "≈", W_e = "∼", X_e = "Þ", Y_e = "þ", H_e = "˜", G_e = "∼", U_e = "≃", K_e = "≅", J_e = "≈", eMe = "⨱", tMe = "⊠", nMe = "×", iMe = "⨰", sMe = "∭", rMe = "⤨", oMe = "⌶", lMe = "⫱", aMe = "⊤", cMe = "𝕋", uMe = "𝕥", hMe = "⫚", fMe = "⤩", dMe = "‴", pMe = "™", gMe = "™", mMe = "▵", bMe = "▿", vMe = "◃", yMe = "⊴", OMe = "≜", wMe = "▹", xMe = "⊵", SMe = "◬", CMe = "≜", kMe = "⨺", PMe = "⃛", AMe = "⨹", EMe = "⧍", $Me = "⨻", TMe = "⏢", _Me = "𝒯", MMe = "𝓉", RMe = "Ц", DMe = "ц", LMe = "Ћ", NMe = "ћ", IMe = "Ŧ", QMe = "ŧ", BMe = "≬", jMe = "↞", zMe = "↠", ZMe = "Ú", FMe = "ú", VMe = "↑", qMe = "↟", WMe = "⇑", XMe = "⥉", YMe = "Ў", HMe = "ў", GMe = "Ŭ", UMe = "ŭ", KMe = "Û", JMe = "û", eRe = "У", tRe = "у", nRe = "⇅", iRe = "Ű", sRe = "ű", rRe = "⥮", oRe = "⥾", lRe = "𝔘", aRe = "𝔲", cRe = "Ù", uRe = "ù", hRe = "⥣", fRe = "↿", dRe = "↾", pRe = "▀", gRe = "⌜", mRe = "⌜", bRe = "⌏", vRe = "◸", yRe = "Ū", ORe = "ū", wRe = "¨", xRe = "_", SRe = "⏟", CRe = "⎵", kRe = "⏝", PRe = "⋃", ARe = "⊎", ERe = "Ų", $Re = "ų", TRe = "𝕌", _Re = "𝕦", MRe = "⤒", RRe = "↑", DRe = "↑", LRe = "⇑", NRe = "⇅", IRe = "↕", QRe = "↕", BRe = "⇕", jRe = "⥮", zRe = "↿", ZRe = "↾", FRe = "⊎", VRe = "↖", qRe = "↗", WRe = "υ", XRe = "ϒ", YRe = "ϒ", HRe = "Υ", GRe = "υ", URe = "↥", KRe = "⊥", JRe = "⇈", eDe = "⌝", tDe = "⌝", nDe = "⌎", iDe = "Ů", sDe = "ů", rDe = "◹", oDe = "𝒰", lDe = "𝓊", aDe = "⋰", cDe = "Ũ", uDe = "ũ", hDe = "▵", fDe = "▴", dDe = "⇈", pDe = "Ü", gDe = "ü", mDe = "⦧", bDe = "⦜", vDe = "ϵ", yDe = "ϰ", ODe = "∅", wDe = "ϕ", xDe = "ϖ", SDe = "∝", CDe = "↕", kDe = "⇕", PDe = "ϱ", ADe = "ς", EDe = "⊊︀", $De = "⫋︀", TDe = "⊋︀", _De = "⫌︀", MDe = "ϑ", RDe = "⊲", DDe = "⊳", LDe = "⫨", NDe = "⫫", IDe = "⫩", QDe = "В", BDe = "в", jDe = "⊢", zDe = "⊨", ZDe = "⊩", FDe = "⊫", VDe = "⫦", qDe = "⊻", WDe = "∨", XDe = "⋁", YDe = "≚", HDe = "⋮", GDe = "|", UDe = "‖", KDe = "|", JDe = "‖", eLe = "∣", tLe = "|", nLe = "❘", iLe = "≀", sLe = " ", rLe = "𝔙", oLe = "𝔳", lLe = "⊲", aLe = "⊂⃒", cLe = "⊃⃒", uLe = "𝕍", hLe = "𝕧", fLe = "∝", dLe = "⊳", pLe = "𝒱", gLe = "𝓋", mLe = "⫋︀", bLe = "⊊︀", vLe = "⫌︀", yLe = "⊋︀", OLe = "⊪", wLe = "⦚", xLe = "Ŵ", SLe = "ŵ", CLe = "⩟", kLe = "∧", PLe = "⋀", ALe = "≙", ELe = "℘", $Le = "𝔚", TLe = "𝔴", _Le = "𝕎", MLe = "𝕨", RLe = "℘", DLe = "≀", LLe = "≀", NLe = "𝒲", ILe = "𝓌", QLe = "⋂", BLe = "◯", jLe = "⋃", zLe = "▽", ZLe = "𝔛", FLe = "𝔵", VLe = "⟷", qLe = "⟺", WLe = "Ξ", XLe = "ξ", YLe = "⟵", HLe = "⟸", GLe = "⟼", ULe = "⋻", KLe = "⨀", JLe = "𝕏", eNe = "𝕩", tNe = "⨁", nNe = "⨂", iNe = "⟶", sNe = "⟹", rNe = "𝒳", oNe = "𝓍", lNe = "⨆", aNe = "⨄", cNe = "△", uNe = "⋁", hNe = "⋀", fNe = "Ý", dNe = "ý", pNe = "Я", gNe = "я", mNe = "Ŷ", bNe = "ŷ", vNe = "Ы", yNe = "ы", ONe = "¥", wNe = "𝔜", xNe = "𝔶", SNe = "Ї", CNe = "ї", kNe = "𝕐", PNe = "𝕪", ANe = "𝒴", ENe = "𝓎", $Ne = "Ю", TNe = "ю", _Ne = "ÿ", MNe = "Ÿ", RNe = "Ź", DNe = "ź", LNe = "Ž", NNe = "ž", INe = "З", QNe = "з", BNe = "Ż", jNe = "ż", zNe = "ℨ", ZNe = "​", FNe = "Ζ", VNe = "ζ", qNe = "𝔷", WNe = "ℨ", XNe = "Ж", YNe = "ж", HNe = "⇝", GNe = "𝕫", UNe = "ℤ", KNe = "𝒵", JNe = "𝓏", e3e = "‍", t3e = "‌", n3e = {
  Aacute: Bee,
  aacute: jee,
  Abreve: zee,
  abreve: Zee,
  ac: Fee,
  acd: Vee,
  acE: qee,
  Acirc: Wee,
  acirc: Xee,
  acute: Yee,
  Acy: Hee,
  acy: Gee,
  AElig: Uee,
  aelig: Kee,
  af: Jee,
  Afr: ete,
  afr: tte,
  Agrave: nte,
  agrave: ite,
  alefsym: ste,
  aleph: rte,
  Alpha: ote,
  alpha: lte,
  Amacr: ate,
  amacr: cte,
  amalg: ute,
  amp: hte,
  AMP: fte,
  andand: dte,
  And: pte,
  and: gte,
  andd: mte,
  andslope: bte,
  andv: vte,
  ang: yte,
  ange: Ote,
  angle: wte,
  angmsdaa: xte,
  angmsdab: Ste,
  angmsdac: Cte,
  angmsdad: kte,
  angmsdae: Pte,
  angmsdaf: Ate,
  angmsdag: Ete,
  angmsdah: $te,
  angmsd: Tte,
  angrt: _te,
  angrtvb: Mte,
  angrtvbd: Rte,
  angsph: Dte,
  angst: Lte,
  angzarr: Nte,
  Aogon: Ite,
  aogon: Qte,
  Aopf: Bte,
  aopf: jte,
  apacir: zte,
  ap: Zte,
  apE: Fte,
  ape: Vte,
  apid: qte,
  apos: Wte,
  ApplyFunction: Xte,
  approx: Yte,
  approxeq: Hte,
  Aring: Gte,
  aring: Ute,
  Ascr: Kte,
  ascr: Jte,
  Assign: ene,
  ast: tne,
  asymp: nne,
  asympeq: ine,
  Atilde: sne,
  atilde: rne,
  Auml: one,
  auml: lne,
  awconint: ane,
  awint: cne,
  backcong: une,
  backepsilon: hne,
  backprime: fne,
  backsim: dne,
  backsimeq: pne,
  Backslash: gne,
  Barv: mne,
  barvee: bne,
  barwed: vne,
  Barwed: yne,
  barwedge: One,
  bbrk: wne,
  bbrktbrk: xne,
  bcong: Sne,
  Bcy: Cne,
  bcy: kne,
  bdquo: Pne,
  becaus: Ane,
  because: Ene,
  Because: $ne,
  bemptyv: Tne,
  bepsi: _ne,
  bernou: Mne,
  Bernoullis: Rne,
  Beta: Dne,
  beta: Lne,
  beth: Nne,
  between: Ine,
  Bfr: Qne,
  bfr: Bne,
  bigcap: jne,
  bigcirc: zne,
  bigcup: Zne,
  bigodot: Fne,
  bigoplus: Vne,
  bigotimes: qne,
  bigsqcup: Wne,
  bigstar: Xne,
  bigtriangledown: Yne,
  bigtriangleup: Hne,
  biguplus: Gne,
  bigvee: Une,
  bigwedge: Kne,
  bkarow: Jne,
  blacklozenge: eie,
  blacksquare: tie,
  blacktriangle: nie,
  blacktriangledown: iie,
  blacktriangleleft: sie,
  blacktriangleright: rie,
  blank: oie,
  blk12: lie,
  blk14: aie,
  blk34: cie,
  block: uie,
  bne: hie,
  bnequiv: fie,
  bNot: die,
  bnot: pie,
  Bopf: gie,
  bopf: mie,
  bot: bie,
  bottom: vie,
  bowtie: yie,
  boxbox: Oie,
  boxdl: wie,
  boxdL: xie,
  boxDl: Sie,
  boxDL: Cie,
  boxdr: kie,
  boxdR: Pie,
  boxDr: Aie,
  boxDR: Eie,
  boxh: $ie,
  boxH: Tie,
  boxhd: _ie,
  boxHd: Mie,
  boxhD: Rie,
  boxHD: Die,
  boxhu: Lie,
  boxHu: Nie,
  boxhU: Iie,
  boxHU: Qie,
  boxminus: Bie,
  boxplus: jie,
  boxtimes: zie,
  boxul: Zie,
  boxuL: Fie,
  boxUl: Vie,
  boxUL: qie,
  boxur: Wie,
  boxuR: Xie,
  boxUr: Yie,
  boxUR: Hie,
  boxv: Gie,
  boxV: Uie,
  boxvh: Kie,
  boxvH: Jie,
  boxVh: ese,
  boxVH: tse,
  boxvl: nse,
  boxvL: ise,
  boxVl: sse,
  boxVL: rse,
  boxvr: ose,
  boxvR: lse,
  boxVr: ase,
  boxVR: cse,
  bprime: use,
  breve: hse,
  Breve: fse,
  brvbar: dse,
  bscr: pse,
  Bscr: gse,
  bsemi: mse,
  bsim: bse,
  bsime: vse,
  bsolb: yse,
  bsol: Ose,
  bsolhsub: wse,
  bull: xse,
  bullet: Sse,
  bump: Cse,
  bumpE: kse,
  bumpe: Pse,
  Bumpeq: Ase,
  bumpeq: Ese,
  Cacute: $se,
  cacute: Tse,
  capand: _se,
  capbrcup: Mse,
  capcap: Rse,
  cap: Dse,
  Cap: Lse,
  capcup: Nse,
  capdot: Ise,
  CapitalDifferentialD: Qse,
  caps: Bse,
  caret: jse,
  caron: zse,
  Cayleys: Zse,
  ccaps: Fse,
  Ccaron: Vse,
  ccaron: qse,
  Ccedil: Wse,
  ccedil: Xse,
  Ccirc: Yse,
  ccirc: Hse,
  Cconint: Gse,
  ccups: Use,
  ccupssm: Kse,
  Cdot: Jse,
  cdot: ere,
  cedil: tre,
  Cedilla: nre,
  cemptyv: ire,
  cent: sre,
  centerdot: rre,
  CenterDot: ore,
  cfr: lre,
  Cfr: are,
  CHcy: cre,
  chcy: ure,
  check: hre,
  checkmark: fre,
  Chi: dre,
  chi: pre,
  circ: gre,
  circeq: mre,
  circlearrowleft: bre,
  circlearrowright: vre,
  circledast: yre,
  circledcirc: Ore,
  circleddash: wre,
  CircleDot: xre,
  circledR: Sre,
  circledS: Cre,
  CircleMinus: kre,
  CirclePlus: Pre,
  CircleTimes: Are,
  cir: Ere,
  cirE: $re,
  cire: Tre,
  cirfnint: _re,
  cirmid: Mre,
  cirscir: Rre,
  ClockwiseContourIntegral: Dre,
  CloseCurlyDoubleQuote: Lre,
  CloseCurlyQuote: Nre,
  clubs: Ire,
  clubsuit: Qre,
  colon: Bre,
  Colon: jre,
  Colone: zre,
  colone: Zre,
  coloneq: Fre,
  comma: Vre,
  commat: qre,
  comp: Wre,
  compfn: Xre,
  complement: Yre,
  complexes: Hre,
  cong: Gre,
  congdot: Ure,
  Congruent: Kre,
  conint: Jre,
  Conint: eoe,
  ContourIntegral: toe,
  copf: noe,
  Copf: ioe,
  coprod: soe,
  Coproduct: roe,
  copy: ooe,
  COPY: loe,
  copysr: aoe,
  CounterClockwiseContourIntegral: coe,
  crarr: uoe,
  cross: hoe,
  Cross: foe,
  Cscr: doe,
  cscr: poe,
  csub: goe,
  csube: moe,
  csup: boe,
  csupe: voe,
  ctdot: yoe,
  cudarrl: Ooe,
  cudarrr: woe,
  cuepr: xoe,
  cuesc: Soe,
  cularr: Coe,
  cularrp: koe,
  cupbrcap: Poe,
  cupcap: Aoe,
  CupCap: Eoe,
  cup: $oe,
  Cup: Toe,
  cupcup: _oe,
  cupdot: Moe,
  cupor: Roe,
  cups: Doe,
  curarr: Loe,
  curarrm: Noe,
  curlyeqprec: Ioe,
  curlyeqsucc: Qoe,
  curlyvee: Boe,
  curlywedge: joe,
  curren: zoe,
  curvearrowleft: Zoe,
  curvearrowright: Foe,
  cuvee: Voe,
  cuwed: qoe,
  cwconint: Woe,
  cwint: Xoe,
  cylcty: Yoe,
  dagger: Hoe,
  Dagger: Goe,
  daleth: Uoe,
  darr: Koe,
  Darr: Joe,
  dArr: ele,
  dash: tle,
  Dashv: nle,
  dashv: ile,
  dbkarow: sle,
  dblac: rle,
  Dcaron: ole,
  dcaron: lle,
  Dcy: ale,
  dcy: cle,
  ddagger: ule,
  ddarr: hle,
  DD: fle,
  dd: dle,
  DDotrahd: ple,
  ddotseq: gle,
  deg: mle,
  Del: ble,
  Delta: vle,
  delta: yle,
  demptyv: Ole,
  dfisht: wle,
  Dfr: xle,
  dfr: Sle,
  dHar: Cle,
  dharl: kle,
  dharr: Ple,
  DiacriticalAcute: Ale,
  DiacriticalDot: Ele,
  DiacriticalDoubleAcute: $le,
  DiacriticalGrave: Tle,
  DiacriticalTilde: _le,
  diam: Mle,
  diamond: Rle,
  Diamond: Dle,
  diamondsuit: Lle,
  diams: Nle,
  die: Ile,
  DifferentialD: Qle,
  digamma: Ble,
  disin: jle,
  div: zle,
  divide: Zle,
  divideontimes: Fle,
  divonx: Vle,
  DJcy: qle,
  djcy: Wle,
  dlcorn: Xle,
  dlcrop: Yle,
  dollar: Hle,
  Dopf: Gle,
  dopf: Ule,
  Dot: Kle,
  dot: Jle,
  DotDot: eae,
  doteq: tae,
  doteqdot: nae,
  DotEqual: iae,
  dotminus: sae,
  dotplus: rae,
  dotsquare: oae,
  doublebarwedge: lae,
  DoubleContourIntegral: aae,
  DoubleDot: cae,
  DoubleDownArrow: uae,
  DoubleLeftArrow: hae,
  DoubleLeftRightArrow: fae,
  DoubleLeftTee: dae,
  DoubleLongLeftArrow: pae,
  DoubleLongLeftRightArrow: gae,
  DoubleLongRightArrow: mae,
  DoubleRightArrow: bae,
  DoubleRightTee: vae,
  DoubleUpArrow: yae,
  DoubleUpDownArrow: Oae,
  DoubleVerticalBar: wae,
  DownArrowBar: xae,
  downarrow: Sae,
  DownArrow: Cae,
  Downarrow: kae,
  DownArrowUpArrow: Pae,
  DownBreve: Aae,
  downdownarrows: Eae,
  downharpoonleft: $ae,
  downharpoonright: Tae,
  DownLeftRightVector: _ae,
  DownLeftTeeVector: Mae,
  DownLeftVectorBar: Rae,
  DownLeftVector: Dae,
  DownRightTeeVector: Lae,
  DownRightVectorBar: Nae,
  DownRightVector: Iae,
  DownTeeArrow: Qae,
  DownTee: Bae,
  drbkarow: jae,
  drcorn: zae,
  drcrop: Zae,
  Dscr: Fae,
  dscr: Vae,
  DScy: qae,
  dscy: Wae,
  dsol: Xae,
  Dstrok: Yae,
  dstrok: Hae,
  dtdot: Gae,
  dtri: Uae,
  dtrif: Kae,
  duarr: Jae,
  duhar: ece,
  dwangle: tce,
  DZcy: nce,
  dzcy: ice,
  dzigrarr: sce,
  Eacute: rce,
  eacute: oce,
  easter: lce,
  Ecaron: ace,
  ecaron: cce,
  Ecirc: uce,
  ecirc: hce,
  ecir: fce,
  ecolon: dce,
  Ecy: pce,
  ecy: gce,
  eDDot: mce,
  Edot: bce,
  edot: vce,
  eDot: yce,
  ee: Oce,
  efDot: wce,
  Efr: xce,
  efr: Sce,
  eg: Cce,
  Egrave: kce,
  egrave: Pce,
  egs: Ace,
  egsdot: Ece,
  el: $ce,
  Element: Tce,
  elinters: _ce,
  ell: Mce,
  els: Rce,
  elsdot: Dce,
  Emacr: Lce,
  emacr: Nce,
  empty: Ice,
  emptyset: Qce,
  EmptySmallSquare: Bce,
  emptyv: jce,
  EmptyVerySmallSquare: zce,
  emsp13: Zce,
  emsp14: Fce,
  emsp: Vce,
  ENG: qce,
  eng: Wce,
  ensp: Xce,
  Eogon: Yce,
  eogon: Hce,
  Eopf: Gce,
  eopf: Uce,
  epar: Kce,
  eparsl: Jce,
  eplus: eue,
  epsi: tue,
  Epsilon: nue,
  epsilon: iue,
  epsiv: sue,
  eqcirc: rue,
  eqcolon: oue,
  eqsim: lue,
  eqslantgtr: aue,
  eqslantless: cue,
  Equal: uue,
  equals: hue,
  EqualTilde: fue,
  equest: due,
  Equilibrium: pue,
  equiv: gue,
  equivDD: mue,
  eqvparsl: bue,
  erarr: vue,
  erDot: yue,
  escr: Oue,
  Escr: wue,
  esdot: xue,
  Esim: Sue,
  esim: Cue,
  Eta: kue,
  eta: Pue,
  ETH: Aue,
  eth: Eue,
  Euml: $ue,
  euml: Tue,
  euro: _ue,
  excl: Mue,
  exist: Rue,
  Exists: Due,
  expectation: Lue,
  exponentiale: Nue,
  ExponentialE: Iue,
  fallingdotseq: Que,
  Fcy: Bue,
  fcy: jue,
  female: zue,
  ffilig: Zue,
  fflig: Fue,
  ffllig: Vue,
  Ffr: que,
  ffr: Wue,
  filig: Xue,
  FilledSmallSquare: Yue,
  FilledVerySmallSquare: Hue,
  fjlig: Gue,
  flat: Uue,
  fllig: Kue,
  fltns: Jue,
  fnof: ehe,
  Fopf: the,
  fopf: nhe,
  forall: ihe,
  ForAll: she,
  fork: rhe,
  forkv: ohe,
  Fouriertrf: lhe,
  fpartint: ahe,
  frac12: che,
  frac13: uhe,
  frac14: hhe,
  frac15: fhe,
  frac16: dhe,
  frac18: phe,
  frac23: ghe,
  frac25: mhe,
  frac34: bhe,
  frac35: vhe,
  frac38: yhe,
  frac45: Ohe,
  frac56: whe,
  frac58: xhe,
  frac78: She,
  frasl: Che,
  frown: khe,
  fscr: Phe,
  Fscr: Ahe,
  gacute: Ehe,
  Gamma: $he,
  gamma: The,
  Gammad: _he,
  gammad: Mhe,
  gap: Rhe,
  Gbreve: Dhe,
  gbreve: Lhe,
  Gcedil: Nhe,
  Gcirc: Ihe,
  gcirc: Qhe,
  Gcy: Bhe,
  gcy: jhe,
  Gdot: zhe,
  gdot: Zhe,
  ge: Fhe,
  gE: Vhe,
  gEl: qhe,
  gel: Whe,
  geq: Xhe,
  geqq: Yhe,
  geqslant: Hhe,
  gescc: Ghe,
  ges: Uhe,
  gesdot: Khe,
  gesdoto: Jhe,
  gesdotol: efe,
  gesl: tfe,
  gesles: nfe,
  Gfr: ife,
  gfr: sfe,
  gg: rfe,
  Gg: ofe,
  ggg: lfe,
  gimel: afe,
  GJcy: cfe,
  gjcy: ufe,
  gla: hfe,
  gl: ffe,
  glE: dfe,
  glj: pfe,
  gnap: gfe,
  gnapprox: mfe,
  gne: bfe,
  gnE: vfe,
  gneq: yfe,
  gneqq: Ofe,
  gnsim: wfe,
  Gopf: xfe,
  gopf: Sfe,
  grave: Cfe,
  GreaterEqual: kfe,
  GreaterEqualLess: Pfe,
  GreaterFullEqual: Afe,
  GreaterGreater: Efe,
  GreaterLess: $fe,
  GreaterSlantEqual: Tfe,
  GreaterTilde: _fe,
  Gscr: Mfe,
  gscr: Rfe,
  gsim: Dfe,
  gsime: Lfe,
  gsiml: Nfe,
  gtcc: Ife,
  gtcir: Qfe,
  gt: Bfe,
  GT: jfe,
  Gt: zfe,
  gtdot: Zfe,
  gtlPar: Ffe,
  gtquest: Vfe,
  gtrapprox: qfe,
  gtrarr: Wfe,
  gtrdot: Xfe,
  gtreqless: Yfe,
  gtreqqless: Hfe,
  gtrless: Gfe,
  gtrsim: Ufe,
  gvertneqq: Kfe,
  gvnE: Jfe,
  Hacek: ede,
  hairsp: tde,
  half: nde,
  hamilt: ide,
  HARDcy: sde,
  hardcy: rde,
  harrcir: ode,
  harr: lde,
  hArr: ade,
  harrw: cde,
  Hat: ude,
  hbar: hde,
  Hcirc: fde,
  hcirc: dde,
  hearts: pde,
  heartsuit: gde,
  hellip: mde,
  hercon: bde,
  hfr: vde,
  Hfr: yde,
  HilbertSpace: Ode,
  hksearow: wde,
  hkswarow: xde,
  hoarr: Sde,
  homtht: Cde,
  hookleftarrow: kde,
  hookrightarrow: Pde,
  hopf: Ade,
  Hopf: Ede,
  horbar: $de,
  HorizontalLine: Tde,
  hscr: _de,
  Hscr: Mde,
  hslash: Rde,
  Hstrok: Dde,
  hstrok: Lde,
  HumpDownHump: Nde,
  HumpEqual: Ide,
  hybull: Qde,
  hyphen: Bde,
  Iacute: jde,
  iacute: zde,
  ic: Zde,
  Icirc: Fde,
  icirc: Vde,
  Icy: qde,
  icy: Wde,
  Idot: Xde,
  IEcy: Yde,
  iecy: Hde,
  iexcl: Gde,
  iff: Ude,
  ifr: Kde,
  Ifr: Jde,
  Igrave: epe,
  igrave: tpe,
  ii: npe,
  iiiint: ipe,
  iiint: spe,
  iinfin: rpe,
  iiota: ope,
  IJlig: lpe,
  ijlig: ape,
  Imacr: cpe,
  imacr: upe,
  image: hpe,
  ImaginaryI: fpe,
  imagline: dpe,
  imagpart: ppe,
  imath: gpe,
  Im: mpe,
  imof: bpe,
  imped: vpe,
  Implies: ype,
  incare: Ope,
  in: "∈",
  infin: wpe,
  infintie: xpe,
  inodot: Spe,
  intcal: Cpe,
  int: kpe,
  Int: Ppe,
  integers: Ape,
  Integral: Epe,
  intercal: $pe,
  Intersection: Tpe,
  intlarhk: _pe,
  intprod: Mpe,
  InvisibleComma: Rpe,
  InvisibleTimes: Dpe,
  IOcy: Lpe,
  iocy: Npe,
  Iogon: Ipe,
  iogon: Qpe,
  Iopf: Bpe,
  iopf: jpe,
  Iota: zpe,
  iota: Zpe,
  iprod: Fpe,
  iquest: Vpe,
  iscr: qpe,
  Iscr: Wpe,
  isin: Xpe,
  isindot: Ype,
  isinE: Hpe,
  isins: Gpe,
  isinsv: Upe,
  isinv: Kpe,
  it: Jpe,
  Itilde: ege,
  itilde: tge,
  Iukcy: nge,
  iukcy: ige,
  Iuml: sge,
  iuml: rge,
  Jcirc: oge,
  jcirc: lge,
  Jcy: age,
  jcy: cge,
  Jfr: uge,
  jfr: hge,
  jmath: fge,
  Jopf: dge,
  jopf: pge,
  Jscr: gge,
  jscr: mge,
  Jsercy: bge,
  jsercy: vge,
  Jukcy: yge,
  jukcy: Oge,
  Kappa: wge,
  kappa: xge,
  kappav: Sge,
  Kcedil: Cge,
  kcedil: kge,
  Kcy: Pge,
  kcy: Age,
  Kfr: Ege,
  kfr: $ge,
  kgreen: Tge,
  KHcy: _ge,
  khcy: Mge,
  KJcy: Rge,
  kjcy: Dge,
  Kopf: Lge,
  kopf: Nge,
  Kscr: Ige,
  kscr: Qge,
  lAarr: Bge,
  Lacute: jge,
  lacute: zge,
  laemptyv: Zge,
  lagran: Fge,
  Lambda: Vge,
  lambda: qge,
  lang: Wge,
  Lang: Xge,
  langd: Yge,
  langle: Hge,
  lap: Gge,
  Laplacetrf: Uge,
  laquo: Kge,
  larrb: Jge,
  larrbfs: eme,
  larr: tme,
  Larr: nme,
  lArr: ime,
  larrfs: sme,
  larrhk: rme,
  larrlp: ome,
  larrpl: lme,
  larrsim: ame,
  larrtl: cme,
  latail: ume,
  lAtail: hme,
  lat: fme,
  late: dme,
  lates: pme,
  lbarr: gme,
  lBarr: mme,
  lbbrk: bme,
  lbrace: vme,
  lbrack: yme,
  lbrke: Ome,
  lbrksld: wme,
  lbrkslu: xme,
  Lcaron: Sme,
  lcaron: Cme,
  Lcedil: kme,
  lcedil: Pme,
  lceil: Ame,
  lcub: Eme,
  Lcy: $me,
  lcy: Tme,
  ldca: _me,
  ldquo: Mme,
  ldquor: Rme,
  ldrdhar: Dme,
  ldrushar: Lme,
  ldsh: Nme,
  le: Ime,
  lE: Qme,
  LeftAngleBracket: Bme,
  LeftArrowBar: jme,
  leftarrow: zme,
  LeftArrow: Zme,
  Leftarrow: Fme,
  LeftArrowRightArrow: Vme,
  leftarrowtail: qme,
  LeftCeiling: Wme,
  LeftDoubleBracket: Xme,
  LeftDownTeeVector: Yme,
  LeftDownVectorBar: Hme,
  LeftDownVector: Gme,
  LeftFloor: Ume,
  leftharpoondown: Kme,
  leftharpoonup: Jme,
  leftleftarrows: e0e,
  leftrightarrow: t0e,
  LeftRightArrow: n0e,
  Leftrightarrow: i0e,
  leftrightarrows: s0e,
  leftrightharpoons: r0e,
  leftrightsquigarrow: o0e,
  LeftRightVector: l0e,
  LeftTeeArrow: a0e,
  LeftTee: c0e,
  LeftTeeVector: u0e,
  leftthreetimes: h0e,
  LeftTriangleBar: f0e,
  LeftTriangle: d0e,
  LeftTriangleEqual: p0e,
  LeftUpDownVector: g0e,
  LeftUpTeeVector: m0e,
  LeftUpVectorBar: b0e,
  LeftUpVector: v0e,
  LeftVectorBar: y0e,
  LeftVector: O0e,
  lEg: w0e,
  leg: x0e,
  leq: S0e,
  leqq: C0e,
  leqslant: k0e,
  lescc: P0e,
  les: A0e,
  lesdot: E0e,
  lesdoto: $0e,
  lesdotor: T0e,
  lesg: _0e,
  lesges: M0e,
  lessapprox: R0e,
  lessdot: D0e,
  lesseqgtr: L0e,
  lesseqqgtr: N0e,
  LessEqualGreater: I0e,
  LessFullEqual: Q0e,
  LessGreater: B0e,
  lessgtr: j0e,
  LessLess: z0e,
  lesssim: Z0e,
  LessSlantEqual: F0e,
  LessTilde: V0e,
  lfisht: q0e,
  lfloor: W0e,
  Lfr: X0e,
  lfr: Y0e,
  lg: H0e,
  lgE: G0e,
  lHar: U0e,
  lhard: K0e,
  lharu: J0e,
  lharul: ebe,
  lhblk: tbe,
  LJcy: nbe,
  ljcy: ibe,
  llarr: sbe,
  ll: rbe,
  Ll: obe,
  llcorner: lbe,
  Lleftarrow: abe,
  llhard: cbe,
  lltri: ube,
  Lmidot: hbe,
  lmidot: fbe,
  lmoustache: dbe,
  lmoust: pbe,
  lnap: gbe,
  lnapprox: mbe,
  lne: bbe,
  lnE: vbe,
  lneq: ybe,
  lneqq: Obe,
  lnsim: wbe,
  loang: xbe,
  loarr: Sbe,
  lobrk: Cbe,
  longleftarrow: kbe,
  LongLeftArrow: Pbe,
  Longleftarrow: Abe,
  longleftrightarrow: Ebe,
  LongLeftRightArrow: $be,
  Longleftrightarrow: Tbe,
  longmapsto: _be,
  longrightarrow: Mbe,
  LongRightArrow: Rbe,
  Longrightarrow: Dbe,
  looparrowleft: Lbe,
  looparrowright: Nbe,
  lopar: Ibe,
  Lopf: Qbe,
  lopf: Bbe,
  loplus: jbe,
  lotimes: zbe,
  lowast: Zbe,
  lowbar: Fbe,
  LowerLeftArrow: Vbe,
  LowerRightArrow: qbe,
  loz: Wbe,
  lozenge: Xbe,
  lozf: Ybe,
  lpar: Hbe,
  lparlt: Gbe,
  lrarr: Ube,
  lrcorner: Kbe,
  lrhar: Jbe,
  lrhard: eve,
  lrm: tve,
  lrtri: nve,
  lsaquo: ive,
  lscr: sve,
  Lscr: rve,
  lsh: ove,
  Lsh: lve,
  lsim: ave,
  lsime: cve,
  lsimg: uve,
  lsqb: hve,
  lsquo: fve,
  lsquor: dve,
  Lstrok: pve,
  lstrok: gve,
  ltcc: mve,
  ltcir: bve,
  lt: vve,
  LT: yve,
  Lt: Ove,
  ltdot: wve,
  lthree: xve,
  ltimes: Sve,
  ltlarr: Cve,
  ltquest: kve,
  ltri: Pve,
  ltrie: Ave,
  ltrif: Eve,
  ltrPar: $ve,
  lurdshar: Tve,
  luruhar: _ve,
  lvertneqq: Mve,
  lvnE: Rve,
  macr: Dve,
  male: Lve,
  malt: Nve,
  maltese: Ive,
  Map: "⤅",
  map: Qve,
  mapsto: Bve,
  mapstodown: jve,
  mapstoleft: zve,
  mapstoup: Zve,
  marker: Fve,
  mcomma: Vve,
  Mcy: qve,
  mcy: Wve,
  mdash: Xve,
  mDDot: Yve,
  measuredangle: Hve,
  MediumSpace: Gve,
  Mellintrf: Uve,
  Mfr: Kve,
  mfr: Jve,
  mho: eye,
  micro: tye,
  midast: nye,
  midcir: iye,
  mid: sye,
  middot: rye,
  minusb: oye,
  minus: lye,
  minusd: aye,
  minusdu: cye,
  MinusPlus: uye,
  mlcp: hye,
  mldr: fye,
  mnplus: dye,
  models: pye,
  Mopf: gye,
  mopf: mye,
  mp: bye,
  mscr: vye,
  Mscr: yye,
  mstpos: Oye,
  Mu: wye,
  mu: xye,
  multimap: Sye,
  mumap: Cye,
  nabla: kye,
  Nacute: Pye,
  nacute: Aye,
  nang: Eye,
  nap: $ye,
  napE: Tye,
  napid: _ye,
  napos: Mye,
  napprox: Rye,
  natural: Dye,
  naturals: Lye,
  natur: Nye,
  nbsp: Iye,
  nbump: Qye,
  nbumpe: Bye,
  ncap: jye,
  Ncaron: zye,
  ncaron: Zye,
  Ncedil: Fye,
  ncedil: Vye,
  ncong: qye,
  ncongdot: Wye,
  ncup: Xye,
  Ncy: Yye,
  ncy: Hye,
  ndash: Gye,
  nearhk: Uye,
  nearr: Kye,
  neArr: Jye,
  nearrow: eOe,
  ne: tOe,
  nedot: nOe,
  NegativeMediumSpace: iOe,
  NegativeThickSpace: sOe,
  NegativeThinSpace: rOe,
  NegativeVeryThinSpace: oOe,
  nequiv: lOe,
  nesear: aOe,
  nesim: cOe,
  NestedGreaterGreater: uOe,
  NestedLessLess: hOe,
  NewLine: fOe,
  nexist: dOe,
  nexists: pOe,
  Nfr: gOe,
  nfr: mOe,
  ngE: bOe,
  nge: vOe,
  ngeq: yOe,
  ngeqq: OOe,
  ngeqslant: wOe,
  nges: xOe,
  nGg: SOe,
  ngsim: COe,
  nGt: kOe,
  ngt: POe,
  ngtr: AOe,
  nGtv: EOe,
  nharr: $Oe,
  nhArr: TOe,
  nhpar: _Oe,
  ni: MOe,
  nis: ROe,
  nisd: DOe,
  niv: LOe,
  NJcy: NOe,
  njcy: IOe,
  nlarr: QOe,
  nlArr: BOe,
  nldr: jOe,
  nlE: zOe,
  nle: ZOe,
  nleftarrow: FOe,
  nLeftarrow: VOe,
  nleftrightarrow: qOe,
  nLeftrightarrow: WOe,
  nleq: XOe,
  nleqq: YOe,
  nleqslant: HOe,
  nles: GOe,
  nless: UOe,
  nLl: KOe,
  nlsim: JOe,
  nLt: e1e,
  nlt: t1e,
  nltri: n1e,
  nltrie: i1e,
  nLtv: s1e,
  nmid: r1e,
  NoBreak: o1e,
  NonBreakingSpace: l1e,
  nopf: a1e,
  Nopf: c1e,
  Not: u1e,
  not: h1e,
  NotCongruent: f1e,
  NotCupCap: d1e,
  NotDoubleVerticalBar: p1e,
  NotElement: g1e,
  NotEqual: m1e,
  NotEqualTilde: b1e,
  NotExists: v1e,
  NotGreater: y1e,
  NotGreaterEqual: O1e,
  NotGreaterFullEqual: w1e,
  NotGreaterGreater: x1e,
  NotGreaterLess: S1e,
  NotGreaterSlantEqual: C1e,
  NotGreaterTilde: k1e,
  NotHumpDownHump: P1e,
  NotHumpEqual: A1e,
  notin: E1e,
  notindot: $1e,
  notinE: T1e,
  notinva: _1e,
  notinvb: M1e,
  notinvc: R1e,
  NotLeftTriangleBar: D1e,
  NotLeftTriangle: L1e,
  NotLeftTriangleEqual: N1e,
  NotLess: I1e,
  NotLessEqual: Q1e,
  NotLessGreater: B1e,
  NotLessLess: j1e,
  NotLessSlantEqual: z1e,
  NotLessTilde: Z1e,
  NotNestedGreaterGreater: F1e,
  NotNestedLessLess: V1e,
  notni: q1e,
  notniva: W1e,
  notnivb: X1e,
  notnivc: Y1e,
  NotPrecedes: H1e,
  NotPrecedesEqual: G1e,
  NotPrecedesSlantEqual: U1e,
  NotReverseElement: K1e,
  NotRightTriangleBar: J1e,
  NotRightTriangle: ewe,
  NotRightTriangleEqual: twe,
  NotSquareSubset: nwe,
  NotSquareSubsetEqual: iwe,
  NotSquareSuperset: swe,
  NotSquareSupersetEqual: rwe,
  NotSubset: owe,
  NotSubsetEqual: lwe,
  NotSucceeds: awe,
  NotSucceedsEqual: cwe,
  NotSucceedsSlantEqual: uwe,
  NotSucceedsTilde: hwe,
  NotSuperset: fwe,
  NotSupersetEqual: dwe,
  NotTilde: pwe,
  NotTildeEqual: gwe,
  NotTildeFullEqual: mwe,
  NotTildeTilde: bwe,
  NotVerticalBar: vwe,
  nparallel: ywe,
  npar: Owe,
  nparsl: wwe,
  npart: xwe,
  npolint: Swe,
  npr: Cwe,
  nprcue: kwe,
  nprec: Pwe,
  npreceq: Awe,
  npre: Ewe,
  nrarrc: $we,
  nrarr: Twe,
  nrArr: _we,
  nrarrw: Mwe,
  nrightarrow: Rwe,
  nRightarrow: Dwe,
  nrtri: Lwe,
  nrtrie: Nwe,
  nsc: Iwe,
  nsccue: Qwe,
  nsce: Bwe,
  Nscr: jwe,
  nscr: zwe,
  nshortmid: Zwe,
  nshortparallel: Fwe,
  nsim: Vwe,
  nsime: qwe,
  nsimeq: Wwe,
  nsmid: Xwe,
  nspar: Ywe,
  nsqsube: Hwe,
  nsqsupe: Gwe,
  nsub: Uwe,
  nsubE: Kwe,
  nsube: Jwe,
  nsubset: exe,
  nsubseteq: txe,
  nsubseteqq: nxe,
  nsucc: ixe,
  nsucceq: sxe,
  nsup: rxe,
  nsupE: oxe,
  nsupe: lxe,
  nsupset: axe,
  nsupseteq: cxe,
  nsupseteqq: uxe,
  ntgl: hxe,
  Ntilde: fxe,
  ntilde: dxe,
  ntlg: pxe,
  ntriangleleft: gxe,
  ntrianglelefteq: mxe,
  ntriangleright: bxe,
  ntrianglerighteq: vxe,
  Nu: yxe,
  nu: Oxe,
  num: wxe,
  numero: xxe,
  numsp: Sxe,
  nvap: Cxe,
  nvdash: kxe,
  nvDash: Pxe,
  nVdash: Axe,
  nVDash: Exe,
  nvge: $xe,
  nvgt: Txe,
  nvHarr: _xe,
  nvinfin: Mxe,
  nvlArr: Rxe,
  nvle: Dxe,
  nvlt: Lxe,
  nvltrie: Nxe,
  nvrArr: Ixe,
  nvrtrie: Qxe,
  nvsim: Bxe,
  nwarhk: jxe,
  nwarr: zxe,
  nwArr: Zxe,
  nwarrow: Fxe,
  nwnear: Vxe,
  Oacute: qxe,
  oacute: Wxe,
  oast: Xxe,
  Ocirc: Yxe,
  ocirc: Hxe,
  ocir: Gxe,
  Ocy: Uxe,
  ocy: Kxe,
  odash: Jxe,
  Odblac: eSe,
  odblac: tSe,
  odiv: nSe,
  odot: iSe,
  odsold: sSe,
  OElig: rSe,
  oelig: oSe,
  ofcir: lSe,
  Ofr: aSe,
  ofr: cSe,
  ogon: uSe,
  Ograve: hSe,
  ograve: fSe,
  ogt: dSe,
  ohbar: pSe,
  ohm: gSe,
  oint: mSe,
  olarr: bSe,
  olcir: vSe,
  olcross: ySe,
  oline: OSe,
  olt: wSe,
  Omacr: xSe,
  omacr: SSe,
  Omega: CSe,
  omega: kSe,
  Omicron: PSe,
  omicron: ASe,
  omid: ESe,
  ominus: $Se,
  Oopf: TSe,
  oopf: _Se,
  opar: MSe,
  OpenCurlyDoubleQuote: RSe,
  OpenCurlyQuote: DSe,
  operp: LSe,
  oplus: NSe,
  orarr: ISe,
  Or: QSe,
  or: BSe,
  ord: jSe,
  order: zSe,
  orderof: ZSe,
  ordf: FSe,
  ordm: VSe,
  origof: qSe,
  oror: WSe,
  orslope: XSe,
  orv: YSe,
  oS: HSe,
  Oscr: GSe,
  oscr: USe,
  Oslash: KSe,
  oslash: JSe,
  osol: eCe,
  Otilde: tCe,
  otilde: nCe,
  otimesas: iCe,
  Otimes: sCe,
  otimes: rCe,
  Ouml: oCe,
  ouml: lCe,
  ovbar: aCe,
  OverBar: cCe,
  OverBrace: uCe,
  OverBracket: hCe,
  OverParenthesis: fCe,
  para: dCe,
  parallel: pCe,
  par: gCe,
  parsim: mCe,
  parsl: bCe,
  part: vCe,
  PartialD: yCe,
  Pcy: OCe,
  pcy: wCe,
  percnt: xCe,
  period: SCe,
  permil: CCe,
  perp: kCe,
  pertenk: PCe,
  Pfr: ACe,
  pfr: ECe,
  Phi: $Ce,
  phi: TCe,
  phiv: _Ce,
  phmmat: MCe,
  phone: RCe,
  Pi: DCe,
  pi: LCe,
  pitchfork: NCe,
  piv: ICe,
  planck: QCe,
  planckh: BCe,
  plankv: jCe,
  plusacir: zCe,
  plusb: ZCe,
  pluscir: FCe,
  plus: VCe,
  plusdo: qCe,
  plusdu: WCe,
  pluse: XCe,
  PlusMinus: YCe,
  plusmn: HCe,
  plussim: GCe,
  plustwo: UCe,
  pm: KCe,
  Poincareplane: JCe,
  pointint: eke,
  popf: tke,
  Popf: nke,
  pound: ike,
  prap: ske,
  Pr: rke,
  pr: oke,
  prcue: lke,
  precapprox: ake,
  prec: cke,
  preccurlyeq: uke,
  Precedes: hke,
  PrecedesEqual: fke,
  PrecedesSlantEqual: dke,
  PrecedesTilde: pke,
  preceq: gke,
  precnapprox: mke,
  precneqq: bke,
  precnsim: vke,
  pre: yke,
  prE: Oke,
  precsim: wke,
  prime: xke,
  Prime: Ske,
  primes: Cke,
  prnap: kke,
  prnE: Pke,
  prnsim: Ake,
  prod: Eke,
  Product: $ke,
  profalar: Tke,
  profline: _ke,
  profsurf: Mke,
  prop: Rke,
  Proportional: Dke,
  Proportion: Lke,
  propto: Nke,
  prsim: Ike,
  prurel: Qke,
  Pscr: Bke,
  pscr: jke,
  Psi: zke,
  psi: Zke,
  puncsp: Fke,
  Qfr: Vke,
  qfr: qke,
  qint: Wke,
  qopf: Xke,
  Qopf: Yke,
  qprime: Hke,
  Qscr: Gke,
  qscr: Uke,
  quaternions: Kke,
  quatint: Jke,
  quest: e2e,
  questeq: t2e,
  quot: n2e,
  QUOT: i2e,
  rAarr: s2e,
  race: r2e,
  Racute: o2e,
  racute: l2e,
  radic: a2e,
  raemptyv: c2e,
  rang: u2e,
  Rang: h2e,
  rangd: f2e,
  range: d2e,
  rangle: p2e,
  raquo: g2e,
  rarrap: m2e,
  rarrb: b2e,
  rarrbfs: v2e,
  rarrc: y2e,
  rarr: O2e,
  Rarr: w2e,
  rArr: x2e,
  rarrfs: S2e,
  rarrhk: C2e,
  rarrlp: k2e,
  rarrpl: P2e,
  rarrsim: A2e,
  Rarrtl: E2e,
  rarrtl: $2e,
  rarrw: T2e,
  ratail: _2e,
  rAtail: M2e,
  ratio: R2e,
  rationals: D2e,
  rbarr: L2e,
  rBarr: N2e,
  RBarr: I2e,
  rbbrk: Q2e,
  rbrace: B2e,
  rbrack: j2e,
  rbrke: z2e,
  rbrksld: Z2e,
  rbrkslu: F2e,
  Rcaron: V2e,
  rcaron: q2e,
  Rcedil: W2e,
  rcedil: X2e,
  rceil: Y2e,
  rcub: H2e,
  Rcy: G2e,
  rcy: U2e,
  rdca: K2e,
  rdldhar: J2e,
  rdquo: ePe,
  rdquor: tPe,
  rdsh: nPe,
  real: iPe,
  realine: sPe,
  realpart: rPe,
  reals: oPe,
  Re: lPe,
  rect: aPe,
  reg: cPe,
  REG: uPe,
  ReverseElement: hPe,
  ReverseEquilibrium: fPe,
  ReverseUpEquilibrium: dPe,
  rfisht: pPe,
  rfloor: gPe,
  rfr: mPe,
  Rfr: bPe,
  rHar: vPe,
  rhard: yPe,
  rharu: OPe,
  rharul: wPe,
  Rho: xPe,
  rho: SPe,
  rhov: CPe,
  RightAngleBracket: kPe,
  RightArrowBar: PPe,
  rightarrow: APe,
  RightArrow: EPe,
  Rightarrow: $Pe,
  RightArrowLeftArrow: TPe,
  rightarrowtail: _Pe,
  RightCeiling: MPe,
  RightDoubleBracket: RPe,
  RightDownTeeVector: DPe,
  RightDownVectorBar: LPe,
  RightDownVector: NPe,
  RightFloor: IPe,
  rightharpoondown: QPe,
  rightharpoonup: BPe,
  rightleftarrows: jPe,
  rightleftharpoons: zPe,
  rightrightarrows: ZPe,
  rightsquigarrow: FPe,
  RightTeeArrow: VPe,
  RightTee: qPe,
  RightTeeVector: WPe,
  rightthreetimes: XPe,
  RightTriangleBar: YPe,
  RightTriangle: HPe,
  RightTriangleEqual: GPe,
  RightUpDownVector: UPe,
  RightUpTeeVector: KPe,
  RightUpVectorBar: JPe,
  RightUpVector: eAe,
  RightVectorBar: tAe,
  RightVector: nAe,
  ring: iAe,
  risingdotseq: sAe,
  rlarr: rAe,
  rlhar: oAe,
  rlm: lAe,
  rmoustache: aAe,
  rmoust: cAe,
  rnmid: uAe,
  roang: hAe,
  roarr: fAe,
  robrk: dAe,
  ropar: pAe,
  ropf: gAe,
  Ropf: mAe,
  roplus: bAe,
  rotimes: vAe,
  RoundImplies: yAe,
  rpar: OAe,
  rpargt: wAe,
  rppolint: xAe,
  rrarr: SAe,
  Rrightarrow: CAe,
  rsaquo: kAe,
  rscr: PAe,
  Rscr: AAe,
  rsh: EAe,
  Rsh: $Ae,
  rsqb: TAe,
  rsquo: _Ae,
  rsquor: MAe,
  rthree: RAe,
  rtimes: DAe,
  rtri: LAe,
  rtrie: NAe,
  rtrif: IAe,
  rtriltri: QAe,
  RuleDelayed: BAe,
  ruluhar: jAe,
  rx: zAe,
  Sacute: ZAe,
  sacute: FAe,
  sbquo: VAe,
  scap: qAe,
  Scaron: WAe,
  scaron: XAe,
  Sc: YAe,
  sc: HAe,
  sccue: GAe,
  sce: UAe,
  scE: KAe,
  Scedil: JAe,
  scedil: eEe,
  Scirc: tEe,
  scirc: nEe,
  scnap: iEe,
  scnE: sEe,
  scnsim: rEe,
  scpolint: oEe,
  scsim: lEe,
  Scy: aEe,
  scy: cEe,
  sdotb: uEe,
  sdot: hEe,
  sdote: fEe,
  searhk: dEe,
  searr: pEe,
  seArr: gEe,
  searrow: mEe,
  sect: bEe,
  semi: vEe,
  seswar: yEe,
  setminus: OEe,
  setmn: wEe,
  sext: xEe,
  Sfr: SEe,
  sfr: CEe,
  sfrown: kEe,
  sharp: PEe,
  SHCHcy: AEe,
  shchcy: EEe,
  SHcy: $Ee,
  shcy: TEe,
  ShortDownArrow: _Ee,
  ShortLeftArrow: MEe,
  shortmid: REe,
  shortparallel: DEe,
  ShortRightArrow: LEe,
  ShortUpArrow: NEe,
  shy: IEe,
  Sigma: QEe,
  sigma: BEe,
  sigmaf: jEe,
  sigmav: zEe,
  sim: ZEe,
  simdot: FEe,
  sime: VEe,
  simeq: qEe,
  simg: WEe,
  simgE: XEe,
  siml: YEe,
  simlE: HEe,
  simne: GEe,
  simplus: UEe,
  simrarr: KEe,
  slarr: JEe,
  SmallCircle: e$e,
  smallsetminus: t$e,
  smashp: n$e,
  smeparsl: i$e,
  smid: s$e,
  smile: r$e,
  smt: o$e,
  smte: l$e,
  smtes: a$e,
  SOFTcy: c$e,
  softcy: u$e,
  solbar: h$e,
  solb: f$e,
  sol: d$e,
  Sopf: p$e,
  sopf: g$e,
  spades: m$e,
  spadesuit: b$e,
  spar: v$e,
  sqcap: y$e,
  sqcaps: O$e,
  sqcup: w$e,
  sqcups: x$e,
  Sqrt: S$e,
  sqsub: C$e,
  sqsube: k$e,
  sqsubset: P$e,
  sqsubseteq: A$e,
  sqsup: E$e,
  sqsupe: $$e,
  sqsupset: T$e,
  sqsupseteq: _$e,
  square: M$e,
  Square: R$e,
  SquareIntersection: D$e,
  SquareSubset: L$e,
  SquareSubsetEqual: N$e,
  SquareSuperset: I$e,
  SquareSupersetEqual: Q$e,
  SquareUnion: B$e,
  squarf: j$e,
  squ: z$e,
  squf: Z$e,
  srarr: F$e,
  Sscr: V$e,
  sscr: q$e,
  ssetmn: W$e,
  ssmile: X$e,
  sstarf: Y$e,
  Star: H$e,
  star: G$e,
  starf: U$e,
  straightepsilon: K$e,
  straightphi: J$e,
  strns: eTe,
  sub: tTe,
  Sub: nTe,
  subdot: iTe,
  subE: sTe,
  sube: rTe,
  subedot: oTe,
  submult: lTe,
  subnE: aTe,
  subne: cTe,
  subplus: uTe,
  subrarr: hTe,
  subset: fTe,
  Subset: dTe,
  subseteq: pTe,
  subseteqq: gTe,
  SubsetEqual: mTe,
  subsetneq: bTe,
  subsetneqq: vTe,
  subsim: yTe,
  subsub: OTe,
  subsup: wTe,
  succapprox: xTe,
  succ: STe,
  succcurlyeq: CTe,
  Succeeds: kTe,
  SucceedsEqual: PTe,
  SucceedsSlantEqual: ATe,
  SucceedsTilde: ETe,
  succeq: $Te,
  succnapprox: TTe,
  succneqq: _Te,
  succnsim: MTe,
  succsim: RTe,
  SuchThat: DTe,
  sum: LTe,
  Sum: NTe,
  sung: ITe,
  sup1: QTe,
  sup2: BTe,
  sup3: jTe,
  sup: zTe,
  Sup: ZTe,
  supdot: FTe,
  supdsub: VTe,
  supE: qTe,
  supe: WTe,
  supedot: XTe,
  Superset: YTe,
  SupersetEqual: HTe,
  suphsol: GTe,
  suphsub: UTe,
  suplarr: KTe,
  supmult: JTe,
  supnE: e_e,
  supne: t_e,
  supplus: n_e,
  supset: i_e,
  Supset: s_e,
  supseteq: r_e,
  supseteqq: o_e,
  supsetneq: l_e,
  supsetneqq: a_e,
  supsim: c_e,
  supsub: u_e,
  supsup: h_e,
  swarhk: f_e,
  swarr: d_e,
  swArr: p_e,
  swarrow: g_e,
  swnwar: m_e,
  szlig: b_e,
  Tab: v_e,
  target: y_e,
  Tau: O_e,
  tau: w_e,
  tbrk: x_e,
  Tcaron: S_e,
  tcaron: C_e,
  Tcedil: k_e,
  tcedil: P_e,
  Tcy: A_e,
  tcy: E_e,
  tdot: $_e,
  telrec: T_e,
  Tfr: __e,
  tfr: M_e,
  there4: R_e,
  therefore: D_e,
  Therefore: L_e,
  Theta: N_e,
  theta: I_e,
  thetasym: Q_e,
  thetav: B_e,
  thickapprox: j_e,
  thicksim: z_e,
  ThickSpace: Z_e,
  ThinSpace: F_e,
  thinsp: V_e,
  thkap: q_e,
  thksim: W_e,
  THORN: X_e,
  thorn: Y_e,
  tilde: H_e,
  Tilde: G_e,
  TildeEqual: U_e,
  TildeFullEqual: K_e,
  TildeTilde: J_e,
  timesbar: eMe,
  timesb: tMe,
  times: nMe,
  timesd: iMe,
  tint: sMe,
  toea: rMe,
  topbot: oMe,
  topcir: lMe,
  top: aMe,
  Topf: cMe,
  topf: uMe,
  topfork: hMe,
  tosa: fMe,
  tprime: dMe,
  trade: pMe,
  TRADE: gMe,
  triangle: mMe,
  triangledown: bMe,
  triangleleft: vMe,
  trianglelefteq: yMe,
  triangleq: OMe,
  triangleright: wMe,
  trianglerighteq: xMe,
  tridot: SMe,
  trie: CMe,
  triminus: kMe,
  TripleDot: PMe,
  triplus: AMe,
  trisb: EMe,
  tritime: $Me,
  trpezium: TMe,
  Tscr: _Me,
  tscr: MMe,
  TScy: RMe,
  tscy: DMe,
  TSHcy: LMe,
  tshcy: NMe,
  Tstrok: IMe,
  tstrok: QMe,
  twixt: BMe,
  twoheadleftarrow: jMe,
  twoheadrightarrow: zMe,
  Uacute: ZMe,
  uacute: FMe,
  uarr: VMe,
  Uarr: qMe,
  uArr: WMe,
  Uarrocir: XMe,
  Ubrcy: YMe,
  ubrcy: HMe,
  Ubreve: GMe,
  ubreve: UMe,
  Ucirc: KMe,
  ucirc: JMe,
  Ucy: eRe,
  ucy: tRe,
  udarr: nRe,
  Udblac: iRe,
  udblac: sRe,
  udhar: rRe,
  ufisht: oRe,
  Ufr: lRe,
  ufr: aRe,
  Ugrave: cRe,
  ugrave: uRe,
  uHar: hRe,
  uharl: fRe,
  uharr: dRe,
  uhblk: pRe,
  ulcorn: gRe,
  ulcorner: mRe,
  ulcrop: bRe,
  ultri: vRe,
  Umacr: yRe,
  umacr: ORe,
  uml: wRe,
  UnderBar: xRe,
  UnderBrace: SRe,
  UnderBracket: CRe,
  UnderParenthesis: kRe,
  Union: PRe,
  UnionPlus: ARe,
  Uogon: ERe,
  uogon: $Re,
  Uopf: TRe,
  uopf: _Re,
  UpArrowBar: MRe,
  uparrow: RRe,
  UpArrow: DRe,
  Uparrow: LRe,
  UpArrowDownArrow: NRe,
  updownarrow: IRe,
  UpDownArrow: QRe,
  Updownarrow: BRe,
  UpEquilibrium: jRe,
  upharpoonleft: zRe,
  upharpoonright: ZRe,
  uplus: FRe,
  UpperLeftArrow: VRe,
  UpperRightArrow: qRe,
  upsi: WRe,
  Upsi: XRe,
  upsih: YRe,
  Upsilon: HRe,
  upsilon: GRe,
  UpTeeArrow: URe,
  UpTee: KRe,
  upuparrows: JRe,
  urcorn: eDe,
  urcorner: tDe,
  urcrop: nDe,
  Uring: iDe,
  uring: sDe,
  urtri: rDe,
  Uscr: oDe,
  uscr: lDe,
  utdot: aDe,
  Utilde: cDe,
  utilde: uDe,
  utri: hDe,
  utrif: fDe,
  uuarr: dDe,
  Uuml: pDe,
  uuml: gDe,
  uwangle: mDe,
  vangrt: bDe,
  varepsilon: vDe,
  varkappa: yDe,
  varnothing: ODe,
  varphi: wDe,
  varpi: xDe,
  varpropto: SDe,
  varr: CDe,
  vArr: kDe,
  varrho: PDe,
  varsigma: ADe,
  varsubsetneq: EDe,
  varsubsetneqq: $De,
  varsupsetneq: TDe,
  varsupsetneqq: _De,
  vartheta: MDe,
  vartriangleleft: RDe,
  vartriangleright: DDe,
  vBar: LDe,
  Vbar: NDe,
  vBarv: IDe,
  Vcy: QDe,
  vcy: BDe,
  vdash: jDe,
  vDash: zDe,
  Vdash: ZDe,
  VDash: FDe,
  Vdashl: VDe,
  veebar: qDe,
  vee: WDe,
  Vee: XDe,
  veeeq: YDe,
  vellip: HDe,
  verbar: GDe,
  Verbar: UDe,
  vert: KDe,
  Vert: JDe,
  VerticalBar: eLe,
  VerticalLine: tLe,
  VerticalSeparator: nLe,
  VerticalTilde: iLe,
  VeryThinSpace: sLe,
  Vfr: rLe,
  vfr: oLe,
  vltri: lLe,
  vnsub: aLe,
  vnsup: cLe,
  Vopf: uLe,
  vopf: hLe,
  vprop: fLe,
  vrtri: dLe,
  Vscr: pLe,
  vscr: gLe,
  vsubnE: mLe,
  vsubne: bLe,
  vsupnE: vLe,
  vsupne: yLe,
  Vvdash: OLe,
  vzigzag: wLe,
  Wcirc: xLe,
  wcirc: SLe,
  wedbar: CLe,
  wedge: kLe,
  Wedge: PLe,
  wedgeq: ALe,
  weierp: ELe,
  Wfr: $Le,
  wfr: TLe,
  Wopf: _Le,
  wopf: MLe,
  wp: RLe,
  wr: DLe,
  wreath: LLe,
  Wscr: NLe,
  wscr: ILe,
  xcap: QLe,
  xcirc: BLe,
  xcup: jLe,
  xdtri: zLe,
  Xfr: ZLe,
  xfr: FLe,
  xharr: VLe,
  xhArr: qLe,
  Xi: WLe,
  xi: XLe,
  xlarr: YLe,
  xlArr: HLe,
  xmap: GLe,
  xnis: ULe,
  xodot: KLe,
  Xopf: JLe,
  xopf: eNe,
  xoplus: tNe,
  xotime: nNe,
  xrarr: iNe,
  xrArr: sNe,
  Xscr: rNe,
  xscr: oNe,
  xsqcup: lNe,
  xuplus: aNe,
  xutri: cNe,
  xvee: uNe,
  xwedge: hNe,
  Yacute: fNe,
  yacute: dNe,
  YAcy: pNe,
  yacy: gNe,
  Ycirc: mNe,
  ycirc: bNe,
  Ycy: vNe,
  ycy: yNe,
  yen: ONe,
  Yfr: wNe,
  yfr: xNe,
  YIcy: SNe,
  yicy: CNe,
  Yopf: kNe,
  yopf: PNe,
  Yscr: ANe,
  yscr: ENe,
  YUcy: $Ne,
  yucy: TNe,
  yuml: _Ne,
  Yuml: MNe,
  Zacute: RNe,
  zacute: DNe,
  Zcaron: LNe,
  zcaron: NNe,
  Zcy: INe,
  zcy: QNe,
  Zdot: BNe,
  zdot: jNe,
  zeetrf: zNe,
  ZeroWidthSpace: ZNe,
  Zeta: FNe,
  zeta: VNe,
  zfr: qNe,
  Zfr: WNe,
  ZHcy: XNe,
  zhcy: YNe,
  zigrarr: HNe,
  zopf: GNe,
  Zopf: UNe,
  Zscr: KNe,
  zscr: JNe,
  zwj: e3e,
  zwnj: t3e
};
var vT = n3e, Ry = /[!-#%-\*,-\/:;\?@\[-\]_\{\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4E\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDF55-\uDF59]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDF3C-\uDF3E]|\uD806[\uDC3B\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]/, Nc = {}, yS = {};
function i3e(n) {
  var e, t, i = yS[n];
  if (i)
    return i;
  for (i = yS[n] = [], e = 0; e < 128; e++)
    t = String.fromCharCode(e), /^[0-9a-z]$/i.test(t) ? i.push(t) : i.push("%" + ("0" + e.toString(16).toUpperCase()).slice(-2));
  for (e = 0; e < n.length; e++)
    i[n.charCodeAt(e)] = n[e];
  return i;
}
function gg(n, e, t) {
  var i, s, r, o, l, a = "";
  for (typeof e != "string" && (t = e, e = gg.defaultChars), typeof t > "u" && (t = !0), l = i3e(e), i = 0, s = n.length; i < s; i++) {
    if (r = n.charCodeAt(i), t && r === 37 && i + 2 < s && /^[0-9a-f]{2}$/i.test(n.slice(i + 1, i + 3))) {
      a += n.slice(i, i + 3), i += 2;
      continue;
    }
    if (r < 128) {
      a += l[r];
      continue;
    }
    if (r >= 55296 && r <= 57343) {
      if (r >= 55296 && r <= 56319 && i + 1 < s && (o = n.charCodeAt(i + 1), o >= 56320 && o <= 57343)) {
        a += encodeURIComponent(n[i] + n[i + 1]), i++;
        continue;
      }
      a += "%EF%BF%BD";
      continue;
    }
    a += encodeURIComponent(n[i]);
  }
  return a;
}
gg.defaultChars = ";/?:@&=+$,-_.!~*'()#";
gg.componentChars = "-_.!~*'()";
var s3e = gg, OS = {};
function r3e(n) {
  var e, t, i = OS[n];
  if (i)
    return i;
  for (i = OS[n] = [], e = 0; e < 128; e++)
    t = String.fromCharCode(e), i.push(t);
  for (e = 0; e < n.length; e++)
    t = n.charCodeAt(e), i[t] = "%" + ("0" + t.toString(16).toUpperCase()).slice(-2);
  return i;
}
function mg(n, e) {
  var t;
  return typeof e != "string" && (e = mg.defaultChars), t = r3e(e), n.replace(/(%[a-f0-9]{2})+/gi, function(i) {
    var s, r, o, l, a, c, u, h = "";
    for (s = 0, r = i.length; s < r; s += 3) {
      if (o = parseInt(i.slice(s + 1, s + 3), 16), o < 128) {
        h += t[o];
        continue;
      }
      if ((o & 224) === 192 && s + 3 < r && (l = parseInt(i.slice(s + 4, s + 6), 16), (l & 192) === 128)) {
        u = o << 6 & 1984 | l & 63, u < 128 ? h += "��" : h += String.fromCharCode(u), s += 3;
        continue;
      }
      if ((o & 240) === 224 && s + 6 < r && (l = parseInt(i.slice(s + 4, s + 6), 16), a = parseInt(i.slice(s + 7, s + 9), 16), (l & 192) === 128 && (a & 192) === 128)) {
        u = o << 12 & 61440 | l << 6 & 4032 | a & 63, u < 2048 || u >= 55296 && u <= 57343 ? h += "���" : h += String.fromCharCode(u), s += 6;
        continue;
      }
      if ((o & 248) === 240 && s + 9 < r && (l = parseInt(i.slice(s + 4, s + 6), 16), a = parseInt(i.slice(s + 7, s + 9), 16), c = parseInt(i.slice(s + 10, s + 12), 16), (l & 192) === 128 && (a & 192) === 128 && (c & 192) === 128)) {
        u = o << 18 & 1835008 | l << 12 & 258048 | a << 6 & 4032 | c & 63, u < 65536 || u > 1114111 ? h += "����" : (u -= 65536, h += String.fromCharCode(55296 + (u >> 10), 56320 + (u & 1023))), s += 9;
        continue;
      }
      h += "�";
    }
    return h;
  });
}
mg.defaultChars = ";/?:@&=+$,#";
mg.componentChars = "";
var o3e = mg, l3e = function(e) {
  var t = "";
  return t += e.protocol || "", t += e.slashes ? "//" : "", t += e.auth ? e.auth + "@" : "", e.hostname && e.hostname.indexOf(":") !== -1 ? t += "[" + e.hostname + "]" : t += e.hostname || "", t += e.port ? ":" + e.port : "", t += e.pathname || "", t += e.search || "", t += e.hash || "", t;
};
function hp() {
  this.protocol = null, this.slashes = null, this.auth = null, this.port = null, this.hostname = null, this.hash = null, this.search = null, this.pathname = null;
}
var a3e = /^([a-z0-9.+-]+:)/i, c3e = /:[0-9]*$/, u3e = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/, h3e = ["<", ">", '"', "`", " ", "\r", `
`, "	"], f3e = ["{", "}", "|", "\\", "^", "`"].concat(h3e), d3e = ["'"].concat(f3e), wS = ["%", "/", "?", ";", "#"].concat(d3e), xS = ["/", "?", "#"], p3e = 255, SS = /^[+a-z0-9A-Z_-]{0,63}$/, g3e = /^([+a-z0-9A-Z_-]{0,63})(.*)$/, CS = {
  javascript: !0,
  "javascript:": !0
}, kS = {
  http: !0,
  https: !0,
  ftp: !0,
  gopher: !0,
  file: !0,
  "http:": !0,
  "https:": !0,
  "ftp:": !0,
  "gopher:": !0,
  "file:": !0
};
function m3e(n, e) {
  if (n && n instanceof hp)
    return n;
  var t = new hp();
  return t.parse(n, e), t;
}
hp.prototype.parse = function(n, e) {
  var t, i, s, r, o, l = n;
  if (l = l.trim(), !e && n.split("#").length === 1) {
    var a = u3e.exec(l);
    if (a)
      return this.pathname = a[1], a[2] && (this.search = a[2]), this;
  }
  var c = a3e.exec(l);
  if (c && (c = c[0], s = c.toLowerCase(), this.protocol = c, l = l.substr(c.length)), (e || c || l.match(/^\/\/[^@\/]+@[^@\/]+/)) && (o = l.substr(0, 2) === "//", o && !(c && CS[c]) && (l = l.substr(2), this.slashes = !0)), !CS[c] && (o || c && !kS[c])) {
    var u = -1;
    for (t = 0; t < xS.length; t++)
      r = l.indexOf(xS[t]), r !== -1 && (u === -1 || r < u) && (u = r);
    var h, f;
    for (u === -1 ? f = l.lastIndexOf("@") : f = l.lastIndexOf("@", u), f !== -1 && (h = l.slice(0, f), l = l.slice(f + 1), this.auth = h), u = -1, t = 0; t < wS.length; t++)
      r = l.indexOf(wS[t]), r !== -1 && (u === -1 || r < u) && (u = r);
    u === -1 && (u = l.length), l[u - 1] === ":" && u--;
    var d = l.slice(0, u);
    l = l.slice(u), this.parseHost(d), this.hostname = this.hostname || "";
    var p = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
    if (!p) {
      var g = this.hostname.split(/\./);
      for (t = 0, i = g.length; t < i; t++) {
        var m = g[t];
        if (m && !m.match(SS)) {
          for (var b = "", y = 0, v = m.length; y < v; y++)
            m.charCodeAt(y) > 127 ? b += "x" : b += m[y];
          if (!b.match(SS)) {
            var O = g.slice(0, t), x = g.slice(t + 1), S = m.match(g3e);
            S && (O.push(S[1]), x.unshift(S[2])), x.length && (l = x.join(".") + l), this.hostname = O.join(".");
            break;
          }
        }
      }
    }
    this.hostname.length > p3e && (this.hostname = ""), p && (this.hostname = this.hostname.substr(1, this.hostname.length - 2));
  }
  var C = l.indexOf("#");
  C !== -1 && (this.hash = l.substr(C), l = l.slice(0, C));
  var k = l.indexOf("?");
  return k !== -1 && (this.search = l.substr(k), l = l.slice(0, k)), l && (this.pathname = l), kS[s] && this.hostname && !this.pathname && (this.pathname = ""), this;
};
hp.prototype.parseHost = function(n) {
  var e = c3e.exec(n);
  e && (e = e[0], e !== ":" && (this.port = e.substr(1)), n = n.substr(0, n.length - e.length)), n && (this.hostname = n);
};
var b3e = m3e;
Nc.encode = s3e;
Nc.decode = o3e;
Nc.format = l3e;
Nc.parse = b3e;
var tl = {}, _m, PS;
function yT() {
  return PS || (PS = 1, _m = /[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/), _m;
}
var Mm, AS;
function OT() {
  return AS || (AS = 1, Mm = /[\0-\x1F\x7F-\x9F]/), Mm;
}
var Rm, ES;
function v3e() {
  return ES || (ES = 1, Rm = /[\xAD\u0600-\u0605\u061C\u06DD\u070F\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB]|\uD804[\uDCBD\uDCCD]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]/), Rm;
}
var Dm, $S;
function wT() {
  return $S || ($S = 1, Dm = /[ \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/), Dm;
}
var TS;
function y3e() {
  return TS || (TS = 1, tl.Any = yT(), tl.Cc = OT(), tl.Cf = v3e(), tl.P = Ry, tl.Z = wT()), tl;
}
(function(n) {
  function e(D) {
    return Object.prototype.toString.call(D);
  }
  function t(D) {
    return e(D) === "[object String]";
  }
  var i = Object.prototype.hasOwnProperty;
  function s(D, P) {
    return i.call(D, P);
  }
  function r(D) {
    var P = Array.prototype.slice.call(arguments, 1);
    return P.forEach(function(A) {
      if (A) {
        if (typeof A != "object")
          throw new TypeError(A + "must be object");
        Object.keys(A).forEach(function(Q) {
          D[Q] = A[Q];
        });
      }
    }), D;
  }
  function o(D, P, A) {
    return [].concat(D.slice(0, P), A, D.slice(P + 1));
  }
  function l(D) {
    return !(D >= 55296 && D <= 57343 || D >= 64976 && D <= 65007 || (D & 65535) === 65535 || (D & 65535) === 65534 || D >= 0 && D <= 8 || D === 11 || D >= 14 && D <= 31 || D >= 127 && D <= 159 || D > 1114111);
  }
  function a(D) {
    if (D > 65535) {
      D -= 65536;
      var P = 55296 + (D >> 10), A = 56320 + (D & 1023);
      return String.fromCharCode(P, A);
    }
    return String.fromCharCode(D);
  }
  var c = /\\([!"#$%&'()*+,\-.\/:;<=>?@[\\\]^_`{|}~])/g, u = /&([a-z#][a-z0-9]{1,31});/gi, h = new RegExp(c.source + "|" + u.source, "gi"), f = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))$/i, d = vT;
  function p(D, P) {
    var A;
    return s(d, P) ? d[P] : P.charCodeAt(0) === 35 && f.test(P) && (A = P[1].toLowerCase() === "x" ? parseInt(P.slice(2), 16) : parseInt(P.slice(1), 10), l(A)) ? a(A) : D;
  }
  function g(D) {
    return D.indexOf("\\") < 0 ? D : D.replace(c, "$1");
  }
  function m(D) {
    return D.indexOf("\\") < 0 && D.indexOf("&") < 0 ? D : D.replace(h, function(P, A, Q) {
      return A || p(P, Q);
    });
  }
  var b = /[&<>"]/, y = /[&<>"]/g, v = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;"
  };
  function O(D) {
    return v[D];
  }
  function x(D) {
    return b.test(D) ? D.replace(y, O) : D;
  }
  var S = /[.?*+^$[\]\\(){}|-]/g;
  function C(D) {
    return D.replace(S, "\\$&");
  }
  function k(D) {
    switch (D) {
      case 9:
      case 32:
        return !0;
    }
    return !1;
  }
  function E(D) {
    if (D >= 8192 && D <= 8202)
      return !0;
    switch (D) {
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 32:
      case 160:
      case 5760:
      case 8239:
      case 8287:
      case 12288:
        return !0;
    }
    return !1;
  }
  var $ = Ry;
  function T(D) {
    return $.test(D);
  }
  function M(D) {
    switch (D) {
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 123:
      case 124:
      case 125:
      case 126:
        return !0;
      default:
        return !1;
    }
  }
  function j(D) {
    return D = D.trim().replace(/\s+/g, " "), "ẞ".toLowerCase() === "Ṿ" && (D = D.replace(/ẞ/g, "ß")), D.toLowerCase().toUpperCase();
  }
  n.lib = {}, n.lib.mdurl = Nc, n.lib.ucmicro = y3e(), n.assign = r, n.isString = t, n.has = s, n.unescapeMd = g, n.unescapeAll = m, n.isValidEntityCode = l, n.fromCodePoint = a, n.escapeHtml = x, n.arrayReplaceAt = o, n.isSpace = k, n.isWhiteSpace = E, n.isMdAsciiPunct = M, n.isPunctChar = T, n.escapeRE = C, n.normalizeReference = j;
})(gt);
var bg = {}, O3e = function(e, t, i) {
  var s, r, o, l, a = -1, c = e.posMax, u = e.pos;
  for (e.pos = t + 1, s = 1; e.pos < c; ) {
    if (o = e.src.charCodeAt(e.pos), o === 93 && (s--, s === 0)) {
      r = !0;
      break;
    }
    if (l = e.pos, e.md.inline.skipToken(e), o === 91) {
      if (l === e.pos - 1)
        s++;
      else if (i)
        return e.pos = u, -1;
    }
  }
  return r && (a = e.pos), e.pos = u, a;
}, _S = gt.unescapeAll, w3e = function(e, t, i) {
  var s, r, o = t, l = {
    ok: !1,
    pos: 0,
    lines: 0,
    str: ""
  };
  if (e.charCodeAt(o) === 60) {
    for (o++; o < i; ) {
      if (s = e.charCodeAt(o), s === 10 || s === 60)
        return l;
      if (s === 62)
        return l.pos = o + 1, l.str = _S(e.slice(t + 1, o)), l.ok = !0, l;
      if (s === 92 && o + 1 < i) {
        o += 2;
        continue;
      }
      o++;
    }
    return l;
  }
  for (r = 0; o < i && (s = e.charCodeAt(o), !(s === 32 || s < 32 || s === 127)); ) {
    if (s === 92 && o + 1 < i) {
      if (e.charCodeAt(o + 1) === 32)
        break;
      o += 2;
      continue;
    }
    if (s === 40 && (r++, r > 32))
      return l;
    if (s === 41) {
      if (r === 0)
        break;
      r--;
    }
    o++;
  }
  return t === o || r !== 0 || (l.str = _S(e.slice(t, o)), l.pos = o, l.ok = !0), l;
}, x3e = gt.unescapeAll, S3e = function(e, t, i) {
  var s, r, o = 0, l = t, a = {
    ok: !1,
    pos: 0,
    lines: 0,
    str: ""
  };
  if (l >= i || (r = e.charCodeAt(l), r !== 34 && r !== 39 && r !== 40))
    return a;
  for (l++, r === 40 && (r = 41); l < i; ) {
    if (s = e.charCodeAt(l), s === r)
      return a.pos = l + 1, a.lines = o, a.str = x3e(e.slice(t + 1, l)), a.ok = !0, a;
    if (s === 40 && r === 41)
      return a;
    s === 10 ? o++ : s === 92 && l + 1 < i && (l++, e.charCodeAt(l) === 10 && o++), l++;
  }
  return a;
};
bg.parseLinkLabel = O3e;
bg.parseLinkDestination = w3e;
bg.parseLinkTitle = S3e;
var C3e = gt.assign, k3e = gt.unescapeAll, Zl = gt.escapeHtml, xr = {};
xr.code_inline = function(n, e, t, i, s) {
  var r = n[e];
  return "<code" + s.renderAttrs(r) + ">" + Zl(r.content) + "</code>";
};
xr.code_block = function(n, e, t, i, s) {
  var r = n[e];
  return "<pre" + s.renderAttrs(r) + "><code>" + Zl(n[e].content) + `</code></pre>
`;
};
xr.fence = function(n, e, t, i, s) {
  var r = n[e], o = r.info ? k3e(r.info).trim() : "", l = "", a = "", c, u, h, f, d;
  return o && (h = o.split(/(\s+)/g), l = h[0], a = h.slice(2).join("")), t.highlight ? c = t.highlight(r.content, l, a) || Zl(r.content) : c = Zl(r.content), c.indexOf("<pre") === 0 ? c + `
` : o ? (u = r.attrIndex("class"), f = r.attrs ? r.attrs.slice() : [], u < 0 ? f.push(["class", t.langPrefix + l]) : (f[u] = f[u].slice(), f[u][1] += " " + t.langPrefix + l), d = {
    attrs: f
  }, "<pre><code" + s.renderAttrs(d) + ">" + c + `</code></pre>
`) : "<pre><code" + s.renderAttrs(r) + ">" + c + `</code></pre>
`;
};
xr.image = function(n, e, t, i, s) {
  var r = n[e];
  return r.attrs[r.attrIndex("alt")][1] = s.renderInlineAsText(r.children, t, i), s.renderToken(n, e, t);
};
xr.hardbreak = function(n, e, t) {
  return t.xhtmlOut ? `<br />
` : `<br>
`;
};
xr.softbreak = function(n, e, t) {
  return t.breaks ? t.xhtmlOut ? `<br />
` : `<br>
` : `
`;
};
xr.text = function(n, e) {
  return Zl(n[e].content);
};
xr.html_block = function(n, e) {
  return n[e].content;
};
xr.html_inline = function(n, e) {
  return n[e].content;
};
function Ic() {
  this.rules = C3e({}, xr);
}
Ic.prototype.renderAttrs = function(e) {
  var t, i, s;
  if (!e.attrs)
    return "";
  for (s = "", t = 0, i = e.attrs.length; t < i; t++)
    s += " " + Zl(e.attrs[t][0]) + '="' + Zl(e.attrs[t][1]) + '"';
  return s;
};
Ic.prototype.renderToken = function(e, t, i) {
  var s, r = "", o = !1, l = e[t];
  return l.hidden ? "" : (l.block && l.nesting !== -1 && t && e[t - 1].hidden && (r += `
`), r += (l.nesting === -1 ? "</" : "<") + l.tag, r += this.renderAttrs(l), l.nesting === 0 && i.xhtmlOut && (r += " /"), l.block && (o = !0, l.nesting === 1 && t + 1 < e.length && (s = e[t + 1], (s.type === "inline" || s.hidden || s.nesting === -1 && s.tag === l.tag) && (o = !1))), r += o ? `>
` : ">", r);
};
Ic.prototype.renderInline = function(n, e, t) {
  for (var i, s = "", r = this.rules, o = 0, l = n.length; o < l; o++)
    i = n[o].type, typeof r[i] < "u" ? s += r[i](n, o, e, t, this) : s += this.renderToken(n, o, e);
  return s;
};
Ic.prototype.renderInlineAsText = function(n, e, t) {
  for (var i = "", s = 0, r = n.length; s < r; s++)
    n[s].type === "text" ? i += n[s].content : n[s].type === "image" ? i += this.renderInlineAsText(n[s].children, e, t) : n[s].type === "softbreak" && (i += `
`);
  return i;
};
Ic.prototype.render = function(n, e, t) {
  var i, s, r, o = "", l = this.rules;
  for (i = 0, s = n.length; i < s; i++)
    r = n[i].type, r === "inline" ? o += this.renderInline(n[i].children, e, t) : typeof l[r] < "u" ? o += l[r](n, i, e, t, this) : o += this.renderToken(n, i, e, t);
  return o;
};
var P3e = Ic;
function Qs() {
  this.__rules__ = [], this.__cache__ = null;
}
Qs.prototype.__find__ = function(n) {
  for (var e = 0; e < this.__rules__.length; e++)
    if (this.__rules__[e].name === n)
      return e;
  return -1;
};
Qs.prototype.__compile__ = function() {
  var n = this, e = [""];
  n.__rules__.forEach(function(t) {
    t.enabled && t.alt.forEach(function(i) {
      e.indexOf(i) < 0 && e.push(i);
    });
  }), n.__cache__ = {}, e.forEach(function(t) {
    n.__cache__[t] = [], n.__rules__.forEach(function(i) {
      i.enabled && (t && i.alt.indexOf(t) < 0 || n.__cache__[t].push(i.fn));
    });
  });
};
Qs.prototype.at = function(n, e, t) {
  var i = this.__find__(n), s = t || {};
  if (i === -1)
    throw new Error("Parser rule not found: " + n);
  this.__rules__[i].fn = e, this.__rules__[i].alt = s.alt || [], this.__cache__ = null;
};
Qs.prototype.before = function(n, e, t, i) {
  var s = this.__find__(n), r = i || {};
  if (s === -1)
    throw new Error("Parser rule not found: " + n);
  this.__rules__.splice(s, 0, {
    name: e,
    enabled: !0,
    fn: t,
    alt: r.alt || []
  }), this.__cache__ = null;
};
Qs.prototype.after = function(n, e, t, i) {
  var s = this.__find__(n), r = i || {};
  if (s === -1)
    throw new Error("Parser rule not found: " + n);
  this.__rules__.splice(s + 1, 0, {
    name: e,
    enabled: !0,
    fn: t,
    alt: r.alt || []
  }), this.__cache__ = null;
};
Qs.prototype.push = function(n, e, t) {
  var i = t || {};
  this.__rules__.push({
    name: n,
    enabled: !0,
    fn: e,
    alt: i.alt || []
  }), this.__cache__ = null;
};
Qs.prototype.enable = function(n, e) {
  Array.isArray(n) || (n = [n]);
  var t = [];
  return n.forEach(function(i) {
    var s = this.__find__(i);
    if (s < 0) {
      if (e)
        return;
      throw new Error("Rules manager: invalid rule name " + i);
    }
    this.__rules__[s].enabled = !0, t.push(i);
  }, this), this.__cache__ = null, t;
};
Qs.prototype.enableOnly = function(n, e) {
  Array.isArray(n) || (n = [n]), this.__rules__.forEach(function(t) {
    t.enabled = !1;
  }), this.enable(n, e);
};
Qs.prototype.disable = function(n, e) {
  Array.isArray(n) || (n = [n]);
  var t = [];
  return n.forEach(function(i) {
    var s = this.__find__(i);
    if (s < 0) {
      if (e)
        return;
      throw new Error("Rules manager: invalid rule name " + i);
    }
    this.__rules__[s].enabled = !1, t.push(i);
  }, this), this.__cache__ = null, t;
};
Qs.prototype.getRules = function(n) {
  return this.__cache__ === null && this.__compile__(), this.__cache__[n] || [];
};
var Dy = Qs, A3e = /\r\n?|\n/g, E3e = /\0/g, $3e = function(e) {
  var t;
  t = e.src.replace(A3e, `
`), t = t.replace(E3e, "�"), e.src = t;
}, T3e = function(e) {
  var t;
  e.inlineMode ? (t = new e.Token("inline", "", 0), t.content = e.src, t.map = [0, 1], t.children = [], e.tokens.push(t)) : e.md.block.parse(e.src, e.md, e.env, e.tokens);
}, _3e = function(e) {
  var t = e.tokens, i, s, r;
  for (s = 0, r = t.length; s < r; s++)
    i = t[s], i.type === "inline" && e.md.inline.parse(i.content, e.md, e.env, i.children);
}, M3e = gt.arrayReplaceAt;
function R3e(n) {
  return /^<a[>\s]/i.test(n);
}
function D3e(n) {
  return /^<\/a\s*>/i.test(n);
}
var L3e = function(e) {
  var t, i, s, r, o, l, a, c, u, h, f, d, p, g, m, b, y = e.tokens, v;
  if (e.md.options.linkify) {
    for (i = 0, s = y.length; i < s; i++)
      if (!(y[i].type !== "inline" || !e.md.linkify.pretest(y[i].content)))
        for (r = y[i].children, p = 0, t = r.length - 1; t >= 0; t--) {
          if (l = r[t], l.type === "link_close") {
            for (t--; r[t].level !== l.level && r[t].type !== "link_open"; )
              t--;
            continue;
          }
          if (l.type === "html_inline" && (R3e(l.content) && p > 0 && p--, D3e(l.content) && p++), !(p > 0) && l.type === "text" && e.md.linkify.test(l.content)) {
            for (u = l.content, v = e.md.linkify.match(u), a = [], d = l.level, f = 0, v.length > 0 && v[0].index === 0 && t > 0 && r[t - 1].type === "text_special" && (v = v.slice(1)), c = 0; c < v.length; c++)
              g = v[c].url, m = e.md.normalizeLink(g), e.md.validateLink(m) && (b = v[c].text, v[c].schema ? v[c].schema === "mailto:" && !/^mailto:/i.test(b) ? b = e.md.normalizeLinkText("mailto:" + b).replace(/^mailto:/, "") : b = e.md.normalizeLinkText(b) : b = e.md.normalizeLinkText("http://" + b).replace(/^http:\/\//, ""), h = v[c].index, h > f && (o = new e.Token("text", "", 0), o.content = u.slice(f, h), o.level = d, a.push(o)), o = new e.Token("link_open", "a", 1), o.attrs = [["href", m]], o.level = d++, o.markup = "linkify", o.info = "auto", a.push(o), o = new e.Token("text", "", 0), o.content = b, o.level = d, a.push(o), o = new e.Token("link_close", "a", -1), o.level = --d, o.markup = "linkify", o.info = "auto", a.push(o), f = v[c].lastIndex);
            f < u.length && (o = new e.Token("text", "", 0), o.content = u.slice(f), o.level = d, a.push(o)), y[i].children = r = M3e(r, t, a);
          }
        }
  }
}, xT = /\+-|\.\.|\?\?\?\?|!!!!|,,|--/, N3e = /\((c|tm|r)\)/i, I3e = /\((c|tm|r)\)/ig, Q3e = {
  c: "©",
  r: "®",
  tm: "™"
};
function B3e(n, e) {
  return Q3e[e.toLowerCase()];
}
function j3e(n) {
  var e, t, i = 0;
  for (e = n.length - 1; e >= 0; e--)
    t = n[e], t.type === "text" && !i && (t.content = t.content.replace(I3e, B3e)), t.type === "link_open" && t.info === "auto" && i--, t.type === "link_close" && t.info === "auto" && i++;
}
function z3e(n) {
  var e, t, i = 0;
  for (e = n.length - 1; e >= 0; e--)
    t = n[e], t.type === "text" && !i && xT.test(t.content) && (t.content = t.content.replace(/\+-/g, "±").replace(/\.{2,}/g, "…").replace(/([?!])…/g, "$1..").replace(/([?!]){4,}/g, "$1$1$1").replace(/,{2,}/g, ",").replace(/(^|[^-])---(?=[^-]|$)/mg, "$1—").replace(/(^|\s)--(?=\s|$)/mg, "$1–").replace(/(^|[^-\s])--(?=[^-\s]|$)/mg, "$1–")), t.type === "link_open" && t.info === "auto" && i--, t.type === "link_close" && t.info === "auto" && i++;
}
var Z3e = function(e) {
  var t;
  if (e.md.options.typographer)
    for (t = e.tokens.length - 1; t >= 0; t--)
      e.tokens[t].type === "inline" && (N3e.test(e.tokens[t].content) && j3e(e.tokens[t].children), xT.test(e.tokens[t].content) && z3e(e.tokens[t].children));
}, MS = gt.isWhiteSpace, RS = gt.isPunctChar, DS = gt.isMdAsciiPunct, F3e = /['"]/, LS = /['"]/g, NS = "’";
function Ff(n, e, t) {
  return n.slice(0, e) + t + n.slice(e + 1);
}
function V3e(n, e) {
  var t, i, s, r, o, l, a, c, u, h, f, d, p, g, m, b, y, v, O, x, S;
  for (O = [], t = 0; t < n.length; t++) {
    for (i = n[t], a = n[t].level, y = O.length - 1; y >= 0 && !(O[y].level <= a); y--)
      ;
    if (O.length = y + 1, i.type === "text") {
      s = i.content, o = 0, l = s.length;
      e:
        for (; o < l && (LS.lastIndex = o, r = LS.exec(s), !!r); ) {
          if (m = b = !0, o = r.index + 1, v = r[0] === "'", u = 32, r.index - 1 >= 0)
            u = s.charCodeAt(r.index - 1);
          else
            for (y = t - 1; y >= 0 && !(n[y].type === "softbreak" || n[y].type === "hardbreak"); y--)
              if (n[y].content) {
                u = n[y].content.charCodeAt(n[y].content.length - 1);
                break;
              }
          if (h = 32, o < l)
            h = s.charCodeAt(o);
          else
            for (y = t + 1; y < n.length && !(n[y].type === "softbreak" || n[y].type === "hardbreak"); y++)
              if (n[y].content) {
                h = n[y].content.charCodeAt(0);
                break;
              }
          if (f = DS(u) || RS(String.fromCharCode(u)), d = DS(h) || RS(String.fromCharCode(h)), p = MS(u), g = MS(h), g ? m = !1 : d && (p || f || (m = !1)), p ? b = !1 : f && (g || d || (b = !1)), h === 34 && r[0] === '"' && u >= 48 && u <= 57 && (b = m = !1), m && b && (m = f, b = d), !m && !b) {
            v && (i.content = Ff(i.content, r.index, NS));
            continue;
          }
          if (b) {
            for (y = O.length - 1; y >= 0 && (c = O[y], !(O[y].level < a)); y--)
              if (c.single === v && O[y].level === a) {
                c = O[y], v ? (x = e.md.options.quotes[2], S = e.md.options.quotes[3]) : (x = e.md.options.quotes[0], S = e.md.options.quotes[1]), i.content = Ff(i.content, r.index, S), n[c.token].content = Ff(
                  n[c.token].content,
                  c.pos,
                  x
                ), o += S.length - 1, c.token === t && (o += x.length - 1), s = i.content, l = s.length, O.length = y;
                continue e;
              }
          }
          m ? O.push({
            token: t,
            pos: r.index,
            single: v,
            level: a
          }) : b && v && (i.content = Ff(i.content, r.index, NS));
        }
    }
  }
}
var q3e = function(e) {
  var t;
  if (e.md.options.typographer)
    for (t = e.tokens.length - 1; t >= 0; t--)
      e.tokens[t].type !== "inline" || !F3e.test(e.tokens[t].content) || V3e(e.tokens[t].children, e);
}, W3e = function(e) {
  var t, i, s, r, o, l, a = e.tokens;
  for (t = 0, i = a.length; t < i; t++)
    if (a[t].type === "inline") {
      for (s = a[t].children, o = s.length, r = 0; r < o; r++)
        s[r].type === "text_special" && (s[r].type = "text");
      for (r = l = 0; r < o; r++)
        s[r].type === "text" && r + 1 < o && s[r + 1].type === "text" ? s[r + 1].content = s[r].content + s[r + 1].content : (r !== l && (s[l] = s[r]), l++);
      r !== l && (s.length = l);
    }
};
function Qc(n, e, t) {
  this.type = n, this.tag = e, this.attrs = null, this.map = null, this.nesting = t, this.level = 0, this.children = null, this.content = "", this.markup = "", this.info = "", this.meta = null, this.block = !1, this.hidden = !1;
}
Qc.prototype.attrIndex = function(e) {
  var t, i, s;
  if (!this.attrs)
    return -1;
  for (t = this.attrs, i = 0, s = t.length; i < s; i++)
    if (t[i][0] === e)
      return i;
  return -1;
};
Qc.prototype.attrPush = function(e) {
  this.attrs ? this.attrs.push(e) : this.attrs = [e];
};
Qc.prototype.attrSet = function(e, t) {
  var i = this.attrIndex(e), s = [e, t];
  i < 0 ? this.attrPush(s) : this.attrs[i] = s;
};
Qc.prototype.attrGet = function(e) {
  var t = this.attrIndex(e), i = null;
  return t >= 0 && (i = this.attrs[t][1]), i;
};
Qc.prototype.attrJoin = function(e, t) {
  var i = this.attrIndex(e);
  i < 0 ? this.attrPush([e, t]) : this.attrs[i][1] = this.attrs[i][1] + " " + t;
};
var Ly = Qc, X3e = Ly;
function ST(n, e, t) {
  this.src = n, this.env = t, this.tokens = [], this.inlineMode = !1, this.md = e;
}
ST.prototype.Token = X3e;
var Y3e = ST, H3e = Dy, Lm = [
  ["normalize", $3e],
  ["block", T3e],
  ["inline", _3e],
  ["linkify", L3e],
  ["replacements", Z3e],
  ["smartquotes", q3e],
  // `text_join` finds `text_special` tokens (for escape sequences)
  // and joins them with the rest of the text
  ["text_join", W3e]
];
function Ny() {
  this.ruler = new H3e();
  for (var n = 0; n < Lm.length; n++)
    this.ruler.push(Lm[n][0], Lm[n][1]);
}
Ny.prototype.process = function(n) {
  var e, t, i;
  for (i = this.ruler.getRules(""), e = 0, t = i.length; e < t; e++)
    i[e](n);
};
Ny.prototype.State = Y3e;
var G3e = Ny, Nm = gt.isSpace;
function Im(n, e) {
  var t = n.bMarks[e] + n.tShift[e], i = n.eMarks[e];
  return n.src.slice(t, i);
}
function IS(n) {
  var e = [], t = 0, i = n.length, s, r = !1, o = 0, l = "";
  for (s = n.charCodeAt(t); t < i; )
    s === 124 && (r ? (l += n.substring(o, t - 1), o = t) : (e.push(l + n.substring(o, t)), l = "", o = t + 1)), r = s === 92, t++, s = n.charCodeAt(t);
  return e.push(l + n.substring(o)), e;
}
var U3e = function(e, t, i, s) {
  var r, o, l, a, c, u, h, f, d, p, g, m, b, y, v, O, x, S;
  if (t + 2 > i || (u = t + 1, e.sCount[u] < e.blkIndent) || e.sCount[u] - e.blkIndent >= 4 || (l = e.bMarks[u] + e.tShift[u], l >= e.eMarks[u]) || (x = e.src.charCodeAt(l++), x !== 124 && x !== 45 && x !== 58) || l >= e.eMarks[u] || (S = e.src.charCodeAt(l++), S !== 124 && S !== 45 && S !== 58 && !Nm(S)) || x === 45 && Nm(S))
    return !1;
  for (; l < e.eMarks[u]; ) {
    if (r = e.src.charCodeAt(l), r !== 124 && r !== 45 && r !== 58 && !Nm(r))
      return !1;
    l++;
  }
  for (o = Im(e, t + 1), h = o.split("|"), p = [], a = 0; a < h.length; a++) {
    if (g = h[a].trim(), !g) {
      if (a === 0 || a === h.length - 1)
        continue;
      return !1;
    }
    if (!/^:?-+:?$/.test(g))
      return !1;
    g.charCodeAt(g.length - 1) === 58 ? p.push(g.charCodeAt(0) === 58 ? "center" : "right") : g.charCodeAt(0) === 58 ? p.push("left") : p.push("");
  }
  if (o = Im(e, t).trim(), o.indexOf("|") === -1 || e.sCount[t] - e.blkIndent >= 4 || (h = IS(o), h.length && h[0] === "" && h.shift(), h.length && h[h.length - 1] === "" && h.pop(), f = h.length, f === 0 || f !== p.length))
    return !1;
  if (s)
    return !0;
  for (y = e.parentType, e.parentType = "table", O = e.md.block.ruler.getRules("blockquote"), d = e.push("table_open", "table", 1), d.map = m = [t, 0], d = e.push("thead_open", "thead", 1), d.map = [t, t + 1], d = e.push("tr_open", "tr", 1), d.map = [t, t + 1], a = 0; a < h.length; a++)
    d = e.push("th_open", "th", 1), p[a] && (d.attrs = [["style", "text-align:" + p[a]]]), d = e.push("inline", "", 0), d.content = h[a].trim(), d.children = [], d = e.push("th_close", "th", -1);
  for (d = e.push("tr_close", "tr", -1), d = e.push("thead_close", "thead", -1), u = t + 2; u < i && !(e.sCount[u] < e.blkIndent); u++) {
    for (v = !1, a = 0, c = O.length; a < c; a++)
      if (O[a](e, u, i, !0)) {
        v = !0;
        break;
      }
    if (v || (o = Im(e, u).trim(), !o) || e.sCount[u] - e.blkIndent >= 4)
      break;
    for (h = IS(o), h.length && h[0] === "" && h.shift(), h.length && h[h.length - 1] === "" && h.pop(), u === t + 2 && (d = e.push("tbody_open", "tbody", 1), d.map = b = [t + 2, 0]), d = e.push("tr_open", "tr", 1), d.map = [u, u + 1], a = 0; a < f; a++)
      d = e.push("td_open", "td", 1), p[a] && (d.attrs = [["style", "text-align:" + p[a]]]), d = e.push("inline", "", 0), d.content = h[a] ? h[a].trim() : "", d.children = [], d = e.push("td_close", "td", -1);
    d = e.push("tr_close", "tr", -1);
  }
  return b && (d = e.push("tbody_close", "tbody", -1), b[1] = u), d = e.push("table_close", "table", -1), m[1] = u, e.parentType = y, e.line = u, !0;
}, K3e = function(e, t, i) {
  var s, r, o;
  if (e.sCount[t] - e.blkIndent < 4)
    return !1;
  for (r = s = t + 1; s < i; ) {
    if (e.isEmpty(s)) {
      s++;
      continue;
    }
    if (e.sCount[s] - e.blkIndent >= 4) {
      s++, r = s;
      continue;
    }
    break;
  }
  return e.line = r, o = e.push("code_block", "code", 0), o.content = e.getLines(t, r, 4 + e.blkIndent, !1) + `
`, o.map = [t, e.line], !0;
}, J3e = function(e, t, i, s) {
  var r, o, l, a, c, u, h, f = !1, d = e.bMarks[t] + e.tShift[t], p = e.eMarks[t];
  if (e.sCount[t] - e.blkIndent >= 4 || d + 3 > p || (r = e.src.charCodeAt(d), r !== 126 && r !== 96) || (c = d, d = e.skipChars(d, r), o = d - c, o < 3) || (h = e.src.slice(c, d), l = e.src.slice(d, p), r === 96 && l.indexOf(String.fromCharCode(r)) >= 0))
    return !1;
  if (s)
    return !0;
  for (a = t; a++, !(a >= i || (d = c = e.bMarks[a] + e.tShift[a], p = e.eMarks[a], d < p && e.sCount[a] < e.blkIndent)); )
    if (e.src.charCodeAt(d) === r && !(e.sCount[a] - e.blkIndent >= 4) && (d = e.skipChars(d, r), !(d - c < o) && (d = e.skipSpaces(d), !(d < p)))) {
      f = !0;
      break;
    }
  return o = e.sCount[t], e.line = a + (f ? 1 : 0), u = e.push("fence", "code", 0), u.info = l, u.content = e.getLines(t + 1, a, o, !0), u.markup = h, u.map = [t, e.line], !0;
}, eIe = gt.isSpace, tIe = function(e, t, i, s) {
  var r, o, l, a, c, u, h, f, d, p, g, m, b, y, v, O, x, S, C, k, E = e.lineMax, $ = e.bMarks[t] + e.tShift[t], T = e.eMarks[t];
  if (e.sCount[t] - e.blkIndent >= 4 || e.src.charCodeAt($) !== 62)
    return !1;
  if (s)
    return !0;
  for (p = [], g = [], y = [], v = [], S = e.md.block.ruler.getRules("blockquote"), b = e.parentType, e.parentType = "blockquote", f = t; f < i && (k = e.sCount[f] < e.blkIndent, $ = e.bMarks[f] + e.tShift[f], T = e.eMarks[f], !($ >= T)); f++) {
    if (e.src.charCodeAt($++) === 62 && !k) {
      for (a = e.sCount[f] + 1, e.src.charCodeAt($) === 32 ? ($++, a++, r = !1, O = !0) : e.src.charCodeAt($) === 9 ? (O = !0, (e.bsCount[f] + a) % 4 === 3 ? ($++, a++, r = !1) : r = !0) : O = !1, d = a, p.push(e.bMarks[f]), e.bMarks[f] = $; $ < T && (o = e.src.charCodeAt($), eIe(o)); ) {
        o === 9 ? d += 4 - (d + e.bsCount[f] + (r ? 1 : 0)) % 4 : d++;
        $++;
      }
      u = $ >= T, g.push(e.bsCount[f]), e.bsCount[f] = e.sCount[f] + 1 + (O ? 1 : 0), y.push(e.sCount[f]), e.sCount[f] = d - a, v.push(e.tShift[f]), e.tShift[f] = $ - e.bMarks[f];
      continue;
    }
    if (u)
      break;
    for (x = !1, l = 0, c = S.length; l < c; l++)
      if (S[l](e, f, i, !0)) {
        x = !0;
        break;
      }
    if (x) {
      e.lineMax = f, e.blkIndent !== 0 && (p.push(e.bMarks[f]), g.push(e.bsCount[f]), v.push(e.tShift[f]), y.push(e.sCount[f]), e.sCount[f] -= e.blkIndent);
      break;
    }
    p.push(e.bMarks[f]), g.push(e.bsCount[f]), v.push(e.tShift[f]), y.push(e.sCount[f]), e.sCount[f] = -1;
  }
  for (m = e.blkIndent, e.blkIndent = 0, C = e.push("blockquote_open", "blockquote", 1), C.markup = ">", C.map = h = [t, 0], e.md.block.tokenize(e, t, f), C = e.push("blockquote_close", "blockquote", -1), C.markup = ">", e.lineMax = E, e.parentType = b, h[1] = e.line, l = 0; l < v.length; l++)
    e.bMarks[l + t] = p[l], e.tShift[l + t] = v[l], e.sCount[l + t] = y[l], e.bsCount[l + t] = g[l];
  return e.blkIndent = m, !0;
}, nIe = gt.isSpace, iIe = function(e, t, i, s) {
  var r, o, l, a, c = e.bMarks[t] + e.tShift[t], u = e.eMarks[t];
  if (e.sCount[t] - e.blkIndent >= 4 || (r = e.src.charCodeAt(c++), r !== 42 && r !== 45 && r !== 95))
    return !1;
  for (o = 1; c < u; ) {
    if (l = e.src.charCodeAt(c++), l !== r && !nIe(l))
      return !1;
    l === r && o++;
  }
  return o < 3 ? !1 : (s || (e.line = t + 1, a = e.push("hr", "hr", 0), a.map = [t, e.line], a.markup = Array(o + 1).join(String.fromCharCode(r))), !0);
}, CT = gt.isSpace;
function QS(n, e) {
  var t, i, s, r;
  return i = n.bMarks[e] + n.tShift[e], s = n.eMarks[e], t = n.src.charCodeAt(i++), t !== 42 && t !== 45 && t !== 43 || i < s && (r = n.src.charCodeAt(i), !CT(r)) ? -1 : i;
}
function BS(n, e) {
  var t, i = n.bMarks[e] + n.tShift[e], s = i, r = n.eMarks[e];
  if (s + 1 >= r || (t = n.src.charCodeAt(s++), t < 48 || t > 57))
    return -1;
  for (; ; ) {
    if (s >= r)
      return -1;
    if (t = n.src.charCodeAt(s++), t >= 48 && t <= 57) {
      if (s - i >= 10)
        return -1;
      continue;
    }
    if (t === 41 || t === 46)
      break;
    return -1;
  }
  return s < r && (t = n.src.charCodeAt(s), !CT(t)) ? -1 : s;
}
function sIe(n, e) {
  var t, i, s = n.level + 2;
  for (t = e + 2, i = n.tokens.length - 2; t < i; t++)
    n.tokens[t].level === s && n.tokens[t].type === "paragraph_open" && (n.tokens[t + 2].hidden = !0, n.tokens[t].hidden = !0, t += 2);
}
var rIe = function(e, t, i, s) {
  var r, o, l, a, c, u, h, f, d, p, g, m, b, y, v, O, x, S, C, k, E, $, T, M, j, D, P, A = t, Q = !1, X = !0;
  if (e.sCount[A] - e.blkIndent >= 4 || e.listIndent >= 0 && e.sCount[A] - e.listIndent >= 4 && e.sCount[A] < e.blkIndent)
    return !1;
  if (s && e.parentType === "paragraph" && e.sCount[A] >= e.blkIndent && (Q = !0), ($ = BS(e, A)) >= 0) {
    if (h = !0, M = e.bMarks[A] + e.tShift[A], b = Number(e.src.slice(M, $ - 1)), Q && b !== 1)
      return !1;
  } else if (($ = QS(e, A)) >= 0)
    h = !1;
  else
    return !1;
  if (Q && e.skipSpaces($) >= e.eMarks[A])
    return !1;
  if (s)
    return !0;
  for (m = e.src.charCodeAt($ - 1), g = e.tokens.length, h ? (P = e.push("ordered_list_open", "ol", 1), b !== 1 && (P.attrs = [["start", b]])) : P = e.push("bullet_list_open", "ul", 1), P.map = p = [A, 0], P.markup = String.fromCharCode(m), T = !1, D = e.md.block.ruler.getRules("list"), x = e.parentType, e.parentType = "list"; A < i; ) {
    for (E = $, y = e.eMarks[A], u = v = e.sCount[A] + $ - (e.bMarks[A] + e.tShift[A]); E < y; ) {
      if (r = e.src.charCodeAt(E), r === 9)
        v += 4 - (v + e.bsCount[A]) % 4;
      else if (r === 32)
        v++;
      else
        break;
      E++;
    }
    if (o = E, o >= y ? c = 1 : c = v - u, c > 4 && (c = 1), a = u + c, P = e.push("list_item_open", "li", 1), P.markup = String.fromCharCode(m), P.map = f = [A, 0], h && (P.info = e.src.slice(M, $ - 1)), k = e.tight, C = e.tShift[A], S = e.sCount[A], O = e.listIndent, e.listIndent = e.blkIndent, e.blkIndent = a, e.tight = !0, e.tShift[A] = o - e.bMarks[A], e.sCount[A] = v, o >= y && e.isEmpty(A + 1) ? e.line = Math.min(e.line + 2, i) : e.md.block.tokenize(e, A, i, !0), (!e.tight || T) && (X = !1), T = e.line - A > 1 && e.isEmpty(e.line - 1), e.blkIndent = e.listIndent, e.listIndent = O, e.tShift[A] = C, e.sCount[A] = S, e.tight = k, P = e.push("list_item_close", "li", -1), P.markup = String.fromCharCode(m), A = e.line, f[1] = A, A >= i || e.sCount[A] < e.blkIndent || e.sCount[A] - e.blkIndent >= 4)
      break;
    for (j = !1, l = 0, d = D.length; l < d; l++)
      if (D[l](e, A, i, !0)) {
        j = !0;
        break;
      }
    if (j)
      break;
    if (h) {
      if ($ = BS(e, A), $ < 0)
        break;
      M = e.bMarks[A] + e.tShift[A];
    } else if ($ = QS(e, A), $ < 0)
      break;
    if (m !== e.src.charCodeAt($ - 1))
      break;
  }
  return h ? P = e.push("ordered_list_close", "ol", -1) : P = e.push("bullet_list_close", "ul", -1), P.markup = String.fromCharCode(m), p[1] = A, e.line = A, e.parentType = x, X && sIe(e, g), !0;
}, oIe = gt.normalizeReference, Vf = gt.isSpace, lIe = function(e, t, i, s) {
  var r, o, l, a, c, u, h, f, d, p, g, m, b, y, v, O, x = 0, S = e.bMarks[t] + e.tShift[t], C = e.eMarks[t], k = t + 1;
  if (e.sCount[t] - e.blkIndent >= 4 || e.src.charCodeAt(S) !== 91)
    return !1;
  for (; ++S < C; )
    if (e.src.charCodeAt(S) === 93 && e.src.charCodeAt(S - 1) !== 92) {
      if (S + 1 === C || e.src.charCodeAt(S + 1) !== 58)
        return !1;
      break;
    }
  for (a = e.lineMax, v = e.md.block.ruler.getRules("reference"), p = e.parentType, e.parentType = "reference"; k < a && !e.isEmpty(k); k++)
    if (!(e.sCount[k] - e.blkIndent > 3) && !(e.sCount[k] < 0)) {
      for (y = !1, u = 0, h = v.length; u < h; u++)
        if (v[u](e, k, a, !0)) {
          y = !0;
          break;
        }
      if (y)
        break;
    }
  for (b = e.getLines(t, k, e.blkIndent, !1).trim(), C = b.length, S = 1; S < C; S++) {
    if (r = b.charCodeAt(S), r === 91)
      return !1;
    if (r === 93) {
      d = S;
      break;
    } else
      r === 10 ? x++ : r === 92 && (S++, S < C && b.charCodeAt(S) === 10 && x++);
  }
  if (d < 0 || b.charCodeAt(d + 1) !== 58)
    return !1;
  for (S = d + 2; S < C; S++)
    if (r = b.charCodeAt(S), r === 10)
      x++;
    else if (!Vf(r))
      break;
  if (g = e.md.helpers.parseLinkDestination(b, S, C), !g.ok || (c = e.md.normalizeLink(g.str), !e.md.validateLink(c)))
    return !1;
  for (S = g.pos, x += g.lines, o = S, l = x, m = S; S < C; S++)
    if (r = b.charCodeAt(S), r === 10)
      x++;
    else if (!Vf(r))
      break;
  for (g = e.md.helpers.parseLinkTitle(b, S, C), S < C && m !== S && g.ok ? (O = g.str, S = g.pos, x += g.lines) : (O = "", S = o, x = l); S < C && (r = b.charCodeAt(S), !!Vf(r)); )
    S++;
  if (S < C && b.charCodeAt(S) !== 10 && O)
    for (O = "", S = o, x = l; S < C && (r = b.charCodeAt(S), !!Vf(r)); )
      S++;
  return S < C && b.charCodeAt(S) !== 10 || (f = oIe(b.slice(1, d)), !f) ? !1 : (s || (typeof e.env.references > "u" && (e.env.references = {}), typeof e.env.references[f] > "u" && (e.env.references[f] = { title: O, href: c }), e.parentType = p, e.line = t + x + 1), !0);
}, aIe = [
  "address",
  "article",
  "aside",
  "base",
  "basefont",
  "blockquote",
  "body",
  "caption",
  "center",
  "col",
  "colgroup",
  "dd",
  "details",
  "dialog",
  "dir",
  "div",
  "dl",
  "dt",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "frame",
  "frameset",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "head",
  "header",
  "hr",
  "html",
  "iframe",
  "legend",
  "li",
  "link",
  "main",
  "menu",
  "menuitem",
  "nav",
  "noframes",
  "ol",
  "optgroup",
  "option",
  "p",
  "param",
  "section",
  "source",
  "summary",
  "table",
  "tbody",
  "td",
  "tfoot",
  "th",
  "thead",
  "title",
  "tr",
  "track",
  "ul"
], vg = {}, cIe = "[a-zA-Z_:][a-zA-Z0-9:._-]*", uIe = "[^\"'=<>`\\x00-\\x20]+", hIe = "'[^']*'", fIe = '"[^"]*"', dIe = "(?:" + uIe + "|" + hIe + "|" + fIe + ")", pIe = "(?:\\s+" + cIe + "(?:\\s*=\\s*" + dIe + ")?)", kT = "<[A-Za-z][A-Za-z0-9\\-]*" + pIe + "*\\s*\\/?>", PT = "<\\/[A-Za-z][A-Za-z0-9\\-]*\\s*>", gIe = "<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->", mIe = "<[?][\\s\\S]*?[?]>", bIe = "<![A-Z]+\\s+[^>]*>", vIe = "<!\\[CDATA\\[[\\s\\S]*?\\]\\]>", yIe = new RegExp("^(?:" + kT + "|" + PT + "|" + gIe + "|" + mIe + "|" + bIe + "|" + vIe + ")"), OIe = new RegExp("^(?:" + kT + "|" + PT + ")");
vg.HTML_TAG_RE = yIe;
vg.HTML_OPEN_CLOSE_TAG_RE = OIe;
var wIe = aIe, xIe = vg.HTML_OPEN_CLOSE_TAG_RE, ca = [
  [/^<(script|pre|style|textarea)(?=(\s|>|$))/i, /<\/(script|pre|style|textarea)>/i, !0],
  [/^<!--/, /-->/, !0],
  [/^<\?/, /\?>/, !0],
  [/^<![A-Z]/, />/, !0],
  [/^<!\[CDATA\[/, /\]\]>/, !0],
  [new RegExp("^</?(" + wIe.join("|") + ")(?=(\\s|/?>|$))", "i"), /^$/, !0],
  [new RegExp(xIe.source + "\\s*$"), /^$/, !1]
], SIe = function(e, t, i, s) {
  var r, o, l, a, c = e.bMarks[t] + e.tShift[t], u = e.eMarks[t];
  if (e.sCount[t] - e.blkIndent >= 4 || !e.md.options.html || e.src.charCodeAt(c) !== 60)
    return !1;
  for (a = e.src.slice(c, u), r = 0; r < ca.length && !ca[r][0].test(a); r++)
    ;
  if (r === ca.length)
    return !1;
  if (s)
    return ca[r][2];
  if (o = t + 1, !ca[r][1].test(a)) {
    for (; o < i && !(e.sCount[o] < e.blkIndent); o++)
      if (c = e.bMarks[o] + e.tShift[o], u = e.eMarks[o], a = e.src.slice(c, u), ca[r][1].test(a)) {
        a.length !== 0 && o++;
        break;
      }
  }
  return e.line = o, l = e.push("html_block", "", 0), l.map = [t, o], l.content = e.getLines(t, o, e.blkIndent, !0), !0;
}, jS = gt.isSpace, CIe = function(e, t, i, s) {
  var r, o, l, a, c = e.bMarks[t] + e.tShift[t], u = e.eMarks[t];
  if (e.sCount[t] - e.blkIndent >= 4 || (r = e.src.charCodeAt(c), r !== 35 || c >= u))
    return !1;
  for (o = 1, r = e.src.charCodeAt(++c); r === 35 && c < u && o <= 6; )
    o++, r = e.src.charCodeAt(++c);
  return o > 6 || c < u && !jS(r) ? !1 : (s || (u = e.skipSpacesBack(u, c), l = e.skipCharsBack(u, 35, c), l > c && jS(e.src.charCodeAt(l - 1)) && (u = l), e.line = t + 1, a = e.push("heading_open", "h" + String(o), 1), a.markup = "########".slice(0, o), a.map = [t, e.line], a = e.push("inline", "", 0), a.content = e.src.slice(c, u).trim(), a.map = [t, e.line], a.children = [], a = e.push("heading_close", "h" + String(o), -1), a.markup = "########".slice(0, o)), !0);
}, kIe = function(e, t, i) {
  var s, r, o, l, a, c, u, h, f, d = t + 1, p, g = e.md.block.ruler.getRules("paragraph");
  if (e.sCount[t] - e.blkIndent >= 4)
    return !1;
  for (p = e.parentType, e.parentType = "paragraph"; d < i && !e.isEmpty(d); d++)
    if (!(e.sCount[d] - e.blkIndent > 3)) {
      if (e.sCount[d] >= e.blkIndent && (c = e.bMarks[d] + e.tShift[d], u = e.eMarks[d], c < u && (f = e.src.charCodeAt(c), (f === 45 || f === 61) && (c = e.skipChars(c, f), c = e.skipSpaces(c), c >= u)))) {
        h = f === 61 ? 1 : 2;
        break;
      }
      if (!(e.sCount[d] < 0)) {
        for (r = !1, o = 0, l = g.length; o < l; o++)
          if (g[o](e, d, i, !0)) {
            r = !0;
            break;
          }
        if (r)
          break;
      }
    }
  return h ? (s = e.getLines(t, d, e.blkIndent, !1).trim(), e.line = d + 1, a = e.push("heading_open", "h" + String(h), 1), a.markup = String.fromCharCode(f), a.map = [t, e.line], a = e.push("inline", "", 0), a.content = s, a.map = [t, e.line - 1], a.children = [], a = e.push("heading_close", "h" + String(h), -1), a.markup = String.fromCharCode(f), e.parentType = p, !0) : !1;
}, PIe = function(e, t, i) {
  var s, r, o, l, a, c, u = t + 1, h = e.md.block.ruler.getRules("paragraph");
  for (c = e.parentType, e.parentType = "paragraph"; u < i && !e.isEmpty(u); u++)
    if (!(e.sCount[u] - e.blkIndent > 3) && !(e.sCount[u] < 0)) {
      for (r = !1, o = 0, l = h.length; o < l; o++)
        if (h[o](e, u, i, !0)) {
          r = !0;
          break;
        }
      if (r)
        break;
    }
  return s = e.getLines(t, u, e.blkIndent, !1).trim(), e.line = u, a = e.push("paragraph_open", "p", 1), a.map = [t, e.line], a = e.push("inline", "", 0), a.content = s, a.map = [t, e.line], a.children = [], a = e.push("paragraph_close", "p", -1), e.parentType = c, !0;
}, AT = Ly, yg = gt.isSpace;
function Sr(n, e, t, i) {
  var s, r, o, l, a, c, u, h;
  for (this.src = n, this.md = e, this.env = t, this.tokens = i, this.bMarks = [], this.eMarks = [], this.tShift = [], this.sCount = [], this.bsCount = [], this.blkIndent = 0, this.line = 0, this.lineMax = 0, this.tight = !1, this.ddIndent = -1, this.listIndent = -1, this.parentType = "root", this.level = 0, this.result = "", r = this.src, h = !1, o = l = c = u = 0, a = r.length; l < a; l++) {
    if (s = r.charCodeAt(l), !h)
      if (yg(s)) {
        c++, s === 9 ? u += 4 - u % 4 : u++;
        continue;
      } else
        h = !0;
    (s === 10 || l === a - 1) && (s !== 10 && l++, this.bMarks.push(o), this.eMarks.push(l), this.tShift.push(c), this.sCount.push(u), this.bsCount.push(0), h = !1, c = 0, u = 0, o = l + 1);
  }
  this.bMarks.push(r.length), this.eMarks.push(r.length), this.tShift.push(0), this.sCount.push(0), this.bsCount.push(0), this.lineMax = this.bMarks.length - 1;
}
Sr.prototype.push = function(n, e, t) {
  var i = new AT(n, e, t);
  return i.block = !0, t < 0 && this.level--, i.level = this.level, t > 0 && this.level++, this.tokens.push(i), i;
};
Sr.prototype.isEmpty = function(e) {
  return this.bMarks[e] + this.tShift[e] >= this.eMarks[e];
};
Sr.prototype.skipEmptyLines = function(e) {
  for (var t = this.lineMax; e < t && !(this.bMarks[e] + this.tShift[e] < this.eMarks[e]); e++)
    ;
  return e;
};
Sr.prototype.skipSpaces = function(e) {
  for (var t, i = this.src.length; e < i && (t = this.src.charCodeAt(e), !!yg(t)); e++)
    ;
  return e;
};
Sr.prototype.skipSpacesBack = function(e, t) {
  if (e <= t)
    return e;
  for (; e > t; )
    if (!yg(this.src.charCodeAt(--e)))
      return e + 1;
  return e;
};
Sr.prototype.skipChars = function(e, t) {
  for (var i = this.src.length; e < i && this.src.charCodeAt(e) === t; e++)
    ;
  return e;
};
Sr.prototype.skipCharsBack = function(e, t, i) {
  if (e <= i)
    return e;
  for (; e > i; )
    if (t !== this.src.charCodeAt(--e))
      return e + 1;
  return e;
};
Sr.prototype.getLines = function(e, t, i, s) {
  var r, o, l, a, c, u, h, f = e;
  if (e >= t)
    return "";
  for (u = new Array(t - e), r = 0; f < t; f++, r++) {
    for (o = 0, h = a = this.bMarks[f], f + 1 < t || s ? c = this.eMarks[f] + 1 : c = this.eMarks[f]; a < c && o < i; ) {
      if (l = this.src.charCodeAt(a), yg(l))
        l === 9 ? o += 4 - (o + this.bsCount[f]) % 4 : o++;
      else if (a - h < this.tShift[f])
        o++;
      else
        break;
      a++;
    }
    o > i ? u[r] = new Array(o - i + 1).join(" ") + this.src.slice(a, c) : u[r] = this.src.slice(a, c);
  }
  return u.join("");
};
Sr.prototype.Token = AT;
var AIe = Sr, EIe = Dy, qf = [
  // First 2 params - rule name & source. Secondary array - list of rules,
  // which can be terminated by this one.
  ["table", U3e, ["paragraph", "reference"]],
  ["code", K3e],
  ["fence", J3e, ["paragraph", "reference", "blockquote", "list"]],
  ["blockquote", tIe, ["paragraph", "reference", "blockquote", "list"]],
  ["hr", iIe, ["paragraph", "reference", "blockquote", "list"]],
  ["list", rIe, ["paragraph", "reference", "blockquote"]],
  ["reference", lIe],
  ["html_block", SIe, ["paragraph", "reference", "blockquote"]],
  ["heading", CIe, ["paragraph", "reference", "blockquote"]],
  ["lheading", kIe],
  ["paragraph", PIe]
];
function Og() {
  this.ruler = new EIe();
  for (var n = 0; n < qf.length; n++)
    this.ruler.push(qf[n][0], qf[n][1], { alt: (qf[n][2] || []).slice() });
}
Og.prototype.tokenize = function(n, e, t) {
  for (var i, s, r, o = this.ruler.getRules(""), l = o.length, a = e, c = !1, u = n.md.options.maxNesting; a < t && (n.line = a = n.skipEmptyLines(a), !(a >= t || n.sCount[a] < n.blkIndent)); ) {
    if (n.level >= u) {
      n.line = t;
      break;
    }
    for (r = n.line, s = 0; s < l; s++)
      if (i = o[s](n, a, t, !1), i) {
        if (r >= n.line)
          throw new Error("block rule didn't increment state.line");
        break;
      }
    if (!i)
      throw new Error("none of the block rules matched");
    n.tight = !c, n.isEmpty(n.line - 1) && (c = !0), a = n.line, a < t && n.isEmpty(a) && (c = !0, a++, n.line = a);
  }
};
Og.prototype.parse = function(n, e, t, i) {
  var s;
  n && (s = new this.State(n, e, t, i), this.tokenize(s, s.line, s.lineMax));
};
Og.prototype.State = AIe;
var $Ie = Og;
function TIe(n) {
  switch (n) {
    case 10:
    case 33:
    case 35:
    case 36:
    case 37:
    case 38:
    case 42:
    case 43:
    case 45:
    case 58:
    case 60:
    case 61:
    case 62:
    case 64:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 123:
    case 125:
    case 126:
      return !0;
    default:
      return !1;
  }
}
var _Ie = function(e, t) {
  for (var i = e.pos; i < e.posMax && !TIe(e.src.charCodeAt(i)); )
    i++;
  return i === e.pos ? !1 : (t || (e.pending += e.src.slice(e.pos, i)), e.pos = i, !0);
}, MIe = /(?:^|[^a-z0-9.+-])([a-z][a-z0-9.+-]*)$/i, RIe = function(e, t) {
  var i, s, r, o, l, a, c, u;
  return !e.md.options.linkify || e.linkLevel > 0 || (i = e.pos, s = e.posMax, i + 3 > s) || e.src.charCodeAt(i) !== 58 || e.src.charCodeAt(i + 1) !== 47 || e.src.charCodeAt(i + 2) !== 47 || (r = e.pending.match(MIe), !r) || (o = r[1], l = e.md.linkify.matchAtStart(e.src.slice(i - o.length)), !l) || (a = l.url, a.length <= o.length) || (a = a.replace(/\*+$/, ""), c = e.md.normalizeLink(a), !e.md.validateLink(c)) ? !1 : (t || (e.pending = e.pending.slice(0, -o.length), u = e.push("link_open", "a", 1), u.attrs = [["href", c]], u.markup = "linkify", u.info = "auto", u = e.push("text", "", 0), u.content = e.md.normalizeLinkText(a), u = e.push("link_close", "a", -1), u.markup = "linkify", u.info = "auto"), e.pos += a.length - o.length, !0);
}, DIe = gt.isSpace, LIe = function(e, t) {
  var i, s, r, o = e.pos;
  if (e.src.charCodeAt(o) !== 10)
    return !1;
  if (i = e.pending.length - 1, s = e.posMax, !t)
    if (i >= 0 && e.pending.charCodeAt(i) === 32)
      if (i >= 1 && e.pending.charCodeAt(i - 1) === 32) {
        for (r = i - 1; r >= 1 && e.pending.charCodeAt(r - 1) === 32; )
          r--;
        e.pending = e.pending.slice(0, r), e.push("hardbreak", "br", 0);
      } else
        e.pending = e.pending.slice(0, -1), e.push("softbreak", "br", 0);
    else
      e.push("softbreak", "br", 0);
  for (o++; o < s && DIe(e.src.charCodeAt(o)); )
    o++;
  return e.pos = o, !0;
}, NIe = gt.isSpace, Iy = [];
for (var zS = 0; zS < 256; zS++)
  Iy.push(0);
"\\!\"#$%&'()*+,./:;<=>?@[]^_`{|}~-".split("").forEach(function(n) {
  Iy[n.charCodeAt(0)] = 1;
});
var IIe = function(e, t) {
  var i, s, r, o, l, a = e.pos, c = e.posMax;
  if (e.src.charCodeAt(a) !== 92 || (a++, a >= c))
    return !1;
  if (i = e.src.charCodeAt(a), i === 10) {
    for (t || e.push("hardbreak", "br", 0), a++; a < c && (i = e.src.charCodeAt(a), !!NIe(i)); )
      a++;
    return e.pos = a, !0;
  }
  return o = e.src[a], i >= 55296 && i <= 56319 && a + 1 < c && (s = e.src.charCodeAt(a + 1), s >= 56320 && s <= 57343 && (o += e.src[a + 1], a++)), r = "\\" + o, t || (l = e.push("text_special", "", 0), i < 256 && Iy[i] !== 0 ? l.content = o : l.content = r, l.markup = r, l.info = "escape"), e.pos = a + 1, !0;
}, QIe = function(e, t) {
  var i, s, r, o, l, a, c, u, h = e.pos, f = e.src.charCodeAt(h);
  if (f !== 96)
    return !1;
  for (i = h, h++, s = e.posMax; h < s && e.src.charCodeAt(h) === 96; )
    h++;
  if (r = e.src.slice(i, h), c = r.length, e.backticksScanned && (e.backticks[c] || 0) <= i)
    return t || (e.pending += r), e.pos += c, !0;
  for (a = h; (l = e.src.indexOf("`", a)) !== -1; ) {
    for (a = l + 1; a < s && e.src.charCodeAt(a) === 96; )
      a++;
    if (u = a - l, u === c)
      return t || (o = e.push("code_inline", "code", 0), o.markup = r, o.content = e.src.slice(h, l).replace(/\n/g, " ").replace(/^ (.+) $/, "$1")), e.pos = a, !0;
    e.backticks[u] = l;
  }
  return e.backticksScanned = !0, t || (e.pending += r), e.pos += c, !0;
}, wg = {};
wg.tokenize = function(e, t) {
  var i, s, r, o, l, a = e.pos, c = e.src.charCodeAt(a);
  if (t || c !== 126 || (s = e.scanDelims(e.pos, !0), o = s.length, l = String.fromCharCode(c), o < 2))
    return !1;
  for (o % 2 && (r = e.push("text", "", 0), r.content = l, o--), i = 0; i < o; i += 2)
    r = e.push("text", "", 0), r.content = l + l, e.delimiters.push({
      marker: c,
      length: 0,
      // disable "rule of 3" length checks meant for emphasis
      token: e.tokens.length - 1,
      end: -1,
      open: s.can_open,
      close: s.can_close
    });
  return e.pos += s.length, !0;
};
function ZS(n, e) {
  var t, i, s, r, o, l = [], a = e.length;
  for (t = 0; t < a; t++)
    s = e[t], s.marker === 126 && s.end !== -1 && (r = e[s.end], o = n.tokens[s.token], o.type = "s_open", o.tag = "s", o.nesting = 1, o.markup = "~~", o.content = "", o = n.tokens[r.token], o.type = "s_close", o.tag = "s", o.nesting = -1, o.markup = "~~", o.content = "", n.tokens[r.token - 1].type === "text" && n.tokens[r.token - 1].content === "~" && l.push(r.token - 1));
  for (; l.length; ) {
    for (t = l.pop(), i = t + 1; i < n.tokens.length && n.tokens[i].type === "s_close"; )
      i++;
    i--, t !== i && (o = n.tokens[i], n.tokens[i] = n.tokens[t], n.tokens[t] = o);
  }
}
wg.postProcess = function(e) {
  var t, i = e.tokens_meta, s = e.tokens_meta.length;
  for (ZS(e, e.delimiters), t = 0; t < s; t++)
    i[t] && i[t].delimiters && ZS(e, i[t].delimiters);
};
var xg = {};
xg.tokenize = function(e, t) {
  var i, s, r, o = e.pos, l = e.src.charCodeAt(o);
  if (t || l !== 95 && l !== 42)
    return !1;
  for (s = e.scanDelims(e.pos, l === 42), i = 0; i < s.length; i++)
    r = e.push("text", "", 0), r.content = String.fromCharCode(l), e.delimiters.push({
      // Char code of the starting marker (number).
      //
      marker: l,
      // Total length of these series of delimiters.
      //
      length: s.length,
      // A position of the token this delimiter corresponds to.
      //
      token: e.tokens.length - 1,
      // If this delimiter is matched as a valid opener, `end` will be
      // equal to its position, otherwise it's `-1`.
      //
      end: -1,
      // Boolean flags that determine if this delimiter could open or close
      // an emphasis.
      //
      open: s.can_open,
      close: s.can_close
    });
  return e.pos += s.length, !0;
};
function FS(n, e) {
  var t, i, s, r, o, l, a = e.length;
  for (t = a - 1; t >= 0; t--)
    i = e[t], !(i.marker !== 95 && i.marker !== 42) && i.end !== -1 && (s = e[i.end], l = t > 0 && e[t - 1].end === i.end + 1 && // check that first two markers match and adjacent
    e[t - 1].marker === i.marker && e[t - 1].token === i.token - 1 && // check that last two markers are adjacent (we can safely assume they match)
    e[i.end + 1].token === s.token + 1, o = String.fromCharCode(i.marker), r = n.tokens[i.token], r.type = l ? "strong_open" : "em_open", r.tag = l ? "strong" : "em", r.nesting = 1, r.markup = l ? o + o : o, r.content = "", r = n.tokens[s.token], r.type = l ? "strong_close" : "em_close", r.tag = l ? "strong" : "em", r.nesting = -1, r.markup = l ? o + o : o, r.content = "", l && (n.tokens[e[t - 1].token].content = "", n.tokens[e[i.end + 1].token].content = "", t--));
}
xg.postProcess = function(e) {
  var t, i = e.tokens_meta, s = e.tokens_meta.length;
  for (FS(e, e.delimiters), t = 0; t < s; t++)
    i[t] && i[t].delimiters && FS(e, i[t].delimiters);
};
var BIe = gt.normalizeReference, Qm = gt.isSpace, jIe = function(e, t) {
  var i, s, r, o, l, a, c, u, h, f = "", d = "", p = e.pos, g = e.posMax, m = e.pos, b = !0;
  if (e.src.charCodeAt(e.pos) !== 91 || (l = e.pos + 1, o = e.md.helpers.parseLinkLabel(e, e.pos, !0), o < 0))
    return !1;
  if (a = o + 1, a < g && e.src.charCodeAt(a) === 40) {
    for (b = !1, a++; a < g && (s = e.src.charCodeAt(a), !(!Qm(s) && s !== 10)); a++)
      ;
    if (a >= g)
      return !1;
    if (m = a, c = e.md.helpers.parseLinkDestination(e.src, a, e.posMax), c.ok) {
      for (f = e.md.normalizeLink(c.str), e.md.validateLink(f) ? a = c.pos : f = "", m = a; a < g && (s = e.src.charCodeAt(a), !(!Qm(s) && s !== 10)); a++)
        ;
      if (c = e.md.helpers.parseLinkTitle(e.src, a, e.posMax), a < g && m !== a && c.ok)
        for (d = c.str, a = c.pos; a < g && (s = e.src.charCodeAt(a), !(!Qm(s) && s !== 10)); a++)
          ;
    }
    (a >= g || e.src.charCodeAt(a) !== 41) && (b = !0), a++;
  }
  if (b) {
    if (typeof e.env.references > "u")
      return !1;
    if (a < g && e.src.charCodeAt(a) === 91 ? (m = a + 1, a = e.md.helpers.parseLinkLabel(e, a), a >= 0 ? r = e.src.slice(m, a++) : a = o + 1) : a = o + 1, r || (r = e.src.slice(l, o)), u = e.env.references[BIe(r)], !u)
      return e.pos = p, !1;
    f = u.href, d = u.title;
  }
  return t || (e.pos = l, e.posMax = o, h = e.push("link_open", "a", 1), h.attrs = i = [["href", f]], d && i.push(["title", d]), e.linkLevel++, e.md.inline.tokenize(e), e.linkLevel--, h = e.push("link_close", "a", -1)), e.pos = a, e.posMax = g, !0;
}, zIe = gt.normalizeReference, Bm = gt.isSpace, ZIe = function(e, t) {
  var i, s, r, o, l, a, c, u, h, f, d, p, g, m = "", b = e.pos, y = e.posMax;
  if (e.src.charCodeAt(e.pos) !== 33 || e.src.charCodeAt(e.pos + 1) !== 91 || (a = e.pos + 2, l = e.md.helpers.parseLinkLabel(e, e.pos + 1, !1), l < 0))
    return !1;
  if (c = l + 1, c < y && e.src.charCodeAt(c) === 40) {
    for (c++; c < y && (s = e.src.charCodeAt(c), !(!Bm(s) && s !== 10)); c++)
      ;
    if (c >= y)
      return !1;
    for (g = c, h = e.md.helpers.parseLinkDestination(e.src, c, e.posMax), h.ok && (m = e.md.normalizeLink(h.str), e.md.validateLink(m) ? c = h.pos : m = ""), g = c; c < y && (s = e.src.charCodeAt(c), !(!Bm(s) && s !== 10)); c++)
      ;
    if (h = e.md.helpers.parseLinkTitle(e.src, c, e.posMax), c < y && g !== c && h.ok)
      for (f = h.str, c = h.pos; c < y && (s = e.src.charCodeAt(c), !(!Bm(s) && s !== 10)); c++)
        ;
    else
      f = "";
    if (c >= y || e.src.charCodeAt(c) !== 41)
      return e.pos = b, !1;
    c++;
  } else {
    if (typeof e.env.references > "u")
      return !1;
    if (c < y && e.src.charCodeAt(c) === 91 ? (g = c + 1, c = e.md.helpers.parseLinkLabel(e, c), c >= 0 ? o = e.src.slice(g, c++) : c = l + 1) : c = l + 1, o || (o = e.src.slice(a, l)), u = e.env.references[zIe(o)], !u)
      return e.pos = b, !1;
    m = u.href, f = u.title;
  }
  return t || (r = e.src.slice(a, l), e.md.inline.parse(
    r,
    e.md,
    e.env,
    p = []
  ), d = e.push("image", "img", 0), d.attrs = i = [["src", m], ["alt", ""]], d.children = p, d.content = r, f && i.push(["title", f])), e.pos = c, e.posMax = y, !0;
}, FIe = /^([a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/, VIe = /^([a-zA-Z][a-zA-Z0-9+.\-]{1,31}):([^<>\x00-\x20]*)$/, qIe = function(e, t) {
  var i, s, r, o, l, a, c = e.pos;
  if (e.src.charCodeAt(c) !== 60)
    return !1;
  for (l = e.pos, a = e.posMax; ; ) {
    if (++c >= a || (o = e.src.charCodeAt(c), o === 60))
      return !1;
    if (o === 62)
      break;
  }
  return i = e.src.slice(l + 1, c), VIe.test(i) ? (s = e.md.normalizeLink(i), e.md.validateLink(s) ? (t || (r = e.push("link_open", "a", 1), r.attrs = [["href", s]], r.markup = "autolink", r.info = "auto", r = e.push("text", "", 0), r.content = e.md.normalizeLinkText(i), r = e.push("link_close", "a", -1), r.markup = "autolink", r.info = "auto"), e.pos += i.length + 2, !0) : !1) : FIe.test(i) ? (s = e.md.normalizeLink("mailto:" + i), e.md.validateLink(s) ? (t || (r = e.push("link_open", "a", 1), r.attrs = [["href", s]], r.markup = "autolink", r.info = "auto", r = e.push("text", "", 0), r.content = e.md.normalizeLinkText(i), r = e.push("link_close", "a", -1), r.markup = "autolink", r.info = "auto"), e.pos += i.length + 2, !0) : !1) : !1;
}, WIe = vg.HTML_TAG_RE;
function XIe(n) {
  return /^<a[>\s]/i.test(n);
}
function YIe(n) {
  return /^<\/a\s*>/i.test(n);
}
function HIe(n) {
  var e = n | 32;
  return e >= 97 && e <= 122;
}
var GIe = function(e, t) {
  var i, s, r, o, l = e.pos;
  return !e.md.options.html || (r = e.posMax, e.src.charCodeAt(l) !== 60 || l + 2 >= r) || (i = e.src.charCodeAt(l + 1), i !== 33 && i !== 63 && i !== 47 && !HIe(i)) || (s = e.src.slice(l).match(WIe), !s) ? !1 : (t || (o = e.push("html_inline", "", 0), o.content = s[0], XIe(o.content) && e.linkLevel++, YIe(o.content) && e.linkLevel--), e.pos += s[0].length, !0);
}, VS = vT, UIe = gt.has, KIe = gt.isValidEntityCode, qS = gt.fromCodePoint, JIe = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i, eQe = /^&([a-z][a-z0-9]{1,31});/i, tQe = function(e, t) {
  var i, s, r, o, l = e.pos, a = e.posMax;
  if (e.src.charCodeAt(l) !== 38 || l + 1 >= a)
    return !1;
  if (i = e.src.charCodeAt(l + 1), i === 35) {
    if (r = e.src.slice(l).match(JIe), r)
      return t || (s = r[1][0].toLowerCase() === "x" ? parseInt(r[1].slice(1), 16) : parseInt(r[1], 10), o = e.push("text_special", "", 0), o.content = KIe(s) ? qS(s) : qS(65533), o.markup = r[0], o.info = "entity"), e.pos += r[0].length, !0;
  } else if (r = e.src.slice(l).match(eQe), r && UIe(VS, r[1]))
    return t || (o = e.push("text_special", "", 0), o.content = VS[r[1]], o.markup = r[0], o.info = "entity"), e.pos += r[0].length, !0;
  return !1;
};
function WS(n) {
  var e, t, i, s, r, o, l, a, c = {}, u = n.length;
  if (u) {
    var h = 0, f = -2, d = [];
    for (e = 0; e < u; e++)
      if (i = n[e], d.push(0), (n[h].marker !== i.marker || f !== i.token - 1) && (h = e), f = i.token, i.length = i.length || 0, !!i.close) {
        for (c.hasOwnProperty(i.marker) || (c[i.marker] = [-1, -1, -1, -1, -1, -1]), r = c[i.marker][(i.open ? 3 : 0) + i.length % 3], t = h - d[h] - 1, o = t; t > r; t -= d[t] + 1)
          if (s = n[t], s.marker === i.marker && s.open && s.end < 0 && (l = !1, (s.close || i.open) && (s.length + i.length) % 3 === 0 && (s.length % 3 !== 0 || i.length % 3 !== 0) && (l = !0), !l)) {
            a = t > 0 && !n[t - 1].open ? d[t - 1] + 1 : 0, d[e] = e - t + a, d[t] = a, i.open = !1, s.end = e, s.close = !1, o = -1, f = -2;
            break;
          }
        o !== -1 && (c[i.marker][(i.open ? 3 : 0) + (i.length || 0) % 3] = o);
      }
  }
}
var nQe = function(e) {
  var t, i = e.tokens_meta, s = e.tokens_meta.length;
  for (WS(e.delimiters), t = 0; t < s; t++)
    i[t] && i[t].delimiters && WS(i[t].delimiters);
}, iQe = function(e) {
  var t, i, s = 0, r = e.tokens, o = e.tokens.length;
  for (t = i = 0; t < o; t++)
    r[t].nesting < 0 && s--, r[t].level = s, r[t].nesting > 0 && s++, r[t].type === "text" && t + 1 < o && r[t + 1].type === "text" ? r[t + 1].content = r[t].content + r[t + 1].content : (t !== i && (r[i] = r[t]), i++);
  t !== i && (r.length = i);
}, Qy = Ly, XS = gt.isWhiteSpace, YS = gt.isPunctChar, HS = gt.isMdAsciiPunct;
function ef(n, e, t, i) {
  this.src = n, this.env = t, this.md = e, this.tokens = i, this.tokens_meta = Array(i.length), this.pos = 0, this.posMax = this.src.length, this.level = 0, this.pending = "", this.pendingLevel = 0, this.cache = {}, this.delimiters = [], this._prev_delimiters = [], this.backticks = {}, this.backticksScanned = !1, this.linkLevel = 0;
}
ef.prototype.pushPending = function() {
  var n = new Qy("text", "", 0);
  return n.content = this.pending, n.level = this.pendingLevel, this.tokens.push(n), this.pending = "", n;
};
ef.prototype.push = function(n, e, t) {
  this.pending && this.pushPending();
  var i = new Qy(n, e, t), s = null;
  return t < 0 && (this.level--, this.delimiters = this._prev_delimiters.pop()), i.level = this.level, t > 0 && (this.level++, this._prev_delimiters.push(this.delimiters), this.delimiters = [], s = { delimiters: this.delimiters }), this.pendingLevel = this.level, this.tokens.push(i), this.tokens_meta.push(s), i;
};
ef.prototype.scanDelims = function(n, e) {
  var t = n, i, s, r, o, l, a, c, u, h, f = !0, d = !0, p = this.posMax, g = this.src.charCodeAt(n);
  for (i = n > 0 ? this.src.charCodeAt(n - 1) : 32; t < p && this.src.charCodeAt(t) === g; )
    t++;
  return r = t - n, s = t < p ? this.src.charCodeAt(t) : 32, c = HS(i) || YS(String.fromCharCode(i)), h = HS(s) || YS(String.fromCharCode(s)), a = XS(i), u = XS(s), u ? f = !1 : h && (a || c || (f = !1)), a ? d = !1 : c && (u || h || (d = !1)), e ? (o = f, l = d) : (o = f && (!d || c), l = d && (!f || h)), {
    can_open: o,
    can_close: l,
    length: r
  };
};
ef.prototype.Token = Qy;
var sQe = ef, GS = Dy, jm = [
  ["text", _Ie],
  ["linkify", RIe],
  ["newline", LIe],
  ["escape", IIe],
  ["backticks", QIe],
  ["strikethrough", wg.tokenize],
  ["emphasis", xg.tokenize],
  ["link", jIe],
  ["image", ZIe],
  ["autolink", qIe],
  ["html_inline", GIe],
  ["entity", tQe]
], zm = [
  ["balance_pairs", nQe],
  ["strikethrough", wg.postProcess],
  ["emphasis", xg.postProcess],
  // rules for pairs separate '**' into its own text tokens, which may be left unused,
  // rule below merges unused segments back with the rest of the text
  ["fragments_join", iQe]
];
function tf() {
  var n;
  for (this.ruler = new GS(), n = 0; n < jm.length; n++)
    this.ruler.push(jm[n][0], jm[n][1]);
  for (this.ruler2 = new GS(), n = 0; n < zm.length; n++)
    this.ruler2.push(zm[n][0], zm[n][1]);
}
tf.prototype.skipToken = function(n) {
  var e, t, i = n.pos, s = this.ruler.getRules(""), r = s.length, o = n.md.options.maxNesting, l = n.cache;
  if (typeof l[i] < "u") {
    n.pos = l[i];
    return;
  }
  if (n.level < o) {
    for (t = 0; t < r; t++)
      if (n.level++, e = s[t](n, !0), n.level--, e) {
        if (i >= n.pos)
          throw new Error("inline rule didn't increment state.pos");
        break;
      }
  } else
    n.pos = n.posMax;
  e || n.pos++, l[i] = n.pos;
};
tf.prototype.tokenize = function(n) {
  for (var e, t, i, s = this.ruler.getRules(""), r = s.length, o = n.posMax, l = n.md.options.maxNesting; n.pos < o; ) {
    if (i = n.pos, n.level < l) {
      for (t = 0; t < r; t++)
        if (e = s[t](n, !1), e) {
          if (i >= n.pos)
            throw new Error("inline rule didn't increment state.pos");
          break;
        }
    }
    if (e) {
      if (n.pos >= o)
        break;
      continue;
    }
    n.pending += n.src[n.pos++];
  }
  n.pending && n.pushPending();
};
tf.prototype.parse = function(n, e, t, i) {
  var s, r, o, l = new this.State(n, e, t, i);
  for (this.tokenize(l), r = this.ruler2.getRules(""), o = r.length, s = 0; s < o; s++)
    r[s](l);
};
tf.prototype.State = sQe;
var rQe = tf, Zm, US;
function oQe() {
  return US || (US = 1, Zm = function(n) {
    var e = {};
    n = n || {}, e.src_Any = yT().source, e.src_Cc = OT().source, e.src_Z = wT().source, e.src_P = Ry.source, e.src_ZPCc = [e.src_Z, e.src_P, e.src_Cc].join("|"), e.src_ZCc = [e.src_Z, e.src_Cc].join("|");
    var t = "[><｜]";
    return e.src_pseudo_letter = "(?:(?!" + t + "|" + e.src_ZPCc + ")" + e.src_Any + ")", e.src_ip4 = "(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)", e.src_auth = "(?:(?:(?!" + e.src_ZCc + "|[@/\\[\\]()]).)+@)?", e.src_port = "(?::(?:6(?:[0-4]\\d{3}|5(?:[0-4]\\d{2}|5(?:[0-2]\\d|3[0-5])))|[1-5]?\\d{1,4}))?", e.src_host_terminator = "(?=$|" + t + "|" + e.src_ZPCc + ")(?!" + (n["---"] ? "-(?!--)|" : "-|") + "_|:\\d|\\.-|\\.(?!$|" + e.src_ZPCc + "))", e.src_path = "(?:[/?#](?:(?!" + e.src_ZCc + "|" + t + `|[()[\\]{}.,"'?!\\-;]).|\\[(?:(?!` + e.src_ZCc + "|\\]).)*\\]|\\((?:(?!" + e.src_ZCc + "|[)]).)*\\)|\\{(?:(?!" + e.src_ZCc + '|[}]).)*\\}|\\"(?:(?!' + e.src_ZCc + `|["]).)+\\"|\\'(?:(?!` + e.src_ZCc + "|[']).)+\\'|\\'(?=" + e.src_pseudo_letter + "|[-])|\\.{2,}[a-zA-Z0-9%/&]|\\.(?!" + e.src_ZCc + "|[.]|$)|" + (n["---"] ? "\\-(?!--(?:[^-]|$))(?:-*)|" : "\\-+|") + ",(?!" + e.src_ZCc + "|$)|;(?!" + e.src_ZCc + "|$)|\\!+(?!" + e.src_ZCc + "|[!]|$)|\\?(?!" + e.src_ZCc + "|[?]|$))+|\\/)?", e.src_email_name = '[\\-;:&=\\+\\$,\\.a-zA-Z0-9_][\\-;:&=\\+\\$,\\"\\.a-zA-Z0-9_]*', e.src_xn = "xn--[a-z0-9\\-]{1,59}", e.src_domain_root = // Allow letters & digits (http://test1)
    "(?:" + e.src_xn + "|" + e.src_pseudo_letter + "{1,63})", e.src_domain = "(?:" + e.src_xn + "|(?:" + e.src_pseudo_letter + ")|(?:" + e.src_pseudo_letter + "(?:-|" + e.src_pseudo_letter + "){0,61}" + e.src_pseudo_letter + "))", e.src_host = "(?:(?:(?:(?:" + e.src_domain + ")\\.)*" + e.src_domain + "))", e.tpl_host_fuzzy = "(?:" + e.src_ip4 + "|(?:(?:(?:" + e.src_domain + ")\\.)+(?:%TLDS%)))", e.tpl_host_no_ip_fuzzy = "(?:(?:(?:" + e.src_domain + ")\\.)+(?:%TLDS%))", e.src_host_strict = e.src_host + e.src_host_terminator, e.tpl_host_fuzzy_strict = e.tpl_host_fuzzy + e.src_host_terminator, e.src_host_port_strict = e.src_host + e.src_port + e.src_host_terminator, e.tpl_host_port_fuzzy_strict = e.tpl_host_fuzzy + e.src_port + e.src_host_terminator, e.tpl_host_port_no_ip_fuzzy_strict = e.tpl_host_no_ip_fuzzy + e.src_port + e.src_host_terminator, e.tpl_host_fuzzy_test = "localhost|www\\.|\\.\\d{1,3}\\.|(?:\\.(?:%TLDS%)(?:" + e.src_ZPCc + "|>|$))", e.tpl_email_fuzzy = "(^|" + t + '|"|\\(|' + e.src_ZCc + ")(" + e.src_email_name + "@" + e.tpl_host_fuzzy_strict + ")", e.tpl_link_fuzzy = // Fuzzy link can't be prepended with .:/\- and non punctuation.
    // but can start with > (markdown blockquote)
    "(^|(?![.:/\\-_@])(?:[$+<=>^`|｜]|" + e.src_ZPCc + "))((?![$+<=>^`|｜])" + e.tpl_host_port_fuzzy_strict + e.src_path + ")", e.tpl_link_no_ip_fuzzy = // Fuzzy link can't be prepended with .:/\- and non punctuation.
    // but can start with > (markdown blockquote)
    "(^|(?![.:/\\-_@])(?:[$+<=>^`|｜]|" + e.src_ZPCc + "))((?![$+<=>^`|｜])" + e.tpl_host_port_no_ip_fuzzy_strict + e.src_path + ")", e;
  }), Zm;
}
function Db(n) {
  var e = Array.prototype.slice.call(arguments, 1);
  return e.forEach(function(t) {
    t && Object.keys(t).forEach(function(i) {
      n[i] = t[i];
    });
  }), n;
}
function Sg(n) {
  return Object.prototype.toString.call(n);
}
function lQe(n) {
  return Sg(n) === "[object String]";
}
function aQe(n) {
  return Sg(n) === "[object Object]";
}
function cQe(n) {
  return Sg(n) === "[object RegExp]";
}
function KS(n) {
  return Sg(n) === "[object Function]";
}
function uQe(n) {
  return n.replace(/[.?*+^$[\]\\(){}|-]/g, "\\$&");
}
var ET = {
  fuzzyLink: !0,
  fuzzyEmail: !0,
  fuzzyIP: !1
};
function hQe(n) {
  return Object.keys(n || {}).reduce(function(e, t) {
    return e || ET.hasOwnProperty(t);
  }, !1);
}
var fQe = {
  "http:": {
    validate: function(n, e, t) {
      var i = n.slice(e);
      return t.re.http || (t.re.http = new RegExp(
        "^\\/\\/" + t.re.src_auth + t.re.src_host_port_strict + t.re.src_path,
        "i"
      )), t.re.http.test(i) ? i.match(t.re.http)[0].length : 0;
    }
  },
  "https:": "http:",
  "ftp:": "http:",
  "//": {
    validate: function(n, e, t) {
      var i = n.slice(e);
      return t.re.no_http || (t.re.no_http = new RegExp(
        "^" + t.re.src_auth + // Don't allow single-level domains, because of false positives like '//test'
        // with code comments
        "(?:localhost|(?:(?:" + t.re.src_domain + ")\\.)+" + t.re.src_domain_root + ")" + t.re.src_port + t.re.src_host_terminator + t.re.src_path,
        "i"
      )), t.re.no_http.test(i) ? e >= 3 && n[e - 3] === ":" || e >= 3 && n[e - 3] === "/" ? 0 : i.match(t.re.no_http)[0].length : 0;
    }
  },
  "mailto:": {
    validate: function(n, e, t) {
      var i = n.slice(e);
      return t.re.mailto || (t.re.mailto = new RegExp(
        "^" + t.re.src_email_name + "@" + t.re.src_host_strict,
        "i"
      )), t.re.mailto.test(i) ? i.match(t.re.mailto)[0].length : 0;
    }
  }
}, dQe = "a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]", pQe = "biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф".split("|");
function gQe(n) {
  n.__index__ = -1, n.__text_cache__ = "";
}
function mQe(n) {
  return function(e, t) {
    var i = e.slice(t);
    return n.test(i) ? i.match(n)[0].length : 0;
  };
}
function JS() {
  return function(n, e) {
    e.normalize(n);
  };
}
function fp(n) {
  var e = n.re = oQe()(n.__opts__), t = n.__tlds__.slice();
  n.onCompile(), n.__tlds_replaced__ || t.push(dQe), t.push(e.src_xn), e.src_tlds = t.join("|");
  function i(l) {
    return l.replace("%TLDS%", e.src_tlds);
  }
  e.email_fuzzy = RegExp(i(e.tpl_email_fuzzy), "i"), e.link_fuzzy = RegExp(i(e.tpl_link_fuzzy), "i"), e.link_no_ip_fuzzy = RegExp(i(e.tpl_link_no_ip_fuzzy), "i"), e.host_fuzzy_test = RegExp(i(e.tpl_host_fuzzy_test), "i");
  var s = [];
  n.__compiled__ = {};
  function r(l, a) {
    throw new Error('(LinkifyIt) Invalid schema "' + l + '": ' + a);
  }
  Object.keys(n.__schemas__).forEach(function(l) {
    var a = n.__schemas__[l];
    if (a !== null) {
      var c = { validate: null, link: null };
      if (n.__compiled__[l] = c, aQe(a)) {
        cQe(a.validate) ? c.validate = mQe(a.validate) : KS(a.validate) ? c.validate = a.validate : r(l, a), KS(a.normalize) ? c.normalize = a.normalize : a.normalize ? r(l, a) : c.normalize = JS();
        return;
      }
      if (lQe(a)) {
        s.push(l);
        return;
      }
      r(l, a);
    }
  }), s.forEach(function(l) {
    n.__compiled__[n.__schemas__[l]] && (n.__compiled__[l].validate = n.__compiled__[n.__schemas__[l]].validate, n.__compiled__[l].normalize = n.__compiled__[n.__schemas__[l]].normalize);
  }), n.__compiled__[""] = { validate: null, normalize: JS() };
  var o = Object.keys(n.__compiled__).filter(function(l) {
    return l.length > 0 && n.__compiled__[l];
  }).map(uQe).join("|");
  n.re.schema_test = RegExp("(^|(?!_)(?:[><｜]|" + e.src_ZPCc + "))(" + o + ")", "i"), n.re.schema_search = RegExp("(^|(?!_)(?:[><｜]|" + e.src_ZPCc + "))(" + o + ")", "ig"), n.re.schema_at_start = RegExp("^" + n.re.schema_search.source, "i"), n.re.pretest = RegExp(
    "(" + n.re.schema_test.source + ")|(" + n.re.host_fuzzy_test.source + ")|@",
    "i"
  ), gQe(n);
}
function bQe(n, e) {
  var t = n.__index__, i = n.__last_index__, s = n.__text_cache__.slice(t, i);
  this.schema = n.__schema__.toLowerCase(), this.index = t + e, this.lastIndex = i + e, this.raw = s, this.text = s, this.url = s;
}
function Lb(n, e) {
  var t = new bQe(n, e);
  return n.__compiled__[t.schema].normalize(t, n), t;
}
function ji(n, e) {
  if (!(this instanceof ji))
    return new ji(n, e);
  e || hQe(n) && (e = n, n = {}), this.__opts__ = Db({}, ET, e), this.__index__ = -1, this.__last_index__ = -1, this.__schema__ = "", this.__text_cache__ = "", this.__schemas__ = Db({}, fQe, n), this.__compiled__ = {}, this.__tlds__ = pQe, this.__tlds_replaced__ = !1, this.re = {}, fp(this);
}
ji.prototype.add = function(e, t) {
  return this.__schemas__[e] = t, fp(this), this;
};
ji.prototype.set = function(e) {
  return this.__opts__ = Db(this.__opts__, e), this;
};
ji.prototype.test = function(e) {
  if (this.__text_cache__ = e, this.__index__ = -1, !e.length)
    return !1;
  var t, i, s, r, o, l, a, c, u;
  if (this.re.schema_test.test(e)) {
    for (a = this.re.schema_search, a.lastIndex = 0; (t = a.exec(e)) !== null; )
      if (r = this.testSchemaAt(e, t[2], a.lastIndex), r) {
        this.__schema__ = t[2], this.__index__ = t.index + t[1].length, this.__last_index__ = t.index + t[0].length + r;
        break;
      }
  }
  return this.__opts__.fuzzyLink && this.__compiled__["http:"] && (c = e.search(this.re.host_fuzzy_test), c >= 0 && (this.__index__ < 0 || c < this.__index__) && (i = e.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null && (o = i.index + i[1].length, (this.__index__ < 0 || o < this.__index__) && (this.__schema__ = "", this.__index__ = o, this.__last_index__ = i.index + i[0].length))), this.__opts__.fuzzyEmail && this.__compiled__["mailto:"] && (u = e.indexOf("@"), u >= 0 && (s = e.match(this.re.email_fuzzy)) !== null && (o = s.index + s[1].length, l = s.index + s[0].length, (this.__index__ < 0 || o < this.__index__ || o === this.__index__ && l > this.__last_index__) && (this.__schema__ = "mailto:", this.__index__ = o, this.__last_index__ = l))), this.__index__ >= 0;
};
ji.prototype.pretest = function(e) {
  return this.re.pretest.test(e);
};
ji.prototype.testSchemaAt = function(e, t, i) {
  return this.__compiled__[t.toLowerCase()] ? this.__compiled__[t.toLowerCase()].validate(e, i, this) : 0;
};
ji.prototype.match = function(e) {
  var t = 0, i = [];
  this.__index__ >= 0 && this.__text_cache__ === e && (i.push(Lb(this, t)), t = this.__last_index__);
  for (var s = t ? e.slice(t) : e; this.test(s); )
    i.push(Lb(this, t)), s = s.slice(this.__last_index__), t += this.__last_index__;
  return i.length ? i : null;
};
ji.prototype.matchAtStart = function(e) {
  if (this.__text_cache__ = e, this.__index__ = -1, !e.length)
    return null;
  var t = this.re.schema_at_start.exec(e);
  if (!t)
    return null;
  var i = this.testSchemaAt(e, t[2], t[0].length);
  return i ? (this.__schema__ = t[2], this.__index__ = t.index + t[1].length, this.__last_index__ = t.index + t[0].length + i, Lb(this, 0)) : null;
};
ji.prototype.tlds = function(e, t) {
  return e = Array.isArray(e) ? e : [e], t ? (this.__tlds__ = this.__tlds__.concat(e).sort().filter(function(i, s, r) {
    return i !== r[s - 1];
  }).reverse(), fp(this), this) : (this.__tlds__ = e.slice(), this.__tlds_replaced__ = !0, fp(this), this);
};
ji.prototype.normalize = function(e) {
  e.schema || (e.url = "http://" + e.url), e.schema === "mailto:" && !/^mailto:/i.test(e.url) && (e.url = "mailto:" + e.url);
};
ji.prototype.onCompile = function() {
};
var vQe = ji;
const Ta = 2147483647, nr = 36, By = 1, dh = 26, yQe = 38, OQe = 700, $T = 72, TT = 128, _T = "-", wQe = /^xn--/, xQe = /[^\0-\x7F]/, SQe = /[\x2E\u3002\uFF0E\uFF61]/g, CQe = {
  overflow: "Overflow: input needs wider integers to process",
  "not-basic": "Illegal input >= 0x80 (not a basic code point)",
  "invalid-input": "Invalid input"
}, Fm = nr - By, ir = Math.floor, Vm = String.fromCharCode;
function co(n) {
  throw new RangeError(CQe[n]);
}
function kQe(n, e) {
  const t = [];
  let i = n.length;
  for (; i--; )
    t[i] = e(n[i]);
  return t;
}
function MT(n, e) {
  const t = n.split("@");
  let i = "";
  t.length > 1 && (i = t[0] + "@", n = t[1]), n = n.replace(SQe, ".");
  const s = n.split("."), r = kQe(s, e).join(".");
  return i + r;
}
function jy(n) {
  const e = [];
  let t = 0;
  const i = n.length;
  for (; t < i; ) {
    const s = n.charCodeAt(t++);
    if (s >= 55296 && s <= 56319 && t < i) {
      const r = n.charCodeAt(t++);
      (r & 64512) == 56320 ? e.push(((s & 1023) << 10) + (r & 1023) + 65536) : (e.push(s), t--);
    } else
      e.push(s);
  }
  return e;
}
const RT = (n) => String.fromCodePoint(...n), PQe = function(n) {
  return n >= 48 && n < 58 ? 26 + (n - 48) : n >= 65 && n < 91 ? n - 65 : n >= 97 && n < 123 ? n - 97 : nr;
}, eC = function(n, e) {
  return n + 22 + 75 * (n < 26) - ((e != 0) << 5);
}, DT = function(n, e, t) {
  let i = 0;
  for (n = t ? ir(n / OQe) : n >> 1, n += ir(n / e); n > Fm * dh >> 1; i += nr)
    n = ir(n / Fm);
  return ir(i + (Fm + 1) * n / (n + yQe));
}, zy = function(n) {
  const e = [], t = n.length;
  let i = 0, s = TT, r = $T, o = n.lastIndexOf(_T);
  o < 0 && (o = 0);
  for (let l = 0; l < o; ++l)
    n.charCodeAt(l) >= 128 && co("not-basic"), e.push(n.charCodeAt(l));
  for (let l = o > 0 ? o + 1 : 0; l < t; ) {
    const a = i;
    for (let u = 1, h = nr; ; h += nr) {
      l >= t && co("invalid-input");
      const f = PQe(n.charCodeAt(l++));
      f >= nr && co("invalid-input"), f > ir((Ta - i) / u) && co("overflow"), i += f * u;
      const d = h <= r ? By : h >= r + dh ? dh : h - r;
      if (f < d)
        break;
      const p = nr - d;
      u > ir(Ta / p) && co("overflow"), u *= p;
    }
    const c = e.length + 1;
    r = DT(i - a, c, a == 0), ir(i / c) > Ta - s && co("overflow"), s += ir(i / c), i %= c, e.splice(i++, 0, s);
  }
  return String.fromCodePoint(...e);
}, Zy = function(n) {
  const e = [];
  n = jy(n);
  const t = n.length;
  let i = TT, s = 0, r = $T;
  for (const a of n)
    a < 128 && e.push(Vm(a));
  const o = e.length;
  let l = o;
  for (o && e.push(_T); l < t; ) {
    let a = Ta;
    for (const u of n)
      u >= i && u < a && (a = u);
    const c = l + 1;
    a - i > ir((Ta - s) / c) && co("overflow"), s += (a - i) * c, i = a;
    for (const u of n)
      if (u < i && ++s > Ta && co("overflow"), u === i) {
        let h = s;
        for (let f = nr; ; f += nr) {
          const d = f <= r ? By : f >= r + dh ? dh : f - r;
          if (h < d)
            break;
          const p = h - d, g = nr - d;
          e.push(
            Vm(eC(d + p % g, 0))
          ), h = ir(p / g);
        }
        e.push(Vm(eC(h, 0))), r = DT(s, c, l === o), s = 0, ++l;
      }
    ++s, ++i;
  }
  return e.join("");
}, LT = function(n) {
  return MT(n, function(e) {
    return wQe.test(e) ? zy(e.slice(4).toLowerCase()) : e;
  });
}, NT = function(n) {
  return MT(n, function(e) {
    return xQe.test(e) ? "xn--" + Zy(e) : e;
  });
}, AQe = {
  /**
   * A string representing the current Punycode.js version number.
   * @memberOf punycode
   * @type String
   */
  version: "2.3.1",
  /**
   * An object of methods to convert from JavaScript's internal character
   * representation (UCS-2) to Unicode code points, and back.
   * @see <https://mathiasbynens.be/notes/javascript-encoding>
   * @memberOf punycode
   * @type Object
   */
  ucs2: {
    decode: jy,
    encode: RT
  },
  decode: zy,
  encode: Zy,
  toASCII: NT,
  toUnicode: LT
}, EQe = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  decode: zy,
  default: AQe,
  encode: Zy,
  toASCII: NT,
  toUnicode: LT,
  ucs2decode: jy,
  ucs2encode: RT
}, Symbol.toStringTag, { value: "Module" })), $Qe = /* @__PURE__ */ cZ(EQe);
var TQe = {
  options: {
    html: !1,
    // Enable HTML tags in source
    xhtmlOut: !1,
    // Use '/' to close single tags (<br />)
    breaks: !1,
    // Convert '\n' in paragraphs into <br>
    langPrefix: "language-",
    // CSS language prefix for fenced blocks
    linkify: !1,
    // autoconvert URL-like texts to links
    // Enable some language-neutral replacements + quotes beautification
    typographer: !1,
    // Double + single quotes replacement pairs, when typographer enabled,
    // and smartquotes on. Could be either a String or an Array.
    //
    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
    // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
    quotes: "“”‘’",
    /* “”‘’ */
    // Highlighter function. Should return escaped HTML,
    // or '' if the source string is not changed and should be escaped externaly.
    // If result starts with <pre... internal wrapper is skipped.
    //
    // function (/*str, lang*/) { return ''; }
    //
    highlight: null,
    maxNesting: 100
    // Internal protection, recursion limit
  },
  components: {
    core: {},
    block: {},
    inline: {}
  }
}, _Qe = {
  options: {
    html: !1,
    // Enable HTML tags in source
    xhtmlOut: !1,
    // Use '/' to close single tags (<br />)
    breaks: !1,
    // Convert '\n' in paragraphs into <br>
    langPrefix: "language-",
    // CSS language prefix for fenced blocks
    linkify: !1,
    // autoconvert URL-like texts to links
    // Enable some language-neutral replacements + quotes beautification
    typographer: !1,
    // Double + single quotes replacement pairs, when typographer enabled,
    // and smartquotes on. Could be either a String or an Array.
    //
    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
    // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
    quotes: "“”‘’",
    /* “”‘’ */
    // Highlighter function. Should return escaped HTML,
    // or '' if the source string is not changed and should be escaped externaly.
    // If result starts with <pre... internal wrapper is skipped.
    //
    // function (/*str, lang*/) { return ''; }
    //
    highlight: null,
    maxNesting: 20
    // Internal protection, recursion limit
  },
  components: {
    core: {
      rules: [
        "normalize",
        "block",
        "inline",
        "text_join"
      ]
    },
    block: {
      rules: [
        "paragraph"
      ]
    },
    inline: {
      rules: [
        "text"
      ],
      rules2: [
        "balance_pairs",
        "fragments_join"
      ]
    }
  }
}, MQe = {
  options: {
    html: !0,
    // Enable HTML tags in source
    xhtmlOut: !0,
    // Use '/' to close single tags (<br />)
    breaks: !1,
    // Convert '\n' in paragraphs into <br>
    langPrefix: "language-",
    // CSS language prefix for fenced blocks
    linkify: !1,
    // autoconvert URL-like texts to links
    // Enable some language-neutral replacements + quotes beautification
    typographer: !1,
    // Double + single quotes replacement pairs, when typographer enabled,
    // and smartquotes on. Could be either a String or an Array.
    //
    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
    // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
    quotes: "“”‘’",
    /* “”‘’ */
    // Highlighter function. Should return escaped HTML,
    // or '' if the source string is not changed and should be escaped externaly.
    // If result starts with <pre... internal wrapper is skipped.
    //
    // function (/*str, lang*/) { return ''; }
    //
    highlight: null,
    maxNesting: 20
    // Internal protection, recursion limit
  },
  components: {
    core: {
      rules: [
        "normalize",
        "block",
        "inline",
        "text_join"
      ]
    },
    block: {
      rules: [
        "blockquote",
        "code",
        "fence",
        "heading",
        "hr",
        "html_block",
        "lheading",
        "list",
        "reference",
        "paragraph"
      ]
    },
    inline: {
      rules: [
        "autolink",
        "backticks",
        "emphasis",
        "entity",
        "escape",
        "html_inline",
        "image",
        "link",
        "newline",
        "text"
      ],
      rules2: [
        "balance_pairs",
        "emphasis",
        "fragments_join"
      ]
    }
  }
}, Eu = gt, RQe = bg, DQe = P3e, LQe = G3e, NQe = $Ie, IQe = rQe, QQe = vQe, ml = Nc, IT = $Qe, BQe = {
  default: TQe,
  zero: _Qe,
  commonmark: MQe
}, jQe = /^(vbscript|javascript|file|data):/, zQe = /^data:image\/(gif|png|jpeg|webp);/;
function ZQe(n) {
  var e = n.trim().toLowerCase();
  return jQe.test(e) ? !!zQe.test(e) : !0;
}
var QT = ["http:", "https:", "mailto:"];
function FQe(n) {
  var e = ml.parse(n, !0);
  if (e.hostname && (!e.protocol || QT.indexOf(e.protocol) >= 0))
    try {
      e.hostname = IT.toASCII(e.hostname);
    } catch {
    }
  return ml.encode(ml.format(e));
}
function VQe(n) {
  var e = ml.parse(n, !0);
  if (e.hostname && (!e.protocol || QT.indexOf(e.protocol) >= 0))
    try {
      e.hostname = IT.toUnicode(e.hostname);
    } catch {
    }
  return ml.decode(ml.format(e), ml.decode.defaultChars + "%");
}
function ss(n, e) {
  if (!(this instanceof ss))
    return new ss(n, e);
  e || Eu.isString(n) || (e = n || {}, n = "default"), this.inline = new IQe(), this.block = new NQe(), this.core = new LQe(), this.renderer = new DQe(), this.linkify = new QQe(), this.validateLink = ZQe, this.normalizeLink = FQe, this.normalizeLinkText = VQe, this.utils = Eu, this.helpers = Eu.assign({}, RQe), this.options = {}, this.configure(n), e && this.set(e);
}
ss.prototype.set = function(n) {
  return Eu.assign(this.options, n), this;
};
ss.prototype.configure = function(n) {
  var e = this, t;
  if (Eu.isString(n) && (t = n, n = BQe[t], !n))
    throw new Error('Wrong `markdown-it` preset "' + t + '", check name');
  if (!n)
    throw new Error("Wrong `markdown-it` preset, can't be empty");
  return n.options && e.set(n.options), n.components && Object.keys(n.components).forEach(function(i) {
    n.components[i].rules && e[i].ruler.enableOnly(n.components[i].rules), n.components[i].rules2 && e[i].ruler2.enableOnly(n.components[i].rules2);
  }), this;
};
ss.prototype.enable = function(n, e) {
  var t = [];
  Array.isArray(n) || (n = [n]), ["core", "block", "inline"].forEach(function(s) {
    t = t.concat(this[s].ruler.enable(n, !0));
  }, this), t = t.concat(this.inline.ruler2.enable(n, !0));
  var i = n.filter(function(s) {
    return t.indexOf(s) < 0;
  });
  if (i.length && !e)
    throw new Error("MarkdownIt. Failed to enable unknown rule(s): " + i);
  return this;
};
ss.prototype.disable = function(n, e) {
  var t = [];
  Array.isArray(n) || (n = [n]), ["core", "block", "inline"].forEach(function(s) {
    t = t.concat(this[s].ruler.disable(n, !0));
  }, this), t = t.concat(this.inline.ruler2.disable(n, !0));
  var i = n.filter(function(s) {
    return t.indexOf(s) < 0;
  });
  if (i.length && !e)
    throw new Error("MarkdownIt. Failed to disable unknown rule(s): " + i);
  return this;
};
ss.prototype.use = function(n) {
  var e = [this].concat(Array.prototype.slice.call(arguments, 1));
  return n.apply(n, e), this;
};
ss.prototype.parse = function(n, e) {
  if (typeof n != "string")
    throw new Error("Input data should be a String");
  var t = new this.core.State(n, this, e);
  return this.core.process(t), t.tokens;
};
ss.prototype.render = function(n, e) {
  return e = e || {}, this.renderer.render(this.parse(n, e), this.options, e);
};
ss.prototype.parseInline = function(n, e) {
  var t = new this.core.State(n, this, e);
  return t.inlineMode = !0, this.core.process(t), t.tokens;
};
ss.prototype.renderInline = function(n, e) {
  return e = e || {}, this.renderer.render(this.parseInline(n, e), this.options, e);
};
var qQe = ss, WQe = qQe;
const XQe = /* @__PURE__ */ Wh(WQe), tC = /* @__PURE__ */ new Set([!0, !1, "alt", "title"]);
function BT(n, e) {
  return (Array.isArray(n) ? n : []).filter(([t]) => t !== e);
}
function jT(n, e) {
  n && n.attrs && (n.attrs = BT(n.attrs, e));
}
function YQe(n, e) {
  if (!tC.has(n))
    throw new TypeError(`figcaption must be one of: ${[...tC]}.`);
  if (n === "alt")
    return e.content;
  const t = e.attrs.find(([i]) => i === "title");
  return Array.isArray(t) && t[1] ? (jT(e, "title"), t[1]) : void 0;
}
function HQe(n, e) {
  e = e || {}, n.core.ruler.before("linkify", "image_figures", function(t) {
    let i = 1;
    for (let s = 1, r = t.tokens.length; s < r - 1; ++s) {
      const o = t.tokens[s];
      if (o.type !== "inline" || !o.children || o.children.length !== 1 && o.children.length !== 3 || o.children.length === 1 && o.children[0].type !== "image")
        continue;
      if (o.children.length === 3) {
        const [c, u, h] = o.children;
        if (c.type !== "link_open" || u.type !== "image" || h.type !== "link_close")
          continue;
      }
      if (s !== 0 && t.tokens[s - 1].type !== "paragraph_open" || s !== r - 1 && t.tokens[s + 1].type !== "paragraph_close")
        continue;
      const l = t.tokens[s - 1];
      let a;
      if (l.type = "figure_open", l.tag = "figure", t.tokens[s + 1].type = "figure_close", t.tokens[s + 1].tag = "figure", e.dataType && t.tokens[s - 1].attrPush(["data-type", "image"]), e.link && o.children.length === 1) {
        [a] = o.children;
        const c = new t.Token("link_open", "a", 1);
        c.attrPush(["href", a.attrGet("src")]), o.children.unshift(c), o.children.push(new t.Token("link_close", "a", -1));
      }
      if (a = o.children.length === 1 ? o.children[0] : o.children[1], e.figcaption) {
        const c = YQe(e.figcaption, a);
        if (c) {
          const [u] = n.parseInline(c, t.env);
          o.children.push(new t.Token("figcaption_open", "figcaption", 1)), o.children.push(...u.children), o.children.push(new t.Token("figcaption_close", "figcaption", -1)), a.attrs && (a.attrs = BT(a.attrs, "title"));
        }
      }
      if (e.copyAttrs && a.attrs) {
        const c = e.copyAttrs === !0 ? "" : e.copyAttrs;
        l.attrs = a.attrs.filter(([u]) => u.match(c)).map((u) => Array.from(u));
      }
      if (e.tabindex && (t.tokens[s - 1].attrPush(["tabindex", i]), i++), e.lazy && (a.attrs.some(([c]) => c === "loading") || a.attrs.push(["loading", "lazy"])), e.async && (a.attrs.some(([c]) => c === "decoding") || a.attrs.push(["decoding", "async"])), e.classes && typeof e.classes == "string") {
        let c = !1;
        for (let u = 0, h = a.attrs.length; u < h && !c; u++) {
          const f = a.attrs[u];
          f[0] === "class" && (f[1] = `${f[1]} ${e.classes}`, c = !0);
        }
        c || a.attrs.push(["class", e.classes]);
      }
      if (e.removeSrc) {
        const c = a.attrs.find(([u]) => u === "src");
        a.attrs.push(["data-src", c[1]]), jT(a, "src");
      }
    }
  });
}
var Nb = !0, zT = !1, ZT = !1, GQe = function(n, e) {
  e && (Nb = !e.enabled, zT = !!e.label, ZT = !!e.labelAfter), n.core.ruler.after("inline", "github-task-lists", function(t) {
    for (var i = t.tokens, s = 2; s < i.length; s++)
      KQe(i, s) && (JQe(i[s], t.Token), nC(i[s - 2], "class", "task-list-item" + (Nb ? "" : " enabled")), nC(i[UQe(i, s - 2)], "class", "contains-task-list"));
  });
};
function nC(n, e, t) {
  var i = n.attrIndex(e), s = [e, t];
  i < 0 ? n.attrPush(s) : n.attrs[i] = s;
}
function UQe(n, e) {
  for (var t = n[e].level - 1, i = e - 1; i >= 0; i--)
    if (n[i].level === t)
      return i;
  return -1;
}
function KQe(n, e) {
  return s5e(n[e]) && r5e(n[e - 1]) && o5e(n[e - 2]) && l5e(n[e]);
}
function JQe(n, e) {
  if (n.children.unshift(e5e(n, e)), n.children[1].content = n.children[1].content.slice(3), n.content = n.content.slice(3), zT)
    if (ZT) {
      n.children.pop();
      var t = "task-item-" + Math.ceil(Math.random() * (1e4 * 1e3) - 1e3);
      n.children[0].content = n.children[0].content.slice(0, -1) + ' id="' + t + '">', n.children.push(i5e(n.content, t, e));
    } else
      n.children.unshift(t5e(e)), n.children.push(n5e(e));
}
function e5e(n, e) {
  var t = new e("html_inline", "", 0), i = Nb ? ' disabled="" ' : "";
  return n.content.indexOf("[ ] ") === 0 ? t.content = '<input class="task-list-item-checkbox"' + i + 'type="checkbox">' : (n.content.indexOf("[x] ") === 0 || n.content.indexOf("[X] ") === 0) && (t.content = '<input class="task-list-item-checkbox" checked=""' + i + 'type="checkbox">'), t;
}
function t5e(n) {
  var e = new n("html_inline", "", 0);
  return e.content = "<label>", e;
}
function n5e(n) {
  var e = new n("html_inline", "", 0);
  return e.content = "</label>", e;
}
function i5e(n, e, t) {
  var i = new t("html_inline", "", 0);
  return i.content = '<label class="task-list-item-label" for="' + e + '">' + n + "</label>", i.attrs = [{ for: e }], i;
}
function s5e(n) {
  return n.type === "inline";
}
function r5e(n) {
  return n.type === "paragraph_open";
}
function o5e(n) {
  return n.type === "list_item_open";
}
function l5e(n) {
  return n.content.indexOf("[ ] ") === 0 || n.content.indexOf("[x] ") === 0 || n.content.indexOf("[X] ") === 0;
}
const a5e = /* @__PURE__ */ Wh(GQe);
var Ib = { exports: {} }, jt = {}, Qb = { exports: {} }, Jl = {};
function FT() {
  var n = {};
  return n["align-content"] = !1, n["align-items"] = !1, n["align-self"] = !1, n["alignment-adjust"] = !1, n["alignment-baseline"] = !1, n.all = !1, n["anchor-point"] = !1, n.animation = !1, n["animation-delay"] = !1, n["animation-direction"] = !1, n["animation-duration"] = !1, n["animation-fill-mode"] = !1, n["animation-iteration-count"] = !1, n["animation-name"] = !1, n["animation-play-state"] = !1, n["animation-timing-function"] = !1, n.azimuth = !1, n["backface-visibility"] = !1, n.background = !0, n["background-attachment"] = !0, n["background-clip"] = !0, n["background-color"] = !0, n["background-image"] = !0, n["background-origin"] = !0, n["background-position"] = !0, n["background-repeat"] = !0, n["background-size"] = !0, n["baseline-shift"] = !1, n.binding = !1, n.bleed = !1, n["bookmark-label"] = !1, n["bookmark-level"] = !1, n["bookmark-state"] = !1, n.border = !0, n["border-bottom"] = !0, n["border-bottom-color"] = !0, n["border-bottom-left-radius"] = !0, n["border-bottom-right-radius"] = !0, n["border-bottom-style"] = !0, n["border-bottom-width"] = !0, n["border-collapse"] = !0, n["border-color"] = !0, n["border-image"] = !0, n["border-image-outset"] = !0, n["border-image-repeat"] = !0, n["border-image-slice"] = !0, n["border-image-source"] = !0, n["border-image-width"] = !0, n["border-left"] = !0, n["border-left-color"] = !0, n["border-left-style"] = !0, n["border-left-width"] = !0, n["border-radius"] = !0, n["border-right"] = !0, n["border-right-color"] = !0, n["border-right-style"] = !0, n["border-right-width"] = !0, n["border-spacing"] = !0, n["border-style"] = !0, n["border-top"] = !0, n["border-top-color"] = !0, n["border-top-left-radius"] = !0, n["border-top-right-radius"] = !0, n["border-top-style"] = !0, n["border-top-width"] = !0, n["border-width"] = !0, n.bottom = !1, n["box-decoration-break"] = !0, n["box-shadow"] = !0, n["box-sizing"] = !0, n["box-snap"] = !0, n["box-suppress"] = !0, n["break-after"] = !0, n["break-before"] = !0, n["break-inside"] = !0, n["caption-side"] = !1, n.chains = !1, n.clear = !0, n.clip = !1, n["clip-path"] = !1, n["clip-rule"] = !1, n.color = !0, n["color-interpolation-filters"] = !0, n["column-count"] = !1, n["column-fill"] = !1, n["column-gap"] = !1, n["column-rule"] = !1, n["column-rule-color"] = !1, n["column-rule-style"] = !1, n["column-rule-width"] = !1, n["column-span"] = !1, n["column-width"] = !1, n.columns = !1, n.contain = !1, n.content = !1, n["counter-increment"] = !1, n["counter-reset"] = !1, n["counter-set"] = !1, n.crop = !1, n.cue = !1, n["cue-after"] = !1, n["cue-before"] = !1, n.cursor = !1, n.direction = !1, n.display = !0, n["display-inside"] = !0, n["display-list"] = !0, n["display-outside"] = !0, n["dominant-baseline"] = !1, n.elevation = !1, n["empty-cells"] = !1, n.filter = !1, n.flex = !1, n["flex-basis"] = !1, n["flex-direction"] = !1, n["flex-flow"] = !1, n["flex-grow"] = !1, n["flex-shrink"] = !1, n["flex-wrap"] = !1, n.float = !1, n["float-offset"] = !1, n["flood-color"] = !1, n["flood-opacity"] = !1, n["flow-from"] = !1, n["flow-into"] = !1, n.font = !0, n["font-family"] = !0, n["font-feature-settings"] = !0, n["font-kerning"] = !0, n["font-language-override"] = !0, n["font-size"] = !0, n["font-size-adjust"] = !0, n["font-stretch"] = !0, n["font-style"] = !0, n["font-synthesis"] = !0, n["font-variant"] = !0, n["font-variant-alternates"] = !0, n["font-variant-caps"] = !0, n["font-variant-east-asian"] = !0, n["font-variant-ligatures"] = !0, n["font-variant-numeric"] = !0, n["font-variant-position"] = !0, n["font-weight"] = !0, n.grid = !1, n["grid-area"] = !1, n["grid-auto-columns"] = !1, n["grid-auto-flow"] = !1, n["grid-auto-rows"] = !1, n["grid-column"] = !1, n["grid-column-end"] = !1, n["grid-column-start"] = !1, n["grid-row"] = !1, n["grid-row-end"] = !1, n["grid-row-start"] = !1, n["grid-template"] = !1, n["grid-template-areas"] = !1, n["grid-template-columns"] = !1, n["grid-template-rows"] = !1, n["hanging-punctuation"] = !1, n.height = !0, n.hyphens = !1, n.icon = !1, n["image-orientation"] = !1, n["image-resolution"] = !1, n["ime-mode"] = !1, n["initial-letters"] = !1, n["inline-box-align"] = !1, n["justify-content"] = !1, n["justify-items"] = !1, n["justify-self"] = !1, n.left = !1, n["letter-spacing"] = !0, n["lighting-color"] = !0, n["line-box-contain"] = !1, n["line-break"] = !1, n["line-grid"] = !1, n["line-height"] = !1, n["line-snap"] = !1, n["line-stacking"] = !1, n["line-stacking-ruby"] = !1, n["line-stacking-shift"] = !1, n["line-stacking-strategy"] = !1, n["list-style"] = !0, n["list-style-image"] = !0, n["list-style-position"] = !0, n["list-style-type"] = !0, n.margin = !0, n["margin-bottom"] = !0, n["margin-left"] = !0, n["margin-right"] = !0, n["margin-top"] = !0, n["marker-offset"] = !1, n["marker-side"] = !1, n.marks = !1, n.mask = !1, n["mask-box"] = !1, n["mask-box-outset"] = !1, n["mask-box-repeat"] = !1, n["mask-box-slice"] = !1, n["mask-box-source"] = !1, n["mask-box-width"] = !1, n["mask-clip"] = !1, n["mask-image"] = !1, n["mask-origin"] = !1, n["mask-position"] = !1, n["mask-repeat"] = !1, n["mask-size"] = !1, n["mask-source-type"] = !1, n["mask-type"] = !1, n["max-height"] = !0, n["max-lines"] = !1, n["max-width"] = !0, n["min-height"] = !0, n["min-width"] = !0, n["move-to"] = !1, n["nav-down"] = !1, n["nav-index"] = !1, n["nav-left"] = !1, n["nav-right"] = !1, n["nav-up"] = !1, n["object-fit"] = !1, n["object-position"] = !1, n.opacity = !1, n.order = !1, n.orphans = !1, n.outline = !1, n["outline-color"] = !1, n["outline-offset"] = !1, n["outline-style"] = !1, n["outline-width"] = !1, n.overflow = !1, n["overflow-wrap"] = !1, n["overflow-x"] = !1, n["overflow-y"] = !1, n.padding = !0, n["padding-bottom"] = !0, n["padding-left"] = !0, n["padding-right"] = !0, n["padding-top"] = !0, n.page = !1, n["page-break-after"] = !1, n["page-break-before"] = !1, n["page-break-inside"] = !1, n["page-policy"] = !1, n.pause = !1, n["pause-after"] = !1, n["pause-before"] = !1, n.perspective = !1, n["perspective-origin"] = !1, n.pitch = !1, n["pitch-range"] = !1, n["play-during"] = !1, n.position = !1, n["presentation-level"] = !1, n.quotes = !1, n["region-fragment"] = !1, n.resize = !1, n.rest = !1, n["rest-after"] = !1, n["rest-before"] = !1, n.richness = !1, n.right = !1, n.rotation = !1, n["rotation-point"] = !1, n["ruby-align"] = !1, n["ruby-merge"] = !1, n["ruby-position"] = !1, n["shape-image-threshold"] = !1, n["shape-outside"] = !1, n["shape-margin"] = !1, n.size = !1, n.speak = !1, n["speak-as"] = !1, n["speak-header"] = !1, n["speak-numeral"] = !1, n["speak-punctuation"] = !1, n["speech-rate"] = !1, n.stress = !1, n["string-set"] = !1, n["tab-size"] = !1, n["table-layout"] = !1, n["text-align"] = !0, n["text-align-last"] = !0, n["text-combine-upright"] = !0, n["text-decoration"] = !0, n["text-decoration-color"] = !0, n["text-decoration-line"] = !0, n["text-decoration-skip"] = !0, n["text-decoration-style"] = !0, n["text-emphasis"] = !0, n["text-emphasis-color"] = !0, n["text-emphasis-position"] = !0, n["text-emphasis-style"] = !0, n["text-height"] = !0, n["text-indent"] = !0, n["text-justify"] = !0, n["text-orientation"] = !0, n["text-overflow"] = !0, n["text-shadow"] = !0, n["text-space-collapse"] = !0, n["text-transform"] = !0, n["text-underline-position"] = !0, n["text-wrap"] = !0, n.top = !1, n.transform = !1, n["transform-origin"] = !1, n["transform-style"] = !1, n.transition = !1, n["transition-delay"] = !1, n["transition-duration"] = !1, n["transition-property"] = !1, n["transition-timing-function"] = !1, n["unicode-bidi"] = !1, n["vertical-align"] = !1, n.visibility = !1, n["voice-balance"] = !1, n["voice-duration"] = !1, n["voice-family"] = !1, n["voice-pitch"] = !1, n["voice-range"] = !1, n["voice-rate"] = !1, n["voice-stress"] = !1, n["voice-volume"] = !1, n.volume = !1, n["white-space"] = !1, n.widows = !1, n.width = !0, n["will-change"] = !1, n["word-break"] = !0, n["word-spacing"] = !0, n["word-wrap"] = !0, n["wrap-flow"] = !1, n["wrap-through"] = !1, n["writing-mode"] = !1, n["z-index"] = !1, n;
}
function c5e(n, e, t) {
}
function u5e(n, e, t) {
}
var h5e = /javascript\s*\:/img;
function f5e(n, e) {
  return h5e.test(e) ? "" : e;
}
Jl.whiteList = FT();
Jl.getDefaultWhiteList = FT;
Jl.onAttr = c5e;
Jl.onIgnoreAttr = u5e;
Jl.safeAttrValue = f5e;
var d5e = {
  indexOf: function(n, e) {
    var t, i;
    if (Array.prototype.indexOf)
      return n.indexOf(e);
    for (t = 0, i = n.length; t < i; t++)
      if (n[t] === e)
        return t;
    return -1;
  },
  forEach: function(n, e, t) {
    var i, s;
    if (Array.prototype.forEach)
      return n.forEach(e, t);
    for (i = 0, s = n.length; i < s; i++)
      e.call(t, n[i], i, n);
  },
  trim: function(n) {
    return String.prototype.trim ? n.trim() : n.replace(/(^\s*)|(\s*$)/g, "");
  },
  trimRight: function(n) {
    return String.prototype.trimRight ? n.trimRight() : n.replace(/(\s*$)/g, "");
  }
}, tu = d5e;
function p5e(n, e) {
  n = tu.trimRight(n), n[n.length - 1] !== ";" && (n += ";");
  var t = n.length, i = !1, s = 0, r = 0, o = "";
  function l() {
    if (!i) {
      var u = tu.trim(n.slice(s, r)), h = u.indexOf(":");
      if (h !== -1) {
        var f = tu.trim(u.slice(0, h)), d = tu.trim(u.slice(h + 1));
        if (f) {
          var p = e(s, o.length, f, d, u);
          p && (o += p + "; ");
        }
      }
    }
    s = r + 1;
  }
  for (; r < t; r++) {
    var a = n[r];
    if (a === "/" && n[r + 1] === "*") {
      var c = n.indexOf("*/", r + 2);
      if (c === -1)
        break;
      r = c + 1, s = r + 1, i = !1;
    } else
      a === "(" ? i = !0 : a === ")" ? i = !1 : a === ";" ? i || l() : a === `
` && l();
  }
  return tu.trim(o);
}
var g5e = p5e, Wf = Jl, m5e = g5e;
function iC(n) {
  return n == null;
}
function b5e(n) {
  var e = {};
  for (var t in n)
    e[t] = n[t];
  return e;
}
function VT(n) {
  n = b5e(n || {}), n.whiteList = n.whiteList || Wf.whiteList, n.onAttr = n.onAttr || Wf.onAttr, n.onIgnoreAttr = n.onIgnoreAttr || Wf.onIgnoreAttr, n.safeAttrValue = n.safeAttrValue || Wf.safeAttrValue, this.options = n;
}
VT.prototype.process = function(n) {
  if (n = n || "", n = n.toString(), !n)
    return "";
  var e = this, t = e.options, i = t.whiteList, s = t.onAttr, r = t.onIgnoreAttr, o = t.safeAttrValue, l = m5e(n, function(a, c, u, h, f) {
    var d = i[u], p = !1;
    if (d === !0 ? p = d : typeof d == "function" ? p = d(h) : d instanceof RegExp && (p = d.test(h)), p !== !0 && (p = !1), h = o(u, h), !!h) {
      var g = {
        position: c,
        sourcePosition: a,
        source: f,
        isWhite: p
      };
      if (p) {
        var m = s(u, h, g);
        return iC(m) ? u + ":" + h : m;
      } else {
        var m = r(u, h, g);
        if (!iC(m))
          return m;
      }
    }
  });
  return l;
};
var v5e = VT;
(function(n, e) {
  var t = Jl, i = v5e;
  function s(o, l) {
    var a = new i(l);
    return a.process(o);
  }
  e = n.exports = s, e.FilterCSS = i;
  for (var r in t)
    e[r] = t[r];
  typeof window < "u" && (window.filterCSS = n.exports);
})(Qb, Qb.exports);
var Fy = Qb.exports, Vy = {
  indexOf: function(n, e) {
    var t, i;
    if (Array.prototype.indexOf)
      return n.indexOf(e);
    for (t = 0, i = n.length; t < i; t++)
      if (n[t] === e)
        return t;
    return -1;
  },
  forEach: function(n, e, t) {
    var i, s;
    if (Array.prototype.forEach)
      return n.forEach(e, t);
    for (i = 0, s = n.length; i < s; i++)
      e.call(t, n[i], i, n);
  },
  trim: function(n) {
    return String.prototype.trim ? n.trim() : n.replace(/(^\s*)|(\s*$)/g, "");
  },
  spaceIndex: function(n) {
    var e = /\s|\n|\t/, t = e.exec(n);
    return t ? t.index : -1;
  }
}, y5e = Fy.FilterCSS, O5e = Fy.getDefaultWhiteList, dp = Vy;
function qT() {
  return {
    a: ["target", "href", "title"],
    abbr: ["title"],
    address: [],
    area: ["shape", "coords", "href", "alt"],
    article: [],
    aside: [],
    audio: [
      "autoplay",
      "controls",
      "crossorigin",
      "loop",
      "muted",
      "preload",
      "src"
    ],
    b: [],
    bdi: ["dir"],
    bdo: ["dir"],
    big: [],
    blockquote: ["cite"],
    br: [],
    caption: [],
    center: [],
    cite: [],
    code: [],
    col: ["align", "valign", "span", "width"],
    colgroup: ["align", "valign", "span", "width"],
    dd: [],
    del: ["datetime"],
    details: ["open"],
    div: [],
    dl: [],
    dt: [],
    em: [],
    figcaption: [],
    figure: [],
    font: ["color", "size", "face"],
    footer: [],
    h1: [],
    h2: [],
    h3: [],
    h4: [],
    h5: [],
    h6: [],
    header: [],
    hr: [],
    i: [],
    img: ["src", "alt", "title", "width", "height"],
    ins: ["datetime"],
    li: [],
    mark: [],
    nav: [],
    ol: [],
    p: [],
    pre: [],
    s: [],
    section: [],
    small: [],
    span: [],
    sub: [],
    summary: [],
    sup: [],
    strong: [],
    strike: [],
    table: ["width", "border", "align", "valign"],
    tbody: ["align", "valign"],
    td: ["width", "rowspan", "colspan", "align", "valign"],
    tfoot: ["align", "valign"],
    th: ["width", "rowspan", "colspan", "align", "valign"],
    thead: ["align", "valign"],
    tr: ["rowspan", "align", "valign"],
    tt: [],
    u: [],
    ul: [],
    video: [
      "autoplay",
      "controls",
      "crossorigin",
      "loop",
      "muted",
      "playsinline",
      "poster",
      "preload",
      "src",
      "height",
      "width"
    ]
  };
}
var WT = new y5e();
function w5e(n, e, t) {
}
function x5e(n, e, t) {
}
function S5e(n, e, t) {
}
function C5e(n, e, t) {
}
function XT(n) {
  return n.replace(P5e, "&lt;").replace(A5e, "&gt;");
}
function k5e(n, e, t, i) {
  if (t = JT(t), e === "href" || e === "src") {
    if (t = dp.trim(t), t === "#")
      return "#";
    if (!(t.substr(0, 7) === "http://" || t.substr(0, 8) === "https://" || t.substr(0, 7) === "mailto:" || t.substr(0, 4) === "tel:" || t.substr(0, 11) === "data:image/" || t.substr(0, 6) === "ftp://" || t.substr(0, 2) === "./" || t.substr(0, 3) === "../" || t[0] === "#" || t[0] === "/"))
      return "";
  } else if (e === "background") {
    if (Xf.lastIndex = 0, Xf.test(t))
      return "";
  } else if (e === "style") {
    if (sC.lastIndex = 0, sC.test(t) || (rC.lastIndex = 0, rC.test(t) && (Xf.lastIndex = 0, Xf.test(t))))
      return "";
    i !== !1 && (i = i || WT, t = i.process(t));
  }
  return t = e_(t), t;
}
var P5e = /</g, A5e = />/g, E5e = /"/g, $5e = /&quot;/g, T5e = /&#([a-zA-Z0-9]*);?/gim, _5e = /&colon;?/gim, M5e = /&newline;?/gim, Xf = /((j\s*a\s*v\s*a|v\s*b|l\s*i\s*v\s*e)\s*s\s*c\s*r\s*i\s*p\s*t\s*|m\s*o\s*c\s*h\s*a):/gi, sC = /e\s*x\s*p\s*r\s*e\s*s\s*s\s*i\s*o\s*n\s*\(.*/gi, rC = /u\s*r\s*l\s*\(.*/gi;
function YT(n) {
  return n.replace(E5e, "&quot;");
}
function HT(n) {
  return n.replace($5e, '"');
}
function GT(n) {
  return n.replace(T5e, function(t, i) {
    return i[0] === "x" || i[0] === "X" ? String.fromCharCode(parseInt(i.substr(1), 16)) : String.fromCharCode(parseInt(i, 10));
  });
}
function UT(n) {
  return n.replace(_5e, ":").replace(M5e, " ");
}
function KT(n) {
  for (var e = "", t = 0, i = n.length; t < i; t++)
    e += n.charCodeAt(t) < 32 ? " " : n.charAt(t);
  return dp.trim(e);
}
function JT(n) {
  return n = HT(n), n = GT(n), n = UT(n), n = KT(n), n;
}
function e_(n) {
  return n = YT(n), n = XT(n), n;
}
function R5e() {
  return "";
}
function D5e(n, e) {
  typeof e != "function" && (e = function() {
  });
  var t = !Array.isArray(n);
  function i(o) {
    return t ? !0 : dp.indexOf(n, o) !== -1;
  }
  var s = [], r = !1;
  return {
    onIgnoreTag: function(o, l, a) {
      if (i(o))
        if (a.isClosing) {
          var c = "[/removed]", u = a.position + c.length;
          return s.push([
            r !== !1 ? r : a.position,
            u
          ]), r = !1, c;
        } else
          return r || (r = a.position), "[removed]";
      else
        return e(o, l, a);
    },
    remove: function(o) {
      var l = "", a = 0;
      return dp.forEach(s, function(c) {
        l += o.slice(a, c[0]), a = c[1];
      }), l += o.slice(a), l;
    }
  };
}
function L5e(n) {
  for (var e = "", t = 0; t < n.length; ) {
    var i = n.indexOf("<!--", t);
    if (i === -1) {
      e += n.slice(t);
      break;
    }
    e += n.slice(t, i);
    var s = n.indexOf("-->", i);
    if (s === -1)
      break;
    t = s + 3;
  }
  return e;
}
function N5e(n) {
  var e = n.split("");
  return e = e.filter(function(t) {
    var i = t.charCodeAt(0);
    return i === 127 ? !1 : i <= 31 ? i === 10 || i === 13 : !0;
  }), e.join("");
}
jt.whiteList = qT();
jt.getDefaultWhiteList = qT;
jt.onTag = w5e;
jt.onIgnoreTag = x5e;
jt.onTagAttr = S5e;
jt.onIgnoreTagAttr = C5e;
jt.safeAttrValue = k5e;
jt.escapeHtml = XT;
jt.escapeQuote = YT;
jt.unescapeQuote = HT;
jt.escapeHtmlEntities = GT;
jt.escapeDangerHtml5Entities = UT;
jt.clearNonPrintableCharacter = KT;
jt.friendlyAttrValue = JT;
jt.escapeAttrValue = e_;
jt.onIgnoreTagStripAll = R5e;
jt.StripTagBody = D5e;
jt.stripCommentTag = L5e;
jt.stripBlankChar = N5e;
jt.cssFilter = WT;
jt.getDefaultCSSWhiteList = O5e;
var Cg = {}, uo = Vy;
function I5e(n) {
  var e = uo.spaceIndex(n), t;
  return e === -1 ? t = n.slice(1, -1) : t = n.slice(1, e + 1), t = uo.trim(t).toLowerCase(), t.slice(0, 1) === "/" && (t = t.slice(1)), t.slice(-1) === "/" && (t = t.slice(0, -1)), t;
}
function Q5e(n) {
  return n.slice(0, 2) === "</";
}
function B5e(n, e, t) {
  var i = "", s = 0, r = !1, o = !1, l = 0, a = n.length, c = "", u = "";
  e:
    for (l = 0; l < a; l++) {
      var h = n.charAt(l);
      if (r === !1) {
        if (h === "<") {
          r = l;
          continue;
        }
      } else if (o === !1) {
        if (h === "<") {
          i += t(n.slice(s, l)), r = l, s = l;
          continue;
        }
        if (h === ">" || l === a - 1) {
          i += t(n.slice(s, r)), u = n.slice(r, l + 1), c = I5e(u), i += e(
            r,
            i.length,
            c,
            u,
            Q5e(u)
          ), s = l + 1, r = !1;
          continue;
        }
        if (h === '"' || h === "'")
          for (var f = 1, d = n.charAt(l - f); d.trim() === "" || d === "="; ) {
            if (d === "=") {
              o = h;
              continue e;
            }
            d = n.charAt(l - ++f);
          }
      } else if (h === o) {
        o = !1;
        continue;
      }
    }
  return s < a && (i += t(n.substr(s))), i;
}
var j5e = /[^a-zA-Z0-9\\_:.-]/gim;
function z5e(n, e) {
  var t = 0, i = 0, s = [], r = !1, o = n.length;
  function l(f, d) {
    if (f = uo.trim(f), f = f.replace(j5e, "").toLowerCase(), !(f.length < 1)) {
      var p = e(f, d || "");
      p && s.push(p);
    }
  }
  for (var a = 0; a < o; a++) {
    var c = n.charAt(a), u, h;
    if (r === !1 && c === "=") {
      r = n.slice(t, a), t = a + 1, i = n.charAt(t) === '"' || n.charAt(t) === "'" ? t : F5e(n, a + 1);
      continue;
    }
    if (r !== !1 && a === i) {
      if (h = n.indexOf(c, a + 1), h === -1)
        break;
      u = uo.trim(n.slice(i + 1, h)), l(r, u), r = !1, a = h, t = a + 1;
      continue;
    }
    if (/\s|\n|\t/.test(c))
      if (n = n.replace(/\s|\n|\t/g, " "), r === !1)
        if (h = Z5e(n, a), h === -1) {
          u = uo.trim(n.slice(t, a)), l(u), r = !1, t = a + 1;
          continue;
        } else {
          a = h - 1;
          continue;
        }
      else if (h = V5e(n, a - 1), h === -1) {
        u = uo.trim(n.slice(t, a)), u = oC(u), l(r, u), r = !1, t = a + 1;
        continue;
      } else
        continue;
  }
  return t < n.length && (r === !1 ? l(n.slice(t)) : l(r, oC(uo.trim(n.slice(t))))), uo.trim(s.join(" "));
}
function Z5e(n, e) {
  for (; e < n.length; e++) {
    var t = n[e];
    if (t !== " ")
      return t === "=" ? e : -1;
  }
}
function F5e(n, e) {
  for (; e < n.length; e++) {
    var t = n[e];
    if (t !== " ")
      return t === "'" || t === '"' ? e : -1;
  }
}
function V5e(n, e) {
  for (; e > 0; e--) {
    var t = n[e];
    if (t !== " ")
      return t === "=" ? e : -1;
  }
}
function q5e(n) {
  return n[0] === '"' && n[n.length - 1] === '"' || n[0] === "'" && n[n.length - 1] === "'";
}
function oC(n) {
  return q5e(n) ? n.substr(1, n.length - 2) : n;
}
Cg.parseTag = B5e;
Cg.parseAttr = z5e;
var W5e = Fy.FilterCSS, gs = jt, t_ = Cg, X5e = t_.parseTag, Y5e = t_.parseAttr, kd = Vy;
function Yf(n) {
  return n == null;
}
function H5e(n) {
  var e = kd.spaceIndex(n);
  if (e === -1)
    return {
      html: "",
      closing: n[n.length - 2] === "/"
    };
  n = kd.trim(n.slice(e + 1, -1));
  var t = n[n.length - 1] === "/";
  return t && (n = kd.trim(n.slice(0, -1))), {
    html: n,
    closing: t
  };
}
function G5e(n) {
  var e = {};
  for (var t in n)
    e[t] = n[t];
  return e;
}
function U5e(n) {
  var e = {};
  for (var t in n)
    Array.isArray(n[t]) ? e[t.toLowerCase()] = n[t].map(function(i) {
      return i.toLowerCase();
    }) : e[t.toLowerCase()] = n[t];
  return e;
}
function n_(n) {
  n = G5e(n || {}), n.stripIgnoreTag && (n.onIgnoreTag && console.error(
    'Notes: cannot use these two options "stripIgnoreTag" and "onIgnoreTag" at the same time'
  ), n.onIgnoreTag = gs.onIgnoreTagStripAll), n.whiteList || n.allowList ? n.whiteList = U5e(n.whiteList || n.allowList) : n.whiteList = gs.whiteList, n.onTag = n.onTag || gs.onTag, n.onTagAttr = n.onTagAttr || gs.onTagAttr, n.onIgnoreTag = n.onIgnoreTag || gs.onIgnoreTag, n.onIgnoreTagAttr = n.onIgnoreTagAttr || gs.onIgnoreTagAttr, n.safeAttrValue = n.safeAttrValue || gs.safeAttrValue, n.escapeHtml = n.escapeHtml || gs.escapeHtml, this.options = n, n.css === !1 ? this.cssFilter = !1 : (n.css = n.css || {}, this.cssFilter = new W5e(n.css));
}
n_.prototype.process = function(n) {
  if (n = n || "", n = n.toString(), !n)
    return "";
  var e = this, t = e.options, i = t.whiteList, s = t.onTag, r = t.onIgnoreTag, o = t.onTagAttr, l = t.onIgnoreTagAttr, a = t.safeAttrValue, c = t.escapeHtml, u = e.cssFilter;
  t.stripBlankChar && (n = gs.stripBlankChar(n)), t.allowCommentTag || (n = gs.stripCommentTag(n));
  var h = !1;
  t.stripIgnoreTagBody && (h = gs.StripTagBody(
    t.stripIgnoreTagBody,
    r
  ), r = h.onIgnoreTag);
  var f = X5e(
    n,
    function(d, p, g, m, b) {
      var y = {
        sourcePosition: d,
        position: p,
        isClosing: b,
        isWhite: Object.prototype.hasOwnProperty.call(i, g)
      }, v = s(g, m, y);
      if (!Yf(v))
        return v;
      if (y.isWhite) {
        if (y.isClosing)
          return "</" + g + ">";
        var O = H5e(m), x = i[g], S = Y5e(O.html, function(C, k) {
          var E = kd.indexOf(x, C) !== -1, $ = o(g, C, k, E);
          return Yf($) ? E ? (k = a(g, C, k, u), k ? C + '="' + k + '"' : C) : ($ = l(g, C, k, E), Yf($) ? void 0 : $) : $;
        });
        return m = "<" + g, S && (m += " " + S), O.closing && (m += " /"), m += ">", m;
      } else
        return v = r(g, m, y), Yf(v) ? c(m) : v;
    },
    c
  );
  return h && (f = h.remove(f)), f;
};
var K5e = n_;
(function(n, e) {
  var t = jt, i = Cg, s = K5e;
  function r(l, a) {
    var c = new s(a);
    return c.process(l);
  }
  e = n.exports = r, e.filterXSS = r, e.FilterXSS = s, function() {
    for (var l in t)
      e[l] = t[l];
    for (var a in i)
      e[a] = i[a];
  }(), typeof window < "u" && (window.filterXSS = n.exports);
  function o() {
    return typeof self < "u" && typeof DedicatedWorkerGlobalScope < "u" && self instanceof DedicatedWorkerGlobalScope;
  }
  o() && (self.filterXSS = n.exports);
})(Ib, Ib.exports);
var J5e = Ib.exports;
const lC = J5e;
var e4e = function(e, { xss: t } = {}) {
  const i = new lC.FilterXSS(typeof t == "function" ? t(lC) : t);
  function s(o) {
    return o = i.process(o), o;
  }
  function r(o) {
    for (let l = 0; l < o.tokens.length; l++) {
      let a = o.tokens[l];
      if (a.type === "html_block" && (a.content = s(a.content)), a.type === "inline") {
        let c = a.children;
        for (let u = 0; u < c.length; u++)
          c[u].type === "html_inline" && (c[u].content = s(c[u].content));
      }
    }
  }
  e.core.ruler.after("linkify", "xss", r);
};
const t4e = /* @__PURE__ */ Wh(e4e), nu = typeof performance == "object" && performance && typeof performance.now == "function" ? performance : Date, i_ = /* @__PURE__ */ new Set(), n4e = (n, e, t, i) => {
  typeof process == "object" && process && typeof process.emitWarning == "function" ? process.emitWarning(n, e, t, i) : console.error(`[${t}] ${e}: ${n}`);
}, i4e = (n) => !i_.has(n), so = (n) => n && n === Math.floor(n) && n > 0 && isFinite(n), s_ = (n) => so(n) ? n <= Math.pow(2, 8) ? Uint8Array : n <= Math.pow(2, 16) ? Uint16Array : n <= Math.pow(2, 32) ? Uint32Array : n <= Number.MAX_SAFE_INTEGER ? Pd : null : null;
class Pd extends Array {
  constructor(e) {
    super(e), this.fill(0);
  }
}
var _a;
const cl = class cl {
  constructor(e, t) {
    vn(this, "heap");
    vn(this, "length");
    if (!N(cl, _a))
      throw new TypeError("instantiate Stack using Stack.create(n)");
    this.heap = new t(e), this.length = 0;
  }
  static create(e) {
    const t = s_(e);
    if (!t)
      return [];
    De(cl, _a, !0);
    const i = new cl(e, t);
    return De(cl, _a, !1), i;
  }
  push(e) {
    this.heap[this.length++] = e;
  }
  pop() {
    return this.heap[--this.length];
  }
};
_a = new WeakMap(), // private constructor
We(cl, _a, !1);
let Bb = cl;
var ms, Ai, Ws, bs, Ma, an, vs, cn, Pt, Fe, Kn, Ei, Fn, yn, ys, $n, Tr, _r, Os, Xs, mo, hi, Ph, zb, yl, Mr, Ah, $i, Tp, r_, Ol, Ra, Eh, Ys, ro, Hs, oo, $h, Zb, Da, Ad, La, Ed, xt, Lt, Th, Fb, wl, uu;
const dO = class dO {
  constructor(e) {
    We(this, Ph);
    We(this, Tp);
    We(this, Ys);
    We(this, Hs);
    We(this, $h);
    We(this, Da);
    We(this, La);
    We(this, xt);
    We(this, Th);
    We(this, wl);
    // properties coming in from the options of these, only max and maxSize
    // really *need* to be protected. The rest can be modified, as they just
    // set defaults for various methods.
    We(this, ms, void 0);
    We(this, Ai, void 0);
    We(this, Ws, void 0);
    We(this, bs, void 0);
    We(this, Ma, void 0);
    /**
     * {@link LRUCache.OptionsBase.ttl}
     */
    vn(this, "ttl");
    /**
     * {@link LRUCache.OptionsBase.ttlResolution}
     */
    vn(this, "ttlResolution");
    /**
     * {@link LRUCache.OptionsBase.ttlAutopurge}
     */
    vn(this, "ttlAutopurge");
    /**
     * {@link LRUCache.OptionsBase.updateAgeOnGet}
     */
    vn(this, "updateAgeOnGet");
    /**
     * {@link LRUCache.OptionsBase.updateAgeOnHas}
     */
    vn(this, "updateAgeOnHas");
    /**
     * {@link LRUCache.OptionsBase.allowStale}
     */
    vn(this, "allowStale");
    /**
     * {@link LRUCache.OptionsBase.noDisposeOnSet}
     */
    vn(this, "noDisposeOnSet");
    /**
     * {@link LRUCache.OptionsBase.noUpdateTTL}
     */
    vn(this, "noUpdateTTL");
    /**
     * {@link LRUCache.OptionsBase.maxEntrySize}
     */
    vn(this, "maxEntrySize");
    /**
     * {@link LRUCache.OptionsBase.sizeCalculation}
     */
    vn(this, "sizeCalculation");
    /**
     * {@link LRUCache.OptionsBase.noDeleteOnFetchRejection}
     */
    vn(this, "noDeleteOnFetchRejection");
    /**
     * {@link LRUCache.OptionsBase.noDeleteOnStaleGet}
     */
    vn(this, "noDeleteOnStaleGet");
    /**
     * {@link LRUCache.OptionsBase.allowStaleOnFetchAbort}
     */
    vn(this, "allowStaleOnFetchAbort");
    /**
     * {@link LRUCache.OptionsBase.allowStaleOnFetchRejection}
     */
    vn(this, "allowStaleOnFetchRejection");
    /**
     * {@link LRUCache.OptionsBase.ignoreFetchAbort}
     */
    vn(this, "ignoreFetchAbort");
    // computed properties
    We(this, an, void 0);
    We(this, vs, void 0);
    We(this, cn, void 0);
    We(this, Pt, void 0);
    We(this, Fe, void 0);
    We(this, Kn, void 0);
    We(this, Ei, void 0);
    We(this, Fn, void 0);
    We(this, yn, void 0);
    We(this, ys, void 0);
    We(this, $n, void 0);
    We(this, Tr, void 0);
    We(this, _r, void 0);
    We(this, Os, void 0);
    We(this, Xs, void 0);
    We(this, mo, void 0);
    We(this, hi, void 0);
    // conditionally set private methods related to TTL
    We(this, yl, () => {
    });
    We(this, Mr, () => {
    });
    We(this, Ah, () => {
    });
    /* c8 ignore stop */
    We(this, $i, () => !1);
    We(this, Ol, (e) => {
    });
    We(this, Ra, (e, t, i) => {
    });
    We(this, Eh, (e, t, i, s) => {
      if (i || s)
        throw new TypeError("cannot set size without setting maxSize or maxEntrySize on cache");
      return 0;
    });
    const { max: t = 0, ttl: i, ttlResolution: s = 1, ttlAutopurge: r, updateAgeOnGet: o, updateAgeOnHas: l, allowStale: a, dispose: c, disposeAfter: u, noDisposeOnSet: h, noUpdateTTL: f, maxSize: d = 0, maxEntrySize: p = 0, sizeCalculation: g, fetchMethod: m, noDeleteOnFetchRejection: b, noDeleteOnStaleGet: y, allowStaleOnFetchRejection: v, allowStaleOnFetchAbort: O, ignoreFetchAbort: x } = e;
    if (t !== 0 && !so(t))
      throw new TypeError("max option must be a nonnegative integer");
    const S = t ? s_(t) : Array;
    if (!S)
      throw new Error("invalid max value: " + t);
    if (De(this, ms, t), De(this, Ai, d), this.maxEntrySize = p || N(this, Ai), this.sizeCalculation = g, this.sizeCalculation) {
      if (!N(this, Ai) && !this.maxEntrySize)
        throw new TypeError("cannot set sizeCalculation without setting maxSize or maxEntrySize");
      if (typeof this.sizeCalculation != "function")
        throw new TypeError("sizeCalculation set to non-function");
    }
    if (m !== void 0 && typeof m != "function")
      throw new TypeError("fetchMethod must be a function if specified");
    if (De(this, Ma, m), De(this, mo, !!m), De(this, cn, /* @__PURE__ */ new Map()), De(this, Pt, new Array(t).fill(void 0)), De(this, Fe, new Array(t).fill(void 0)), De(this, Kn, new S(t)), De(this, Ei, new S(t)), De(this, Fn, 0), De(this, yn, 0), De(this, ys, Bb.create(t)), De(this, an, 0), De(this, vs, 0), typeof c == "function" && De(this, Ws, c), typeof u == "function" ? (De(this, bs, u), De(this, $n, [])) : (De(this, bs, void 0), De(this, $n, void 0)), De(this, Xs, !!N(this, Ws)), De(this, hi, !!N(this, bs)), this.noDisposeOnSet = !!h, this.noUpdateTTL = !!f, this.noDeleteOnFetchRejection = !!b, this.allowStaleOnFetchRejection = !!v, this.allowStaleOnFetchAbort = !!O, this.ignoreFetchAbort = !!x, this.maxEntrySize !== 0) {
      if (N(this, Ai) !== 0 && !so(N(this, Ai)))
        throw new TypeError("maxSize must be a positive integer if specified");
      if (!so(this.maxEntrySize))
        throw new TypeError("maxEntrySize must be a positive integer if specified");
      Pe(this, Tp, r_).call(this);
    }
    if (this.allowStale = !!a, this.noDeleteOnStaleGet = !!y, this.updateAgeOnGet = !!o, this.updateAgeOnHas = !!l, this.ttlResolution = so(s) || s === 0 ? s : 1, this.ttlAutopurge = !!r, this.ttl = i || 0, this.ttl) {
      if (!so(this.ttl))
        throw new TypeError("ttl must be a positive integer if specified");
      Pe(this, Ph, zb).call(this);
    }
    if (N(this, ms) === 0 && this.ttl === 0 && N(this, Ai) === 0)
      throw new TypeError("At least one of max, maxSize, or ttl is required");
    if (!this.ttlAutopurge && !N(this, ms) && !N(this, Ai)) {
      const C = "LRU_CACHE_UNBOUNDED";
      i4e(C) && (i_.add(C), n4e("TTL caching without ttlAutopurge, max, or maxSize can result in unbounded memory consumption.", "UnboundedCacheWarning", C, dO));
    }
  }
  /**
   * Do not call this method unless you need to inspect the
   * inner workings of the cache.  If anything returned by this
   * object is modified in any way, strange breakage may occur.
   *
   * These fields are private for a reason!
   *
   * @internal
   */
  static unsafeExposeInternals(e) {
    return {
      // properties
      starts: N(e, _r),
      ttls: N(e, Os),
      sizes: N(e, Tr),
      keyMap: N(e, cn),
      keyList: N(e, Pt),
      valList: N(e, Fe),
      next: N(e, Kn),
      prev: N(e, Ei),
      get head() {
        return N(e, Fn);
      },
      get tail() {
        return N(e, yn);
      },
      free: N(e, ys),
      // methods
      isBackgroundFetch: (t) => {
        var i;
        return Pe(i = e, xt, Lt).call(i, t);
      },
      backgroundFetch: (t, i, s, r) => {
        var o;
        return Pe(o = e, La, Ed).call(o, t, i, s, r);
      },
      moveToTail: (t) => {
        var i;
        return Pe(i = e, wl, uu).call(i, t);
      },
      indexes: (t) => {
        var i;
        return Pe(i = e, Ys, ro).call(i, t);
      },
      rindexes: (t) => {
        var i;
        return Pe(i = e, Hs, oo).call(i, t);
      },
      isStale: (t) => {
        var i;
        return N(i = e, $i).call(i, t);
      }
    };
  }
  // Protected read-only members
  /**
   * {@link LRUCache.OptionsBase.max} (read-only)
   */
  get max() {
    return N(this, ms);
  }
  /**
   * {@link LRUCache.OptionsBase.maxSize} (read-only)
   */
  get maxSize() {
    return N(this, Ai);
  }
  /**
   * The total computed size of items in the cache (read-only)
   */
  get calculatedSize() {
    return N(this, vs);
  }
  /**
   * The number of items stored in the cache (read-only)
   */
  get size() {
    return N(this, an);
  }
  /**
   * {@link LRUCache.OptionsBase.fetchMethod} (read-only)
   */
  get fetchMethod() {
    return N(this, Ma);
  }
  /**
   * {@link LRUCache.OptionsBase.dispose} (read-only)
   */
  get dispose() {
    return N(this, Ws);
  }
  /**
   * {@link LRUCache.OptionsBase.disposeAfter} (read-only)
   */
  get disposeAfter() {
    return N(this, bs);
  }
  /**
   * Return the remaining TTL time for a given entry key
   */
  getRemainingTTL(e) {
    return N(this, cn).has(e) ? 1 / 0 : 0;
  }
  /**
   * Return a generator yielding `[key, value]` pairs,
   * in order from most recently used to least recently used.
   */
  *entries() {
    for (const e of Pe(this, Ys, ro).call(this))
      N(this, Fe)[e] !== void 0 && N(this, Pt)[e] !== void 0 && !Pe(this, xt, Lt).call(this, N(this, Fe)[e]) && (yield [N(this, Pt)[e], N(this, Fe)[e]]);
  }
  /**
   * Inverse order version of {@link LRUCache.entries}
   *
   * Return a generator yielding `[key, value]` pairs,
   * in order from least recently used to most recently used.
   */
  *rentries() {
    for (const e of Pe(this, Hs, oo).call(this))
      N(this, Fe)[e] !== void 0 && N(this, Pt)[e] !== void 0 && !Pe(this, xt, Lt).call(this, N(this, Fe)[e]) && (yield [N(this, Pt)[e], N(this, Fe)[e]]);
  }
  /**
   * Return a generator yielding the keys in the cache,
   * in order from most recently used to least recently used.
   */
  *keys() {
    for (const e of Pe(this, Ys, ro).call(this)) {
      const t = N(this, Pt)[e];
      t !== void 0 && !Pe(this, xt, Lt).call(this, N(this, Fe)[e]) && (yield t);
    }
  }
  /**
   * Inverse order version of {@link LRUCache.keys}
   *
   * Return a generator yielding the keys in the cache,
   * in order from least recently used to most recently used.
   */
  *rkeys() {
    for (const e of Pe(this, Hs, oo).call(this)) {
      const t = N(this, Pt)[e];
      t !== void 0 && !Pe(this, xt, Lt).call(this, N(this, Fe)[e]) && (yield t);
    }
  }
  /**
   * Return a generator yielding the values in the cache,
   * in order from most recently used to least recently used.
   */
  *values() {
    for (const e of Pe(this, Ys, ro).call(this))
      N(this, Fe)[e] !== void 0 && !Pe(this, xt, Lt).call(this, N(this, Fe)[e]) && (yield N(this, Fe)[e]);
  }
  /**
   * Inverse order version of {@link LRUCache.values}
   *
   * Return a generator yielding the values in the cache,
   * in order from least recently used to most recently used.
   */
  *rvalues() {
    for (const e of Pe(this, Hs, oo).call(this))
      N(this, Fe)[e] !== void 0 && !Pe(this, xt, Lt).call(this, N(this, Fe)[e]) && (yield N(this, Fe)[e]);
  }
  /**
   * Iterating over the cache itself yields the same results as
   * {@link LRUCache.entries}
   */
  [Symbol.iterator]() {
    return this.entries();
  }
  /**
   * Find a value for which the supplied fn method returns a truthy value,
   * similar to Array.find().  fn is called as fn(value, key, cache).
   */
  find(e, t = {}) {
    for (const i of Pe(this, Ys, ro).call(this)) {
      const s = N(this, Fe)[i], r = Pe(this, xt, Lt).call(this, s) ? s.__staleWhileFetching : s;
      if (r !== void 0 && e(r, N(this, Pt)[i], this))
        return this.get(N(this, Pt)[i], t);
    }
  }
  /**
   * Call the supplied function on each item in the cache, in order from
   * most recently used to least recently used.  fn is called as
   * fn(value, key, cache).  Does not update age or recenty of use.
   * Does not iterate over stale values.
   */
  forEach(e, t = this) {
    for (const i of Pe(this, Ys, ro).call(this)) {
      const s = N(this, Fe)[i], r = Pe(this, xt, Lt).call(this, s) ? s.__staleWhileFetching : s;
      r !== void 0 && e.call(t, r, N(this, Pt)[i], this);
    }
  }
  /**
   * The same as {@link LRUCache.forEach} but items are iterated over in
   * reverse order.  (ie, less recently used items are iterated over first.)
   */
  rforEach(e, t = this) {
    for (const i of Pe(this, Hs, oo).call(this)) {
      const s = N(this, Fe)[i], r = Pe(this, xt, Lt).call(this, s) ? s.__staleWhileFetching : s;
      r !== void 0 && e.call(t, r, N(this, Pt)[i], this);
    }
  }
  /**
   * Delete any stale entries. Returns true if anything was removed,
   * false otherwise.
   */
  purgeStale() {
    let e = !1;
    for (const t of Pe(this, Hs, oo).call(this, { allowStale: !0 }))
      N(this, $i).call(this, t) && (this.delete(N(this, Pt)[t]), e = !0);
    return e;
  }
  /**
   * Return an array of [key, {@link LRUCache.Entry}] tuples which can be
   * passed to cache.load()
   */
  dump() {
    const e = [];
    for (const t of Pe(this, Ys, ro).call(this, { allowStale: !0 })) {
      const i = N(this, Pt)[t], s = N(this, Fe)[t], r = Pe(this, xt, Lt).call(this, s) ? s.__staleWhileFetching : s;
      if (r === void 0 || i === void 0)
        continue;
      const o = { value: r };
      if (N(this, Os) && N(this, _r)) {
        o.ttl = N(this, Os)[t];
        const l = nu.now() - N(this, _r)[t];
        o.start = Math.floor(Date.now() - l);
      }
      N(this, Tr) && (o.size = N(this, Tr)[t]), e.unshift([i, o]);
    }
    return e;
  }
  /**
   * Reset the cache and load in the items in entries in the order listed.
   * Note that the shape of the resulting cache may be different if the
   * same options are not used in both caches.
   */
  load(e) {
    this.clear();
    for (const [t, i] of e) {
      if (i.start) {
        const s = Date.now() - i.start;
        i.start = nu.now() - s;
      }
      this.set(t, i.value, i);
    }
  }
  /**
   * Add a value to the cache.
   */
  set(e, t, i = {}) {
    var f, d, p;
    const { ttl: s = this.ttl, start: r, noDisposeOnSet: o = this.noDisposeOnSet, sizeCalculation: l = this.sizeCalculation, status: a } = i;
    let { noUpdateTTL: c = this.noUpdateTTL } = i;
    const u = N(this, Eh).call(this, e, t, i.size || 0, l);
    if (this.maxEntrySize && u > this.maxEntrySize)
      return a && (a.set = "miss", a.maxEntrySizeExceeded = !0), this.delete(e), this;
    let h = N(this, an) === 0 ? void 0 : N(this, cn).get(e);
    if (h === void 0)
      h = N(this, an) === 0 ? N(this, yn) : N(this, ys).length !== 0 ? N(this, ys).pop() : N(this, an) === N(this, ms) ? Pe(this, Da, Ad).call(this, !1) : N(this, an), N(this, Pt)[h] = e, N(this, Fe)[h] = t, N(this, cn).set(e, h), N(this, Kn)[N(this, yn)] = h, N(this, Ei)[h] = N(this, yn), De(this, yn, h), lf(this, an)._++, N(this, Ra).call(this, h, u, a), a && (a.set = "add"), c = !1;
    else {
      Pe(this, wl, uu).call(this, h);
      const g = N(this, Fe)[h];
      if (t !== g) {
        if (N(this, mo) && Pe(this, xt, Lt).call(this, g) ? g.__abortController.abort(new Error("replaced")) : o || (N(this, Xs) && ((f = N(this, Ws)) == null || f.call(this, g, e, "set")), N(this, hi) && ((d = N(this, $n)) == null || d.push([g, e, "set"]))), N(this, Ol).call(this, h), N(this, Ra).call(this, h, u, a), N(this, Fe)[h] = t, a) {
          a.set = "replace";
          const m = g && Pe(this, xt, Lt).call(this, g) ? g.__staleWhileFetching : g;
          m !== void 0 && (a.oldValue = m);
        }
      } else
        a && (a.set = "update");
    }
    if (s !== 0 && !N(this, Os) && Pe(this, Ph, zb).call(this), N(this, Os) && (c || N(this, Ah).call(this, h, s, r), a && N(this, Mr).call(this, a, h)), !o && N(this, hi) && N(this, $n)) {
      const g = N(this, $n);
      let m;
      for (; m = g == null ? void 0 : g.shift(); )
        (p = N(this, bs)) == null || p.call(this, ...m);
    }
    return this;
  }
  /**
   * Evict the least recently used item, returning its value or
   * `undefined` if cache is empty.
   */
  pop() {
    var e;
    try {
      for (; N(this, an); ) {
        const t = N(this, Fe)[N(this, Fn)];
        if (Pe(this, Da, Ad).call(this, !0), Pe(this, xt, Lt).call(this, t)) {
          if (t.__staleWhileFetching)
            return t.__staleWhileFetching;
        } else if (t !== void 0)
          return t;
      }
    } finally {
      if (N(this, hi) && N(this, $n)) {
        const t = N(this, $n);
        let i;
        for (; i = t == null ? void 0 : t.shift(); )
          (e = N(this, bs)) == null || e.call(this, ...i);
      }
    }
  }
  /**
   * Check if a key is in the cache, without updating the recency of use.
   * Will return false if the item is stale, even though it is technically
   * in the cache.
   *
   * Will not update item age unless
   * {@link LRUCache.OptionsBase.updateAgeOnHas} is set.
   */
  has(e, t = {}) {
    const { updateAgeOnHas: i = this.updateAgeOnHas, status: s } = t, r = N(this, cn).get(e);
    if (r !== void 0) {
      const o = N(this, Fe)[r];
      if (Pe(this, xt, Lt).call(this, o) && o.__staleWhileFetching === void 0)
        return !1;
      if (N(this, $i).call(this, r))
        s && (s.has = "stale", N(this, Mr).call(this, s, r));
      else
        return i && N(this, yl).call(this, r), s && (s.has = "hit", N(this, Mr).call(this, s, r)), !0;
    } else
      s && (s.has = "miss");
    return !1;
  }
  /**
   * Like {@link LRUCache#get} but doesn't update recency or delete stale
   * items.
   *
   * Returns `undefined` if the item is stale, unless
   * {@link LRUCache.OptionsBase.allowStale} is set.
   */
  peek(e, t = {}) {
    const { allowStale: i = this.allowStale } = t, s = N(this, cn).get(e);
    if (s !== void 0 && (i || !N(this, $i).call(this, s))) {
      const r = N(this, Fe)[s];
      return Pe(this, xt, Lt).call(this, r) ? r.__staleWhileFetching : r;
    }
  }
  async fetch(e, t = {}) {
    const {
      // get options
      allowStale: i = this.allowStale,
      updateAgeOnGet: s = this.updateAgeOnGet,
      noDeleteOnStaleGet: r = this.noDeleteOnStaleGet,
      // set options
      ttl: o = this.ttl,
      noDisposeOnSet: l = this.noDisposeOnSet,
      size: a = 0,
      sizeCalculation: c = this.sizeCalculation,
      noUpdateTTL: u = this.noUpdateTTL,
      // fetch exclusive options
      noDeleteOnFetchRejection: h = this.noDeleteOnFetchRejection,
      allowStaleOnFetchRejection: f = this.allowStaleOnFetchRejection,
      ignoreFetchAbort: d = this.ignoreFetchAbort,
      allowStaleOnFetchAbort: p = this.allowStaleOnFetchAbort,
      context: g,
      forceRefresh: m = !1,
      status: b,
      signal: y
    } = t;
    if (!N(this, mo))
      return b && (b.fetch = "get"), this.get(e, {
        allowStale: i,
        updateAgeOnGet: s,
        noDeleteOnStaleGet: r,
        status: b
      });
    const v = {
      allowStale: i,
      updateAgeOnGet: s,
      noDeleteOnStaleGet: r,
      ttl: o,
      noDisposeOnSet: l,
      size: a,
      sizeCalculation: c,
      noUpdateTTL: u,
      noDeleteOnFetchRejection: h,
      allowStaleOnFetchRejection: f,
      allowStaleOnFetchAbort: p,
      ignoreFetchAbort: d,
      status: b,
      signal: y
    };
    let O = N(this, cn).get(e);
    if (O === void 0) {
      b && (b.fetch = "miss");
      const x = Pe(this, La, Ed).call(this, e, O, v, g);
      return x.__returned = x;
    } else {
      const x = N(this, Fe)[O];
      if (Pe(this, xt, Lt).call(this, x)) {
        const $ = i && x.__staleWhileFetching !== void 0;
        return b && (b.fetch = "inflight", $ && (b.returnedStale = !0)), $ ? x.__staleWhileFetching : x.__returned = x;
      }
      const S = N(this, $i).call(this, O);
      if (!m && !S)
        return b && (b.fetch = "hit"), Pe(this, wl, uu).call(this, O), s && N(this, yl).call(this, O), b && N(this, Mr).call(this, b, O), x;
      const C = Pe(this, La, Ed).call(this, e, O, v, g), E = C.__staleWhileFetching !== void 0 && i;
      return b && (b.fetch = S ? "stale" : "refresh", E && S && (b.returnedStale = !0)), E ? C.__staleWhileFetching : C.__returned = C;
    }
  }
  /**
   * Return a value from the cache. Will update the recency of the cache
   * entry found.
   *
   * If the key is not found, get() will return `undefined`.
   */
  get(e, t = {}) {
    const { allowStale: i = this.allowStale, updateAgeOnGet: s = this.updateAgeOnGet, noDeleteOnStaleGet: r = this.noDeleteOnStaleGet, status: o } = t, l = N(this, cn).get(e);
    if (l !== void 0) {
      const a = N(this, Fe)[l], c = Pe(this, xt, Lt).call(this, a);
      return o && N(this, Mr).call(this, o, l), N(this, $i).call(this, l) ? (o && (o.get = "stale"), c ? (o && i && a.__staleWhileFetching !== void 0 && (o.returnedStale = !0), i ? a.__staleWhileFetching : void 0) : (r || this.delete(e), o && i && (o.returnedStale = !0), i ? a : void 0)) : (o && (o.get = "hit"), c ? a.__staleWhileFetching : (Pe(this, wl, uu).call(this, l), s && N(this, yl).call(this, l), a));
    } else
      o && (o.get = "miss");
  }
  /**
   * Deletes a key out of the cache.
   * Returns true if the key was deleted, false otherwise.
   */
  delete(e) {
    var i, s, r, o;
    let t = !1;
    if (N(this, an) !== 0) {
      const l = N(this, cn).get(e);
      if (l !== void 0)
        if (t = !0, N(this, an) === 1)
          this.clear();
        else {
          N(this, Ol).call(this, l);
          const a = N(this, Fe)[l];
          Pe(this, xt, Lt).call(this, a) ? a.__abortController.abort(new Error("deleted")) : (N(this, Xs) || N(this, hi)) && (N(this, Xs) && ((i = N(this, Ws)) == null || i.call(this, a, e, "delete")), N(this, hi) && ((s = N(this, $n)) == null || s.push([a, e, "delete"]))), N(this, cn).delete(e), N(this, Pt)[l] = void 0, N(this, Fe)[l] = void 0, l === N(this, yn) ? De(this, yn, N(this, Ei)[l]) : l === N(this, Fn) ? De(this, Fn, N(this, Kn)[l]) : (N(this, Kn)[N(this, Ei)[l]] = N(this, Kn)[l], N(this, Ei)[N(this, Kn)[l]] = N(this, Ei)[l]), lf(this, an)._--, N(this, ys).push(l);
        }
    }
    if (N(this, hi) && ((r = N(this, $n)) != null && r.length)) {
      const l = N(this, $n);
      let a;
      for (; a = l == null ? void 0 : l.shift(); )
        (o = N(this, bs)) == null || o.call(this, ...a);
    }
    return t;
  }
  /**
   * Clear the cache entirely, throwing away all values.
   */
  clear() {
    var e, t, i;
    for (const s of Pe(this, Hs, oo).call(this, { allowStale: !0 })) {
      const r = N(this, Fe)[s];
      if (Pe(this, xt, Lt).call(this, r))
        r.__abortController.abort(new Error("deleted"));
      else {
        const o = N(this, Pt)[s];
        N(this, Xs) && ((e = N(this, Ws)) == null || e.call(this, r, o, "delete")), N(this, hi) && ((t = N(this, $n)) == null || t.push([r, o, "delete"]));
      }
    }
    if (N(this, cn).clear(), N(this, Fe).fill(void 0), N(this, Pt).fill(void 0), N(this, Os) && N(this, _r) && (N(this, Os).fill(0), N(this, _r).fill(0)), N(this, Tr) && N(this, Tr).fill(0), De(this, Fn, 0), De(this, yn, 0), N(this, ys).length = 0, De(this, vs, 0), De(this, an, 0), N(this, hi) && N(this, $n)) {
      const s = N(this, $n);
      let r;
      for (; r = s == null ? void 0 : s.shift(); )
        (i = N(this, bs)) == null || i.call(this, ...r);
    }
  }
};
ms = new WeakMap(), Ai = new WeakMap(), Ws = new WeakMap(), bs = new WeakMap(), Ma = new WeakMap(), an = new WeakMap(), vs = new WeakMap(), cn = new WeakMap(), Pt = new WeakMap(), Fe = new WeakMap(), Kn = new WeakMap(), Ei = new WeakMap(), Fn = new WeakMap(), yn = new WeakMap(), ys = new WeakMap(), $n = new WeakMap(), Tr = new WeakMap(), _r = new WeakMap(), Os = new WeakMap(), Xs = new WeakMap(), mo = new WeakMap(), hi = new WeakMap(), Ph = new WeakSet(), zb = function() {
  const e = new Pd(N(this, ms)), t = new Pd(N(this, ms));
  De(this, Os, e), De(this, _r, t), De(this, Ah, (r, o, l = nu.now()) => {
    if (t[r] = o !== 0 ? l : 0, e[r] = o, o !== 0 && this.ttlAutopurge) {
      const a = setTimeout(() => {
        N(this, $i).call(this, r) && this.delete(N(this, Pt)[r]);
      }, o + 1);
      a.unref && a.unref();
    }
  }), De(this, yl, (r) => {
    t[r] = e[r] !== 0 ? nu.now() : 0;
  }), De(this, Mr, (r, o) => {
    if (e[o]) {
      const l = e[o], a = t[o];
      r.ttl = l, r.start = a, r.now = i || s(), r.remainingTTL = r.now + l - a;
    }
  });
  let i = 0;
  const s = () => {
    const r = nu.now();
    if (this.ttlResolution > 0) {
      i = r;
      const o = setTimeout(() => i = 0, this.ttlResolution);
      o.unref && o.unref();
    }
    return r;
  };
  this.getRemainingTTL = (r) => {
    const o = N(this, cn).get(r);
    return o === void 0 ? 0 : e[o] === 0 || t[o] === 0 ? 1 / 0 : t[o] + e[o] - (i || s());
  }, De(this, $i, (r) => e[r] !== 0 && t[r] !== 0 && (i || s()) - t[r] > e[r]);
}, yl = new WeakMap(), Mr = new WeakMap(), Ah = new WeakMap(), $i = new WeakMap(), Tp = new WeakSet(), r_ = function() {
  const e = new Pd(N(this, ms));
  De(this, vs, 0), De(this, Tr, e), De(this, Ol, (t) => {
    De(this, vs, N(this, vs) - e[t]), e[t] = 0;
  }), De(this, Eh, (t, i, s, r) => {
    if (Pe(this, xt, Lt).call(this, i))
      return 0;
    if (!so(s))
      if (r) {
        if (typeof r != "function")
          throw new TypeError("sizeCalculation must be a function");
        if (s = r(i, t), !so(s))
          throw new TypeError("sizeCalculation return invalid (expect positive integer)");
      } else
        throw new TypeError("invalid size value (must be positive integer). When maxSize or maxEntrySize is used, sizeCalculation or size must be set.");
    return s;
  }), De(this, Ra, (t, i, s) => {
    if (e[t] = i, N(this, Ai)) {
      const r = N(this, Ai) - e[t];
      for (; N(this, vs) > r; )
        Pe(this, Da, Ad).call(this, !0);
    }
    De(this, vs, N(this, vs) + e[t]), s && (s.entrySize = i, s.totalCalculatedSize = N(this, vs));
  });
}, Ol = new WeakMap(), Ra = new WeakMap(), Eh = new WeakMap(), Ys = new WeakSet(), ro = function* ({ allowStale: e = this.allowStale } = {}) {
  if (N(this, an))
    for (let t = N(this, yn); !(!Pe(this, $h, Zb).call(this, t) || ((e || !N(this, $i).call(this, t)) && (yield t), t === N(this, Fn))); )
      t = N(this, Ei)[t];
}, Hs = new WeakSet(), oo = function* ({ allowStale: e = this.allowStale } = {}) {
  if (N(this, an))
    for (let t = N(this, Fn); !(!Pe(this, $h, Zb).call(this, t) || ((e || !N(this, $i).call(this, t)) && (yield t), t === N(this, yn))); )
      t = N(this, Kn)[t];
}, $h = new WeakSet(), Zb = function(e) {
  return e !== void 0 && N(this, cn).get(N(this, Pt)[e]) === e;
}, Da = new WeakSet(), Ad = function(e) {
  var r, o;
  const t = N(this, Fn), i = N(this, Pt)[t], s = N(this, Fe)[t];
  return N(this, mo) && Pe(this, xt, Lt).call(this, s) ? s.__abortController.abort(new Error("evicted")) : (N(this, Xs) || N(this, hi)) && (N(this, Xs) && ((r = N(this, Ws)) == null || r.call(this, s, i, "evict")), N(this, hi) && ((o = N(this, $n)) == null || o.push([s, i, "evict"]))), N(this, Ol).call(this, t), e && (N(this, Pt)[t] = void 0, N(this, Fe)[t] = void 0, N(this, ys).push(t)), N(this, an) === 1 ? (De(this, Fn, De(this, yn, 0)), N(this, ys).length = 0) : De(this, Fn, N(this, Kn)[t]), N(this, cn).delete(i), lf(this, an)._--, t;
}, La = new WeakSet(), Ed = function(e, t, i, s) {
  const r = t === void 0 ? void 0 : N(this, Fe)[t];
  if (Pe(this, xt, Lt).call(this, r))
    return r;
  const o = new AbortController(), { signal: l } = i;
  l == null || l.addEventListener("abort", () => o.abort(l.reason), {
    signal: o.signal
  });
  const a = {
    signal: o.signal,
    options: i,
    context: s
  }, c = (g, m = !1) => {
    const { aborted: b } = o.signal, y = i.ignoreFetchAbort && g !== void 0;
    if (i.status && (b && !m ? (i.status.fetchAborted = !0, i.status.fetchError = o.signal.reason, y && (i.status.fetchAbortIgnored = !0)) : i.status.fetchResolved = !0), b && !y && !m)
      return h(o.signal.reason);
    const v = d;
    return N(this, Fe)[t] === d && (g === void 0 ? v.__staleWhileFetching ? N(this, Fe)[t] = v.__staleWhileFetching : this.delete(e) : (i.status && (i.status.fetchUpdated = !0), this.set(e, g, a.options))), g;
  }, u = (g) => (i.status && (i.status.fetchRejected = !0, i.status.fetchError = g), h(g)), h = (g) => {
    const { aborted: m } = o.signal, b = m && i.allowStaleOnFetchAbort, y = b || i.allowStaleOnFetchRejection, v = y || i.noDeleteOnFetchRejection, O = d;
    if (N(this, Fe)[t] === d && (!v || O.__staleWhileFetching === void 0 ? this.delete(e) : b || (N(this, Fe)[t] = O.__staleWhileFetching)), y)
      return i.status && O.__staleWhileFetching !== void 0 && (i.status.returnedStale = !0), O.__staleWhileFetching;
    if (O.__returned === O)
      throw g;
  }, f = (g, m) => {
    var y;
    const b = (y = N(this, Ma)) == null ? void 0 : y.call(this, e, r, a);
    b && b instanceof Promise && b.then((v) => g(v), m), o.signal.addEventListener("abort", () => {
      (!i.ignoreFetchAbort || i.allowStaleOnFetchAbort) && (g(), i.allowStaleOnFetchAbort && (g = (v) => c(v, !0)));
    });
  };
  i.status && (i.status.fetchDispatched = !0);
  const d = new Promise(f).then(c, u), p = Object.assign(d, {
    __abortController: o,
    __staleWhileFetching: r,
    __returned: void 0
  });
  return t === void 0 ? (this.set(e, p, { ...a.options, status: void 0 }), t = N(this, cn).get(e)) : N(this, Fe)[t] = p, p;
}, xt = new WeakSet(), Lt = function(e) {
  if (!N(this, mo))
    return !1;
  const t = e;
  return !!t && t instanceof Promise && t.hasOwnProperty("__staleWhileFetching") && t.__abortController instanceof AbortController;
}, Th = new WeakSet(), Fb = function(e, t) {
  N(this, Ei)[t] = e, N(this, Kn)[e] = t;
}, wl = new WeakSet(), uu = function(e) {
  e !== N(this, yn) && (e === N(this, Fn) ? De(this, Fn, N(this, Kn)[e]) : Pe(this, Th, Fb).call(this, N(this, Ei)[e], N(this, Kn)[e]), Pe(this, Th, Fb).call(this, N(this, yn), e), De(this, yn, e));
};
let jb = dO;
const s4e = (n, e) => {
  const t = ye("editorId"), { noImgZoomIn: i } = n, s = Gv(() => {
    const r = document.querySelectorAll(`#${t}-preview img`);
    r.length !== 0 && _ee(r, {
      background: "#00000073"
    });
  });
  Be(() => {
    !i && n.setting.preview && s();
  }), ee([e], () => {
    !i && s();
  });
}, r4e = s4e, o4e = (n, e) => {
  if (typeof e[n] == "string")
    return e[n];
  const t = `<i class="${mt}-iconfont ${mt}-icon-${n}"></i>`;
  switch (or.iconfontType) {
    case "svg":
      return `<svg class="${mt}-icon" aria-hidden="true"><use xlink:href="#${mt}-icon-${n}"></use></svg>`;
    default:
      return t;
  }
}, l4e = (n, e, t) => {
  const i = ye("editorId"), s = ye("usedLanguageText"), r = ye("customIcon"), o = () => {
    document.querySelectorAll(`#${i}-preview pre`).forEach((c) => {
      var u, h;
      let f = -1;
      (u = c.querySelector(".copy-button")) == null || u.remove();
      const d = ((h = s.value.copyCode) == null ? void 0 : h.text) || "复制代码", p = document.createElement("span");
      p.setAttribute("class", "copy-button"), p.dataset.tips = d, p.innerHTML = o4e("copy", r.value), p.addEventListener("click", () => {
        var g, m;
        clearTimeout(f);
        const b = c.querySelector("code").innerText, y = Qee(n.formatCopiedText(b)), v = ((g = s.value.copyCode) == null ? void 0 : g.successTips) || "已复制！", O = ((m = s.value.copyCode) == null ? void 0 : m.failTips) || "已复制！";
        p.dataset.tips = y ? v : O, f = window.setTimeout(() => {
          p.dataset.tips = d;
        }, 1500);
      }), c.appendChild(p);
    });
  }, l = () => {
    Qe(o);
  }, a = (c) => {
    c && Qe(o);
  };
  ee([e, t], l), ee(() => n.setting.preview, a), ee(() => n.setting.htmlPreview, a), ee(() => s.value, o), Be(o);
}, a4e = l4e, c4e = (n) => {
  var e;
  const t = (e = or.editorExtensions) == null ? void 0 : e.highlight, i = t == null ? void 0 : t.instance, s = ye("highlight"), r = gi(i);
  return Be(() => {
    if (!n.noHighlight && !r.value) {
      const o = document.createElement("script");
      o.src = s.value.js, o.onload = () => {
        r.value = window.hljs;
      }, o.id = `${mt}-hljs`, Il(o, "hljs");
      const l = document.createElement("link");
      l.rel = "stylesheet", l.href = s.value.css, l.id = `${mt}-hlCss`, Il(l);
    }
  }), ee(
    () => s.value.css,
    (o) => {
      F9(`${mt}-hlCss`, "href", o);
    }
  ), r;
}, u4e = c4e, h4e = (n) => {
  const e = ye("theme"), { editorExtensions: t, mermaidConfig: i } = or, s = t == null ? void 0 : t.mermaid, r = gi(s == null ? void 0 : s.instance), o = gi(-1), l = new jb({
    max: 1e3,
    // 缓存10分钟
    ttl: 6e5
  }), a = () => {
    const c = r.value;
    !n.noMermaid && c && (c.initialize(
      i({
        startOnLoad: !1,
        theme: e.value === "dark" ? "dark" : "default"
      })
    ), o.value = o.value + 1);
  };
  return ee(
    () => e.value,
    () => {
      l.clear(), a();
    }
  ), Be(() => {
    if (!n.noMermaid && !(s != null && s.instance)) {
      const c = (s == null ? void 0 : s.js) || L9;
      if (/\.mjs/.test(c))
        import(
          /* @vite-ignore */
          /* webpackIgnore: true */
          c
        ).then((u) => {
          r.value = u.default, a();
        });
      else {
        const u = document.createElement("script");
        u.id = `${mt}-mermaid`, u.src = c, u.onload = () => {
          r.value = window.mermaid, a();
        }, Il(u, "mermaid");
      }
    }
  }), { mermaidRef: r, reRenderRef: o, replaceMermaid: () => {
    Qe(() => {
      if (!n.noMermaid && r.value) {
        const c = document.querySelectorAll(
          `div.${mt}-mermaid`
        ), u = document.createElement("div");
        u.style.width = document.body.offsetWidth + "px", u.style.height = document.body.offsetHeight + "px", u.style.position = "fixed", u.style.zIndex = "-10000", u.style.top = "-10000";
        let h = c.length;
        h > 0 && document.body.appendChild(u), c.forEach(async (f) => {
          let d = l.get(f.innerText);
          if (!d) {
            const g = D0(), m = r.value.renderAsync || r.value.render;
            let b = "";
            try {
              b = await m(g, f.innerText, u);
            } catch {
            }
            d = await n.sanitizeMermaid(
              typeof b == "string" ? b : b.svg
            ), l.set(f.innerText, d);
          }
          const p = document.createElement("p");
          p.className = `${mt}-mermaid`, p.setAttribute("data-processed", ""), p.innerHTML = d, f.dataset.line !== void 0 && (p.dataset.line = f.dataset.line), f.replaceWith(p), --h === 0 && u.remove();
        });
      }
    });
  } };
}, f4e = h4e, d4e = (n) => {
  var e;
  const t = (e = or.editorExtensions) == null ? void 0 : e.katex, i = t == null ? void 0 : t.instance, s = gi(i);
  return Be(() => {
    if (!n.noKatex && !s.value) {
      const r = document.createElement("script");
      r.src = (t == null ? void 0 : t.js) || ww.js, r.onload = () => {
        s.value = window.katex;
      }, r.id = `${mt}-katex`;
      const o = document.createElement("link");
      o.rel = "stylesheet", o.href = (t == null ? void 0 : t.css) || ww.css, o.id = `${mt}-katexCss`, Il(r, "katex"), Il(o);
    }
  }), s;
}, p4e = d4e, g4e = (n, e) => {
  const t = n.renderer.rules.fence.bind(n.renderer.rules);
  n.renderer.rules.fence = (i, s, r, o, l) => {
    const a = i[s], c = a.content.trim();
    if (a.info === "mermaid") {
      let u;
      return i[s].map && i[s].level === 0 && (u = i[s].map[0], i[s].attrSet("data-line", String(u))), `<div class="${mt}-mermaid" ${u !== void 0 ? "data-line=" + u : ""} data-mermaid-theme=${e.themeRef.value}>${c}</div>`;
    }
    return t(i, s, r, o, l);
  };
}, m4e = g4e, aC = (n, e) => {
  let t = !0, i = !0;
  const s = n.posMax, r = e > 0 ? n.src.charCodeAt(e - 1) : -1, o = e + 1 <= s ? n.src.charCodeAt(e + 1) : -1;
  return (r === 32 || r === 9 || o >= 48 && o <= 57) && (i = !1), (o === 32 || o === 9) && (t = !1), {
    can_open: t,
    can_close: i
  };
}, b4e = (n, e) => {
  let t, i, s, r;
  if (n.src[n.pos] !== "$")
    return !1;
  if (s = aC(n, n.pos), !s.can_open)
    return e || (n.pending += "$"), n.pos += 1, !0;
  const o = n.pos + 1;
  for (t = o; (t = n.src.indexOf("$", t)) !== -1; ) {
    for (r = t - 1; n.src[r] === "\\"; )
      r -= 1;
    if ((t - r) % 2 == 1)
      break;
    t += 1;
  }
  return t === -1 ? (e || (n.pending += "$"), n.pos = o, !0) : t - o === 0 ? (e || (n.pending += "$$"), n.pos = o + 1, !0) : (s = aC(n, t), s.can_close ? (e || (i = n.push("math_inline", "math", 0), i.markup = "$", i.content = n.src.slice(o, t)), n.pos = t + 1, !0) : (e || (n.pending += "$"), n.pos = o, !0));
}, v4e = (n, e, t, i) => {
  let s, r, o, l, a = !1, c = n.bMarks[e] + n.tShift[e], u = n.eMarks[e];
  if (c + 2 > u || n.src.slice(c, c + 2) !== "$$")
    return !1;
  if (c += 2, s = n.src.slice(c, u), i)
    return !0;
  for (s.trim().slice(-2) === "$$" && (s = s.trim().slice(0, -2), a = !0), o = e; !a && (o++, !(o >= t || (c = n.bMarks[o] + n.tShift[o], u = n.eMarks[o], c < u && n.tShift[o] < n.blkIndent))); )
    n.src.slice(c, u).trim().slice(-2) === "$$" && (l = n.src.slice(0, u).lastIndexOf("$$"), r = n.src.slice(c, l), a = !0);
  n.line = o + 1;
  const h = n.push("math_block", "math", 0);
  return h.block = !0, h.content = (s && s.trim() ? s + `
` : "") + n.getLines(e + 1, o, n.tShift[e], !0) + (r && r.trim() ? r : ""), h.map = [e, n.line], h.markup = "$$", !0;
}, y4e = (n, e) => {
  const t = (s) => {
    if (e.katexRef.value) {
      const r = e.katexRef.value.renderToString(s, {
        throwOnError: !1
      });
      return `<span class="${mt}-katex-inline" data-processed>${r}</span>`;
    } else
      return `<span class="${mt}-katex-inline">${s}</span>`;
  }, i = (s, r) => {
    if (e.katexRef.value) {
      const o = e.katexRef.value.renderToString(s, {
        throwOnError: !1,
        displayMode: !0
      });
      return `<p class="${mt}-katex-block" data-line=${r} data-processed>${o}</p>`;
    } else
      return `<p class="${mt}-katex-block" data-line=${r}>${s}</p>`;
  };
  n.inline.ruler.after("escape", "math_inline", b4e), n.block.ruler.after("blockquote", "math_block", v4e, {
    alt: ["paragraph", "reference", "blockquote", "list"]
  }), n.renderer.rules.math_inline = (s, r) => t(s[r].content), n.renderer.rules.math_block = (s, r) => i(s[r].content, s[r].map[0]) + `
`;
}, O4e = y4e, w4e = (n, e) => {
  e = e || {};
  const t = 3, i = e.marker || "!", s = i.charCodeAt(0), r = i.length;
  let o = "", l = "";
  const a = (u, h, f, d, p) => {
    const g = u[h];
    return g.type === "admonition_open" ? (u[h].attrPush([
      "class",
      `${mt}-admonition ${mt}-admonition-${g.info}`
    ]), u[h].attrSet("data-line", String(u[h].map[0]))) : g.type === "admonition_title_open" && u[h].attrPush(["class", `${mt}-admonition-title`]), p.renderToken(u, h, f);
  }, c = (u) => {
    const h = u.trim().split(" ", 2);
    l = "", o = h[0], h.length > 1 && (l = u.substring(o.length + 2)), (l === "" || !l) && (l = o);
  };
  n.block.ruler.before(
    "code",
    "admonition",
    (u, h, f, d) => {
      let p, g, m, b = !1, y = u.bMarks[h] + u.tShift[h], v = u.eMarks[h];
      if (s !== u.src.charCodeAt(y))
        return !1;
      for (p = y + 1; p <= v && i[(p - y) % r] === u.src[p]; p++)
        ;
      const O = Math.floor((p - y) / r);
      if (O !== t)
        return !1;
      p -= (p - y) % r;
      const x = u.src.slice(y, p), S = u.src.slice(p, v);
      if (c(S), d)
        return !0;
      for (g = h; g++, !(g >= f || (y = u.bMarks[g] + u.tShift[g], v = u.eMarks[g], y < v && u.sCount[g] < u.blkIndent)); )
        if (s === u.src.charCodeAt(y) && !(u.sCount[g] - u.blkIndent >= 4)) {
          for (p = y + 1; p <= v && i[(p - y) % r] === u.src[p]; p++)
            ;
          if (!(Math.floor((p - y) / r) < O) && (p -= (p - y) % r, p = u.skipSpaces(p), !(p < v))) {
            b = !0;
            break;
          }
        }
      const C = u.parentType, k = u.lineMax;
      return u.parentType = "root", u.lineMax = g, m = u.push("admonition_open", "div", 1), m.markup = x, m.block = !0, m.info = o, m.map = [h, g], m = u.push("admonition_title_open", "p", 1), m.markup = x + " " + o, m.map = [h, g], m = u.push("inline", "", 0), m.content = l, m.map = [h, u.line - 1], m.children = [], m = u.push("admonition_title_close", "p", -1), m.markup = x + " " + o, u.md.block.tokenize(u, h + 1, g), m = u.push("admonition_close", "div", -1), m.markup = u.src.slice(y, p), m.block = !0, u.parentType = C, u.lineMax = k, u.line = g + (b ? 1 : 0), !0;
    },
    {
      alt: ["paragraph", "reference", "blockquote", "list"]
    }
  ), n.renderer.rules.admonition_open = a, n.renderer.rules.admonition_title_open = a, n.renderer.rules.admonition_title_close = a, n.renderer.rules.admonition_close = a;
}, x4e = w4e, S4e = (n, e) => {
  n.renderer.rules.heading_open = (t, i) => {
    var s;
    const r = t[i], o = ((s = t[i + 1].children) == null ? void 0 : s.reduce((a, c) => a + (c.content || ""), "")) || "", l = r.markup.length;
    return e.headsRef.value.push({
      text: o,
      level: l
    }), r.map && r.level === 0 && (r.attrSet("data-line", String(r.map[0])), r.attrSet(
      "id",
      e.mdHeadingId(o, l, e.headsRef.value.length)
    )), n.renderer.renderToken(t, i, e);
  }, n.renderer.rules.heading_close = (t, i, s, r, o) => o.renderToken(t, i, s);
}, C4e = S4e, k4e = (n, e) => {
  const t = n.renderer.rules.fence, i = n.utils.unescapeAll, s = /\[(\w*)(?::([\w ]*))?\]/;
  function r(c) {
    return c.info ? i(c.info).trim() : "";
  }
  function o(c) {
    const u = r(c), [h = null, f = ""] = (s.exec(u) || []).slice(1);
    return [h, f];
  }
  function l(c) {
    const u = r(c);
    return u ? u.split(/(\s+)/g)[0] : "";
  }
  const a = (c, u, h, f, d) => {
    if (c[u].hidden)
      return "";
    const [p, g] = o(c[u]);
    if (p === null)
      return t(c, u, h, f, d);
    let m, b, y, v, O = "", x = "";
    for (let S = u; S < c.length && (m = c[S], [b, y] = o(m), b === p); S++)
      m.info = m.info.replace(s, ""), m.hidden = !0, v = S - u > 0 ? "" : " checked", O += `<li><input type="radio" name="label-group-${e.editorId}-${u}"${v}><label for="group-${e.editorId}-${u}-tab-${S - u}" onclick="this.previousElementSibling.click()">${y || l(m)}</label></li>
`, x += `<input type="radio" id="group-${e.editorId}-${u}-tab-${S - u}" name="group-${e.editorId}-${u}"${v}>
` + t(c, S, h, f, d);
    return `<div class="code-tabs">
<ul>
` + O + `</ul>
` + x + "</div>";
  };
  n.renderer.rules.fence = a;
}, P4e = k4e, A4e = (n) => {
  [
    "paragraph_open",
    "table_open",
    "ordered_list_open",
    "bullet_list_open",
    "blockquote_open",
    "hr",
    "html_block",
    "fence"
  ].forEach((e) => {
    const t = n.renderer.rules[e];
    t ? n.renderer.rules[e] = (i, s, r, o, l) => {
      let a;
      const c = t(i, s, r, o, l);
      return i[s].map && i[s].level === 0 && !/^<!--/.test(c) ? (a = i[s].map[0], c.replace(/^(<[^>]*)/, `$1 data-line="${a}"`)) : c;
    } : n.renderer.rules[e] = (i, s, r, o, l) => {
      let a;
      return i[s].map && i[s].level === 0 && (a = i[s].map[0], i[s].attrSet("data-line", String(a))), l.renderToken(i, s, r);
    };
  });
}, E4e = (n, e) => {
  const { editorConfig: t, markdownItConfig: i, markdownItPlugins: s } = or, r = ye("editorId"), o = ye("showCodeRowNumber"), l = ye("theme"), a = L([]), c = u4e(n), u = p4e(n), { reRenderRef: h, replaceMermaid: f } = f4e(n), d = XQe({
    html: !0,
    breaks: !0
  });
  i(d, {
    editorId: r
  });
  const p = [
    {
      type: "katex",
      plugin: O4e,
      options: { katexRef: u }
    },
    {
      type: "image",
      plugin: HQe,
      options: { figcaption: !0, classes: "md-zoom" }
    },
    {
      type: "admonition",
      plugin: x4e,
      options: {}
    },
    {
      type: "taskList",
      plugin: a5e,
      options: {}
    },
    {
      type: "heading",
      plugin: C4e,
      options: { mdHeadingId: n.mdHeadingId, headsRef: a }
    },
    {
      type: "codeTabs",
      plugin: P4e,
      options: { editorId: r }
    },
    {
      type: "xss",
      plugin: t4e,
      options: {
        // https://github.com/leizongmin/js-xss/blob/master/README.zh.md
        xss(x) {
          return {
            whiteList: Object.assign({}, x.getDefaultWhiteList(), {
              input: ["class", "disabled", "type", "checked"]
            })
          };
        }
      }
    }
  ];
  n.noMermaid || p.push({
    type: "mermaid",
    plugin: m4e,
    options: { themeRef: l }
  }), s(p, {
    editorId: r
  }).forEach((x) => {
    d.use(x.plugin, x.options);
  });
  const g = d.options.highlight;
  d.set({
    highlight: (x, S, C) => {
      if (g) {
        const $ = g(x, S, C);
        if ($)
          return $;
      }
      let k;
      !n.noHighlight && c.value ? c.value.getLanguage(S) ? k = c.value.highlight(x, {
        language: S,
        ignoreIllegals: !0
      }).value : k = c.value.highlightAuto(x).value : k = d.utils.escapeHtml(x);
      const E = o ? Z9(k.replace(/^\n+|\n+$/g, "")) : `<span class="code-block">${k.replace(/^\n+|\n+$/g, "")}</span>`;
      return `<pre><code class="language-${S}" language=${S}>${E}</code></pre>`;
    }
  }), A4e(d);
  const m = L(`_article-key_${D0()}`), b = L(n.sanitize(d.render(n.modelValue))), y = () => {
    rl.emit(r, j9, b.value), n.onHtmlChanged(b.value), n.onGetCatalog(a.value), rl.emit(r, Sw, a.value), f();
  };
  Be(y);
  const v = () => {
    a.value = [], b.value = n.sanitize(d.render(n.modelValue)), y();
  }, O = _(() => (n.noKatex || u.value) && (n.noHighlight || c.value));
  return ee(
    [Yi(n, "modelValue"), O, h],
    Gv(
      v,
      (t == null ? void 0 : t.renderDelay) !== void 0 ? t == null ? void 0 : t.renderDelay : e ? 0 : 500
    )
  ), Be(() => {
    rl.on(r, {
      name: z9,
      callback() {
        rl.emit(r, Sw, a.value);
      }
    }), rl.on(r, {
      name: cA,
      callback: () => {
        v(), m.value = `_article-key_${D0()}`;
      }
    });
  }), { html: b, key: m };
}, $4e = E4e, o_ = {
  modelValue: {
    type: String,
    default: ""
  },
  setting: {
    type: Object,
    default: () => ({})
  },
  onHtmlChanged: {
    type: Function,
    default: () => {
    }
  },
  onGetCatalog: {
    type: Function,
    default: () => {
    }
  },
  mdHeadingId: {
    type: Function,
    default: () => ""
  },
  noMermaid: {
    type: Boolean,
    default: !1
  },
  sanitize: {
    type: Function,
    default: (n) => n
  },
  // 不使用该函数功能
  noKatex: {
    type: Boolean,
    default: !1
  },
  formatCopiedText: {
    type: Function,
    default: (n) => n
  },
  noHighlight: {
    type: Boolean,
    default: !1
  },
  previewOnly: {
    type: Boolean,
    default: !1
  },
  noImgZoomIn: {
    type: Boolean
  },
  sanitizeMermaid: {
    type: Function
  }
};
({
  ...o_
});
const T4e = /* @__PURE__ */ Z({
  name: "ContentPreview",
  props: o_,
  setup(n) {
    const e = ye("editorId"), t = ye("previewTheme"), i = ye("showCodeRowNumber"), {
      html: s,
      key: r
    } = $4e(n, n.previewOnly);
    return a4e(n, s, r), r4e(n, s), () => ne(sn, null, [ne("div", {
      id: `${e}-preview-wrapper`,
      class: `${mt}-preview-wrapper`,
      "data-show": n.setting.preview,
      key: "content-preview-wrapper"
    }, [ne("div", {
      key: r.value,
      id: `${e}-preview`,
      class: [`${mt}-preview`, `${t == null ? void 0 : t.value}-theme`, i && `${mt}-scrn`],
      innerHTML: s.value
    }, null)]), !n.previewOnly && ne("div", {
      id: `${e}-html-wrapper`,
      class: `${mt}-preview-wrapper`,
      "data-show": n.setting.htmlPreview,
      key: "html-preview-wrapper"
    }, [ne("div", {
      class: `${mt}-html`
    }, [s.value])])]);
  }
}), _4e = (n) => {
  var e, t;
  const { editorId: i } = n, s = (t = (e = or) == null ? void 0 : e.editorExtensions) == null ? void 0 : t.highlight;
  ht("editorId", i), ht(
    "theme",
    _(() => n.theme)
  ), ht(
    "language",
    _(() => n.language)
  ), ht(
    "highlight",
    _(() => {
      const o = {
        ...xw,
        ...s == null ? void 0 : s.css
      }, l = n.codeStyleReverse && n.codeStyleReverseList.includes(n.previewTheme) ? "dark" : n.theme;
      return {
        js: (s == null ? void 0 : s.js) || M9,
        css: o[n.codeTheme] ? o[n.codeTheme][l] : xw.atom[l]
      };
    })
  ), ht("showCodeRowNumber", n.showCodeRowNumber);
  const r = _(() => {
    var o, l;
    const a = {
      ...Ow,
      ...(l = (o = or) == null ? void 0 : o.editorConfig) == null ? void 0 : l.languageUserDefined
    };
    return a[n.language] ? a[n.language] : Ow["zh-CN"];
  });
  ht("usedLanguageText", r), ht(
    "previewTheme",
    _(() => n.previewTheme)
  ), ht(
    "customIcon",
    _(() => n.customIcon)
  );
}, M4e = (n) => {
  Be(() => {
    var e, t;
    if (!n.noIconfont)
      if (or.iconfontType === "svg") {
        const i = document.createElement("script");
        i.src = ((e = or.editorExtensions) == null ? void 0 : e.iconfont) || T9, i.id = `${mt}-icon`, Il(i);
      } else {
        const i = document.createElement("link");
        i.rel = "stylesheet", i.href = ((t = or.editorExtensions) == null ? void 0 : t.iconfontClass) || _9, i.id = `${mt}-icon-class`, Il(i);
      }
  });
}, R4e = (n) => n, l_ = {
  /**
   * markdown content.
   *
   * @default ''
   */
  modelValue: {
    type: String,
    default: ""
  },
  /**
   * 主题，支持light和dark
   *
   * @default 'light'
   */
  theme: {
    type: String,
    default: "light"
  },
  /**
   * 外层类名
   *
   * @default ''
   */
  class: {
    type: String,
    default: ""
  },
  /**
   * 预设语言名称
   *
   * @default 'zh-CN'
   */
  language: {
    type: String,
    default: "zh-CN"
  },
  /**
   * html变化事件
   */
  onHtmlChanged: {
    type: Function
  },
  /**
   * 获取目录结构
   */
  onGetCatalog: {
    type: Function
  },
  /**
   * 编辑器唯一标识
   *
   * @default 'md-editor-v3'
   */
  editorId: {
    type: String,
    default: $9
  },
  /**
   * 预览中代码是否显示行号
   *
   * @default false
   */
  showCodeRowNumber: {
    type: Boolean,
    default: !1
  },
  /**
   * 预览内容样式
   *
   * @default 'default'
   */
  previewTheme: {
    type: String,
    default: "default"
  },
  /**
   * 编辑器样式
   */
  style: {
    type: Object,
    default: () => ({})
  },
  /**
   * 标题的id生成方式
   *
   * @default (text: string) => text
   */
  mdHeadingId: {
    type: Function,
    default: R4e
  },
  /**
   *
   * 不能保证文本正确的情况，在marked编译md文本后通过该方法处理
   * 推荐DOMPurify、sanitize-html
   *
   * @default (text: string) => text
   */
  sanitize: {
    type: Function,
    default: (n) => n
  },
  /**
   * 不使用该mermaid
   *
   * @default false
   */
  noMermaid: {
    type: Boolean,
    default: !1
  },
  /**
   * 不使用katex
   *
   * @default false
   */
  noKatex: {
    type: Boolean,
    default: !1
  },
  /**
   * 代码主题
   *
   * @default 'atom'
   */
  codeTheme: {
    type: String,
    default: "atom"
  },
  /**
   * 不插入iconfont链接
   *
   * @default false
   */
  noIconfont: {
    type: Boolean
  },
  /**
   * 复制代码格式化方法
   *
   * @default (text) => text
   */
  formatCopiedText: {
    type: Function,
    default: (n) => n
  },
  /**
   * 某些预览主题的代码模块背景是暗色系
   * 将这个属性设置为true，会自动在该主题下的light模式下使用暗色系的代码风格
   *
   * @default true
   */
  codeStyleReverse: {
    type: Boolean,
    default: !0
  },
  /**
   * 需要自动调整的预览主题
   *
   * @default ['default', 'mk-cute']
   */
  codeStyleReverseList: {
    type: Array,
    default: ["default", "mk-cute"]
  },
  noHighlight: {
    type: Boolean,
    default: !1
  },
  /**
   * 是否关闭编辑器默认的放大缩小功能
   */
  noImgZoomIn: {
    type: Boolean,
    default: !1
  },
  /**
   * 自定义的图标
   */
  customIcon: {
    type: Object,
    default: {}
  },
  sanitizeMermaid: {
    type: Function,
    default: (n) => Promise.resolve(n)
  }
};
({
  ...l_
});
const a_ = ["onHtmlChanged", "onGetCatalog"];
[
  ...a_
];
const D4e = (n, e) => {
  const { editorId: t } = n, i = {
    rerender() {
      rl.emit(t, cA);
    }
  };
  e.expose(i);
}, L4e = /* @__PURE__ */ Z({
  name: "MdPreview",
  props: l_,
  emits: a_,
  setup(n, e) {
    const {
      editorId: t,
      noKatex: i,
      noMermaid: s,
      noHighlight: r
    } = n;
    return _4e(n), M4e(n), D4e(n, e), Zn(() => {
      rl.clear(t);
    }), () => ne("div", {
      id: t,
      class: [mt, n.class, n.theme === "dark" && `${mt}-dark`, `${mt}-previewOnly`],
      style: n.style
    }, [ne(T4e, {
      modelValue: n.modelValue,
      onHtmlChanged: (o) => {
        n.onHtmlChanged ? n.onHtmlChanged(o) : e.emit("onHtmlChanged", o);
      },
      onGetCatalog: (o) => {
        n.onGetCatalog ? n.onGetCatalog(o) : e.emit("onGetCatalog", o);
      },
      mdHeadingId: n.mdHeadingId,
      noMermaid: s,
      sanitize: n.sanitize,
      noKatex: i,
      formatCopiedText: n.formatCopiedText,
      noHighlight: r,
      noImgZoomIn: n.noImgZoomIn,
      previewOnly: !0,
      sanitizeMermaid: n.sanitizeMermaid
    }, null)]);
  }
}), qm = L4e;
qm.install = (n) => (n.component(qm.name, qm), n);
const N4e = py({
  String: V.string,
  Number: V.number,
  "True False": V.bool,
  PropertyName: V.propertyName,
  Null: V.null,
  ",": V.separator,
  "[ ]": V.squareBracket,
  "{ }": V.brace
}), I4e = fh.deserialize({
  version: 14,
  states: "$bOVQPOOOOQO'#Cb'#CbOnQPO'#CeOvQPO'#CjOOQO'#Cp'#CpQOQPOOOOQO'#Cg'#CgO}QPO'#CfO!SQPO'#CrOOQO,59P,59PO![QPO,59PO!aQPO'#CuOOQO,59U,59UO!iQPO,59UOVQPO,59QOqQPO'#CkO!nQPO,59^OOQO1G.k1G.kOVQPO'#ClO!vQPO,59aOOQO1G.p1G.pOOQO1G.l1G.lOOQO,59V,59VOOQO-E6i-E6iOOQO,59W,59WOOQO-E6j-E6j",
  stateData: "#O~OcOS~OQSORSOSSOTSOWQO]ROePO~OVXOeUO~O[[O~PVOg^O~Oh_OVfX~OVaO~OhbO[iX~O[dO~Oh_OVfa~OhbO[ia~O",
  goto: "!kjPPPPPPkPPkqwPPk{!RPPP!XP!ePP!hXSOR^bQWQRf_TVQ_Q`WRg`QcZRicQTOQZRQe^RhbRYQR]R",
  nodeNames: "⚠ JsonText True False Null Number String } { Object Property PropertyName ] [ Array",
  maxTerm: 25,
  nodeProps: [
    ["isolate", -2, 6, 11, ""],
    ["openedBy", 7, "{", 12, "["],
    ["closedBy", 8, "}", 13, "]"]
  ],
  propSources: [N4e],
  skippedNodes: [0],
  repeatNodeCount: 2,
  tokenData: "(|~RaXY!WYZ!W]^!Wpq!Wrs!]|}$u}!O$z!Q!R%T!R![&c![!]&t!}#O&y#P#Q'O#Y#Z'T#b#c'r#h#i(Z#o#p(r#q#r(w~!]Oc~~!`Wpq!]qr!]rs!xs#O!]#O#P!}#P;'S!];'S;=`$o<%lO!]~!}Oe~~#QXrs!]!P!Q!]#O#P!]#U#V!]#Y#Z!]#b#c!]#f#g!]#h#i!]#i#j#m~#pR!Q![#y!c!i#y#T#Z#y~#|R!Q![$V!c!i$V#T#Z$V~$YR!Q![$c!c!i$c#T#Z$c~$fR!Q![!]!c!i!]#T#Z!]~$rP;=`<%l!]~$zOh~~$}Q!Q!R%T!R![&c~%YRT~!O!P%c!g!h%w#X#Y%w~%fP!Q![%i~%nRT~!Q![%i!g!h%w#X#Y%w~%zR{|&T}!O&T!Q![&Z~&WP!Q![&Z~&`PT~!Q![&Z~&hST~!O!P%c!Q![&c!g!h%w#X#Y%w~&yOg~~'OO]~~'TO[~~'WP#T#U'Z~'^P#`#a'a~'dP#g#h'g~'jP#X#Y'm~'rOR~~'uP#i#j'x~'{P#`#a(O~(RP#`#a(U~(ZOS~~(^P#f#g(a~(dP#i#j(g~(jP#X#Y(m~(rOQ~~(wOW~~(|OV~",
  tokenizers: [0],
  topRules: { JsonText: [0, 1] },
  tokenPrec: 0
}), Q4e = /* @__PURE__ */ oh.define({
  name: "json",
  parser: /* @__PURE__ */ I4e.configure({
    props: [
      /* @__PURE__ */ by.add({
        Object: /* @__PURE__ */ Au({ except: /^\s*\}/ }),
        Array: /* @__PURE__ */ Au({ except: /^\s*\]/ })
      }),
      /* @__PURE__ */ yy.add({
        "Object Array": WE
      })
    ]
  }),
  languageData: {
    closeBrackets: { brackets: ["[", "{", '"'] },
    indentOnInput: /^\s*[\}\]]$/
  }
});
function gFe() {
  return new FE(Q4e);
}
typeof window == "object" && window.NodeList && !NodeList.prototype.forEach && (NodeList.prototype.forEach = Array.prototype.forEach);
typeof window < "u" && function(n) {
  n.forEach((e) => {
    Object.prototype.hasOwnProperty.call(e, "append") || Object.defineProperty(e, "append", {
      configurable: !0,
      enumerable: !0,
      writable: !0,
      value(...t) {
        const i = document.createDocumentFragment();
        t.forEach((s) => {
          const r = s instanceof Node;
          i.appendChild(r ? s : document.createTextNode(String(s)));
        }), this.appendChild(i);
      }
    });
  });
}([Element.prototype, Document.prototype, DocumentFragment.prototype]);
class Zr {
  get disposed() {
    return this._disposed === !0;
  }
  dispose() {
    this._disposed = !0;
  }
}
(function(n) {
  function e() {
    return (t, i, s) => {
      const r = s.value, o = t.__proto__;
      s.value = function(...l) {
        this.disposed || (r.call(this, ...l), o.dispose.call(this));
      };
    };
  }
  n.dispose = e;
})(Zr || (Zr = {}));
class cC {
  constructor() {
    this.isDisposed = !1, this.items = /* @__PURE__ */ new Set();
  }
  /**
   * Test whether the set has been disposed.
   */
  get disposed() {
    return this.isDisposed;
  }
  /**
   * Dispose of the set and the items it contains.
   *
   * #### Notes
   * Items are disposed in the order they are added to the set.
   */
  dispose() {
    this.isDisposed || (this.isDisposed = !0, this.items.forEach((e) => {
      e.dispose();
    }), this.items.clear());
  }
  /**
   * Test whether the set contains a specific item.
   *
   * @param item - The item of interest.
   *
   * @returns `true` if the set contains the item, `false` otherwise.
   */
  contains(e) {
    return this.items.has(e);
  }
  /**
   * Add a disposable item to the set.
   *
   * @param item - The item to add to the set.
   *
   * #### Notes
   * If the item is already contained in the set, this is a no-op.
   */
  add(e) {
    this.items.add(e);
  }
  /**
   * Remove a disposable item from the set.
   *
   * @param item - The item to remove from the set.
   *
   * #### Notes
   * If the item is not contained in the set, this is a no-op.
   */
  remove(e) {
    this.items.delete(e);
  }
  /**
   * Remove all items from the set.
   */
  clear() {
    this.items.clear();
  }
}
(function(n) {
  function e(t) {
    const i = new n();
    return t.forEach((s) => {
      i.add(s);
    }), i;
  }
  n.from = e;
})(cC || (cC = {}));
function c_(n, e, t) {
  if (t)
    switch (t.length) {
      case 0:
        return n.call(e);
      case 1:
        return n.call(e, t[0]);
      case 2:
        return n.call(e, t[0], t[1]);
      case 3:
        return n.call(e, t[0], t[1], t[2]);
      case 4:
        return n.call(e, t[0], t[1], t[2], t[3]);
      case 5:
        return n.call(e, t[0], t[1], t[2], t[3], t[4]);
      case 6:
        return n.call(e, t[0], t[1], t[2], t[3], t[4], t[5]);
      default:
        return n.apply(e, t);
    }
  return n.call(e);
}
function Ee(n, e, ...t) {
  return c_(n, e, t);
}
function B4e(n) {
  return typeof n == "object" && n.then && typeof n.then == "function";
}
function Vb(n) {
  return n != null && (n instanceof Promise || B4e(n));
}
function qy(...n) {
  const e = [];
  if (n.forEach((i) => {
    Array.isArray(i) ? e.push(...i) : e.push(i);
  }), e.some((i) => Vb(i))) {
    const i = e.map((s) => Vb(s) ? s : Promise.resolve(s !== !1));
    return Promise.all(i).then((s) => s.reduce((r, o) => o !== !1 && r, !0));
  }
  return e.every((i) => i !== !1);
}
function j4e(...n) {
  const e = qy(n);
  return typeof e == "boolean" ? Promise.resolve(e) : e;
}
function Wm(n, e) {
  const t = [];
  for (let i = 0; i < n.length; i += 2) {
    const s = n[i], r = n[i + 1], o = Array.isArray(e) ? e : [e], l = c_(s, r, o);
    t.push(l);
  }
  return qy(t);
}
class z4e {
  constructor() {
    this.listeners = {};
  }
  on(e, t, i) {
    return t == null ? this : (this.listeners[e] || (this.listeners[e] = []), this.listeners[e].push(t, i), this);
  }
  once(e, t, i) {
    const s = (...r) => (this.off(e, s), Wm([t, i], r));
    return this.on(e, s, this);
  }
  off(e, t, i) {
    if (!(e || t || i))
      return this.listeners = {}, this;
    const s = this.listeners;
    return (e ? [e] : Object.keys(s)).forEach((o) => {
      const l = s[o];
      if (l) {
        if (!(t || i)) {
          delete s[o];
          return;
        }
        for (let a = l.length - 2; a >= 0; a -= 2)
          t && l[a] !== t || i && l[a + 1] !== i || l.splice(a, 2);
      }
    }), this;
  }
  trigger(e, ...t) {
    let i = !0;
    if (e !== "*") {
      const r = this.listeners[e];
      r != null && (i = Wm([...r], t));
    }
    const s = this.listeners["*"];
    return s != null ? qy([
      i,
      Wm([...s], [e, ...t])
    ]) : i;
  }
  emit(e, ...t) {
    return this.trigger(e, ...t);
  }
}
function Z4e(n, ...e) {
  e.forEach((t) => {
    Object.getOwnPropertyNames(t.prototype).forEach((i) => {
      i !== "constructor" && Object.defineProperty(n.prototype, i, Object.getOwnPropertyDescriptor(t.prototype, i));
    });
  });
}
const F4e = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(n, e) {
  n.__proto__ = e;
} || function(n, e) {
  for (const t in e)
    Object.prototype.hasOwnProperty.call(e, t) && (n[t] = e[t]);
};
function V4e(n, e) {
  F4e(n, e);
  function t() {
    this.constructor = n;
  }
  n.prototype = e === null ? Object.create(e) : (t.prototype = e.prototype, new t());
}
class q4e {
}
const W4e = /^\s*class\s+/.test(`${q4e}`) || /^\s*class\s*\{/.test(`${class {
}}`);
function Wy(n, e) {
  let t;
  return W4e ? t = class extends e {
  } : (t = function() {
    return e.apply(this, arguments);
  }, V4e(t, e)), Object.defineProperty(t, "name", { value: n }), t;
}
function uC(n) {
  return n === "__proto__";
}
function Xy(n, e, t = "/") {
  let i;
  const s = Array.isArray(e) ? e : e.split(t);
  if (s.length)
    for (i = n; s.length; ) {
      const r = s.shift();
      if (Object(i) === i && r && r in i)
        i = i[r];
      else
        return;
    }
  return i;
}
function Bc(n, e, t, i = "/") {
  const s = Array.isArray(e) ? e : e.split(i), r = s.pop();
  if (r && !uC(r)) {
    let o = n;
    s.forEach((l) => {
      uC(l) || (o[l] == null && (o[l] = {}), o = o[l]);
    }), o[r] = t;
  }
  return n;
}
function hC(n, e, t = "/") {
  const i = Array.isArray(e) ? e.slice() : e.split(t), s = i.pop();
  if (s)
    if (i.length > 0) {
      const r = Xy(n, i);
      r && delete r[s];
    } else
      delete n[s];
  return n;
}
var X4e = function(n, e, t, i) {
  var s = arguments.length, r = s < 3 ? e : i === null ? i = Object.getOwnPropertyDescriptor(e, t) : i, o;
  if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
    r = Reflect.decorate(n, e, t, i);
  else
    for (var l = n.length - 1; l >= 0; l--)
      (o = n[l]) && (r = (s < 3 ? o(r) : s > 3 ? o(e, t, r) : o(e, t)) || r);
  return s > 3 && r && Object.defineProperty(e, t, r), r;
};
class Qt extends z4e {
  dispose() {
    this.off();
  }
}
X4e([
  Zr.dispose()
], Qt.prototype, "dispose", null);
(function(n) {
  n.dispose = Zr.dispose;
})(Qt || (Qt = {}));
Z4e(Qt, Zr);
const u_ = (n) => {
  const e = /* @__PURE__ */ Object.create(null);
  return (t) => e[t] || (e[t] = n(t));
}, h_ = u_((n) => n.replace(/\B([A-Z])/g, "-$1").toLowerCase()), Yy = u_((n) => M5(Qp(n)).replace(/ /g, ""));
function Xm(n) {
  let e = 2166136261, t = !1, i = n;
  for (let s = 0, r = i.length; s < r; s += 1) {
    let o = i.charCodeAt(s);
    o > 127 && !t && (i = unescape(encodeURIComponent(i)), o = i.charCodeAt(s), t = !0), e ^= o, e += (e << 1) + (e << 4) + (e << 7) + (e << 8) + (e << 24);
  }
  return e >>> 0;
}
function pp() {
  let n = "";
  const e = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx";
  for (let t = 0, i = e.length; t < i; t += 1) {
    const s = e[t], r = Math.random() * 16 | 0, o = s === "x" ? r : s === "y" ? r & 3 | 8 : s;
    n += o.toString(16);
  }
  return n;
}
function Y4e(n, e, t) {
  const i = Math.min(2, Math.floor(n.length * 0.34));
  let s = Math.floor(n.length * 0.4) + 1, r, o = !1;
  const l = n.toLowerCase();
  for (const a of e) {
    const c = t(a);
    if (c !== void 0 && Math.abs(c.length - l.length) <= i) {
      const u = c.toLowerCase();
      if (u === l) {
        if (c === n)
          continue;
        return a;
      }
      if (o || c.length < 3)
        continue;
      const h = H4e(l, u, s - 1);
      if (h === void 0)
        continue;
      h < 3 ? (o = !0, r = a) : (s = h, r = a);
    }
  }
  return r;
}
function H4e(n, e, t) {
  let i = new Array(e.length + 1), s = new Array(e.length + 1);
  const r = t + 1;
  for (let l = 0; l <= e.length; l += 1)
    i[l] = l;
  for (let l = 1; l <= n.length; l += 1) {
    const a = n.charCodeAt(l - 1), c = l > t ? l - t : 1, u = e.length > t + l ? t + l : e.length;
    s[0] = l;
    let h = l;
    for (let d = 1; d < c; d += 1)
      s[d] = r;
    for (let d = c; d <= u; d += 1) {
      const p = a === e.charCodeAt(d - 1) ? i[d - 1] : Math.min(
        /* delete */
        i[d] + 1,
        /* insert */
        s[d - 1] + 1,
        /* substitute */
        i[d - 1] + 2
      );
      s[d] = p, h = Math.min(h, p);
    }
    for (let d = u + 1; d <= e.length; d += 1)
      s[d] = r;
    if (h > t)
      return;
    const f = i;
    i = s, s = f;
  }
  const o = i[e.length];
  return o > t ? void 0 : o;
}
function Fr(n) {
  return typeof n == "string" && n.slice(-1) === "%";
}
function ks(n, e) {
  if (n == null)
    return 0;
  let t;
  if (typeof n == "string") {
    if (t = parseFloat(n), Fr(n) && (t /= 100, Number.isFinite(t)))
      return t * e;
  } else
    t = n;
  return Number.isFinite(t) ? t > 0 && t < 1 ? t * e : t : 0;
}
function Fl(n) {
  if (typeof n == "object") {
    let t = 0, i = 0, s = 0, r = 0;
    return n.vertical != null && Number.isFinite(n.vertical) && (i = r = n.vertical), n.horizontal != null && Number.isFinite(n.horizontal) && (s = t = n.horizontal), n.left != null && Number.isFinite(n.left) && (t = n.left), n.top != null && Number.isFinite(n.top) && (i = n.top), n.right != null && Number.isFinite(n.right) && (s = n.right), n.bottom != null && Number.isFinite(n.bottom) && (r = n.bottom), { top: i, right: s, bottom: r, left: t };
  }
  let e = 0;
  return n != null && Number.isFinite(n) && (e = n), { top: e, right: e, bottom: e, left: e };
}
let Hy = !1, f_ = !1, d_ = !1, p_ = !1, g_ = !1, m_ = !1, b_ = !1, v_ = !1, y_ = !1, O_ = !1, w_ = !1, x_ = !1, S_ = !1, C_ = !1, k_ = !1, P_ = !1;
if (typeof navigator == "object") {
  const n = navigator.userAgent;
  Hy = n.indexOf("Macintosh") >= 0, f_ = !!n.match(/(iPad|iPhone|iPod)/g), d_ = n.indexOf("Windows") >= 0, p_ = n.indexOf("MSIE") >= 0, g_ = !!n.match(/Trident\/7\./), m_ = !!n.match(/Edge\//), b_ = n.indexOf("Mozilla/") >= 0 && n.indexOf("MSIE") < 0 && n.indexOf("Edge/") < 0, y_ = n.indexOf("Chrome/") >= 0 && n.indexOf("Edge/") < 0, O_ = n.indexOf("Opera/") >= 0 || n.indexOf("OPR/") >= 0, w_ = n.indexOf("Firefox/") >= 0, x_ = n.indexOf("AppleWebKit/") >= 0 && n.indexOf("Chrome/") < 0 && n.indexOf("Edge/") < 0, typeof document == "object" && (P_ = !document.createElementNS || `${document.createElementNS("http://www.w3.org/2000/svg", "foreignObject")}` != "[object SVGForeignObjectElement]" || n.indexOf("Opera/") >= 0);
}
typeof window == "object" && (v_ = window.chrome != null && window.chrome.app != null && window.chrome.app.runtime != null, C_ = window.PointerEvent != null && !Hy);
if (typeof document == "object") {
  S_ = "ontouchstart" in document.documentElement;
  try {
    const n = Object.defineProperty({}, "passive", {
      get() {
        k_ = !0;
      }
    }), e = document.createElement("div");
    e.addEventListener && e.addEventListener("click", () => {
    }, n);
  } catch {
  }
}
var Do;
(function(n) {
  n.IS_MAC = Hy, n.IS_IOS = f_, n.IS_WINDOWS = d_, n.IS_IE = p_, n.IS_IE11 = g_, n.IS_EDGE = m_, n.IS_NETSCAPE = b_, n.IS_CHROME_APP = v_, n.IS_CHROME = y_, n.IS_OPERA = O_, n.IS_FIREFOX = w_, n.IS_SAFARI = x_, n.SUPPORT_TOUCH = S_, n.SUPPORT_POINTER = C_, n.SUPPORT_PASSIVE = k_, n.NO_FOREIGNOBJECT = P_, n.SUPPORT_FOREIGNOBJECT = !n.NO_FOREIGNOBJECT;
})(Do || (Do = {}));
(function(n) {
  function e() {
    const r = window.module;
    return r != null && r.hot != null && r.hot.status != null ? r.hot.status() : "unkonwn";
  }
  n.getHMRStatus = e;
  function t() {
    return e() === "apply";
  }
  n.isApplyingHMR = t;
  const i = {
    select: "input",
    change: "input",
    submit: "form",
    reset: "form",
    error: "img",
    load: "img",
    abort: "img"
  };
  function s(r) {
    const o = document.createElement(i[r] || "div"), l = `on${r}`;
    let a = l in o;
    return a || (o.setAttribute(l, "return;"), a = typeof o[l] == "function"), a;
  }
  n.isEventSupported = s;
})(Do || (Do = {}));
const Gy = /[\t\r\n\f]/g, Uy = /\S+/g, ic = (n) => ` ${n} `;
function sc(n) {
  return n && n.getAttribute && n.getAttribute("class") || "";
}
function jc(n, e) {
  if (n == null || e == null)
    return !1;
  const t = ic(sc(n)), i = ic(e);
  return n.nodeType === 1 ? t.replace(Gy, " ").includes(i) : !1;
}
function Me(n, e) {
  if (!(n == null || e == null)) {
    if (typeof e == "function")
      return Me(n, e(sc(n)));
    if (typeof e == "string" && n.nodeType === 1) {
      const t = e.match(Uy) || [], i = ic(sc(n)).replace(Gy, " ");
      let s = t.reduce((r, o) => r.indexOf(ic(o)) < 0 ? `${r}${o} ` : r, i);
      s = s.trim(), i !== s && n.setAttribute("class", s);
    }
  }
}
function nn(n, e) {
  if (n != null) {
    if (typeof e == "function")
      return nn(n, e(sc(n)));
    if ((!e || typeof e == "string") && n.nodeType === 1) {
      const t = (e || "").match(Uy) || [], i = ic(sc(n)).replace(Gy, " ");
      let s = t.reduce((r, o) => {
        const l = ic(o);
        return r.indexOf(l) > -1 ? r.replace(l, " ") : r;
      }, i);
      s = e ? s.trim() : "", i !== s && n.setAttribute("class", s);
    }
  }
}
function $u(n, e, t) {
  if (!(n == null || e == null)) {
    if (t != null && typeof e == "string") {
      t ? Me(n, e) : nn(n, e);
      return;
    }
    if (typeof e == "function")
      return $u(n, e(sc(n), t), t);
    typeof e == "string" && (e.match(Uy) || []).forEach((s) => {
      jc(n, s) ? nn(n, s) : Me(n, s);
    });
  }
}
let fC = 0;
function G4e() {
  return fC += 1, `v${fC}`;
}
function Ky(n) {
  return (n.id == null || n.id === "") && (n.id = G4e()), n.id;
}
function Lo(n) {
  return n == null ? !1 : typeof n.getScreenCTM == "function" && n instanceof SVGElement;
}
const wn = {
  svg: "http://www.w3.org/2000/svg",
  xmlns: "http://www.w3.org/2000/xmlns/",
  xml: "http://www.w3.org/XML/1998/namespace",
  xlink: "http://www.w3.org/1999/xlink",
  xhtml: "http://www.w3.org/1999/xhtml"
}, dC = "1.1";
function pC(n, e = document) {
  return e.createElement(n);
}
function Jy(n, e = wn.xhtml, t = document) {
  return t.createElementNS(e, n);
}
function Bs(n, e = document) {
  return Jy(n, wn.svg, e);
}
function gp(n) {
  if (n) {
    const t = `<svg xmlns="${wn.svg}" xmlns:xlink="${wn.xlink}" version="${dC}">${n}</svg>`, { documentElement: i } = U4e(t, { async: !1 });
    return i;
  }
  const e = document.createElementNS(wn.svg, "svg");
  return e.setAttributeNS(wn.xmlns, "xmlns:xlink", wn.xlink), e.setAttribute("version", dC), e;
}
function U4e(n, e = {}) {
  let t;
  try {
    const i = new DOMParser();
    if (e.async != null) {
      const s = i;
      s.async = e.async;
    }
    t = i.parseFromString(n, e.mimeType || "text/xml");
  } catch {
    t = void 0;
  }
  if (!t || t.getElementsByTagName("parsererror").length)
    throw new Error(`Invalid XML: ${n}`);
  return t;
}
function K4e(n, e = !0) {
  const t = n.nodeName;
  return e ? t.toLowerCase() : t.toUpperCase();
}
function eO(n) {
  let e = 0, t = n.previousSibling;
  for (; t; )
    t.nodeType === 1 && (e += 1), t = t.previousSibling;
  return e;
}
function J4e(n, e) {
  return n.querySelectorAll(e);
}
function eBe(n, e) {
  return n.querySelector(e);
}
function A_(n, e, t) {
  const i = n.ownerSVGElement;
  let s = n.parentNode;
  for (; s && s !== t && s !== i; ) {
    if (jc(s, e))
      return s;
    s = s.parentNode;
  }
  return null;
}
function E_(n, e) {
  const t = e && e.parentNode;
  return n === t || !!(t && t.nodeType === 1 && n.compareDocumentPosition(t) & 16);
}
function ar(n) {
  n && (Array.isArray(n) ? n : [n]).forEach((t) => {
    t.parentNode && t.parentNode.removeChild(t);
  });
}
function nf(n) {
  for (; n.firstChild; )
    n.removeChild(n.firstChild);
}
function Xo(n, e) {
  (Array.isArray(e) ? e : [e]).forEach((i) => {
    i != null && n.appendChild(i);
  });
}
function $_(n, e) {
  const t = n.firstChild;
  return t ? tO(t, e) : Xo(n, e);
}
function tO(n, e) {
  const t = n.parentNode;
  t && (Array.isArray(e) ? e : [e]).forEach((s) => {
    s != null && t.insertBefore(s, n);
  });
}
function Tu(n, e) {
  e != null && e.appendChild(n);
}
function gC(n) {
  try {
    return n instanceof HTMLElement;
  } catch {
    return typeof n == "object" && n.nodeType === 1 && typeof n.style == "object" && typeof n.ownerDocument == "object";
  }
}
function tBe(n, e) {
  const t = [];
  let i = n.firstChild;
  for (; i; i = i.nextSibling)
    i.nodeType === 1 && (!e || jc(i, e)) && t.push(i);
  return t;
}
const T_ = [
  "viewBox",
  "attributeName",
  "attributeType",
  "repeatCount",
  "textLength",
  "lengthAdjust",
  "gradientUnits"
];
function nBe(n, e) {
  return n.getAttribute(e);
}
function nO(n, e) {
  const t = M_(e);
  t.ns ? n.hasAttributeNS(t.ns, t.local) && n.removeAttributeNS(t.ns, t.local) : n.hasAttribute(e) && n.removeAttribute(e);
}
function iO(n, e, t) {
  if (t == null)
    return nO(n, e);
  const i = M_(e);
  i.ns && typeof t == "string" ? n.setAttributeNS(i.ns, e, t) : e === "id" ? n.id = `${t}` : n.setAttribute(e, `${t}`);
}
function __(n, e) {
  Object.keys(e).forEach((t) => {
    iO(n, t, e[t]);
  });
}
function nt(n, e, t) {
  if (e == null) {
    const i = n.attributes, s = {};
    for (let r = 0; r < i.length; r += 1)
      s[i[r].name] = i[r].value;
    return s;
  }
  if (typeof e == "string" && t === void 0)
    return n.getAttribute(e);
  typeof e == "object" ? __(n, e) : iO(n, e, t);
}
function M_(n) {
  if (n.indexOf(":") !== -1) {
    const e = n.split(":");
    return {
      ns: wn[e[0]],
      local: e[1]
    };
  }
  return {
    ns: null,
    local: n
  };
}
function ph(n) {
  const e = {};
  return Object.keys(n).forEach((t) => {
    const i = T_.includes(t) ? t : h_(t);
    e[i] = n[t];
  }), e;
}
function Hf(n) {
  const e = {};
  return n.split(";").forEach((i) => {
    const s = i.trim();
    if (s) {
      const r = s.split("=");
      r.length && (e[r[0].trim()] = r[1] ? r[1].trim() : "");
    }
  }), e;
}
function qb(n, e) {
  return Object.keys(e).forEach((t) => {
    if (t === "class")
      n[t] = n[t] ? `${n[t]} ${e[t]}` : e[t];
    else if (t === "style") {
      const i = typeof n[t] == "object", s = typeof e[t] == "object";
      let r, o;
      i && s ? (r = n[t], o = e[t]) : i ? (r = n[t], o = Hf(e[t])) : s ? (r = Hf(n[t]), o = e[t]) : (r = Hf(n[t]), o = Hf(e[t])), n[t] = qb(r, o);
    } else
      n[t] = e[t];
  }), n;
}
function iBe(n, e, t = {}) {
  const i = t.offset || 0, s = [], r = [];
  let o, l, a = null;
  for (let c = 0; c < n.length; c += 1) {
    o = r[c] = n[c];
    for (let u = 0, h = e.length; u < h; u += 1) {
      const f = e[u], d = f.start + i, p = f.end + i;
      c >= d && c < p && (typeof o == "string" ? o = r[c] = {
        t: n[c],
        attrs: f.attrs
      } : o.attrs = qb(qb({}, o.attrs), f.attrs), t.includeAnnotationIndices && (o.annotations == null && (o.annotations = []), o.annotations.push(u)));
    }
    l = r[c - 1], l ? Vt(o) && Vt(l) ? (a = a, JSON.stringify(o.attrs) === JSON.stringify(l.attrs) ? a.t += o.t : (s.push(a), a = o)) : Vt(o) || Vt(l) ? (a = a, s.push(a), a = o) : a = (a || "") + o : a = o;
  }
  return a != null && s.push(a), s;
}
function sBe(n) {
  return n.replace(/ /g, " ");
}
var mC;
(function(n) {
  function e(c) {
    const u = "data:";
    return c.substr(0, u.length) === u;
  }
  n.isDataUrl = e;
  function t(c, u) {
    if (!c || e(c)) {
      setTimeout(() => u(null, c));
      return;
    }
    const h = () => {
      u(new Error(`Failed to load image: ${c}`));
    }, f = window.FileReader ? (
      // chrome, IE10+
      (p) => {
        if (p.status === 200) {
          const g = new FileReader();
          g.onload = (m) => {
            const b = m.target.result;
            u(null, b);
          }, g.onerror = h, g.readAsDataURL(p.response);
        } else
          h();
      }
    ) : (p) => {
      const g = (m) => {
        const y = [];
        for (let v = 0; v < m.length; v += 32768)
          y.push(String.fromCharCode.apply(null, m.subarray(v, v + 32768)));
        return y.join("");
      };
      if (p.status === 200) {
        let m = c.split(".").pop() || "png";
        m === "svg" && (m = "svg+xml");
        const b = `data:image/${m};base64,`, y = new Uint8Array(p.response), v = b + btoa(g(y));
        u(null, v);
      } else
        h();
    }, d = new XMLHttpRequest();
    d.responseType = window.FileReader ? "blob" : "arraybuffer", d.open("GET", c, !0), d.addEventListener("error", h), d.addEventListener("load", () => f(d)), d.send();
  }
  n.imageToDataUri = t;
  function i(c) {
    let u = c.replace(/\s/g, "");
    u = decodeURIComponent(u);
    const h = u.indexOf(","), f = u.slice(0, h), d = f.split(":")[1].split(";")[0], p = u.slice(h + 1);
    let g;
    f.indexOf("base64") >= 0 ? g = atob(p) : g = unescape(encodeURIComponent(p));
    const m = new Uint8Array(g.length);
    for (let b = 0; b < g.length; b += 1)
      m[b] = g.charCodeAt(b);
    return new Blob([m], { type: d });
  }
  n.dataUriToBlob = i;
  function s(c, u) {
    const h = window.navigator.msSaveBlob;
    if (h)
      h(c, u);
    else {
      const f = window.URL.createObjectURL(c), d = document.createElement("a");
      d.href = f, d.download = u, document.body.appendChild(d), d.click(), document.body.removeChild(d), window.URL.revokeObjectURL(f);
    }
  }
  n.downloadBlob = s;
  function r(c, u) {
    const h = i(c);
    s(h, u);
  }
  n.downloadDataUri = r;
  function o(c) {
    const u = c.match(/<svg[^>]*viewBox\s*=\s*(["']?)(.+?)\1[^>]*>/i);
    return u && u[2] ? u[2].replace(/\s+/, " ").split(" ") : null;
  }
  function l(c) {
    const u = parseFloat(c);
    return Number.isNaN(u) ? null : u;
  }
  function a(c, u = {}) {
    let h = null;
    const f = (v) => (h == null && (h = o(c)), h != null ? l(h[v]) : null), d = (v) => {
      const O = c.match(v);
      return O && O[2] ? l(O[2]) : null;
    };
    let p = u.width;
    if (p == null && (p = d(/<svg[^>]*width\s*=\s*(["']?)(.+?)\1[^>]*>/i)), p == null && (p = f(2)), p == null)
      throw new Error("Can not parse width from svg string");
    let g = u.height;
    if (g == null && (g = d(/<svg[^>]*height\s*=\s*(["']?)(.+?)\1[^>]*>/i)), g == null && (g = f(3)), g == null)
      throw new Error("Can not parse height from svg string");
    return `data:image/svg+xml,${encodeURIComponent(c).replace(/'/g, "%27").replace(/"/g, "%22")}`;
  }
  n.svgToDataUrl = a;
})(mC || (mC = {}));
let al;
const rBe = {
  px(n) {
    return n;
  },
  mm(n) {
    return al * n;
  },
  cm(n) {
    return al * n * 10;
  },
  in(n) {
    return al * n * 25.4;
  },
  pt(n) {
    return al * (25.4 * n / 72);
  },
  pc(n) {
    return al * (25.4 * n / 6);
  }
};
var bC;
(function(n) {
  function e(i, s, r) {
    const o = document.createElement("div"), l = o.style;
    l.display = "inline-block", l.position = "absolute", l.left = "-15000px", l.top = "-15000px", l.width = i + (r || "px"), l.height = s + (r || "px"), document.body.appendChild(o);
    const a = o.getBoundingClientRect(), c = {
      width: a.width || 0,
      height: a.height || 0
    };
    return document.body.removeChild(o), c;
  }
  n.measure = e;
  function t(i, s) {
    al == null && (al = e("1", "1", "mm").width);
    const r = s ? rBe[s] : null;
    return r ? r(i) : i;
  }
  n.toPx = t;
})(bC || (bC = {}));
const oBe = /-(.)/g;
function lBe(n) {
  return n.replace(oBe, (e, t) => t.toUpperCase());
}
const Ym = {}, vC = ["webkit", "ms", "moz", "o"], R_ = typeof document < "u" ? document.createElement("div").style : {};
function aBe(n) {
  for (let e = 0; e < vC.length; e += 1) {
    const t = vC[e] + n;
    if (t in R_)
      return t;
  }
  return null;
}
function cBe(n) {
  const e = lBe(n);
  if (Ym[e] == null) {
    const t = e.charAt(0).toUpperCase() + e.slice(1);
    Ym[e] = e in R_ ? e : aBe(t);
  }
  return Ym[e];
}
function yC(n, e) {
  const t = n.ownerDocument && n.ownerDocument.defaultView && n.ownerDocument.defaultView.opener ? n.ownerDocument.defaultView.getComputedStyle(n, null) : window.getComputedStyle(n, null);
  return t && e ? t.getPropertyValue(e) || t[e] : t;
}
const uBe = {
  animationIterationCount: !0,
  columnCount: !0,
  flexGrow: !0,
  flexShrink: !0,
  fontWeight: !0,
  gridArea: !0,
  gridColumn: !0,
  gridColumnEnd: !0,
  gridColumnStart: !0,
  gridRow: !0,
  gridRowEnd: !0,
  gridRowStart: !0,
  lineHeight: !0,
  opacity: !0,
  order: !0,
  orphans: !0,
  widows: !0,
  zIndex: !0
};
function hBe(n) {
  return /^--/.test(n);
}
function fBe(n, e, t) {
  const i = window.getComputedStyle(n, null);
  return t ? i.getPropertyValue(e) || void 0 : i[e] || n.style[e];
}
function dBe(n, e) {
  return !uBe[n] && typeof e == "number" ? `${e}px` : e;
}
function fn(n, e, t) {
  if (typeof e == "string") {
    const i = hBe(e);
    if (i || (e = cBe(e)), t === void 0)
      return fBe(n, e, i);
    i || (t = dBe(e, t));
    const s = n.style;
    i ? s.setProperty(e, t) : s[e] = t;
    return;
  }
  for (const i in e)
    fn(n, i, e[i]);
}
const mp = /* @__PURE__ */ new WeakMap();
function OC(n, e) {
  const t = Qp(e), i = mp.get(n);
  if (i)
    return i[t];
}
function pBe(n, e, t) {
  const i = Qp(e), s = mp.get(n);
  s ? s[i] = t : mp.set(n, {
    [i]: t
  });
}
function Vl(n, e, t) {
  if (!e) {
    const i = {};
    return Object.keys(mp).forEach((s) => {
      i[s] = OC(n, s);
    }), i;
  }
  if (typeof e == "string") {
    if (t === void 0)
      return OC(n, e);
    pBe(n, e, t);
    return;
  }
  for (const i in e)
    Vl(n, i, e[i]);
}
class Ie {
  get [Symbol.toStringTag]() {
    return Ie.toStringTag;
  }
  get type() {
    return this.node.nodeName;
  }
  get id() {
    return this.node.id;
  }
  set id(e) {
    this.node.id = e;
  }
  constructor(e, t, i) {
    if (!e)
      throw new TypeError("Invalid element to create vector");
    let s;
    if (Ie.isVector(e))
      s = e.node;
    else if (typeof e == "string")
      if (e.toLowerCase() === "svg")
        s = gp();
      else if (e[0] === "<") {
        const r = gp(e);
        s = document.importNode(r.firstChild, !0);
      } else
        s = document.createElementNS(wn.svg, e);
    else
      s = e;
    this.node = s, t && this.setAttributes(t), i && this.append(i);
  }
  transform(e, t) {
    return e == null ? rc(this.node) : (rc(this.node, e, t), this);
  }
  translate(e, t = 0, i = {}) {
    return e == null ? xC(this.node) : (xC(this.node, e, t, i), this);
  }
  rotate(e, t, i, s = {}) {
    return e == null ? Yb(this.node) : (Yb(this.node, e, t, i, s), this);
  }
  scale(e, t) {
    return e == null ? Hb(this.node) : (Hb(this.node, e, t), this);
  }
  /**
   * Returns an SVGMatrix that specifies the transformation necessary
   * to convert this coordinate system into `target` coordinate system.
   */
  getTransformToElement(e) {
    const t = Ie.toNode(e);
    return Mu(this.node, t);
  }
  removeAttribute(e) {
    return nO(this.node, e), this;
  }
  getAttribute(e) {
    return nBe(this.node, e);
  }
  setAttribute(e, t) {
    return iO(this.node, e, t), this;
  }
  setAttributes(e) {
    return __(this.node, e), this;
  }
  attr(e, t) {
    return e == null ? nt(this.node) : typeof e == "string" && t === void 0 ? nt(this.node, e) : (typeof e == "object" ? nt(this.node, e) : nt(this.node, e, t), this);
  }
  svg() {
    return this.node instanceof SVGSVGElement ? this : Ie.create(this.node.ownerSVGElement);
  }
  defs() {
    const e = this.svg() || this, t = e.node.getElementsByTagName("defs")[0];
    return t ? Ie.create(t) : Ie.create("defs").appendTo(e);
  }
  text(e, t = {}) {
    return L_(this.node, e, t), this;
  }
  tagName() {
    return K4e(this.node);
  }
  clone() {
    return Ie.create(this.node.cloneNode(!0));
  }
  remove() {
    return ar(this.node), this;
  }
  empty() {
    return nf(this.node), this;
  }
  append(e) {
    return Xo(this.node, Ie.toNodes(e)), this;
  }
  appendTo(e) {
    return Tu(this.node, Ie.isVector(e) ? e.node : e), this;
  }
  prepend(e) {
    return $_(this.node, Ie.toNodes(e)), this;
  }
  before(e) {
    return tO(this.node, Ie.toNodes(e)), this;
  }
  replace(e) {
    return this.node.parentNode && this.node.parentNode.replaceChild(Ie.toNode(e), this.node), Ie.create(e);
  }
  first() {
    return this.node.firstChild ? Ie.create(this.node.firstChild) : null;
  }
  last() {
    return this.node.lastChild ? Ie.create(this.node.lastChild) : null;
  }
  get(e) {
    const t = this.node.childNodes[e];
    return t ? Ie.create(t) : null;
  }
  indexOf(e) {
    return Array.prototype.slice.call(this.node.childNodes).indexOf(Ie.toNode(e));
  }
  find(e) {
    const t = [], i = J4e(this.node, e);
    if (i)
      for (let s = 0, r = i.length; s < r; s += 1)
        t.push(Ie.create(i[s]));
    return t;
  }
  findOne(e) {
    const t = eBe(this.node, e);
    return t ? Ie.create(t) : null;
  }
  findParentByClass(e, t) {
    const i = A_(this.node, e, t);
    return i ? Ie.create(i) : null;
  }
  matches(e) {
    const t = this.node;
    this.node.matches;
    const i = t.matches || t.matchesSelector || t.msMatchesSelector || t.mozMatchesSelector || t.webkitMatchesSelector || t.oMatchesSelector || null;
    return i && i.call(t, e);
  }
  contains(e) {
    return E_(this.node, Ie.isVector(e) ? e.node : e);
  }
  wrap(e) {
    const t = Ie.create(e), i = this.node.parentNode;
    return i != null && i.insertBefore(t.node, this.node), t.append(this);
  }
  parent(e) {
    let t = this;
    if (t.node.parentNode == null)
      return null;
    if (t = Ie.create(t.node.parentNode), e == null)
      return t;
    do
      if (typeof e == "string" ? t.matches(e) : t instanceof e)
        return t;
    while (t = Ie.create(t.node.parentNode));
    return t;
  }
  children() {
    const e = this.node.childNodes, t = [];
    for (let i = 0; i < e.length; i += 1)
      e[i].nodeType === 1 && t.push(Ie.create(e[i]));
    return t;
  }
  eachChild(e, t) {
    const i = this.children();
    for (let s = 0, r = i.length; s < r; s += 1)
      e.call(i[s], i[s], s, i), t && i[s].eachChild(e, t);
    return this;
  }
  index() {
    return eO(this.node);
  }
  hasClass(e) {
    return jc(this.node, e);
  }
  addClass(e) {
    return Me(this.node, e), this;
  }
  removeClass(e) {
    return nn(this.node, e), this;
  }
  toggleClass(e, t) {
    return $u(this.node, e, t), this;
  }
  toLocalPoint(e, t) {
    return DBe(this.node, e, t);
  }
  /**
   * Samples the underlying SVG element (it currently works only on
   * paths - where it is most useful anyway). Returns an array of objects
   * of the form `{ x: Number, y: Number, distance: Number }`. Each of these
   * objects represent a point on the path. This basically creates a discrete
   * representation of the path (which is possible a curve). The sampling
   * interval defines the accuracy of the sampling. In other words, we travel
   * from the beginning of the path to the end by interval distance (on the
   * path, not between the resulting points) and collect the discrete points
   * on the path. This is very useful in many situations. For example, SVG
   * does not provide a built-in mechanism to find intersections between two
   * paths. Using sampling, we can just generate bunch of points for each of
   * the path and find the closest ones from each set.
   */
  sample(e = 1) {
    return this.node instanceof SVGPathElement ? vBe(this.node, e) : [];
  }
  toPath() {
    return Ie.create(kBe(this.node));
  }
  toPathData() {
    return B_(this.node);
  }
}
(function(n) {
  n.toStringTag = `X6.${n.name}`;
  function e(o) {
    if (o == null)
      return !1;
    if (o instanceof n)
      return !0;
    const l = o[Symbol.toStringTag], a = o;
    return (l == null || l === n.toStringTag) && a.node instanceof SVGElement && typeof a.sample == "function" && typeof a.toPath == "function";
  }
  n.isVector = e;
  function t(o, l, a) {
    return new n(o, l, a);
  }
  n.create = t;
  function i(o) {
    if (o[0] === "<") {
      const l = gp(o), a = [];
      for (let c = 0, u = l.childNodes.length; c < u; c += 1) {
        const h = l.childNodes[c];
        a.push(t(document.importNode(h, !0)));
      }
      return a;
    }
    return [t(o)];
  }
  n.createVectors = i;
  function s(o) {
    return e(o) ? o.node : o;
  }
  n.toNode = s;
  function r(o) {
    return Array.isArray(o) ? o.map((l) => s(l)) : [s(o)];
  }
  n.toNodes = r;
})(Ie || (Ie = {}));
function gBe(n, e) {
  const t = Ie.create(e), i = Ie.create("textPath"), s = n.d;
  if (s && n["xlink:href"] === void 0) {
    const r = Ie.create("path").attr("d", s).appendTo(t.defs());
    i.attr("xlink:href", `#${r.id}`);
  }
  return typeof n == "object" && i.attr(n), i.node;
}
function mBe(n, e, t) {
  const i = t.eol, s = t.baseSize, r = t.lineHeight;
  let o = 0, l;
  const a = {}, c = e.length - 1;
  for (let u = 0; u <= c; u += 1) {
    let h = e[u], f = null;
    if (typeof h == "object") {
      const d = h.attrs, p = Ie.create("tspan", d);
      l = p.node;
      let g = h.t;
      i && u === c && (g += i), l.textContent = g;
      const m = d.class;
      m && p.addClass(m), t.includeAnnotationIndices && p.attr("annotations", h.annotations.join(",")), f = parseFloat(d["font-size"]), f === void 0 && (f = s), f && f > o && (o = f);
    } else
      i && u === c && (h += i), l = document.createTextNode(h || " "), s && s > o && (o = s);
    n.appendChild(l);
  }
  return o && (a.maxFontSize = o), r ? a.lineHeight = r : o && (a.lineHeight = o * 1.2), a;
}
const D_ = /em$/;
function Gf(n, e) {
  const t = parseFloat(n);
  return D_.test(n) ? t * e : t;
}
function bBe(n, e, t, i) {
  if (!Array.isArray(e))
    return 0;
  const s = e.length;
  if (!s)
    return 0;
  let r = e[0];
  const o = Gf(r.maxFontSize, t) || t;
  let l = 0;
  const a = Gf(i, t);
  for (let h = 1; h < s; h += 1) {
    r = e[h];
    const f = Gf(r.lineHeight, t) || a;
    l += f;
  }
  const c = Gf(r.maxFontSize, t) || t;
  let u;
  switch (n) {
    case "middle":
      u = o / 2 - 0.15 * c - l / 2;
      break;
    case "bottom":
      u = -(0.25 * c) - l;
      break;
    case "top":
    default:
      u = 0.8 * o;
      break;
  }
  return u;
}
function L_(n, e, t = {}) {
  e = sBe(e);
  const i = t.eol;
  let s = t.textPath;
  const r = t.textVerticalAnchor, o = r === "middle" || r === "bottom" || r === "top";
  let l = t.x;
  l === void 0 && (l = n.getAttribute("x") || 0);
  const a = t.includeAnnotationIndices;
  let c = t.annotations;
  c && !Array.isArray(c) && (c = [c]);
  const u = t.lineHeight, h = u === "auto", f = h ? "1.5em" : u || "1em";
  let d = !0;
  const p = n.childNodes;
  if (p.length === 1) {
    const E = p[0];
    E && E.tagName.toUpperCase() === "TITLE" && (d = !1);
  }
  d && nf(n), nt(n, {
    // Preserve spaces, do not consecutive spaces to get collapsed to one.
    "xml:space": "preserve",
    // An empty text gets rendered into the DOM in webkit-based browsers.
    // In order to unify this behaviour across all browsers
    // we rather hide the text element when it's empty.
    display: e || t.displayEmpty ? null : "none"
  });
  const g = nt(n, "font-size");
  let m = parseFloat(g);
  m || (m = 16, (o || c) && !g && nt(n, "font-size", `${m}`));
  let b;
  s ? (typeof s == "string" && (s = { d: s }), b = gBe(s, n)) : b = document.createDocumentFragment();
  let y, v = 0, O;
  const x = e.split(`
`), S = [], C = x.length - 1;
  for (let E = 0; E <= C; E += 1) {
    y = f;
    let $ = "v-line";
    const T = Bs("tspan");
    let M, j = x[E];
    if (j)
      if (c) {
        const D = iBe(j, c, {
          offset: -v,
          includeAnnotationIndices: a
        });
        M = mBe(T, D, {
          eol: E !== C && i,
          baseSize: m,
          lineHeight: h ? null : f,
          includeAnnotationIndices: a
        });
        const P = M.lineHeight;
        P && h && E !== 0 && (y = P), E === 0 && (O = M.maxFontSize * 0.8);
      } else
        i && E !== C && (j += i), T.textContent = j;
    else {
      T.textContent = "-", $ += " v-empty-line";
      const D = T.style;
      D.fillOpacity = 0, D.strokeOpacity = 0, c && (M = {});
    }
    M && S.push(M), E > 0 && T.setAttribute("dy", y), (E > 0 || s) && T.setAttribute("x", l), T.className.baseVal = $, b.appendChild(T), v += j.length + 1;
  }
  if (o)
    if (c)
      y = bBe(r, S, m, f);
    else if (r === "top")
      y = "0.8em";
    else {
      let E;
      switch (C > 0 ? (E = parseFloat(f) || 1, E *= C, D_.test(f) || (E /= m)) : E = 0, r) {
        case "middle":
          y = `${0.3 - E / 2}em`;
          break;
        case "bottom":
          y = `${-E - 0.3}em`;
          break;
      }
    }
  else
    r === 0 ? y = "0em" : r ? y = r : (y = 0, n.getAttribute("y") == null && n.setAttribute("y", `${O || "0.8em"}`));
  b.firstChild.setAttribute("dy", y), n.appendChild(b);
}
function _u(n, e = {}) {
  const t = document.createElement("canvas").getContext("2d");
  if (!n)
    return { width: 0 };
  const i = [], s = e["font-size"] ? `${parseFloat(e["font-size"])}px` : "14px";
  return i.push(e["font-style"] || "normal"), i.push(e["font-variant"] || "normal"), i.push(e["font-weight"] || 400), i.push(s), i.push(e["font-family"] || "sans-serif"), t.font = i.join(" "), t.measureText(n);
}
function wC(n, e, t, i = {}) {
  if (e >= t)
    return [n, ""];
  const s = n.length, r = {};
  let o = Math.round(e / t * s - 1);
  for (o < 0 && (o = 0); o >= 0 && o < s; ) {
    const l = n.slice(0, o), a = r[l] || _u(l, i).width, c = n.slice(0, o + 1), u = r[c] || _u(c, i).width;
    if (r[l] = a, r[c] = u, a > e)
      o -= 1;
    else if (u <= e)
      o += 1;
    else
      break;
  }
  return [n.slice(0, o), n.slice(o)];
}
function N_(n, e, t = {}, i = {}) {
  const s = e.width, r = e.height, o = i.eol || `
`, l = t.fontSize || 14, a = t.lineHeight ? parseFloat(t.lineHeight) : Math.ceil(l * 1.4), c = Math.floor(r / a);
  if (n.indexOf(o) > -1) {
    const m = pp(), b = [];
    return n.split(o).map((y) => {
      const v = N_(y, Object.assign(Object.assign({}, e), { height: Number.MAX_SAFE_INTEGER }), t, Object.assign(Object.assign({}, i), { eol: m }));
      v && b.push(...v.split(m));
    }), b.slice(0, c).join(o);
  }
  const { width: u } = _u(n, t);
  if (u < s)
    return n;
  const h = [];
  let f = n, d = u, p = i.ellipsis, g = 0;
  p && (typeof p != "string" && (p = "…"), g = _u(p, t).width);
  for (let m = 0; m < c; m += 1)
    if (d > s)
      if (m === c - 1) {
        const [y] = wC(f, s - g, d, t);
        h.push(p ? `${y}${p}` : y);
      } else {
        const [y, v] = wC(f, s, d, t);
        h.push(y), f = v, d = _u(f, t).width;
      }
    else {
      h.push(f);
      break;
    }
  return h.join(o);
}
const Wb = 0.551784;
function Dn(n, e, t = NaN) {
  const i = n.getAttribute(e);
  if (i == null)
    return t;
  const s = parseFloat(i);
  return Number.isNaN(s) ? t : s;
}
function vBe(n, e = 1) {
  const t = n.getTotalLength(), i = [];
  let s = 0, r;
  for (; s < t; )
    r = n.getPointAtLength(s), i.push({ distance: s, x: r.x, y: r.y }), s += e;
  return i;
}
function yBe(n) {
  return [
    "M",
    Dn(n, "x1"),
    Dn(n, "y1"),
    "L",
    Dn(n, "x2"),
    Dn(n, "y2")
  ].join(" ");
}
function OBe(n) {
  const e = bp(n);
  return e.length === 0 ? null : `${I_(e)} Z`;
}
function wBe(n) {
  const e = bp(n);
  return e.length === 0 ? null : I_(e);
}
function I_(n) {
  return `M ${n.map((t) => `${t.x} ${t.y}`).join(" L")}`;
}
function bp(n) {
  const e = [], t = n.points;
  if (t)
    for (let i = 0, s = t.numberOfItems; i < s; i += 1)
      e.push(t.getItem(i));
  return e;
}
function xBe(n) {
  const e = Dn(n, "cx", 0), t = Dn(n, "cy", 0), i = Dn(n, "r"), s = i * Wb;
  return [
    "M",
    e,
    t - i,
    "C",
    e + s,
    t - i,
    e + i,
    t - s,
    e + i,
    t,
    "C",
    e + i,
    t + s,
    e + s,
    t + i,
    e,
    t + i,
    "C",
    e - s,
    t + i,
    e - i,
    t + s,
    e - i,
    t,
    "C",
    e - i,
    t - s,
    e - s,
    t - i,
    e,
    t - i,
    "Z"
  ].join(" ");
}
function SBe(n) {
  const e = Dn(n, "cx", 0), t = Dn(n, "cy", 0), i = Dn(n, "rx"), s = Dn(n, "ry") || i, r = i * Wb, o = s * Wb;
  return [
    "M",
    e,
    t - s,
    "C",
    e + r,
    t - s,
    e + i,
    t - o,
    e + i,
    t,
    "C",
    e + i,
    t + o,
    e + r,
    t + s,
    e,
    t + s,
    "C",
    e - r,
    t + s,
    e - i,
    t + o,
    e - i,
    t,
    "C",
    e - i,
    t - o,
    e - r,
    t - s,
    e,
    t - s,
    "Z"
  ].join(" ");
}
function CBe(n) {
  return Q_({
    x: Dn(n, "x", 0),
    y: Dn(n, "y", 0),
    width: Dn(n, "width", 0),
    height: Dn(n, "height", 0),
    rx: Dn(n, "rx", 0),
    ry: Dn(n, "ry", 0)
  });
}
function Q_(n) {
  let e;
  const t = n.x, i = n.y, s = n.width, r = n.height, o = Math.min(n.rx || n["top-rx"] || 0, s / 2), l = Math.min(n.rx || n["bottom-rx"] || 0, s / 2), a = Math.min(n.ry || n["top-ry"] || 0, r / 2), c = Math.min(n.ry || n["bottom-ry"] || 0, r / 2);
  return o || l || a || c ? e = [
    "M",
    t,
    i + a,
    "v",
    r - a - c,
    "a",
    l,
    c,
    0,
    0,
    0,
    l,
    c,
    "h",
    s - 2 * l,
    "a",
    l,
    c,
    0,
    0,
    0,
    l,
    -c,
    "v",
    -(r - c - a),
    "a",
    o,
    a,
    0,
    0,
    0,
    -o,
    -a,
    "h",
    -(s - 2 * o),
    "a",
    o,
    a,
    0,
    0,
    0,
    -o,
    a,
    "Z"
  ] : e = ["M", t, i, "H", t + s, "V", i + r, "H", t, "V", i, "Z"], e.join(" ");
}
function kBe(n) {
  const e = Bs("path");
  nt(e, nt(n));
  const t = B_(n);
  return t && e.setAttribute("d", t), e;
}
function B_(n) {
  const e = n.tagName.toLowerCase();
  switch (e) {
    case "path":
      return n.getAttribute("d");
    case "line":
      return yBe(n);
    case "polygon":
      return OBe(n);
    case "polyline":
      return wBe(n);
    case "ellipse":
      return SBe(n);
    case "circle":
      return xBe(n);
    case "rect":
      return CBe(n);
  }
  throw new Error(`"${e}" cannot be converted to svg path element.`);
}
const PBe = /(\w+)\(([^,)]+),?([^)]+)?\)/gi, j_ = /[ ,]+/, ABe = /^(\w+)\((.*)\)/;
function EBe(n, e) {
  const i = Bs("svg").createSVGPoint();
  return i.x = n, i.y = e, i;
}
function kn(n) {
  const t = Bs("svg").createSVGMatrix();
  if (n != null) {
    const i = n, s = t;
    for (const r in i)
      s[r] = i[r];
  }
  return t;
}
function hu(n) {
  const e = Bs("svg");
  return n != null ? (n instanceof DOMMatrix || (n = kn(n)), e.createSVGTransformFromMatrix(n)) : e.createSVGTransform();
}
function gh(n) {
  let e = kn();
  const t = n != null && n.match(PBe);
  if (!t)
    return e;
  for (let i = 0, s = t.length; i < s; i += 1) {
    const o = t[i].match(ABe);
    if (o) {
      let l, a, c, u, h, f = kn();
      const d = o[2].split(j_);
      switch (o[1].toLowerCase()) {
        case "scale":
          l = parseFloat(d[0]), a = d[1] === void 0 ? l : parseFloat(d[1]), f = f.scaleNonUniform(l, a);
          break;
        case "translate":
          c = parseFloat(d[0]), u = parseFloat(d[1]), f = f.translate(c, u);
          break;
        case "rotate":
          h = parseFloat(d[0]), c = parseFloat(d[1]) || 0, u = parseFloat(d[2]) || 0, c !== 0 || u !== 0 ? f = f.translate(c, u).rotate(h).translate(-c, -u) : f = f.rotate(h);
          break;
        case "skewx":
          h = parseFloat(d[0]), f = f.skewX(h);
          break;
        case "skewy":
          h = parseFloat(d[0]), f = f.skewY(h);
          break;
        case "matrix":
          f.a = parseFloat(d[0]), f.b = parseFloat(d[1]), f.c = parseFloat(d[2]), f.d = parseFloat(d[3]), f.e = parseFloat(d[4]), f.f = parseFloat(d[5]);
          break;
        default:
          continue;
      }
      e = e.multiply(f);
    }
  }
  return e;
}
function zc(n) {
  const e = n || {}, t = e.a != null ? e.a : 1, i = e.b != null ? e.b : 0, s = e.c != null ? e.c : 0, r = e.d != null ? e.d : 1, o = e.e != null ? e.e : 0, l = e.f != null ? e.f : 0;
  return `matrix(${t},${i},${s},${r},${o},${l})`;
}
function kg(n) {
  let e, t, i;
  if (n) {
    const r = j_;
    if (n.trim().indexOf("matrix") >= 0) {
      const o = gh(n), l = $Be(o);
      e = [l.translateX, l.translateY], t = [l.rotation], i = [l.scaleX, l.scaleY];
      const a = [];
      (e[0] !== 0 || e[1] !== 0) && a.push(`translate(${e.join(",")})`), (i[0] !== 1 || i[1] !== 1) && a.push(`scale(${i.join(",")})`), t[0] !== 0 && a.push(`rotate(${t[0]})`), n = a.join(" ");
    } else {
      const o = n.match(/translate\((.*?)\)/);
      o && (e = o[1].split(r));
      const l = n.match(/rotate\((.*?)\)/);
      l && (t = l[1].split(r));
      const a = n.match(/scale\((.*?)\)/);
      a && (i = a[1].split(r));
    }
  }
  const s = i && i[0] ? parseFloat(i[0]) : 1;
  return {
    raw: n || "",
    translation: {
      tx: e && e[0] ? parseInt(e[0], 10) : 0,
      ty: e && e[1] ? parseInt(e[1], 10) : 0
    },
    rotation: {
      angle: t && t[0] ? parseInt(t[0], 10) : 0,
      cx: t && t[1] ? parseInt(t[1], 10) : void 0,
      cy: t && t[2] ? parseInt(t[2], 10) : void 0
    },
    scale: {
      sx: s,
      sy: i && i[1] ? parseFloat(i[1]) : s
    }
  };
}
function Xb(n, e) {
  const t = e.x * n.a + e.y * n.c + 0, i = e.x * n.b + e.y * n.d + 0;
  return { x: t, y: i };
}
function $Be(n) {
  const e = Xb(n, { x: 0, y: 1 }), t = Xb(n, { x: 1, y: 0 }), i = 180 / Math.PI * Math.atan2(e.y, e.x) - 90, s = 180 / Math.PI * Math.atan2(t.y, t.x);
  return {
    skewX: i,
    skewY: s,
    translateX: n.e,
    translateY: n.f,
    scaleX: Math.sqrt(n.a * n.a + n.b * n.b),
    scaleY: Math.sqrt(n.c * n.c + n.d * n.d),
    rotation: i
  };
}
function TBe(n) {
  let e, t, i, s;
  return n ? (e = n.a == null ? 1 : n.a, s = n.d == null ? 1 : n.d, t = n.b, i = n.c) : e = s = 1, {
    sx: t ? Math.sqrt(e * e + t * t) : e,
    sy: i ? Math.sqrt(i * i + s * s) : s
  };
}
function _Be(n) {
  let e = { x: 0, y: 1 };
  n && (e = Xb(n, e));
  const t = 180 * Math.atan2(e.y, e.x) / Math.PI % 360 - 90;
  return {
    angle: t % 360 + (t < 0 ? 360 : 0)
  };
}
function MBe(n) {
  return {
    tx: n && n.e || 0,
    ty: n && n.f || 0
  };
}
function rc(n, e, t = {}) {
  if (e == null)
    return gh(nt(n, "transform"));
  if (t.absolute) {
    n.setAttribute("transform", zc(e));
    return;
  }
  const i = n.transform, s = hu(e);
  i.baseVal.appendItem(s);
}
function xC(n, e, t = 0, i = {}) {
  let s = nt(n, "transform");
  const r = kg(s);
  if (e == null)
    return r.translation;
  s = r.raw, s = s.replace(/translate\([^)]*\)/g, "").trim();
  const o = i.absolute ? e : r.translation.tx + e, l = i.absolute ? t : r.translation.ty + t, a = `translate(${o},${l})`;
  n.setAttribute("transform", `${a} ${s}`.trim());
}
function Yb(n, e, t, i, s = {}) {
  let r = nt(n, "transform");
  const o = kg(r);
  if (e == null)
    return o.rotation;
  r = o.raw, r = r.replace(/rotate\([^)]*\)/g, "").trim(), e %= 360;
  const l = s.absolute ? e : o.rotation.angle + e, a = t != null && i != null ? `,${t},${i}` : "", c = `rotate(${l}${a})`;
  n.setAttribute("transform", `${r} ${c}`.trim());
}
function Hb(n, e, t) {
  let i = nt(n, "transform");
  const s = kg(i);
  if (e == null)
    return s.scale;
  t = t ?? e, i = s.raw, i = i.replace(/scale\([^)]*\)/g, "").trim();
  const r = `scale(${e},${t})`;
  n.setAttribute("transform", `${i} ${r}`.trim());
}
function Mu(n, e) {
  if (Lo(e) && Lo(n)) {
    const t = e.getScreenCTM(), i = n.getScreenCTM();
    if (t && i)
      return t.inverse().multiply(i);
  }
  return kn();
}
function RBe(n, e) {
  let t = kn();
  if (Lo(e) && Lo(n)) {
    let i = n;
    const s = [];
    for (; i && i !== e; ) {
      const r = i.getAttribute("transform") || null, o = gh(r);
      s.push(o), i = i.parentNode;
    }
    s.reverse().forEach((r) => {
      t = t.multiply(r);
    });
  }
  return t;
}
function DBe(n, e, t) {
  const i = n instanceof SVGSVGElement ? n : n.ownerSVGElement, s = i.createSVGPoint();
  s.x = e, s.y = t;
  try {
    const r = i.getScreenCTM(), o = s.matrixTransform(r.inverse()), l = Mu(n, i).inverse();
    return o.matrixTransform(l);
  } catch {
    return s;
  }
}
var qi;
(function(n) {
  const e = {};
  function t(r) {
    return e[r] || {};
  }
  n.get = t;
  function i(r, o) {
    e[r] = o;
  }
  n.register = i;
  function s(r) {
    delete e[r];
  }
  n.unregister = s;
})(qi || (qi = {}));
var bl;
(function(n) {
  const e = /* @__PURE__ */ new WeakMap();
  function t(r) {
    return e.has(r) || e.set(r, { events: /* @__PURE__ */ Object.create(null) }), e.get(r);
  }
  n.ensure = t;
  function i(r) {
    return e.get(r);
  }
  n.get = i;
  function s(r) {
    return e.delete(r);
  }
  n.remove = s;
})(bl || (bl = {}));
var je;
(function(n) {
  n.returnTrue = () => !0, n.returnFalse = () => !1;
  function e(s) {
    s.stopPropagation();
  }
  n.stopPropagationCallback = e;
  function t(s, r, o) {
    s.addEventListener != null && s.addEventListener(r, o);
  }
  n.addEventListener = t;
  function i(s, r, o) {
    s.removeEventListener != null && s.removeEventListener(r, o);
  }
  n.removeEventListener = i;
})(je || (je = {}));
(function(n) {
  const e = /[^\x20\t\r\n\f]+/g, t = /^([^.]*)(?:\.(.+)|)/;
  function i(l) {
    return (l || "").match(e) || [""];
  }
  n.splitType = i;
  function s(l) {
    const a = t.exec(l) || [];
    return {
      originType: a[1] ? a[1].trim() : a[1],
      namespaces: a[2] ? a[2].split(".").map((c) => c.trim()).sort() : []
    };
  }
  n.normalizeType = s;
  function r(l) {
    return l.nodeType === 1 || l.nodeType === 9 || !+l.nodeType;
  }
  n.isValidTarget = r;
  function o(l, a) {
    if (a) {
      const c = l;
      return c.querySelector != null && c.querySelector(a) != null;
    }
    return !0;
  }
  n.isValidSelector = o;
})(je || (je = {}));
(function(n) {
  let e = 0;
  const t = /* @__PURE__ */ new WeakMap();
  function i(l) {
    return t.has(l) || (t.set(l, e), e += 1), t.get(l);
  }
  n.ensureHandlerId = i;
  function s(l) {
    return t.get(l);
  }
  n.getHandlerId = s;
  function r(l) {
    return t.delete(l);
  }
  n.removeHandlerId = r;
  function o(l, a) {
    return t.set(l, a);
  }
  n.setHandlerId = o;
})(je || (je = {}));
(function(n) {
  function e(t, i) {
    const s = [], r = bl.get(t), o = r && r.events && r.events[i.type], l = o && o.handlers || [], a = o ? o.delegateCount : 0;
    if (a > 0 && // Support: Firefox <=42 - 66+
    // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
    // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
    // Support: IE 11+
    // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
    !(i.type === "click" && typeof i.button == "number" && i.button >= 1)) {
      for (let c = i.target; c !== t; c = c.parentNode || t)
        if (c.nodeType === 1 && !(i.type === "click" && c.disabled === !0)) {
          const u = [], h = {};
          for (let f = 0; f < a; f += 1) {
            const d = l[f], p = d.selector;
            if (p != null && h[p] == null) {
              const g = t, m = [];
              g.querySelectorAll(p).forEach((b) => {
                m.push(b);
              }), h[p] = m.includes(c);
            }
            h[p] && u.push(d);
          }
          u.length && s.push({ elem: c, handlers: u });
        }
    }
    return a < l.length && s.push({ elem: t, handlers: l.slice(a) }), s;
  }
  n.getHandlerQueue = e;
})(je || (je = {}));
(function(n) {
  function e(t) {
    return t != null && t === t.window;
  }
  n.isWindow = e;
})(je || (je = {}));
(function(n) {
  function e(t, i) {
    const s = t.nodeType === 9 ? t.documentElement : t, r = i && i.parentNode;
    return t === r || !!(r && r.nodeType === 1 && // Support: IE 9 - 11+
    // IE doesn't have `contains` on SVG.
    (s.contains ? s.contains(r) : t.compareDocumentPosition && t.compareDocumentPosition(r) & 16));
  }
  n.contains = e;
})(je || (je = {}));
class cr {
  constructor(e, t) {
    this.isDefaultPrevented = je.returnFalse, this.isPropagationStopped = je.returnFalse, this.isImmediatePropagationStopped = je.returnFalse, this.isSimulated = !1, this.preventDefault = () => {
      const i = this.originalEvent;
      this.isDefaultPrevented = je.returnTrue, i && !this.isSimulated && i.preventDefault();
    }, this.stopPropagation = () => {
      const i = this.originalEvent;
      this.isPropagationStopped = je.returnTrue, i && !this.isSimulated && i.stopPropagation();
    }, this.stopImmediatePropagation = () => {
      const i = this.originalEvent;
      this.isImmediatePropagationStopped = je.returnTrue, i && !this.isSimulated && i.stopImmediatePropagation(), this.stopPropagation();
    }, typeof e == "string" ? this.type = e : e.type && (this.originalEvent = e, this.type = e.type, this.isDefaultPrevented = e.defaultPrevented ? je.returnTrue : je.returnFalse, this.target = e.target, this.currentTarget = e.currentTarget, this.relatedTarget = e.relatedTarget, this.timeStamp = e.timeStamp), t && Object.assign(this, t), this.timeStamp || (this.timeStamp = Date.now());
  }
}
(function(n) {
  function e(t) {
    return t instanceof n ? t : new n(t);
  }
  n.create = e;
})(cr || (cr = {}));
(function(n) {
  function e(t, i) {
    Object.defineProperty(n.prototype, t, {
      enumerable: !0,
      configurable: !0,
      get: typeof i == "function" ? (
        // eslint-disable-next-line
        function() {
          if (this.originalEvent)
            return i(this.originalEvent);
        }
      ) : (
        // eslint-disable-next-line
        function() {
          if (this.originalEvent)
            return this.originalEvent[t];
        }
      ),
      set(s) {
        Object.defineProperty(this, t, {
          enumerable: !0,
          configurable: !0,
          writable: !0,
          value: s
        });
      }
    });
  }
  n.addProperty = e;
})(cr || (cr = {}));
(function(n) {
  const e = {
    bubbles: !0,
    cancelable: !0,
    eventPhase: !0,
    detail: !0,
    view: !0,
    button: !0,
    buttons: !0,
    clientX: !0,
    clientY: !0,
    offsetX: !0,
    offsetY: !0,
    pageX: !0,
    pageY: !0,
    screenX: !0,
    screenY: !0,
    toElement: !0,
    pointerId: !0,
    pointerType: !0,
    char: !0,
    code: !0,
    charCode: !0,
    key: !0,
    keyCode: !0,
    touches: !0,
    changedTouches: !0,
    targetTouches: !0,
    which: !0,
    altKey: !0,
    ctrlKey: !0,
    metaKey: !0,
    shiftKey: !0
  };
  Object.keys(e).forEach((t) => n.addProperty(t, e[t]));
})(cr || (cr = {}));
(function(n) {
  qi.register("load", {
    noBubble: !0
  });
})();
(function(n) {
  qi.register("beforeunload", {
    postDispatch(e, t) {
      t.result !== void 0 && t.originalEvent && (t.originalEvent.returnValue = t.result);
    }
  });
})();
(function(n) {
  qi.register("mouseenter", {
    delegateType: "mouseover",
    bindType: "mouseover",
    handle(e, t) {
      let i;
      const s = t.relatedTarget, r = t.handleObj;
      return (!s || s !== e && !je.contains(e, s)) && (t.type = r.originType, i = r.handler.call(e, t), t.type = "mouseover"), i;
    }
  }), qi.register("mouseleave", {
    delegateType: "mouseout",
    bindType: "mouseout",
    handle(e, t) {
      let i;
      const s = t.relatedTarget, r = t.handleObj;
      return (!s || s !== e && !je.contains(e, s)) && (t.type = r.originType, i = r.handler.call(e, t), t.type = "mouseout"), i;
    }
  });
})();
var LBe = function(n, e) {
  var t = {};
  for (var i in n)
    Object.prototype.hasOwnProperty.call(n, i) && e.indexOf(i) < 0 && (t[i] = n[i]);
  if (n != null && typeof Object.getOwnPropertySymbols == "function")
    for (var s = 0, i = Object.getOwnPropertySymbols(n); s < i.length; s++)
      e.indexOf(i[s]) < 0 && Object.prototype.propertyIsEnumerable.call(n, i[s]) && (t[i[s]] = n[i[s]]);
  return t;
}, mh;
(function(n) {
  let e;
  function t(o, l, a, c, u) {
    if (!je.isValidTarget(o))
      return;
    let h;
    if (typeof a != "function") {
      const { handler: g, selector: m } = a, b = LBe(a, ["handler", "selector"]);
      a = g, u = m, h = b;
    }
    const f = bl.ensure(o);
    let d = f.handler;
    d == null && (d = f.handler = function(g, ...m) {
      return e !== g.type ? s(o, g, ...m) : void 0;
    });
    const p = je.ensureHandlerId(a);
    je.splitType(l).forEach((g) => {
      const { originType: m, namespaces: b } = je.normalizeType(g);
      if (!m)
        return;
      let y = m, v = qi.get(y);
      y = (u ? v.delegateType : v.bindType) || y, v = qi.get(y);
      const O = Object.assign({
        type: y,
        originType: m,
        data: c,
        selector: u,
        guid: p,
        handler: a,
        namespace: b.join(".")
      }, h), x = f.events;
      let S = x[y];
      S || (S = x[y] = { handlers: [], delegateCount: 0 }, (!v.setup || v.setup(o, c, b, d) === !1) && je.addEventListener(o, y, d)), v.add && (je.removeHandlerId(O.handler), v.add(o, O), je.setHandlerId(O.handler, p)), u ? (S.handlers.splice(S.delegateCount, 0, O), S.delegateCount += 1) : S.handlers.push(O);
    });
  }
  n.on = t;
  function i(o, l, a, c, u) {
    const h = bl.get(o);
    if (!h)
      return;
    const f = h.events;
    f && (je.splitType(l).forEach((d) => {
      const { originType: p, namespaces: g } = je.normalizeType(d);
      if (!p) {
        Object.keys(f).forEach((x) => {
          i(o, x + d, a, c, !0);
        });
        return;
      }
      let m = p;
      const b = qi.get(m);
      m = (c ? b.delegateType : b.bindType) || m;
      const y = f[m];
      if (!y)
        return;
      const v = g.length > 0 ? new RegExp(`(^|\\.)${g.join("\\.(?:.*\\.|)")}(\\.|$)`) : null, O = y.handlers.length;
      for (let x = y.handlers.length - 1; x >= 0; x -= 1) {
        const S = y.handlers[x];
        (u || p === S.originType) && (!a || je.getHandlerId(a) === S.guid) && (v == null || S.namespace && v.test(S.namespace)) && (c == null || c === S.selector || c === "**" && S.selector) && (y.handlers.splice(x, 1), S.selector && (y.delegateCount -= 1), b.remove && b.remove(o, S));
      }
      O && y.handlers.length === 0 && ((!b.teardown || b.teardown(o, g, h.handler) === !1) && je.removeEventListener(o, m, h.handler), delete f[m]);
    }), Object.keys(f).length === 0 && bl.remove(o));
  }
  n.off = i;
  function s(o, l, ...a) {
    const c = cr.create(l);
    c.delegateTarget = o;
    const u = qi.get(c.type);
    if (u.preDispatch && u.preDispatch(o, c) === !1)
      return;
    const h = je.getHandlerQueue(o, c);
    for (let f = 0, d = h.length; f < d && !c.isPropagationStopped(); f += 1) {
      const p = h[f];
      c.currentTarget = p.elem;
      for (let g = 0, m = p.handlers.length; g < m && !c.isImmediatePropagationStopped(); g += 1) {
        const b = p.handlers[g];
        if (c.rnamespace == null || b.namespace && c.rnamespace.test(b.namespace)) {
          c.handleObj = b, c.data = b.data;
          const y = qi.get(b.originType).handle, v = y ? y(p.elem, c, ...a) : b.handler.call(p.elem, c, ...a);
          v !== void 0 && (c.result = v, v === !1 && (c.preventDefault(), c.stopPropagation()));
        }
      }
    }
    return u.postDispatch && u.postDispatch(o, c), c.result;
  }
  n.dispatch = s;
  function r(o, l, a, c) {
    let u = o, h = typeof o == "string" ? o : o.type, f = typeof o == "string" || u.namespace == null ? [] : u.namespace.split(".");
    const d = a;
    if (d.nodeType === 3 || d.nodeType === 8)
      return;
    h.indexOf(".") > -1 && (f = h.split("."), h = f.shift(), f.sort());
    const p = h.indexOf(":") < 0 && `on${h}`;
    u = o instanceof cr ? o : new cr(h, typeof o == "object" ? o : null), u.namespace = f.join("."), u.rnamespace = u.namespace ? new RegExp(`(^|\\.)${f.join("\\.(?:.*\\.|)")}(\\.|$)`) : null, u.result = void 0, u.target || (u.target = d);
    const g = [u];
    Array.isArray(l) ? g.push(...l) : g.push(l);
    const m = qi.get(h);
    if (!c && m.trigger && m.trigger(d, u, l) === !1)
      return;
    let b;
    const y = [d];
    if (!c && !m.noBubble && !je.isWindow(d)) {
      b = m.delegateType || h;
      let O = d, x = d.parentNode;
      for (; x != null; )
        y.push(x), O = x, x = x.parentNode;
      const S = d.ownerDocument || document;
      if (O === S) {
        const C = O.defaultView || O.parentWindow || window;
        y.push(C);
      }
    }
    let v = d;
    for (let O = 0, x = y.length; O < x && !u.isPropagationStopped(); O += 1) {
      const S = y[O];
      v = S, u.type = O > 1 ? b : m.bindType || h;
      const C = bl.get(S);
      C && C.events[u.type] && C.handler && C.handler.call(S, ...g);
      const k = p && S[p] || null;
      k && je.isValidTarget(S) && (u.result = k.call(S, ...g), u.result === !1 && u.preventDefault());
    }
    if (u.type = h, !c && !u.isDefaultPrevented()) {
      const O = m.preventDefault;
      if ((O == null || O(y.pop(), u, l) === !1) && je.isValidTarget(d) && p && typeof d[h] == "function" && !je.isWindow(d)) {
        const x = d[p];
        x && (d[p] = null), e = h, u.isPropagationStopped() && v.addEventListener(h, je.stopPropagationCallback), d[h](), u.isPropagationStopped() && v.removeEventListener(h, je.stopPropagationCallback), e = void 0, x && (d[p] = x);
      }
    }
    return u.result;
  }
  n.trigger = r;
})(mh || (mh = {}));
var _n;
(function(n) {
  function e(r, o, l, a, c) {
    return Ru.on(r, o, l, a, c), r;
  }
  n.on = e;
  function t(r, o, l, a, c) {
    return Ru.on(r, o, l, a, c, !0), r;
  }
  n.once = t;
  function i(r, o, l, a) {
    return Ru.off(r, o, l, a), r;
  }
  n.off = i;
  function s(r, o, l, a) {
    return mh.trigger(o, l, r, a), r;
  }
  n.trigger = s;
})(_n || (_n = {}));
var Ru;
(function(n) {
  function e(i, s, r, o, l, a) {
    if (typeof s == "object") {
      typeof r != "string" && (o = o || r, r = void 0), Object.keys(s).forEach((c) => e(i, c, r, o, s[c], a));
      return;
    }
    if (o == null && l == null ? (l = r, o = r = void 0) : l == null && (typeof r == "string" ? (l = o, o = void 0) : (l = o, o = r, r = void 0)), l === !1)
      l = je.returnFalse;
    else if (!l)
      return;
    if (a) {
      const c = l;
      l = function(u, ...h) {
        return n.off(i, u), c.call(this, u, ...h);
      }, je.setHandlerId(l, je.ensureHandlerId(c));
    }
    mh.on(i, s, l, o, r);
  }
  n.on = e;
  function t(i, s, r, o) {
    const l = s;
    if (l && l.preventDefault != null && l.handleObj != null) {
      const a = l.handleObj;
      t(l.delegateTarget, a.namespace ? `${a.originType}.${a.namespace}` : a.originType, a.selector, a.handler);
      return;
    }
    if (typeof s == "object") {
      const a = s;
      Object.keys(a).forEach((c) => t(i, c, r, a[c]));
      return;
    }
    (r === !1 || typeof r == "function") && (o = r, r = void 0), o === !1 && (o = je.returnFalse), mh.off(i, s, o, r);
  }
  n.off = t;
})(Ru || (Ru = {}));
class z_ {
  constructor(e, t, i) {
    this.animationFrameId = 0, this.deltaX = 0, this.deltaY = 0, this.eventName = Do.isEventSupported("wheel") ? "wheel" : "mousewheel", this.target = e, this.onWheelCallback = t, this.onWheelGuard = i, this.onWheel = this.onWheel.bind(this), this.didWheel = this.didWheel.bind(this);
  }
  enable() {
    this.target.addEventListener(this.eventName, this.onWheel, {
      passive: !1
    });
  }
  disable() {
    this.target.removeEventListener(this.eventName, this.onWheel);
  }
  onWheel(e) {
    if (this.onWheelGuard != null && !this.onWheelGuard(e))
      return;
    this.deltaX += e.deltaX, this.deltaY += e.deltaY, e.preventDefault();
    let t;
    (this.deltaX !== 0 || this.deltaY !== 0) && (e.stopPropagation(), t = !0), t === !0 && this.animationFrameId === 0 && (this.animationFrameId = requestAnimationFrame(() => {
      this.didWheel(e);
    }));
  }
  didWheel(e) {
    this.animationFrameId = 0, this.onWheelCallback(e, this.deltaX, this.deltaY), this.deltaX = 0, this.deltaY = 0;
  }
}
function Gb(n) {
  const e = n.getBoundingClientRect(), t = n.ownerDocument.defaultView;
  return {
    top: e.top + t.pageYOffset,
    left: e.left + t.pageXOffset
  };
}
function NBe(n) {
  return n.getBoundingClientRect().width;
}
function IBe(n) {
  return n.getBoundingClientRect().height;
}
function Z_(n, e = 60) {
  let t = null;
  return (...i) => {
    t && clearTimeout(t), t = window.setTimeout(() => {
      n.apply(this, i);
    }, e);
  };
}
function QBe(n) {
  let e = null, t = [];
  const i = () => {
    if (getComputedStyle(n).position === "static") {
      const c = n.style;
      c.position = "relative";
    }
    const a = document.createElement("object");
    return a.onload = () => {
      a.contentDocument.defaultView.addEventListener("resize", s), s();
    }, a.style.display = "block", a.style.position = "absolute", a.style.top = "0", a.style.left = "0", a.style.height = "100%", a.style.width = "100%", a.style.overflow = "hidden", a.style.pointerEvents = "none", a.style.zIndex = "-1", a.style.opacity = "0", a.setAttribute("tabindex", "-1"), a.type = "text/html", n.appendChild(a), a.data = "about:blank", a;
  }, s = Z_(() => {
    t.forEach((a) => a(n));
  }), r = (a) => {
    e || (e = i()), t.indexOf(a) === -1 && t.push(a);
  }, o = () => {
    e && e.parentNode && (e.contentDocument && e.contentDocument.defaultView.removeEventListener("resize", s), e.parentNode.removeChild(e), e = null, t = []);
  };
  return {
    element: n,
    bind: r,
    destroy: o,
    unbind: (a) => {
      const c = t.indexOf(a);
      c !== -1 && t.splice(c, 1), t.length === 0 && e && o();
    }
  };
}
function BBe(n) {
  let e = null, t = [];
  const i = Z_(() => {
    t.forEach((a) => {
      a(n);
    });
  }), s = () => {
    const a = new ResizeObserver(i);
    return a.observe(n), i(), a;
  }, r = (a) => {
    e || (e = s()), t.indexOf(a) === -1 && t.push(a);
  }, o = () => {
    e && (e.disconnect(), t = [], e = null);
  };
  return {
    element: n,
    bind: r,
    destroy: o,
    unbind: (a) => {
      const c = t.indexOf(a);
      c !== -1 && t.splice(c, 1), t.length === 0 && e && o();
    }
  };
}
const jBe = typeof ResizeObserver < "u" ? BBe : QBe;
var vp;
(function(n) {
  const e = /* @__PURE__ */ new WeakMap();
  function t(s) {
    let r = e.get(s);
    return r || (r = jBe(s), e.set(s, r), r);
  }
  function i(s) {
    s.destroy(), e.delete(s.element);
  }
  n.bind = (s, r) => {
    const o = t(s);
    return o.bind(r), () => o.unbind(r);
  }, n.clear = (s) => {
    const r = t(s);
    i(r);
  };
})(vp || (vp = {}));
class bh {
  constructor(e = {}) {
    this.comparator = e.comparator || bh.defaultComparator, this.index = {}, this.data = e.data || [], this.heapify();
  }
  /**
   * Returns `true` if the priority queue is empty, `false` otherwise.
   */
  isEmpty() {
    return this.data.length === 0;
  }
  /**
   * Inserts a value with priority to the queue. Optionally pass a unique
   * id of this item. Passing unique IDs for each item you insert allows
   * you to use the `updatePriority()` operation.
   * @param priority
   * @param value
   * @param id
   */
  insert(e, t, i) {
    const s = { priority: e, value: t }, r = this.data.length;
    return i && (s.id = i, this.index[i] = r), this.data.push(s), this.bubbleUp(r), this;
  }
  /**
   * Returns the value of an item with the highest priority.
   */
  peek() {
    return this.data[0] ? this.data[0].value : null;
  }
  /**
   * Returns the highest priority in the queue.
   */
  peekPriority() {
    return this.data[0] ? this.data[0].priority : null;
  }
  updatePriority(e, t) {
    const i = this.index[e];
    if (typeof i > "u")
      throw new Error(`Node with id '${e}' was not found in the heap.`);
    const s = this.data, r = s[i].priority, o = this.comparator(t, r);
    o < 0 ? (s[i].priority = t, this.bubbleUp(i)) : o > 0 && (s[i].priority = t, this.bubbleDown(i));
  }
  /**
   * Removes the item with the highest priority from the queue
   *
   * @returns The value of the removed item.
   */
  remove() {
    const e = this.data, t = e[0], i = e.pop();
    return t.id && delete this.index[t.id], e.length > 0 && (e[0] = i, i.id && (this.index[i.id] = 0), this.bubbleDown(0)), t ? t.value : null;
  }
  heapify() {
    for (let e = 0; e < this.data.length; e += 1)
      this.bubbleUp(e);
  }
  bubbleUp(e) {
    const t = this.data;
    let i, s, r = e;
    for (; r > 0 && (s = r - 1 >>> 1, this.comparator(t[r].priority, t[s].priority) < 0); ) {
      i = t[s], t[s] = t[r];
      let o = t[r].id;
      o != null && (this.index[o] = s), t[r] = i, o = t[r].id, o != null && (this.index[o] = r), r = s;
    }
  }
  bubbleDown(e) {
    const t = this.data, i = t.length - 1;
    let s = e;
    for (; ; ) {
      const r = (s << 1) + 1, o = r + 1;
      let l = s;
      if (r <= i && this.comparator(t[r].priority, t[l].priority) < 0 && (l = r), o <= i && this.comparator(t[o].priority, t[l].priority) < 0 && (l = o), l !== s) {
        const a = t[l];
        t[l] = t[s];
        let c = t[s].id;
        c != null && (this.index[c] = l), t[s] = a, c = t[s].id, c != null && (this.index[c] = s), s = l;
      } else
        break;
    }
  }
}
(function(n) {
  n.defaultComparator = (e, t) => e - t;
})(bh || (bh = {}));
var Ub;
(function(n) {
  function e(t, i, s = (r, o) => 1) {
    const r = {}, o = {}, l = {}, a = new bh();
    for (r[i] = 0, Object.keys(t).forEach((c) => {
      c !== i && (r[c] = 1 / 0), a.insert(r[c], c, c);
    }); !a.isEmpty(); ) {
      const c = a.remove();
      l[c] = !0;
      const u = t[c] || [];
      for (let h = 0; h < u.length; h += 1) {
        const f = u[h];
        if (!l[f]) {
          const d = r[c] + s(c, f);
          d < r[f] && (r[f] = d, o[f] = c, a.updatePriority(f, d));
        }
      }
    }
    return o;
  }
  n.run = e;
})(Ub || (Ub = {}));
class Dr {
  constructor(e, t, i, s) {
    if (e == null)
      return this.set(255, 255, 255, 1);
    if (typeof e == "number")
      return this.set(e, t, i, s);
    if (typeof e == "string")
      return Dr.fromString(e) || this;
    if (Array.isArray(e))
      return this.set(e);
    this.set(e.r, e.g, e.b, e.a == null ? 1 : e.a);
  }
  blend(e, t, i) {
    this.set(e.r + (t.r - e.r) * i, e.g + (t.g - e.g) * i, e.b + (t.b - e.b) * i, e.a + (t.a - e.a) * i);
  }
  lighten(e) {
    const t = Dr.lighten(this.toArray(), e);
    this.r = t[0], this.g = t[1], this.b = t[2], this.a = t[3];
  }
  darken(e) {
    this.lighten(-e);
  }
  set(e, t, i, s) {
    const r = Array.isArray(e) ? e[0] : e, o = Array.isArray(e) ? e[1] : t, l = Array.isArray(e) ? e[2] : i, a = Array.isArray(e) ? e[3] : s;
    return this.r = Math.round(di(r, 0, 255)), this.g = Math.round(di(o, 0, 255)), this.b = Math.round(di(l, 0, 255)), this.a = a == null ? 1 : di(a, 0, 1), this;
  }
  toHex() {
    return `#${["r", "g", "b"].map((t) => {
      const i = this[t].toString(16);
      return i.length < 2 ? `0${i}` : i;
    }).join("")}`;
  }
  toRGBA() {
    return this.toArray();
  }
  toHSLA() {
    return Dr.rgba2hsla(this.r, this.g, this.b, this.a);
  }
  toCSS(e) {
    const t = `${this.r},${this.g},${this.b},`;
    return e ? `rgb(${t})` : `rgba(${t},${this.a})`;
  }
  toGrey() {
    return Dr.makeGrey(Math.round((this.r + this.g + this.b) / 3), this.a);
  }
  toArray() {
    return [this.r, this.g, this.b, this.a];
  }
  toString() {
    return this.toCSS();
  }
}
(function(n) {
  function e(v) {
    return new n(v);
  }
  n.fromArray = e;
  function t(v) {
    return new n([...p(v), 1]);
  }
  n.fromHex = t;
  function i(v) {
    const O = v.toLowerCase().match(/^rgba?\(([\s.,0-9]+)\)/);
    if (O) {
      const x = O[1].split(/\s*,\s*/).map((S) => parseInt(S, 10));
      return new n(x);
    }
    return null;
  }
  n.fromRGBA = i;
  function s(v, O, x) {
    x < 0 && ++x, x > 1 && --x;
    const S = 6 * x;
    return S < 1 ? v + (O - v) * S : 2 * x < 1 ? O : 3 * x < 2 ? v + (O - v) * (2 / 3 - x) * 6 : v;
  }
  function r(v) {
    const O = v.toLowerCase().match(/^hsla?\(([\s.,0-9]+)\)/);
    if (O) {
      const x = O[2].split(/\s*,\s*/), S = (parseFloat(x[0]) % 360 + 360) % 360 / 360, C = parseFloat(x[1]) / 100, k = parseFloat(x[2]) / 100, E = x[3] == null ? 1 : parseInt(x[3], 10);
      return new n(c(S, C, k, E));
    }
    return null;
  }
  n.fromHSLA = r;
  function o(v) {
    if (v.startsWith("#"))
      return t(v);
    if (v.startsWith("rgb"))
      return i(v);
    const O = n.named[v];
    return O ? t(O) : r(v);
  }
  n.fromString = o;
  function l(v, O) {
    return n.fromArray([v, v, v, O]);
  }
  n.makeGrey = l;
  function a(v, O, x, S) {
    const C = Array.isArray(v) ? v[0] : v, k = Array.isArray(v) ? v[1] : O, E = Array.isArray(v) ? v[2] : x, $ = Array.isArray(v) ? v[3] : S, T = Math.max(C, k, E), M = Math.min(C, k, E), j = (T + M) / 2;
    let D = 0, P = 0;
    if (M !== T) {
      const A = T - M;
      switch (P = j > 0.5 ? A / (2 - T - M) : A / (T + M), T) {
        case C:
          D = (k - E) / A + (k < E ? 6 : 0);
          break;
        case k:
          D = (E - C) / A + 2;
          break;
        case E:
          D = (C - k) / A + 4;
          break;
      }
      D /= 6;
    }
    return [D, P, j, $ ?? 1];
  }
  n.rgba2hsla = a;
  function c(v, O, x, S) {
    const C = Array.isArray(v) ? v[0] : v, k = Array.isArray(v) ? v[1] : O, E = Array.isArray(v) ? v[2] : x, $ = Array.isArray(v) ? v[3] : S, T = E <= 0.5 ? E * (k + 1) : E + k - E * k, M = 2 * E - T;
    return [
      s(M, T, C + 1 / 3) * 256,
      s(M, T, C) * 256,
      s(M, T, C - 1 / 3) * 256,
      $ ?? 1
    ];
  }
  n.hsla2rgba = c;
  function u(v) {
    return new n(Math.round(Math.random() * 256), Math.round(Math.random() * 256), Math.round(Math.random() * 256), v ? void 0 : parseFloat(Math.random().toFixed(2)));
  }
  n.random = u;
  function h() {
    const v = "0123456789ABCDEF";
    let O = "#";
    for (let x = 0; x < 6; x += 1)
      O += v[Math.floor(Math.random() * 16)];
    return O;
  }
  n.randomHex = h;
  function f(v) {
    return u(v).toString();
  }
  n.randomRGBA = f;
  function d(v, O) {
    if (typeof v == "string") {
      const E = v[0] === "#", [$, T, M] = p(v);
      return O ? $ * 0.299 + T * 0.587 + M * 0.114 > 186 ? "#000000" : "#ffffff" : `${E ? "#" : ""}${g(255 - $, 255 - T, 255 - M)}`;
    }
    const x = v[0], S = v[1], C = v[2], k = v[3];
    return O ? x * 0.299 + S * 0.587 + C * 0.114 > 186 ? [0, 0, 0, k] : [255, 255, 255, k] : [255 - x, 255 - S, 255 - C, k];
  }
  n.invert = d;
  function p(v) {
    const O = v.indexOf("#") === 0 ? v : `#${v}`;
    let x = +`0x${O.substr(1)}`;
    if (!(O.length === 4 || O.length === 7) || Number.isNaN(x))
      throw new Error("Invalid hex color.");
    const S = O.length === 4 ? 4 : 8, C = (1 << S) - 1, k = ["b", "g", "r"].map(() => {
      const E = x & C;
      return x >>= S, S === 4 ? 17 * E : E;
    });
    return [k[2], k[1], k[0]];
  }
  function g(v, O, x) {
    const S = (C) => C.length < 2 ? `0${C}` : C;
    return `${S(v.toString(16))}${S(O.toString(16))}${S(x.toString(16))}`;
  }
  function m(v, O) {
    return y(v, O);
  }
  n.lighten = m;
  function b(v, O) {
    return y(v, -O);
  }
  n.darken = b;
  function y(v, O) {
    if (typeof v == "string") {
      const C = v[0] === "#", k = parseInt(C ? v.substr(1) : v, 16), E = di((k >> 16) + O, 0, 255), $ = di((k >> 8 & 255) + O, 0, 255), T = di((k & 255) + O, 0, 255);
      return `${C ? "#" : ""}${(T | $ << 8 | E << 16).toString(16)}`;
    }
    const x = g(v[0], v[1], v[2]), S = p(y(x, O));
    return [S[0], S[1], S[2], v[3]];
  }
})(Dr || (Dr = {}));
(function(n) {
  n.named = {
    aliceblue: "#f0f8ff",
    antiquewhite: "#faebd7",
    aqua: "#00ffff",
    aquamarine: "#7fffd4",
    azure: "#f0ffff",
    beige: "#f5f5dc",
    bisque: "#ffe4c4",
    black: "#000000",
    blanchedalmond: "#ffebcd",
    blue: "#0000ff",
    blueviolet: "#8a2be2",
    brown: "#a52a2a",
    burlywood: "#deb887",
    burntsienna: "#ea7e5d",
    cadetblue: "#5f9ea0",
    chartreuse: "#7fff00",
    chocolate: "#d2691e",
    coral: "#ff7f50",
    cornflowerblue: "#6495ed",
    cornsilk: "#fff8dc",
    crimson: "#dc143c",
    cyan: "#00ffff",
    darkblue: "#00008b",
    darkcyan: "#008b8b",
    darkgoldenrod: "#b8860b",
    darkgray: "#a9a9a9",
    darkgreen: "#006400",
    darkgrey: "#a9a9a9",
    darkkhaki: "#bdb76b",
    darkmagenta: "#8b008b",
    darkolivegreen: "#556b2f",
    darkorange: "#ff8c00",
    darkorchid: "#9932cc",
    darkred: "#8b0000",
    darksalmon: "#e9967a",
    darkseagreen: "#8fbc8f",
    darkslateblue: "#483d8b",
    darkslategray: "#2f4f4f",
    darkslategrey: "#2f4f4f",
    darkturquoise: "#00ced1",
    darkviolet: "#9400d3",
    deeppink: "#ff1493",
    deepskyblue: "#00bfff",
    dimgray: "#696969",
    dimgrey: "#696969",
    dodgerblue: "#1e90ff",
    firebrick: "#b22222",
    floralwhite: "#fffaf0",
    forestgreen: "#228b22",
    fuchsia: "#ff00ff",
    gainsboro: "#dcdcdc",
    ghostwhite: "#f8f8ff",
    gold: "#ffd700",
    goldenrod: "#daa520",
    gray: "#808080",
    green: "#008000",
    greenyellow: "#adff2f",
    grey: "#808080",
    honeydew: "#f0fff0",
    hotpink: "#ff69b4",
    indianred: "#cd5c5c",
    indigo: "#4b0082",
    ivory: "#fffff0",
    khaki: "#f0e68c",
    lavender: "#e6e6fa",
    lavenderblush: "#fff0f5",
    lawngreen: "#7cfc00",
    lemonchiffon: "#fffacd",
    lightblue: "#add8e6",
    lightcoral: "#f08080",
    lightcyan: "#e0ffff",
    lightgoldenrodyellow: "#fafad2",
    lightgray: "#d3d3d3",
    lightgreen: "#90ee90",
    lightgrey: "#d3d3d3",
    lightpink: "#ffb6c1",
    lightsalmon: "#ffa07a",
    lightseagreen: "#20b2aa",
    lightskyblue: "#87cefa",
    lightslategray: "#778899",
    lightslategrey: "#778899",
    lightsteelblue: "#b0c4de",
    lightyellow: "#ffffe0",
    lime: "#00ff00",
    limegreen: "#32cd32",
    linen: "#faf0e6",
    magenta: "#ff00ff",
    maroon: "#800000",
    mediumaquamarine: "#66cdaa",
    mediumblue: "#0000cd",
    mediumorchid: "#ba55d3",
    mediumpurple: "#9370db",
    mediumseagreen: "#3cb371",
    mediumslateblue: "#7b68ee",
    mediumspringgreen: "#00fa9a",
    mediumturquoise: "#48d1cc",
    mediumvioletred: "#c71585",
    midnightblue: "#191970",
    mintcream: "#f5fffa",
    mistyrose: "#ffe4e1",
    moccasin: "#ffe4b5",
    navajowhite: "#ffdead",
    navy: "#000080",
    oldlace: "#fdf5e6",
    olive: "#808000",
    olivedrab: "#6b8e23",
    orange: "#ffa500",
    orangered: "#ff4500",
    orchid: "#da70d6",
    palegoldenrod: "#eee8aa",
    palegreen: "#98fb98",
    paleturquoise: "#afeeee",
    palevioletred: "#db7093",
    papayawhip: "#ffefd5",
    peachpuff: "#ffdab9",
    peru: "#cd853f",
    pink: "#ffc0cb",
    plum: "#dda0dd",
    powderblue: "#b0e0e6",
    purple: "#800080",
    rebeccapurple: "#663399",
    red: "#ff0000",
    rosybrown: "#bc8f8f",
    royalblue: "#4169e1",
    saddlebrown: "#8b4513",
    salmon: "#fa8072",
    sandybrown: "#f4a460",
    seagreen: "#2e8b57",
    seashell: "#fff5ee",
    sienna: "#a0522d",
    silver: "#c0c0c0",
    skyblue: "#87ceeb",
    slateblue: "#6a5acd",
    slategray: "#708090",
    slategrey: "#708090",
    snow: "#fffafa",
    springgreen: "#00ff7f",
    steelblue: "#4682b4",
    tan: "#d2b48c",
    teal: "#008080",
    thistle: "#d8bfd8",
    tomato: "#ff6347",
    turquoise: "#40e0d0",
    violet: "#ee82ee",
    wheat: "#f5deb3",
    white: "#ffffff",
    whitesmoke: "#f5f5f5",
    yellow: "#ffff00",
    yellowgreen: "#9acd32"
  };
})(Dr || (Dr = {}));
class Kb {
  constructor() {
    this.clear();
  }
  clear() {
    this.map = /* @__PURE__ */ new WeakMap(), this.arr = [];
  }
  has(e) {
    return this.map.has(e);
  }
  get(e) {
    return this.map.get(e);
  }
  set(e, t) {
    this.map.set(e, t), this.arr.push(e);
  }
  delete(e) {
    const t = this.arr.indexOf(e);
    t >= 0 && this.arr.splice(t, 1);
    const i = this.map.get(e);
    return this.map.delete(e), i;
  }
  each(e) {
    this.arr.forEach((t) => {
      const i = this.map.get(t);
      e(i, t);
    });
  }
  dispose() {
    this.clear();
  }
}
var No;
(function(n) {
  function e(s) {
    const r = [], o = [];
    return Array.isArray(s) ? r.push(...s) : s.split("|").forEach((l) => {
      l.indexOf("&") === -1 ? r.push(l) : o.push(...l.split("&"));
    }), { or: r, and: o };
  }
  n.parse = e;
  function t(s, r) {
    if (s != null && r != null) {
      const o = e(s), l = e(r), a = o.or.sort(), c = l.or.sort(), u = o.and.sort(), h = l.and.sort(), f = (d, p) => d.length === p.length && (d.length === 0 || d.every((g, m) => g === p[m]));
      return f(a, c) && f(u, h);
    }
    return s == null && r == null;
  }
  n.equals = t;
  function i(s, r, o) {
    if (r == null || Array.isArray(r) && r.length === 0)
      return o ? s.altKey !== !0 && s.ctrlKey !== !0 && s.metaKey !== !0 && s.shiftKey !== !0 : !0;
    const { or: l, and: a } = e(r), c = (u) => {
      const h = `${u.toLowerCase()}Key`;
      return s[h] === !0;
    };
    return l.some((u) => c(u)) && a.every((u) => c(u));
  }
  n.isMatch = i;
})(No || (No = {}));
var ql;
(function(n) {
  n.linear = (e) => e, n.quad = (e) => e * e, n.cubic = (e) => e * e * e, n.inout = (e) => {
    if (e <= 0)
      return 0;
    if (e >= 1)
      return 1;
    const t = e * e, i = t * e;
    return 4 * (e < 0.5 ? i : 3 * (e - t) + i - 0.75);
  }, n.exponential = (e) => Math.pow(2, 10 * (e - 1)), n.bounce = (e) => {
    for (let t = 0, i = 1; ; t += i, i /= 2)
      if (e >= (7 - 4 * t) / 11) {
        const s = (11 - 6 * t - 11 * e) / 4;
        return -s * s + i * i;
      }
  };
})(ql || (ql = {}));
(function(n) {
  n.decorators = {
    reverse(e) {
      return (t) => 1 - e(1 - t);
    },
    reflect(e) {
      return (t) => 0.5 * (t < 0.5 ? e(2 * t) : 2 - e(2 - 2 * t));
    },
    clamp(e, t = 0, i = 1) {
      return (s) => {
        const r = e(s);
        return r < t ? t : r > i ? i : r;
      };
    },
    back(e = 1.70158) {
      return (t) => t * t * ((e + 1) * t - e);
    },
    elastic(e = 1.5) {
      return (t) => Math.pow(2, 10 * (t - 1)) * Math.cos(20 * Math.PI * e / 3 * t);
    }
  };
})(ql || (ql = {}));
(function(n) {
  function e(P) {
    return -1 * Math.cos(P * (Math.PI / 2)) + 1;
  }
  n.easeInSine = e;
  function t(P) {
    return Math.sin(P * (Math.PI / 2));
  }
  n.easeOutSine = t;
  function i(P) {
    return -0.5 * (Math.cos(Math.PI * P) - 1);
  }
  n.easeInOutSine = i;
  function s(P) {
    return P * P;
  }
  n.easeInQuad = s;
  function r(P) {
    return P * (2 - P);
  }
  n.easeOutQuad = r;
  function o(P) {
    return P < 0.5 ? 2 * P * P : -1 + (4 - 2 * P) * P;
  }
  n.easeInOutQuad = o;
  function l(P) {
    return P * P * P;
  }
  n.easeInCubic = l;
  function a(P) {
    const A = P - 1;
    return A * A * A + 1;
  }
  n.easeOutCubic = a;
  function c(P) {
    return P < 0.5 ? 4 * P * P * P : (P - 1) * (2 * P - 2) * (2 * P - 2) + 1;
  }
  n.easeInOutCubic = c;
  function u(P) {
    return P * P * P * P;
  }
  n.easeInQuart = u;
  function h(P) {
    const A = P - 1;
    return 1 - A * A * A * A;
  }
  n.easeOutQuart = h;
  function f(P) {
    const A = P - 1;
    return P < 0.5 ? 8 * P * P * P * P : 1 - 8 * A * A * A * A;
  }
  n.easeInOutQuart = f;
  function d(P) {
    return P * P * P * P * P;
  }
  n.easeInQuint = d;
  function p(P) {
    const A = P - 1;
    return 1 + A * A * A * A * A;
  }
  n.easeOutQuint = p;
  function g(P) {
    const A = P - 1;
    return P < 0.5 ? 16 * P * P * P * P * P : 1 + 16 * A * A * A * A * A;
  }
  n.easeInOutQuint = g;
  function m(P) {
    return P === 0 ? 0 : Math.pow(2, 10 * (P - 1));
  }
  n.easeInExpo = m;
  function b(P) {
    return P === 1 ? 1 : -Math.pow(2, -10 * P) + 1;
  }
  n.easeOutExpo = b;
  function y(P) {
    if (P === 0 || P === 1)
      return P;
    const A = P * 2, Q = A - 1;
    return A < 1 ? 0.5 * Math.pow(2, 10 * Q) : 0.5 * (-Math.pow(2, -10 * Q) + 2);
  }
  n.easeInOutExpo = y;
  function v(P) {
    const A = P / 1;
    return -1 * (Math.sqrt(1 - A * P) - 1);
  }
  n.easeInCirc = v;
  function O(P) {
    const A = P - 1;
    return Math.sqrt(1 - A * A);
  }
  n.easeOutCirc = O;
  function x(P) {
    const A = P * 2, Q = A - 2;
    return A < 1 ? -0.5 * (Math.sqrt(1 - A * A) - 1) : 0.5 * (Math.sqrt(1 - Q * Q) + 1);
  }
  n.easeInOutCirc = x;
  function S(P, A = 1.70158) {
    return P * P * ((A + 1) * P - A);
  }
  n.easeInBack = S;
  function C(P, A = 1.70158) {
    const Q = P / 1 - 1;
    return Q * Q * ((A + 1) * Q + A) + 1;
  }
  n.easeOutBack = C;
  function k(P, A = 1.70158) {
    const Q = P * 2, X = Q - 2, z = A * 1.525;
    return Q < 1 ? 0.5 * Q * Q * ((z + 1) * Q - z) : 0.5 * (X * X * ((z + 1) * X + z) + 2);
  }
  n.easeInOutBack = k;
  function E(P, A = 0.7) {
    if (P === 0 || P === 1)
      return P;
    const X = P / 1 - 1, z = 1 - A, q = z / (2 * Math.PI) * Math.asin(1);
    return -(Math.pow(2, 10 * X) * // eslint-disable-line
    Math.sin((X - q) * (2 * Math.PI) / z));
  }
  n.easeInElastic = E;
  function $(P, A = 0.7) {
    const Q = 1 - A, X = P * 2;
    if (P === 0 || P === 1)
      return P;
    const z = Q / (2 * Math.PI) * Math.asin(1);
    return Math.pow(2, -10 * X) * // eslint-disable-line
    Math.sin((X - z) * (2 * Math.PI) / Q) + 1;
  }
  n.easeOutElastic = $;
  function T(P, A = 0.65) {
    const Q = 1 - A;
    if (P === 0 || P === 1)
      return P;
    const X = P * 2, z = X - 1, q = Q / (2 * Math.PI) * Math.asin(1);
    return X < 1 ? -0.5 * (Math.pow(2, 10 * z) * // eslint-disable-line
    Math.sin((z - q) * (2 * Math.PI) / Q)) : Math.pow(2, -10 * z) * // eslint-disable-line
    Math.sin((z - q) * (2 * Math.PI) / Q) * 0.5 + 1;
  }
  n.easeInOutElastic = T;
  function M(P) {
    const A = P / 1;
    if (A < 1 / 2.75)
      return 7.5625 * A * A;
    if (A < 2 / 2.75) {
      const Q = A - 0.5454545454545454;
      return 7.5625 * Q * Q + 0.75;
    }
    if (A < 2.5 / 2.75) {
      const Q = A - 0.8181818181818182;
      return 7.5625 * Q * Q + 0.9375;
    }
    {
      const Q = A - 0.9545454545454546;
      return 7.5625 * Q * Q + 0.984375;
    }
  }
  n.easeOutBounce = M;
  function j(P) {
    return 1 - M(1 - P);
  }
  n.easeInBounce = j;
  function D(P) {
    return P < 0.5 ? j(P * 2) * 0.5 : M(P * 2 - 1) * 0.5 + 0.5;
  }
  n.easeInOutBounce = D;
})(ql || (ql = {}));
var vl;
(function(n) {
  n.number = (e, t) => {
    const i = t - e;
    return (s) => e + i * s;
  }, n.object = (e, t) => {
    const i = Object.keys(e);
    return (s) => {
      const r = {};
      for (let o = i.length - 1; o !== -1; o -= 1) {
        const l = i[o];
        r[l] = e[l] + (t[l] - e[l]) * s;
      }
      return r;
    };
  }, n.unit = (e, t) => {
    const i = /(-?[0-9]*.[0-9]*)(px|em|cm|mm|in|pt|pc|%)/, s = i.exec(e), r = i.exec(t), o = r ? r[1] : "", l = s ? +s[1] : 0, a = r ? +r[1] : 0, c = o.indexOf("."), u = c > 0 ? o[1].length - c - 1 : 0, h = a - l, f = s ? s[2] : "";
    return (d) => (l + h * d).toFixed(u) + f;
  }, n.color = (e, t) => {
    const i = parseInt(e.slice(1), 16), s = parseInt(t.slice(1), 16), r = i & 255, o = (s & 255) - r, l = i & 65280, a = (s & 65280) - l, c = i & 16711680, u = (s & 16711680) - c;
    return (h) => {
      const f = r + o * h & 255, d = l + a * h & 65280, p = c + u * h & 16711680;
      return `#${(1 << 24 | f | d | p).toString(16).slice(1)}`;
    };
  };
})(vl || (vl = {}));
const Du = [];
function Pg(n, e) {
  const t = Du.find((i) => i.name === n);
  if (!(t && (t.loadTimes += 1, t.loadTimes > 1)) && !Do.isApplyingHMR()) {
    const i = document.createElement("style");
    i.setAttribute("type", "text/css"), i.textContent = e;
    const s = document.querySelector("head");
    s && s.insertBefore(i, s.firstChild), Du.push({
      name: n,
      loadTimes: 1,
      styleElement: i
    });
  }
}
function Ag(n) {
  const e = Du.findIndex((t) => t.name === n);
  if (e > -1) {
    const t = Du[e];
    if (t.loadTimes -= 1, t.loadTimes > 0)
      return;
    let i = t.styleElement;
    i && i.parentNode && i.parentNode.removeChild(i), i = null, Du.splice(e, 1);
  }
}
var st;
(function(n) {
  function e(i) {
    return 180 * i / Math.PI % 360;
  }
  n.toDeg = e, n.toRad = function(i, s = !1) {
    return (s ? i : i % 360) * Math.PI / 180;
  };
  function t(i) {
    return i % 360 + (i < 0 ? 360 : 0);
  }
  n.normalize = t;
})(st || (st = {}));
var ct;
(function(n) {
  function e(l, a = 0) {
    return Number.isInteger(l) ? l : +l.toFixed(a);
  }
  n.round = e;
  function t(l, a) {
    let c, u;
    if (a == null ? (u = l ?? 1, c = 0) : (u = a, c = l ?? 0), u < c) {
      const h = c;
      c = u, u = h;
    }
    return Math.floor(Math.random() * (u - c + 1) + c);
  }
  n.random = t;
  function i(l, a, c) {
    return Number.isNaN(l) ? NaN : Number.isNaN(a) || Number.isNaN(c) ? 0 : a < c ? l < a ? a : l > c ? c : l : l < c ? c : l > a ? a : l;
  }
  n.clamp = i;
  function s(l, a) {
    return a * Math.round(l / a);
  }
  n.snapToGrid = s;
  function r(l, a) {
    return a != null && l != null && a.x >= l.x && a.x <= l.x + l.width && a.y >= l.y && a.y <= l.y + l.height;
  }
  n.containsPoint = r;
  function o(l, a) {
    const c = l.x - a.x, u = l.y - a.y;
    return c * c + u * u;
  }
  n.squaredLength = o;
})(ct || (ct = {}));
class Yo {
  valueOf() {
    return this.toJSON();
  }
  toString() {
    return JSON.stringify(this.toJSON());
  }
}
class I extends Yo {
  constructor(e, t) {
    super(), this.x = e ?? 0, this.y = t ?? 0;
  }
  /**
   * Rounds the point to the given precision.
   */
  round(e = 0) {
    return this.x = ct.round(this.x, e), this.y = ct.round(this.y, e), this;
  }
  add(e, t) {
    const i = I.create(e, t);
    return this.x += i.x, this.y += i.y, this;
  }
  update(e, t) {
    const i = I.create(e, t);
    return this.x = i.x, this.y = i.y, this;
  }
  translate(e, t) {
    const i = I.create(e, t);
    return this.x += i.x, this.y += i.y, this;
  }
  /**
   * Rotate the point by `degree` around `center`.
   */
  rotate(e, t) {
    const i = I.rotate(this, e, t);
    return this.x = i.x, this.y = i.y, this;
  }
  /**
   * Scale point by `sx` and `sy` around the given `origin`. If origin is
   * not specified, the point is scaled around `0, 0`.
   */
  scale(e, t, i = new I()) {
    const s = I.create(i);
    return this.x = s.x + e * (this.x - s.x), this.y = s.y + t * (this.y - s.y), this;
  }
  /**
   * Chooses the point closest to this point from among `points`. If `points`
   * is an empty array, `null` is returned.
   */
  closest(e) {
    if (e.length === 1)
      return I.create(e[0]);
    let t = null, i = 1 / 0;
    return e.forEach((s) => {
      const r = this.squaredDistance(s);
      r < i && (t = s, i = r);
    }), t ? I.create(t) : null;
  }
  /**
   * Returns the distance between the point and another point `p`.
   */
  distance(e) {
    return Math.sqrt(this.squaredDistance(e));
  }
  /**
   * Returns the squared distance between the point and another point `p`.
   *
   * Useful for distance comparisons in which real distance is not necessary
   * (saves one `Math.sqrt()` operation).
   */
  squaredDistance(e) {
    const t = I.create(e), i = this.x - t.x, s = this.y - t.y;
    return i * i + s * s;
  }
  manhattanDistance(e) {
    const t = I.create(e);
    return Math.abs(t.x - this.x) + Math.abs(t.y - this.y);
  }
  /**
   * Returns the magnitude of the point vector.
   *
   * @see http://en.wikipedia.org/wiki/Magnitude_(mathematics)
   */
  magnitude() {
    return Math.sqrt(this.x * this.x + this.y * this.y) || 0.01;
  }
  /**
   * Returns the angle(in degrees) between vector from this point to `p` and
   * the x-axis.
   */
  theta(e = new I()) {
    const t = I.create(e), i = -(t.y - this.y), s = t.x - this.x;
    let r = Math.atan2(i, s);
    return r < 0 && (r = 2 * Math.PI + r), 180 * r / Math.PI;
  }
  /**
   * Returns the angle(in degrees) between vector from this point to `p1` and
   * the vector from this point to `p2`.
   *
   * The ordering of points `p1` and `p2` is important.
   *
   * The function returns a value between `0` and `180` when the angle (in the
   * direction from `p1` to `p2`) is clockwise, and a value between `180` and
   * `360` when the angle is counterclockwise.
   *
   * Returns `NaN` if either of the points `p1` and `p2` is equal with this point.
   */
  angleBetween(e, t) {
    if (this.equals(e) || this.equals(t))
      return NaN;
    let i = this.theta(t) - this.theta(e);
    return i < 0 && (i += 360), i;
  }
  /**
   * Returns the angle(in degrees) between the line from `(0,0)` and this point
   * and the line from `(0,0)` to `p`.
   *
   * The function returns a value between `0` and `180` when the angle (in the
   * direction from this point to `p`) is clockwise, and a value between `180`
   * and `360` when the angle is counterclockwise. Returns `NaN` if called from
   * point `(0,0)` or if `p` is `(0,0)`.
   */
  vectorAngle(e) {
    return new I(0, 0).angleBetween(this, e);
  }
  /**
   * Converts rectangular to polar coordinates.
   */
  toPolar(e) {
    return this.update(I.toPolar(this, e)), this;
  }
  /**
   * Returns the change in angle(in degrees) that is the result of moving the
   * point from its previous position to its current position.
   *
   * More specifically, this function computes the angle between the line from
   * the ref point to the previous position of this point(i.e. current position
   * `-dx`, `-dy`) and the line from the `ref` point to the current position of
   * this point.
   *
   * The function returns a positive value between `0` and `180` when the angle
   * (in the direction from previous position of this point to its current
   * position) is clockwise, and a negative value between `0` and `-180` when
   * the angle is counterclockwise.
   *
   * The function returns `0` if the previous and current positions of this
   * point are the same (i.e. both `dx` and `dy` are `0`).
   */
  changeInAngle(e, t, i = new I()) {
    return this.clone().translate(-e, -t).theta(i) - this.theta(i);
  }
  /**
   * If the point lies outside the rectangle `rect`, adjust the point so that
   * it becomes the nearest point on the boundary of `rect`.
   */
  adhereToRect(e) {
    return ct.containsPoint(e, this) || (this.x = Math.min(Math.max(this.x, e.x), e.x + e.width), this.y = Math.min(Math.max(this.y, e.y), e.y + e.height)), this;
  }
  /**
   * Returns the bearing(cardinal direction) between me and the given point.
   *
   * @see https://en.wikipedia.org/wiki/Cardinal_direction
   */
  bearing(e) {
    const t = I.create(e), i = st.toRad(this.y), s = st.toRad(t.y), r = this.x, o = t.x, l = st.toRad(o - r), a = Math.sin(l) * Math.cos(s), c = Math.cos(i) * Math.sin(s) - Math.sin(i) * Math.cos(s) * Math.cos(l), u = st.toDeg(Math.atan2(a, c)), h = ["NE", "E", "SE", "S", "SW", "W", "NW", "N"];
    let f = u - 22.5;
    return f < 0 && (f += 360), f = parseInt(f / 45, 10), h[f];
  }
  /**
   * Returns the cross product of the vector from me to `p1` and the vector
   * from me to `p2`.
   *
   * The left-hand rule is used because the coordinate system is left-handed.
   */
  cross(e, t) {
    if (e != null && t != null) {
      const i = I.create(e), s = I.create(t);
      return (s.x - this.x) * (i.y - this.y) - (s.y - this.y) * (i.x - this.x);
    }
    return NaN;
  }
  /**
   * Returns the dot product of this point with given other point.
   */
  dot(e) {
    const t = I.create(e);
    return this.x * t.x + this.y * t.y;
  }
  diff(e, t) {
    if (typeof e == "number")
      return new I(this.x - e, this.y - t);
    const i = I.create(e);
    return new I(this.x - i.x, this.y - i.y);
  }
  /**
   * Returns an interpolation between me and point `p` for a parametert in
   * the closed interval `[0, 1]`.
   */
  lerp(e, t) {
    const i = I.create(e);
    return new I((1 - t) * this.x + t * i.x, (1 - t) * this.y + t * i.y);
  }
  /**
   * Normalize the point vector, scale the line segment between `(0, 0)`
   * and the point in order for it to have the given length. If length is
   * not specified, it is considered to be `1`; in that case, a unit vector
   * is computed.
   */
  normalize(e = 1) {
    const t = e / this.magnitude();
    return this.scale(t, t);
  }
  /**
   * Moves this point along the line starting from `ref` to this point by a
   * certain `distance`.
   */
  move(e, t) {
    const i = I.create(e), s = st.toRad(i.theta(this));
    return this.translate(Math.cos(s) * t, -Math.sin(s) * t);
  }
  /**
   * Returns a point that is the reflection of me with the center of inversion
   * in `ref` point.
   */
  reflection(e) {
    return I.create(e).move(this, this.distance(e));
  }
  snapToGrid(e, t) {
    return this.x = ct.snapToGrid(this.x, e), this.y = ct.snapToGrid(this.y, t ?? e), this;
  }
  equals(e) {
    const t = I.create(e);
    return t != null && t.x === this.x && t.y === this.y;
  }
  clone() {
    return I.clone(this);
  }
  /**
   * Returns the point as a simple JSON object. For example: `{ x: 0, y: 0 }`.
   */
  toJSON() {
    return I.toJSON(this);
  }
  serialize() {
    return `${this.x} ${this.y}`;
  }
}
(function(n) {
  function e(t) {
    return t != null && t instanceof n;
  }
  n.isPoint = e;
})(I || (I = {}));
(function(n) {
  function e(i) {
    return i != null && typeof i == "object" && typeof i.x == "number" && typeof i.y == "number";
  }
  n.isPointLike = e;
  function t(i) {
    return i != null && Array.isArray(i) && i.length === 2 && typeof i[0] == "number" && typeof i[1] == "number";
  }
  n.isPointData = t;
})(I || (I = {}));
(function(n) {
  function e(h, f) {
    return h == null || typeof h == "number" ? new n(h, f) : t(h);
  }
  n.create = e;
  function t(h) {
    return n.isPoint(h) ? new n(h.x, h.y) : Array.isArray(h) ? new n(h[0], h[1]) : new n(h.x, h.y);
  }
  n.clone = t;
  function i(h) {
    return n.isPoint(h) ? { x: h.x, y: h.y } : Array.isArray(h) ? { x: h[0], y: h[1] } : { x: h.x, y: h.y };
  }
  n.toJSON = i;
  function s(h, f, d = new n()) {
    let p = Math.abs(h * Math.cos(f)), g = Math.abs(h * Math.sin(f));
    const m = t(d), b = st.normalize(st.toDeg(f));
    return b < 90 ? g = -g : b < 180 ? (p = -p, g = -g) : b < 270 && (p = -p), new n(m.x + p, m.y + g);
  }
  n.fromPolar = s;
  function r(h, f = new n()) {
    const d = t(h), p = t(f), g = d.x - p.x, m = d.y - p.y;
    return new n(
      Math.sqrt(g * g + m * m),
      // r
      st.toRad(p.theta(d))
    );
  }
  n.toPolar = r;
  function o(h, f) {
    return h === f ? !0 : h != null && f != null ? h.x === f.x && h.y === f.y : !1;
  }
  n.equals = o;
  function l(h, f) {
    if (h == null && f != null || h != null && f == null || h != null && f != null && h.length !== f.length)
      return !1;
    if (h != null && f != null) {
      for (let d = 0, p = h.length; d < p; d += 1)
        if (!o(h[d], f[d]))
          return !1;
    }
    return !0;
  }
  n.equalPoints = l;
  function a(h, f, d, p) {
    return new n(ct.random(h, f), ct.random(d, p));
  }
  n.random = a;
  function c(h, f, d) {
    const p = st.toRad(st.normalize(-f)), g = Math.sin(p), m = Math.cos(p);
    return u(h, m, g, d);
  }
  n.rotate = c;
  function u(h, f, d, p = new n()) {
    const g = t(h), m = t(p), b = g.x - m.x, y = g.y - m.y, v = b * f - y * d, O = y * f + b * d;
    return new n(v + m.x, O + m.y);
  }
  n.rotateEx = u;
})(I || (I = {}));
class ue extends Yo {
  get left() {
    return this.x;
  }
  get top() {
    return this.y;
  }
  get right() {
    return this.x + this.width;
  }
  get bottom() {
    return this.y + this.height;
  }
  get origin() {
    return new I(this.x, this.y);
  }
  get topLeft() {
    return new I(this.x, this.y);
  }
  get topCenter() {
    return new I(this.x + this.width / 2, this.y);
  }
  get topRight() {
    return new I(this.x + this.width, this.y);
  }
  get center() {
    return new I(this.x + this.width / 2, this.y + this.height / 2);
  }
  get bottomLeft() {
    return new I(this.x, this.y + this.height);
  }
  get bottomCenter() {
    return new I(this.x + this.width / 2, this.y + this.height);
  }
  get bottomRight() {
    return new I(this.x + this.width, this.y + this.height);
  }
  get corner() {
    return new I(this.x + this.width, this.y + this.height);
  }
  get rightMiddle() {
    return new I(this.x + this.width, this.y + this.height / 2);
  }
  get leftMiddle() {
    return new I(this.x, this.y + this.height / 2);
  }
  get topLine() {
    return new me(this.topLeft, this.topRight);
  }
  get rightLine() {
    return new me(this.topRight, this.bottomRight);
  }
  get bottomLine() {
    return new me(this.bottomLeft, this.bottomRight);
  }
  get leftLine() {
    return new me(this.topLeft, this.bottomLeft);
  }
  constructor(e, t, i, s) {
    super(), this.x = e ?? 0, this.y = t ?? 0, this.width = i ?? 0, this.height = s ?? 0;
  }
  getOrigin() {
    return this.origin;
  }
  getTopLeft() {
    return this.topLeft;
  }
  getTopCenter() {
    return this.topCenter;
  }
  getTopRight() {
    return this.topRight;
  }
  getCenter() {
    return this.center;
  }
  getCenterX() {
    return this.x + this.width / 2;
  }
  getCenterY() {
    return this.y + this.height / 2;
  }
  getBottomLeft() {
    return this.bottomLeft;
  }
  getBottomCenter() {
    return this.bottomCenter;
  }
  getBottomRight() {
    return this.bottomRight;
  }
  getCorner() {
    return this.corner;
  }
  getRightMiddle() {
    return this.rightMiddle;
  }
  getLeftMiddle() {
    return this.leftMiddle;
  }
  getTopLine() {
    return this.topLine;
  }
  getRightLine() {
    return this.rightLine;
  }
  getBottomLine() {
    return this.bottomLine;
  }
  getLeftLine() {
    return this.leftLine;
  }
  /**
   * Returns a rectangle that is the bounding box of the rectangle.
   *
   * If `angle` is specified, the bounding box calculation will take into
   * account the rotation of the rectangle by angle degrees around its center.
   */
  bbox(e) {
    if (!e)
      return this.clone();
    const t = st.toRad(e), i = Math.abs(Math.sin(t)), s = Math.abs(Math.cos(t)), r = this.width * s + this.height * i, o = this.width * i + this.height * s;
    return new ue(this.x + (this.width - r) / 2, this.y + (this.height - o) / 2, r, o);
  }
  round(e = 0) {
    return this.x = ct.round(this.x, e), this.y = ct.round(this.y, e), this.width = ct.round(this.width, e), this.height = ct.round(this.height, e), this;
  }
  add(e, t, i, s) {
    const r = ue.create(e, t, i, s), o = Math.min(this.x, r.x), l = Math.min(this.y, r.y), a = Math.max(this.x + this.width, r.x + r.width), c = Math.max(this.y + this.height, r.y + r.height);
    return this.x = o, this.y = l, this.width = a - o, this.height = c - l, this;
  }
  update(e, t, i, s) {
    const r = ue.create(e, t, i, s);
    return this.x = r.x, this.y = r.y, this.width = r.width, this.height = r.height, this;
  }
  inflate(e, t) {
    const i = e, s = t ?? e;
    return this.x -= i, this.y -= s, this.width += 2 * i, this.height += 2 * s, this;
  }
  snapToGrid(e, t) {
    const i = this.origin.snapToGrid(e, t), s = this.corner.snapToGrid(e, t);
    return this.x = i.x, this.y = i.y, this.width = s.x - i.x, this.height = s.y - i.y, this;
  }
  translate(e, t) {
    const i = I.create(e, t);
    return this.x += i.x, this.y += i.y, this;
  }
  scale(e, t, i = new I()) {
    const s = this.origin.scale(e, t, i);
    return this.x = s.x, this.y = s.y, this.width *= e, this.height *= t, this;
  }
  rotate(e, t = this.getCenter()) {
    if (e !== 0) {
      const i = st.toRad(e), s = Math.cos(i), r = Math.sin(i);
      let o = this.getOrigin(), l = this.getTopRight(), a = this.getBottomRight(), c = this.getBottomLeft();
      o = I.rotateEx(o, s, r, t), l = I.rotateEx(l, s, r, t), a = I.rotateEx(a, s, r, t), c = I.rotateEx(c, s, r, t);
      const u = new ue(o.x, o.y, 0, 0);
      u.add(l.x, l.y, 0, 0), u.add(a.x, a.y, 0, 0), u.add(c.x, c.y, 0, 0), this.update(u);
    }
    return this;
  }
  rotate90() {
    const e = (this.width - this.height) / 2;
    this.x += e, this.y -= e;
    const t = this.width;
    return this.width = this.height, this.height = t, this;
  }
  /**
   * Translates the rectangle by `rect.x` and `rect.y` and expand it by
   * `rect.width` and `rect.height`.
   */
  moveAndExpand(e) {
    const t = ue.clone(e);
    return this.x += t.x || 0, this.y += t.y || 0, this.width += t.width || 0, this.height += t.height || 0, this;
  }
  /**
   * Returns an object where `sx` and `sy` give the maximum scaling that can be
   * applied to the rectangle so that it would still fit into `limit`. If
   * `origin` is specified, the rectangle is scaled around it; otherwise, it is
   * scaled around its center.
   */
  getMaxScaleToFit(e, t = this.center) {
    const i = ue.clone(e), s = t.x, r = t.y;
    let o = 1 / 0, l = 1 / 0, a = 1 / 0, c = 1 / 0, u = 1 / 0, h = 1 / 0, f = 1 / 0, d = 1 / 0;
    const p = i.topLeft;
    p.x < s && (o = (this.x - s) / (p.x - s)), p.y < r && (u = (this.y - r) / (p.y - r));
    const g = i.bottomRight;
    g.x > s && (l = (this.x + this.width - s) / (g.x - s)), g.y > r && (h = (this.y + this.height - r) / (g.y - r));
    const m = i.topRight;
    m.x > s && (a = (this.x + this.width - s) / (m.x - s)), m.y < r && (f = (this.y - r) / (m.y - r));
    const b = i.bottomLeft;
    return b.x < s && (c = (this.x - s) / (b.x - s)), b.y > r && (d = (this.y + this.height - r) / (b.y - r)), {
      sx: Math.min(o, l, a, c),
      sy: Math.min(u, h, f, d)
    };
  }
  /**
   * Returns a number that specifies the maximum scaling that can be applied to
   * the rectangle along both axes so that it would still fit into `limit`. If
   * `origin` is specified, the rectangle is scaled around it; otherwise, it is
   * scaled around its center.
   */
  getMaxUniformScaleToFit(e, t = this.center) {
    const i = this.getMaxScaleToFit(e, t);
    return Math.min(i.sx, i.sy);
  }
  containsPoint(e, t) {
    return ct.containsPoint(this, I.create(e, t));
  }
  containsRect(e, t, i, s) {
    const r = ue.create(e, t, i, s), o = this.x, l = this.y, a = this.width, c = this.height, u = r.x, h = r.y, f = r.width, d = r.height;
    return a === 0 || c === 0 || f === 0 || d === 0 ? !1 : u >= o && h >= l && u + f <= o + a && h + d <= l + c;
  }
  /**
   * Returns an array of the intersection points of the rectangle and the line.
   * Return `null` if no intersection exists.
   */
  intersectsWithLine(e) {
    const t = [
      this.topLine,
      this.rightLine,
      this.bottomLine,
      this.leftLine
    ], i = [], s = [];
    return t.forEach((r) => {
      const o = e.intersectsWithLine(r);
      o !== null && s.indexOf(o.toString()) < 0 && (i.push(o), s.push(o.toString()));
    }), i.length > 0 ? i : null;
  }
  /**
   * Returns the point on the boundary of the rectangle that is the intersection
   * of the rectangle with a line starting in the center the rectangle ending in
   * the point `p`.
   *
   * If `angle` is specified, the intersection will take into account the
   * rotation of the rectangle by `angle` degrees around its center.
   */
  intersectsWithLineFromCenterToPoint(e, t) {
    const i = I.clone(e), s = this.center;
    let r = null;
    t != null && t !== 0 && i.rotate(t, s);
    const o = [this.topLine, this.rightLine, this.bottomLine, this.leftLine], l = new me(s, i);
    for (let a = o.length - 1; a >= 0; a -= 1) {
      const c = o[a].intersectsWithLine(l);
      if (c !== null) {
        r = c;
        break;
      }
    }
    return r && t != null && t !== 0 && r.rotate(-t, s), r;
  }
  intersectsWithRect(e, t, i, s) {
    const r = ue.create(e, t, i, s);
    if (!this.isIntersectWithRect(r))
      return null;
    const o = this.origin, l = this.corner, a = r.origin, c = r.corner, u = Math.max(o.x, a.x), h = Math.max(o.y, a.y);
    return new ue(u, h, Math.min(l.x, c.x) - u, Math.min(l.y, c.y) - h);
  }
  isIntersectWithRect(e, t, i, s) {
    const r = ue.create(e, t, i, s), o = this.origin, l = this.corner, a = r.origin, c = r.corner;
    return !(c.x <= o.x || c.y <= o.y || a.x >= l.x || a.y >= l.y);
  }
  /**
   * Normalize the rectangle, i.e. make it so that it has non-negative
   * width and height. If width is less than `0`, the function swaps left and
   * right corners and if height is less than `0`, the top and bottom corners
   * are swapped.
   */
  normalize() {
    let e = this.x, t = this.y, i = this.width, s = this.height;
    return this.width < 0 && (e = this.x + this.width, i = -this.width), this.height < 0 && (t = this.y + this.height, s = -this.height), this.x = e, this.y = t, this.width = i, this.height = s, this;
  }
  /**
   * Returns a rectangle that is a union of this rectangle and rectangle `rect`.
   */
  union(e) {
    const t = ue.clone(e), i = this.origin, s = this.corner, r = t.origin, o = t.corner, l = Math.min(i.x, r.x), a = Math.min(i.y, r.y), c = Math.max(s.x, o.x), u = Math.max(s.y, o.y);
    return new ue(l, a, c - l, u - a);
  }
  /**
   * Returns a string ("top", "left", "right" or "bottom") denoting the side of
   * the rectangle which is nearest to the point `p`.
   */
  getNearestSideToPoint(e) {
    const t = I.clone(e), i = t.x - this.x, s = this.x + this.width - t.x, r = t.y - this.y, o = this.y + this.height - t.y;
    let l = i, a = "left";
    return s < l && (l = s, a = "right"), r < l && (l = r, a = "top"), o < l && (a = "bottom"), a;
  }
  /**
   * Returns a point on the boundary of the rectangle nearest to the point `p`.
   */
  getNearestPointToPoint(e) {
    const t = I.clone(e);
    if (this.containsPoint(t)) {
      const i = this.getNearestSideToPoint(t);
      if (i === "left")
        return new I(this.x, t.y);
      if (i === "top")
        return new I(t.x, this.y);
      if (i === "right")
        return new I(this.x + this.width, t.y);
      if (i === "bottom")
        return new I(t.x, this.y + this.height);
    }
    return t.adhereToRect(this);
  }
  equals(e) {
    return e != null && e.x === this.x && e.y === this.y && e.width === this.width && e.height === this.height;
  }
  clone() {
    return new ue(this.x, this.y, this.width, this.height);
  }
  toJSON() {
    return { x: this.x, y: this.y, width: this.width, height: this.height };
  }
  serialize() {
    return `${this.x} ${this.y} ${this.width} ${this.height}`;
  }
}
(function(n) {
  function e(t) {
    return t != null && t instanceof n;
  }
  n.isRectangle = e;
})(ue || (ue = {}));
(function(n) {
  function e(t) {
    return t != null && typeof t == "object" && typeof t.x == "number" && typeof t.y == "number" && typeof t.width == "number" && typeof t.height == "number";
  }
  n.isRectangleLike = e;
})(ue || (ue = {}));
(function(n) {
  function e(o, l, a, c) {
    return o == null || typeof o == "number" ? new n(o, l, a, c) : t(o);
  }
  n.create = e;
  function t(o) {
    return n.isRectangle(o) ? o.clone() : Array.isArray(o) ? new n(o[0], o[1], o[2], o[3]) : new n(o.x, o.y, o.width, o.height);
  }
  n.clone = t;
  function i(o) {
    return new n(o.x - o.a, o.y - o.b, 2 * o.a, 2 * o.b);
  }
  n.fromEllipse = i;
  function s(o) {
    return new n(0, 0, o.width, o.height);
  }
  n.fromSize = s;
  function r(o, l) {
    return new n(o.x, o.y, l.width, l.height);
  }
  n.fromPositionAndSize = r;
})(ue || (ue = {}));
class me extends Yo {
  get center() {
    return new I((this.start.x + this.end.x) / 2, (this.start.y + this.end.y) / 2);
  }
  constructor(e, t, i, s) {
    super(), typeof e == "number" && typeof t == "number" ? (this.start = new I(e, t), this.end = new I(i, s)) : (this.start = I.create(e), this.end = I.create(t));
  }
  getCenter() {
    return this.center;
  }
  /**
   * Rounds the line to the given `precision`.
   */
  round(e = 0) {
    return this.start.round(e), this.end.round(e), this;
  }
  translate(e, t) {
    return typeof e == "number" ? (this.start.translate(e, t), this.end.translate(e, t)) : (this.start.translate(e), this.end.translate(e)), this;
  }
  /**
   * Rotate the line by `angle` around `origin`.
   */
  rotate(e, t) {
    return this.start.rotate(e, t), this.end.rotate(e, t), this;
  }
  /**
   * Scale the line by `sx` and `sy` about the given `origin`. If origin is not
   * specified, the line is scaled around `0,0`.
   */
  scale(e, t, i) {
    return this.start.scale(e, t, i), this.end.scale(e, t, i), this;
  }
  /**
   * Returns the length of the line.
   */
  length() {
    return Math.sqrt(this.squaredLength());
  }
  /**
   * Useful for distance comparisons in which real length is not necessary
   * (saves one `Math.sqrt()` operation).
   */
  squaredLength() {
    const e = this.start.x - this.end.x, t = this.start.y - this.end.y;
    return e * e + t * t;
  }
  /**
   * Scale the line so that it has the requested length. The start point of
   * the line is preserved.
   */
  setLength(e) {
    const t = this.length();
    if (!t)
      return this;
    const i = e / t;
    return this.scale(i, i, this.start);
  }
  parallel(e) {
    const t = this.clone();
    if (!t.isDifferentiable())
      return t;
    const { start: i, end: s } = t, r = i.clone().rotate(270, s), o = s.clone().rotate(90, i);
    return i.move(o, e), s.move(r, e), t;
  }
  /**
   * Returns the vector of the line with length equal to length of the line.
   */
  vector() {
    return new I(this.end.x - this.start.x, this.end.y - this.start.y);
  }
  /**
   * Returns the angle of incline of the line.
   *
   * The function returns `NaN` if the start and end endpoints of the line
   * both lie at the same coordinates(it is impossible to determine the angle
   * of incline of a line that appears to be a point). The
   * `line.isDifferentiable()` function may be used in advance to determine
   * whether the angle of incline can be computed for a given line.
   */
  angle() {
    const e = new I(this.start.x + 1, this.start.y);
    return this.start.angleBetween(this.end, e);
  }
  /**
   * Returns a rectangle that is the bounding box of the line.
   */
  bbox() {
    const e = Math.min(this.start.x, this.end.x), t = Math.min(this.start.y, this.end.y), i = Math.max(this.start.x, this.end.x), s = Math.max(this.start.y, this.end.y);
    return new ue(e, t, i - e, s - t);
  }
  /**
   * Returns the bearing (cardinal direction) of the line.
   *
   * The return value is one of the following strings:
   * 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW' and 'N'.
   *
   * The function returns 'N' if the two endpoints of the line are coincident.
   */
  bearing() {
    return this.start.bearing(this.end);
  }
  /**
   * Returns the point on the line that lies closest to point `p`.
   */
  closestPoint(e) {
    return this.pointAt(this.closestPointNormalizedLength(e));
  }
  /**
   * Returns the length of the line up to the point that lies closest to point `p`.
   */
  closestPointLength(e) {
    return this.closestPointNormalizedLength(e) * this.length();
  }
  /**
   * Returns a line that is tangent to the line at the point that lies closest
   * to point `p`.
   */
  closestPointTangent(e) {
    return this.tangentAt(this.closestPointNormalizedLength(e));
  }
  /**
   * Returns the normalized length (distance from the start of the line / total
   * line length) of the line up to the point that lies closest to point.
   */
  closestPointNormalizedLength(e) {
    const t = this.vector().dot(new me(this.start, e).vector()), i = Math.min(1, Math.max(0, t / this.squaredLength()));
    return Number.isNaN(i) ? 0 : i;
  }
  /**
   * Returns a point on the line that lies `rate` (normalized length) away from
   * the beginning of the line.
   */
  pointAt(e) {
    const t = this.start, i = this.end;
    return e <= 0 ? t.clone() : e >= 1 ? i.clone() : t.lerp(i, e);
  }
  /**
   * Returns a point on the line that lies length away from the beginning of
   * the line.
   */
  pointAtLength(e) {
    const t = this.start, i = this.end;
    let s = !0;
    e < 0 && (s = !1, e = -e);
    const r = this.length();
    if (e >= r)
      return s ? i.clone() : t.clone();
    const o = (s ? e : r - e) / r;
    return this.pointAt(o);
  }
  /**
   * Divides the line into two lines at the point that lies `rate` (normalized
   * length) away from the beginning of the line.
   */
  divideAt(e) {
    const t = this.pointAt(e);
    return [
      new me(this.start, t),
      new me(t, this.end)
    ];
  }
  /**
   * Divides the line into two lines at the point that lies length away from
   * the beginning of the line.
   */
  divideAtLength(e) {
    const t = this.pointAtLength(e);
    return [
      new me(this.start, t),
      new me(t, this.end)
    ];
  }
  /**
   * Returns `true` if the point `p` lies on the line. Return `false` otherwise.
   */
  containsPoint(e) {
    const t = this.start, i = this.end;
    if (t.cross(e, i) !== 0)
      return !1;
    const s = this.length();
    return !(new me(t, e).length() > s || new me(e, i).length() > s);
  }
  intersect(e, t) {
    const i = e.intersectsWithLine(this, t);
    return i ? Array.isArray(i) ? i : [i] : null;
  }
  /**
   * Returns the intersection point of the line with another line. Returns
   * `null` if no intersection exists.
   */
  intersectsWithLine(e) {
    const t = new I(this.end.x - this.start.x, this.end.y - this.start.y), i = new I(e.end.x - e.start.x, e.end.y - e.start.y), s = t.x * i.y - t.y * i.x, r = new I(e.start.x - this.start.x, e.start.y - this.start.y), o = r.x * i.y - r.y * i.x, l = r.x * t.y - r.y * t.x;
    if (s === 0 || o * s < 0 || l * s < 0)
      return null;
    if (s > 0) {
      if (o > s || l > s)
        return null;
    } else if (o < s || l < s)
      return null;
    return new I(this.start.x + o * t.x / s, this.start.y + o * t.y / s);
  }
  /**
   * Returns `true` if a tangent line can be found for the line.
   *
   * Tangents cannot be found if both of the line endpoints are coincident
   * (the line appears to be a point).
   */
  isDifferentiable() {
    return !this.start.equals(this.end);
  }
  /**
   * Returns the perpendicular distance between the line and point. The
   * distance is positive if the point lies to the right of the line, negative
   * if the point lies to the left of the line, and `0` if the point lies on
   * the line.
   */
  pointOffset(e) {
    const t = I.clone(e), i = this.start, s = this.end;
    return ((s.x - i.x) * (t.y - i.y) - (s.y - i.y) * (t.x - i.x)) / this.length();
  }
  pointSquaredDistance(e, t) {
    const i = I.create(e, t);
    return this.closestPoint(i).squaredDistance(i);
  }
  pointDistance(e, t) {
    const i = I.create(e, t);
    return this.closestPoint(i).distance(i);
  }
  /**
   * Returns a line tangent to the line at point that lies `rate` (normalized
   * length) away from the beginning of the line.
   */
  tangentAt(e) {
    if (!this.isDifferentiable())
      return null;
    const t = this.start, i = this.end, s = this.pointAt(e), r = new me(t, i);
    return r.translate(s.x - t.x, s.y - t.y), r;
  }
  /**
   * Returns a line tangent to the line at point that lies `length` away from
   * the beginning of the line.
   */
  tangentAtLength(e) {
    if (!this.isDifferentiable())
      return null;
    const t = this.start, i = this.end, s = this.pointAtLength(e), r = new me(t, i);
    return r.translate(s.x - t.x, s.y - t.y), r;
  }
  relativeCcw(e, t) {
    const i = I.create(e, t);
    let s = i.x - this.start.x, r = i.y - this.start.y;
    const o = this.end.x - this.start.x, l = this.end.y - this.start.y;
    let a = s * l - r * o;
    return a === 0 && (a = s * o + r * l, a > 0 && (s -= o, r -= l, a = s * o + r * l, a < 0 && (a = 0))), a < 0 ? -1 : a > 0 ? 1 : 0;
  }
  /**
   * Return `true` if the line equals the other line.
   */
  equals(e) {
    return e != null && this.start.x === e.start.x && this.start.y === e.start.y && this.end.x === e.end.x && this.end.y === e.end.y;
  }
  /**
   * Returns another line which is a clone of the line.
   */
  clone() {
    return new me(this.start, this.end);
  }
  toJSON() {
    return { start: this.start.toJSON(), end: this.end.toJSON() };
  }
  serialize() {
    return [this.start.serialize(), this.end.serialize()].join(" ");
  }
}
(function(n) {
  function e(t) {
    return t != null && t instanceof n;
  }
  n.isLine = e;
})(me || (me = {}));
class _s extends Yo {
  get center() {
    return new I(this.x, this.y);
  }
  constructor(e, t, i, s) {
    super(), this.x = e ?? 0, this.y = t ?? 0, this.a = i ?? 0, this.b = s ?? 0;
  }
  /**
   * Returns a rectangle that is the bounding box of the ellipse.
   */
  bbox() {
    return ue.fromEllipse(this);
  }
  /**
   * Returns a point that is the center of the ellipse.
   */
  getCenter() {
    return this.center;
  }
  inflate(e, t) {
    const i = e, s = t ?? e;
    return this.a += 2 * i, this.b += 2 * s, this;
  }
  normalizedDistance(e, t) {
    const i = I.create(e, t), s = i.x - this.x, r = i.y - this.y, o = this.a, l = this.b;
    return s * s / (o * o) + r * r / (l * l);
  }
  containsPoint(e, t) {
    return this.normalizedDistance(e, t) <= 1;
  }
  /**
   * Returns an array of the intersection points of the ellipse and the line.
   * Returns `null` if no intersection exists.
   */
  intersectsWithLine(e) {
    const t = [], i = this.a, s = this.b, r = e.start, o = e.end, l = e.vector(), a = r.diff(new I(this.x, this.y)), c = new I(l.x / (i * i), l.y / (s * s)), u = new I(a.x / (i * i), a.y / (s * s)), h = l.dot(c), f = l.dot(u), d = a.dot(u) - 1, p = f * f - h * d;
    if (p < 0)
      return null;
    if (p > 0) {
      const g = Math.sqrt(p), m = (-f - g) / h, b = (-f + g) / h;
      if ((m < 0 || m > 1) && (b < 0 || b > 1))
        return null;
      m >= 0 && m <= 1 && t.push(r.lerp(o, m)), b >= 0 && b <= 1 && t.push(r.lerp(o, b));
    } else {
      const g = -f / h;
      if (g >= 0 && g <= 1)
        t.push(r.lerp(o, g));
      else
        return null;
    }
    return t;
  }
  /**
   * Returns the point on the boundary of the ellipse that is the
   * intersection of the ellipse with a line starting in the center
   * of the ellipse ending in the point `p`.
   *
   * If angle is specified, the intersection will take into account
   * the rotation of the ellipse by angle degrees around its center.
   */
  intersectsWithLineFromCenterToPoint(e, t = 0) {
    const i = I.clone(e);
    t && i.rotate(t, this.getCenter());
    const s = i.x - this.x, r = i.y - this.y;
    let o;
    if (s === 0)
      return o = this.bbox().getNearestPointToPoint(i), t ? o.rotate(-t, this.getCenter()) : o;
    const l = r / s, a = l * l, c = this.a * this.a, u = this.b * this.b;
    let h = Math.sqrt(1 / (1 / c + a / u));
    h = s < 0 ? -h : h;
    const f = l * h;
    return o = new I(this.x + h, this.y + f), t ? o.rotate(-t, this.getCenter()) : o;
  }
  /**
   * Returns the angle between the x-axis and the tangent from a point. It is
   * valid for points lying on the ellipse boundary only.
   */
  tangentTheta(e) {
    const t = I.clone(e), i = t.x, s = t.y, r = this.a, o = this.b, l = this.bbox().center, a = l.x, c = l.y, u = 30, h = i > l.x + r / 2, f = i < l.x - r / 2;
    let d, p;
    return h || f ? (p = i > l.x ? s - u : s + u, d = r * r / (i - a) - r * r * (s - c) * (p - c) / (o * o * (i - a)) + a) : (d = s > l.y ? i + u : i - u, p = o * o / (s - c) - o * o * (i - a) * (d - a) / (r * r * (s - c)) + c), new I(d, p).theta(t);
  }
  scale(e, t) {
    return this.a *= e, this.b *= t, this;
  }
  rotate(e, t) {
    const i = ue.fromEllipse(this);
    i.rotate(e, t);
    const s = _s.fromRect(i);
    return this.a = s.a, this.b = s.b, this.x = s.x, this.y = s.y, this;
  }
  translate(e, t) {
    const i = I.create(e, t);
    return this.x += i.x, this.y += i.y, this;
  }
  equals(e) {
    return e != null && e.x === this.x && e.y === this.y && e.a === this.a && e.b === this.b;
  }
  clone() {
    return new _s(this.x, this.y, this.a, this.b);
  }
  toJSON() {
    return { x: this.x, y: this.y, a: this.a, b: this.b };
  }
  serialize() {
    return `${this.x} ${this.y} ${this.a} ${this.b}`;
  }
}
(function(n) {
  function e(t) {
    return t != null && t instanceof n;
  }
  n.isEllipse = e;
})(_s || (_s = {}));
(function(n) {
  function e(s, r, o, l) {
    return s == null || typeof s == "number" ? new n(s, r, o, l) : t(s);
  }
  n.create = e;
  function t(s) {
    return n.isEllipse(s) ? s.clone() : Array.isArray(s) ? new n(s[0], s[1], s[2], s[3]) : new n(s.x, s.y, s.a, s.b);
  }
  n.parse = t;
  function i(s) {
    const r = s.center;
    return new n(r.x, r.y, s.width / 2, s.height / 2);
  }
  n.fromRect = i;
})(_s || (_s = {}));
const zBe = new RegExp("^[\\s\\dLMCZz,.]*$");
function ZBe(n) {
  return typeof n != "string" ? !1 : zBe.test(n);
}
function Hm(n, e) {
  return (n % e + e) % e;
}
function FBe(n, e, t, i, s) {
  const r = [], o = n[n.length - 1], l = e != null && e > 0, a = e || 0;
  if (i && l) {
    n = n.slice();
    const h = n[0], f = new I(o.x + (h.x - o.x) / 2, o.y + (h.y - o.y) / 2);
    n.splice(0, 0, f);
  }
  let c = n[0], u = 1;
  for (t ? r.push("M", c.x, c.y) : r.push("L", c.x, c.y); u < (i ? n.length : n.length - 1); ) {
    let h = n[Hm(u, n.length)], f = c.x - h.x, d = c.y - h.y;
    if (l && (f !== 0 || d !== 0) && (s == null || s.indexOf(u - 1) < 0)) {
      let p = Math.sqrt(f * f + d * d);
      const g = f * Math.min(a, p / 2) / p, m = d * Math.min(a, p / 2) / p, b = h.x + g, y = h.y + m;
      r.push("L", b, y);
      let v = n[Hm(u + 1, n.length)];
      for (; u < n.length - 2 && Math.round(v.x - h.x) === 0 && Math.round(v.y - h.y) === 0; )
        v = n[Hm(u + 2, n.length)], u += 1;
      f = v.x - h.x, d = v.y - h.y, p = Math.max(1, Math.sqrt(f * f + d * d));
      const O = f * Math.min(a, p / 2) / p, x = d * Math.min(a, p / 2) / p, S = h.x + O, C = h.y + x;
      r.push("Q", h.x, h.y, S, C), h = new I(S, C);
    } else
      r.push("L", h.x, h.y);
    c = h, u += 1;
  }
  return i ? r.push("Z") : r.push("L", o.x, o.y), r.map((h) => typeof h == "string" ? h : +h.toFixed(3)).join(" ");
}
function F_(n, e = {}) {
  const t = [];
  return n && n.length && n.forEach((i) => {
    Array.isArray(i) ? t.push({ x: i[0], y: i[1] }) : t.push({ x: i.x, y: i.y });
  }), FBe(t, e.round, e.initialMove == null || e.initialMove, e.close, e.exclude);
}
function yp(n, e, t, i, s = 0, r = 0, o = 0, l, a) {
  if (t === 0 || i === 0)
    return [];
  l -= n, a -= e, t = Math.abs(t), i = Math.abs(i);
  const c = -l / 2, u = -a / 2, h = Math.cos(s * Math.PI / 180), f = Math.sin(s * Math.PI / 180), d = h * c + f * u, p = -1 * f * c + h * u, g = d * d, m = p * p, b = t * t, y = i * i, v = g / b + m / y;
  let O;
  if (v > 1)
    t = Math.sqrt(v) * t, i = Math.sqrt(v) * i, O = 0;
  else {
    let K = 1;
    r === o && (K = -1), O = K * Math.sqrt((b * y - b * m - y * g) / (b * m + y * g));
  }
  const x = O * t * p / i, S = -1 * O * i * d / t, C = h * x - f * S + l / 2, k = f * x + h * S + a / 2;
  let E = Math.atan2((p - S) / i, (d - x) / t) - Math.atan2(0, 1), $ = E >= 0 ? E : 2 * Math.PI + E;
  E = Math.atan2((-p - S) / i, (-d - x) / t) - Math.atan2((p - S) / i, (d - x) / t);
  let T = E >= 0 ? E : 2 * Math.PI + E;
  o === 0 && T > 0 ? T -= 2 * Math.PI : o !== 0 && T < 0 && (T += 2 * Math.PI);
  const M = T * 2 / Math.PI, j = Math.ceil(M < 0 ? -1 * M : M), D = T / j, P = 8 / 3 * Math.sin(D / 4) * Math.sin(D / 4) / Math.sin(D / 2), A = h * t, Q = h * i, X = f * t, z = f * i;
  let q = Math.cos($), re = Math.sin($), H = -P * (A * re + z * q), G = -P * (X * re - Q * q), U = 0, le = 0;
  const ce = [];
  for (let K = 0; K < j; K += 1) {
    $ += D, q = Math.cos($), re = Math.sin($), U = A * q - z * re + C, le = X * q + Q * re + k;
    const he = -P * (A * re + z * q), Ne = -P * (X * re - Q * q), ae = K * 6;
    ce[ae] = Number(H + n), ce[ae + 1] = Number(G + e), ce[ae + 2] = Number(U - he + n), ce[ae + 3] = Number(le - Ne + e), ce[ae + 4] = Number(U + n), ce[ae + 5] = Number(le + e), H = U + he, G = le + Ne;
  }
  return ce.map((K) => +K.toFixed(2));
}
function VBe(n, e, t, i, s = 0, r = 0, o = 0, l, a) {
  const c = [], u = yp(n, e, t, i, s, r, o, l, a);
  if (u != null)
    for (let h = 0, f = u.length; h < f; h += 6)
      c.push("C", u[h], u[h + 1], u[h + 2], u[h + 3], u[h + 4], u[h + 5]);
  return c.join(" ");
}
class Yt extends Yo {
  get start() {
    return this.points[0] || null;
  }
  get end() {
    return this.points[this.points.length - 1] || null;
  }
  constructor(e) {
    if (super(), e != null) {
      if (typeof e == "string")
        return Yt.parse(e);
      this.points = e.map((t) => I.create(t));
    } else
      this.points = [];
  }
  scale(e, t, i = new I()) {
    return this.points.forEach((s) => s.scale(e, t, i)), this;
  }
  rotate(e, t) {
    return this.points.forEach((i) => i.rotate(e, t)), this;
  }
  translate(e, t) {
    const i = I.create(e, t);
    return this.points.forEach((s) => s.translate(i.x, i.y)), this;
  }
  round(e = 0) {
    return this.points.forEach((t) => t.round(e)), this;
  }
  bbox() {
    if (this.points.length === 0)
      return new ue();
    let e = 1 / 0, t = -1 / 0, i = 1 / 0, s = -1 / 0;
    const r = this.points;
    for (let o = 0, l = r.length; o < l; o += 1) {
      const a = r[o], c = a.x, u = a.y;
      c < e && (e = c), c > t && (t = c), u < i && (i = u), u > s && (s = u);
    }
    return new ue(e, i, t - e, s - i);
  }
  closestPoint(e) {
    const t = this.closestPointLength(e);
    return this.pointAtLength(t);
  }
  closestPointLength(e) {
    const t = this.points, i = t.length;
    if (i === 0 || i === 1)
      return 0;
    let s = 0, r = 0, o = 1 / 0;
    for (let l = 0, a = i - 1; l < a; l += 1) {
      const c = new me(t[l], t[l + 1]), u = c.length(), h = c.closestPointNormalizedLength(e), d = c.pointAt(h).squaredDistance(e);
      d < o && (o = d, r = s + h * u), s += u;
    }
    return r;
  }
  closestPointNormalizedLength(e) {
    const t = this.length();
    return t === 0 ? 0 : this.closestPointLength(e) / t;
  }
  closestPointTangent(e) {
    const t = this.closestPointLength(e);
    return this.tangentAtLength(t);
  }
  containsPoint(e) {
    if (this.points.length === 0)
      return !1;
    const t = I.clone(e), i = t.x, s = t.y, r = this.points, o = r.length;
    let l = o - 1, a = 0;
    for (let c = 0; c < o; c += 1) {
      const u = r[l], h = r[c];
      if (t.equals(u))
        return !0;
      const f = new me(u, h);
      if (f.containsPoint(e))
        return !0;
      if (s <= u.y && s > h.y || s > u.y && s <= h.y) {
        const d = u.x - i > h.x - i ? u.x - i : h.x - i;
        if (d >= 0) {
          const p = new I(i + d, s), g = new me(e, p);
          f.intersectsWithLine(g) && (a += 1);
        }
      }
      l = c;
    }
    return a % 2 === 1;
  }
  intersectsWithLine(e) {
    const t = [];
    for (let i = 0, s = this.points.length - 1; i < s; i += 1) {
      const r = this.points[i], o = this.points[i + 1], l = e.intersectsWithLine(new me(r, o));
      l && t.push(l);
    }
    return t.length > 0 ? t : null;
  }
  isDifferentiable() {
    for (let e = 0, t = this.points.length - 1; e < t; e += 1) {
      const i = this.points[e], s = this.points[e + 1];
      if (new me(i, s).isDifferentiable())
        return !0;
    }
    return !1;
  }
  length() {
    let e = 0;
    for (let t = 0, i = this.points.length - 1; t < i; t += 1) {
      const s = this.points[t], r = this.points[t + 1];
      e += s.distance(r);
    }
    return e;
  }
  pointAt(e) {
    const t = this.points, i = t.length;
    if (i === 0)
      return null;
    if (i === 1 || e <= 0)
      return t[0].clone();
    if (e >= 1)
      return t[i - 1].clone();
    const r = this.length() * e;
    return this.pointAtLength(r);
  }
  pointAtLength(e) {
    const t = this.points, i = t.length;
    if (i === 0)
      return null;
    if (i === 1)
      return t[0].clone();
    let s = !0;
    e < 0 && (s = !1, e = -e);
    let r = 0;
    for (let l = 0, a = i - 1; l < a; l += 1) {
      const c = s ? l : a - 1 - l, u = t[c], h = t[c + 1], f = new me(u, h), d = u.distance(h);
      if (e <= r + d)
        return f.pointAtLength((s ? 1 : -1) * (e - r));
      r += d;
    }
    return (s ? t[i - 1] : t[0]).clone();
  }
  tangentAt(e) {
    const i = this.points.length;
    if (i === 0 || i === 1)
      return null;
    e < 0 && (e = 0), e > 1 && (e = 1);
    const r = this.length() * e;
    return this.tangentAtLength(r);
  }
  tangentAtLength(e) {
    const t = this.points, i = t.length;
    if (i === 0 || i === 1)
      return null;
    let s = !0;
    e < 0 && (s = !1, e = -e);
    let r, o = 0;
    for (let l = 0, a = i - 1; l < a; l += 1) {
      const c = s ? l : a - 1 - l, u = t[c], h = t[c + 1], f = new me(u, h), d = u.distance(h);
      if (f.isDifferentiable()) {
        if (e <= o + d)
          return f.tangentAtLength((s ? 1 : -1) * (e - o));
        r = f;
      }
      o += d;
    }
    if (r) {
      const l = s ? 1 : 0;
      return r.tangentAt(l);
    }
    return null;
  }
  simplify(e = {}) {
    const t = this.points;
    if (t.length < 3)
      return this;
    const i = e.threshold || 0;
    let s = 0;
    for (; t[s + 2]; ) {
      const r = s, o = s + 1, l = s + 2, a = t[r], c = t[o], u = t[l];
      new me(a, u).closestPoint(c).distance(c) <= i ? t.splice(o, 1) : s += 1;
    }
    return this;
  }
  toHull() {
    const e = this.points, t = e.length;
    if (t === 0)
      return new Yt();
    let i = e[0];
    for (let f = 1; f < t; f += 1)
      (e[f].y < i.y || e[f].y === i.y && e[f].x > i.x) && (i = e[f]);
    const s = [];
    for (let f = 0; f < t; f += 1) {
      let d = i.theta(e[f]);
      d === 0 && (d = 360), s.push([e[f], f, d]);
    }
    if (s.sort((f, d) => {
      let p = f[2] - d[2];
      return p === 0 && (p = d[1] - f[1]), p;
    }), s.length > 2) {
      const f = s[s.length - 1];
      s.unshift(f);
    }
    const r = {}, o = [], l = (f) => `${f[0].toString()}@${f[1]}`;
    for (; s.length !== 0; ) {
      const f = s.pop(), d = f[0];
      if (r[l(f)])
        continue;
      let p = !1;
      for (; !p; )
        if (o.length < 2)
          o.push(f), p = !0;
        else {
          const g = o.pop(), m = g[0], b = o.pop(), y = b[0], v = y.cross(m, d);
          if (v < 0)
            o.push(b), o.push(g), o.push(f), p = !0;
          else if (v === 0) {
            const x = m.angleBetween(y, d);
            Math.abs(x - 180) < 1e-10 || m.equals(d) || y.equals(m) ? (r[l(g)] = m, o.push(b)) : Math.abs((x + 1) % 360 - 1) < 1e-10 && (o.push(b), s.push(g));
          } else
            r[l(g)] = m, o.push(b);
        }
    }
    o.length > 2 && o.pop();
    let a, c = -1;
    for (let f = 0, d = o.length; f < d; f += 1) {
      const p = o[f][1];
      (a === void 0 || p < a) && (a = p, c = f);
    }
    let u = [];
    if (c > 0) {
      const f = o.slice(c), d = o.slice(0, c);
      u = f.concat(d);
    } else
      u = o;
    const h = [];
    for (let f = 0, d = u.length; f < d; f += 1)
      h.push(u[f][0]);
    return new Yt(h);
  }
  equals(e) {
    return e == null || e.points.length !== this.points.length ? !1 : e.points.every((t, i) => t.equals(this.points[i]));
  }
  clone() {
    return new Yt(this.points.map((e) => e.clone()));
  }
  toJSON() {
    return this.points.map((e) => e.toJSON());
  }
  serialize() {
    return this.points.map((e) => `${e.serialize()}`).join(" ");
  }
}
(function(n) {
  function e(t) {
    return t != null && t instanceof n;
  }
  n.isPolyline = e;
})(Yt || (Yt = {}));
(function(n) {
  function e(t) {
    const i = t.trim();
    if (i === "")
      return new n();
    const s = [], r = i.split(/\s*,\s*|\s+/);
    for (let o = 0, l = r.length; o < l; o += 2)
      s.push({ x: +r[o], y: +r[o + 1] });
    return new n(s);
  }
  n.parse = e;
})(Yt || (Yt = {}));
class zt extends Yo {
  constructor(e, t, i, s) {
    super(), this.PRECISION = 3, this.start = I.create(e), this.controlPoint1 = I.create(t), this.controlPoint2 = I.create(i), this.end = I.create(s);
  }
  bbox() {
    const e = this.start, t = this.controlPoint1, i = this.controlPoint2, s = this.end, r = e.x, o = e.y, l = t.x, a = t.y, c = i.x, u = i.y, h = s.x, f = s.y, d = [], p = [[], []];
    let g, m, b, y, v, O, x, S;
    for (let A = 0; A < 2; A += 1) {
      if (A === 0 ? (m = 6 * r - 12 * l + 6 * c, g = -3 * r + 9 * l - 9 * c + 3 * h, b = 3 * l - 3 * r) : (m = 6 * o - 12 * a + 6 * u, g = -3 * o + 9 * a - 9 * u + 3 * f, b = 3 * a - 3 * o), Math.abs(g) < 1e-12) {
        if (Math.abs(m) < 1e-12)
          continue;
        y = -b / m, y > 0 && y < 1 && d.push(y);
        continue;
      }
      x = m * m - 4 * b * g, S = Math.sqrt(x), !(x < 0) && (v = (-m + S) / (2 * g), v > 0 && v < 1 && d.push(v), O = (-m - S) / (2 * g), O > 0 && O < 1 && d.push(O));
    }
    let C, k, E, $ = d.length;
    const T = $;
    for (; $; )
      $ -= 1, y = d[$], E = 1 - y, C = E * E * E * r + 3 * E * E * y * l + 3 * E * y * y * c + y * y * y * h, p[0][$] = C, k = E * E * E * o + 3 * E * E * y * a + 3 * E * y * y * u + y * y * y * f, p[1][$] = k;
    d[T] = 0, d[T + 1] = 1, p[0][T] = r, p[1][T] = o, p[0][T + 1] = h, p[1][T + 1] = f, d.length = T + 2, p[0].length = T + 2, p[1].length = T + 2;
    const M = Math.min.apply(null, p[0]), j = Math.min.apply(null, p[1]), D = Math.max.apply(null, p[0]), P = Math.max.apply(null, p[1]);
    return new ue(M, j, D - M, P - j);
  }
  closestPoint(e, t = {}) {
    return this.pointAtT(this.closestPointT(e, t));
  }
  closestPointLength(e, t = {}) {
    const i = this.getOptions(t);
    return this.lengthAtT(this.closestPointT(e, i), i);
  }
  closestPointNormalizedLength(e, t = {}) {
    const i = this.getOptions(t), s = this.closestPointLength(e, i);
    if (!s)
      return 0;
    const r = this.length(i);
    return r === 0 ? 0 : s / r;
  }
  closestPointT(e, t = {}) {
    const i = this.getPrecision(t), s = this.getDivisions(t), r = Math.pow(10, -i);
    let o = null, l = 0, a = 0, c = 0, u = 0, h = 0, f = null;
    const d = s.length;
    let p = d > 0 ? 1 / d : 0;
    for (s.forEach((g, m) => {
      const b = g.start.distance(e), y = g.end.distance(e), v = b + y;
      (f == null || v < f) && (o = g, l = m * p, a = (m + 1) * p, c = b, u = y, f = v, h = g.endpointDistance());
    }); ; ) {
      const g = c ? Math.abs(c - u) / c : 0, m = u != null ? Math.abs(c - u) / u : 0, b = g < r || m < r, y = c ? c < h * r : !0, v = u ? u < h * r : !0;
      if (b || (y || v))
        return c <= u ? l : a;
      const x = o.divide(0.5);
      p /= 2;
      const S = x[0].start.distance(e), C = x[0].end.distance(e), k = S + C, E = x[1].start.distance(e), $ = x[1].end.distance(e), T = E + $;
      k <= T ? (o = x[0], a -= p, c = S, u = C) : (o = x[1], l += p, c = E, u = $);
    }
  }
  closestPointTangent(e, t = {}) {
    return this.tangentAtT(this.closestPointT(e, t));
  }
  containsPoint(e, t = {}) {
    return this.toPolyline(t).containsPoint(e);
  }
  divideAt(e, t = {}) {
    if (e <= 0)
      return this.divideAtT(0);
    if (e >= 1)
      return this.divideAtT(1);
    const i = this.tAt(e, t);
    return this.divideAtT(i);
  }
  divideAtLength(e, t = {}) {
    const i = this.tAtLength(e, t);
    return this.divideAtT(i);
  }
  divide(e) {
    return this.divideAtT(e);
  }
  divideAtT(e) {
    const t = this.start, i = this.controlPoint1, s = this.controlPoint2, r = this.end;
    if (e <= 0)
      return [
        new zt(t, t, t, t),
        new zt(t, i, s, r)
      ];
    if (e >= 1)
      return [
        new zt(t, i, s, r),
        new zt(r, r, r, r)
      ];
    const o = this.getSkeletonPoints(e), l = o.startControlPoint1, a = o.startControlPoint2, c = o.divider, u = o.dividerControlPoint1, h = o.dividerControlPoint2;
    return [
      new zt(t, l, a, c),
      new zt(c, u, h, r)
    ];
  }
  endpointDistance() {
    return this.start.distance(this.end);
  }
  getSkeletonPoints(e) {
    const t = this.start, i = this.controlPoint1, s = this.controlPoint2, r = this.end;
    if (e <= 0)
      return {
        startControlPoint1: t.clone(),
        startControlPoint2: t.clone(),
        divider: t.clone(),
        dividerControlPoint1: i.clone(),
        dividerControlPoint2: s.clone()
      };
    if (e >= 1)
      return {
        startControlPoint1: i.clone(),
        startControlPoint2: s.clone(),
        divider: r.clone(),
        dividerControlPoint1: r.clone(),
        dividerControlPoint2: r.clone()
      };
    const o = new me(t, i).pointAt(e), l = new me(i, s).pointAt(e), a = new me(s, r).pointAt(e), c = new me(o, l).pointAt(e), u = new me(l, a).pointAt(e), h = new me(c, u).pointAt(e);
    return {
      startControlPoint1: o,
      startControlPoint2: c,
      divider: h,
      dividerControlPoint1: u,
      dividerControlPoint2: a
    };
  }
  getSubdivisions(e = {}) {
    const t = this.getPrecision(e);
    let i = [
      new zt(this.start, this.controlPoint1, this.controlPoint2, this.end)
    ];
    if (t === 0)
      return i;
    let s = this.endpointDistance();
    const r = Math.pow(10, -t);
    let o = 0;
    for (; ; ) {
      o += 1;
      const l = [];
      i.forEach((u) => {
        const h = u.divide(0.5);
        l.push(h[0], h[1]);
      });
      const a = l.reduce((u, h) => u + h.endpointDistance(), 0), c = a !== 0 ? (a - s) / a : 0;
      if (o > 1 && c < r)
        return l;
      i = l, s = a;
    }
  }
  length(e = {}) {
    return this.getDivisions(e).reduce((i, s) => i + s.endpointDistance(), 0);
  }
  lengthAtT(e, t = {}) {
    if (e <= 0)
      return 0;
    const i = t.precision === void 0 ? this.PRECISION : t.precision;
    return this.divide(e)[0].length({ precision: i });
  }
  pointAt(e, t = {}) {
    if (e <= 0)
      return this.start.clone();
    if (e >= 1)
      return this.end.clone();
    const i = this.tAt(e, t);
    return this.pointAtT(i);
  }
  pointAtLength(e, t = {}) {
    const i = this.tAtLength(e, t);
    return this.pointAtT(i);
  }
  pointAtT(e) {
    return e <= 0 ? this.start.clone() : e >= 1 ? this.end.clone() : this.getSkeletonPoints(e).divider;
  }
  isDifferentiable() {
    const e = this.start, t = this.controlPoint1, i = this.controlPoint2, s = this.end;
    return !(e.equals(t) && t.equals(i) && i.equals(s));
  }
  tangentAt(e, t = {}) {
    if (!this.isDifferentiable())
      return null;
    e < 0 ? e = 0 : e > 1 && (e = 1);
    const i = this.tAt(e, t);
    return this.tangentAtT(i);
  }
  tangentAtLength(e, t = {}) {
    if (!this.isDifferentiable())
      return null;
    const i = this.tAtLength(e, t);
    return this.tangentAtT(i);
  }
  tangentAtT(e) {
    if (!this.isDifferentiable())
      return null;
    e < 0 && (e = 0), e > 1 && (e = 1);
    const t = this.getSkeletonPoints(e), i = t.startControlPoint2, s = t.dividerControlPoint1, r = t.divider, o = new me(i, s);
    return o.translate(r.x - i.x, r.y - i.y), o;
  }
  getPrecision(e = {}) {
    return e.precision == null ? this.PRECISION : e.precision;
  }
  getDivisions(e = {}) {
    if (e.subdivisions != null)
      return e.subdivisions;
    const t = this.getPrecision(e);
    return this.getSubdivisions({ precision: t });
  }
  getOptions(e = {}) {
    const t = this.getPrecision(e), i = this.getDivisions(e);
    return { precision: t, subdivisions: i };
  }
  tAt(e, t = {}) {
    if (e <= 0)
      return 0;
    if (e >= 1)
      return 1;
    const i = this.getOptions(t), r = this.length(i) * e;
    return this.tAtLength(r, i);
  }
  tAtLength(e, t = {}) {
    let i = !0;
    e < 0 && (i = !1, e = -e);
    const s = this.getPrecision(t), r = this.getDivisions(t), o = { precision: s, subdivisions: r };
    let l = null, a, c, u = 0, h = 0, f = 0;
    const d = r.length;
    let p = d > 0 ? 1 / d : 0;
    for (let b = 0; b < d; b += 1) {
      const y = i ? b : d - 1 - b, v = r[b], O = v.endpointDistance();
      if (e <= f + O) {
        l = v, a = y * p, c = (y + 1) * p, u = i ? e - f : O + f - e, h = i ? O + f - e : e - f;
        break;
      }
      f += O;
    }
    if (l == null)
      return i ? 1 : 0;
    const g = this.length(o), m = Math.pow(10, -s);
    for (; ; ) {
      let b;
      if (b = g !== 0 ? u / g : 0, b < m)
        return a;
      if (b = g !== 0 ? h / g : 0, b < m)
        return c;
      let y, v;
      const O = l.divide(0.5);
      p /= 2;
      const x = O[0].endpointDistance(), S = O[1].endpointDistance();
      u <= x ? (l = O[0], c -= p, y = u, v = x - y) : (l = O[1], a += p, y = u - x, v = S - y), u = y, h = v;
    }
  }
  toPoints(e = {}) {
    const t = this.getDivisions(e), i = [t[0].start.clone()];
    return t.forEach((s) => i.push(s.end.clone())), i;
  }
  toPolyline(e = {}) {
    return new Yt(this.toPoints(e));
  }
  scale(e, t, i) {
    return this.start.scale(e, t, i), this.controlPoint1.scale(e, t, i), this.controlPoint2.scale(e, t, i), this.end.scale(e, t, i), this;
  }
  rotate(e, t) {
    return this.start.rotate(e, t), this.controlPoint1.rotate(e, t), this.controlPoint2.rotate(e, t), this.end.rotate(e, t), this;
  }
  translate(e, t) {
    return typeof e == "number" ? (this.start.translate(e, t), this.controlPoint1.translate(e, t), this.controlPoint2.translate(e, t), this.end.translate(e, t)) : (this.start.translate(e), this.controlPoint1.translate(e), this.controlPoint2.translate(e), this.end.translate(e)), this;
  }
  equals(e) {
    return e != null && this.start.equals(e.start) && this.controlPoint1.equals(e.controlPoint1) && this.controlPoint2.equals(e.controlPoint2) && this.end.equals(e.end);
  }
  clone() {
    return new zt(this.start, this.controlPoint1, this.controlPoint2, this.end);
  }
  toJSON() {
    return {
      start: this.start.toJSON(),
      controlPoint1: this.controlPoint1.toJSON(),
      controlPoint2: this.controlPoint2.toJSON(),
      end: this.end.toJSON()
    };
  }
  serialize() {
    return [
      this.start.serialize(),
      this.controlPoint1.serialize(),
      this.controlPoint2.serialize(),
      this.end.serialize()
    ].join(" ");
  }
}
(function(n) {
  function e(t) {
    return t != null && t instanceof n;
  }
  n.isCurve = e;
})(zt || (zt = {}));
(function(n) {
  function e(s) {
    const r = s.length, o = [], l = [];
    let a = 2;
    o[0] = s[0] / a;
    for (let c = 1; c < r; c += 1)
      l[c] = 1 / a, a = (c < r - 1 ? 4 : 3.5) - l[c], o[c] = (s[c] - o[c - 1]) / a;
    for (let c = 1; c < r; c += 1)
      o[r - c - 1] -= l[r - c] * o[r - c];
    return o;
  }
  function t(s) {
    const r = s.map((f) => I.clone(f)), o = [], l = [], a = r.length - 1;
    if (a === 1)
      return o[0] = new I((2 * r[0].x + r[1].x) / 3, (2 * r[0].y + r[1].y) / 3), l[0] = new I(2 * o[0].x - r[0].x, 2 * o[0].y - r[0].y), [o, l];
    const c = [];
    for (let f = 1; f < a - 1; f += 1)
      c[f] = 4 * r[f].x + 2 * r[f + 1].x;
    c[0] = r[0].x + 2 * r[1].x, c[a - 1] = (8 * r[a - 1].x + r[a].x) / 2;
    const u = e(c);
    for (let f = 1; f < a - 1; f += 1)
      c[f] = 4 * r[f].y + 2 * r[f + 1].y;
    c[0] = r[0].y + 2 * r[1].y, c[a - 1] = (8 * r[a - 1].y + r[a].y) / 2;
    const h = e(c);
    for (let f = 0; f < a; f += 1)
      o.push(new I(u[f], h[f])), f < a - 1 ? l.push(new I(2 * r[f + 1].x - u[f + 1], 2 * r[f + 1].y - h[f + 1])) : l.push(new I((r[a].x + u[a - 1]) / 2, (r[a].y + h[a - 1]) / 2));
    return [o, l];
  }
  function i(s) {
    if (s == null || Array.isArray(s) && s.length < 2)
      throw new Error("At least 2 points are required");
    const r = t(s), o = [];
    for (let l = 0, a = r[0].length; l < a; l += 1) {
      const c = new I(r[0][l].x, r[0][l].y), u = new I(r[1][l].x, r[1][l].y);
      o.push(new n(s[l], c, u, s[l + 1]));
    }
    return o;
  }
  n.throughPoints = i;
})(zt || (zt = {}));
class Eg extends Yo {
  constructor() {
    super(...arguments), this.isVisible = !0, this.isSegment = !0, this.isSubpathStart = !1;
  }
  get end() {
    return this.endPoint;
  }
  get start() {
    if (this.previousSegment == null)
      throw new Error("Missing previous segment. (This segment cannot be the first segment of a path, or segment has not yet been added to a path.)");
    return this.previousSegment.end;
  }
  closestPointT(e, t) {
    if (this.closestPointNormalizedLength)
      return this.closestPointNormalizedLength(e);
    throw new Error("Neither `closestPointT` nor `closestPointNormalizedLength` method is implemented.");
  }
  // eslint-disable-next-line
  lengthAtT(e, t) {
    if (e <= 0)
      return 0;
    const i = this.length();
    return e >= 1 ? i : i * e;
  }
  divideAtT(e) {
    if (this.divideAt)
      return this.divideAt(e);
    throw new Error("Neither `divideAtT` nor `divideAt` method is implemented.");
  }
  pointAtT(e) {
    if (this.pointAt)
      return this.pointAt(e);
    throw new Error("Neither `pointAtT` nor `pointAt` method is implemented.");
  }
  tangentAtT(e) {
    if (this.tangentAt)
      return this.tangentAt(e);
    throw new Error("Neither `tangentAtT` nor `tangentAt` method is implemented.");
  }
}
class Wn extends Eg {
  constructor(e, t) {
    super(), me.isLine(e) ? this.endPoint = e.end.clone().round(2) : this.endPoint = I.create(e, t).round(2);
  }
  get type() {
    return "L";
  }
  get line() {
    return new me(this.start, this.end);
  }
  bbox() {
    return this.line.bbox();
  }
  closestPoint(e) {
    return this.line.closestPoint(e);
  }
  closestPointLength(e) {
    return this.line.closestPointLength(e);
  }
  closestPointNormalizedLength(e) {
    return this.line.closestPointNormalizedLength(e);
  }
  closestPointTangent(e) {
    return this.line.closestPointTangent(e);
  }
  length() {
    return this.line.length();
  }
  divideAt(e) {
    const t = this.line.divideAt(e);
    return [new Wn(t[0]), new Wn(t[1])];
  }
  divideAtLength(e) {
    const t = this.line.divideAtLength(e);
    return [new Wn(t[0]), new Wn(t[1])];
  }
  getSubdivisions() {
    return [];
  }
  pointAt(e) {
    return this.line.pointAt(e);
  }
  pointAtLength(e) {
    return this.line.pointAtLength(e);
  }
  tangentAt(e) {
    return this.line.tangentAt(e);
  }
  tangentAtLength(e) {
    return this.line.tangentAtLength(e);
  }
  isDifferentiable() {
    return this.previousSegment == null ? !1 : !this.start.equals(this.end);
  }
  clone() {
    return new Wn(this.end);
  }
  scale(e, t, i) {
    return this.end.scale(e, t, i), this;
  }
  rotate(e, t) {
    return this.end.rotate(e, t), this;
  }
  translate(e, t) {
    return typeof e == "number" ? this.end.translate(e, t) : this.end.translate(e), this;
  }
  equals(e) {
    return this.type === e.type && this.start.equals(e.start) && this.end.equals(e.end);
  }
  toJSON() {
    return {
      type: this.type,
      start: this.start.toJSON(),
      end: this.end.toJSON()
    };
  }
  serialize() {
    const e = this.end;
    return `${this.type} ${e.x} ${e.y}`;
  }
}
(function(n) {
  function e(...t) {
    const i = t.length, s = t[0];
    if (me.isLine(s))
      return new n(s);
    if (I.isPointLike(s))
      return i === 1 ? new n(s) : t.map((o) => new n(o));
    if (i === 2)
      return new n(+t[0], +t[1]);
    const r = [];
    for (let o = 0; o < i; o += 2) {
      const l = +t[o], a = +t[o + 1];
      r.push(new n(l, a));
    }
    return r;
  }
  n.create = e;
})(Wn || (Wn = {}));
class oc extends Eg {
  get end() {
    if (!this.subpathStartSegment)
      throw new Error("Missing subpath start segment. (This segment needs a subpath start segment (e.g. MoveTo), or segment has not yet been added to a path.)");
    return this.subpathStartSegment.end;
  }
  get type() {
    return "Z";
  }
  get line() {
    return new me(this.start, this.end);
  }
  bbox() {
    return this.line.bbox();
  }
  closestPoint(e) {
    return this.line.closestPoint(e);
  }
  closestPointLength(e) {
    return this.line.closestPointLength(e);
  }
  closestPointNormalizedLength(e) {
    return this.line.closestPointNormalizedLength(e);
  }
  closestPointTangent(e) {
    return this.line.closestPointTangent(e);
  }
  length() {
    return this.line.length();
  }
  divideAt(e) {
    const t = this.line.divideAt(e);
    return [
      // do not actually cut into the segment, first divided part can stay as Z
      t[1].isDifferentiable() ? new Wn(t[0]) : this.clone(),
      new Wn(t[1])
    ];
  }
  divideAtLength(e) {
    const t = this.line.divideAtLength(e);
    return [
      t[1].isDifferentiable() ? new Wn(t[0]) : this.clone(),
      new Wn(t[1])
    ];
  }
  getSubdivisions() {
    return [];
  }
  pointAt(e) {
    return this.line.pointAt(e);
  }
  pointAtLength(e) {
    return this.line.pointAtLength(e);
  }
  tangentAt(e) {
    return this.line.tangentAt(e);
  }
  tangentAtLength(e) {
    return this.line.tangentAtLength(e);
  }
  isDifferentiable() {
    return !this.previousSegment || !this.subpathStartSegment ? !1 : !this.start.equals(this.end);
  }
  scale() {
    return this;
  }
  rotate() {
    return this;
  }
  translate() {
    return this;
  }
  equals(e) {
    return this.type === e.type && this.start.equals(e.start) && this.end.equals(e.end);
  }
  clone() {
    return new oc();
  }
  toJSON() {
    return {
      type: this.type,
      start: this.start.toJSON(),
      end: this.end.toJSON()
    };
  }
  serialize() {
    return this.type;
  }
}
(function(n) {
  function e() {
    return new n();
  }
  n.create = e;
})(oc || (oc = {}));
class lc extends Eg {
  constructor(e, t) {
    super(), this.isVisible = !1, this.isSubpathStart = !0, me.isLine(e) || zt.isCurve(e) ? this.endPoint = e.end.clone().round(2) : this.endPoint = I.create(e, t).round(2);
  }
  get start() {
    throw new Error("Illegal access. Moveto segments should not need a start property.");
  }
  get type() {
    return "M";
  }
  bbox() {
    return null;
  }
  closestPoint() {
    return this.end.clone();
  }
  closestPointLength() {
    return 0;
  }
  closestPointNormalizedLength() {
    return 0;
  }
  closestPointT() {
    return 1;
  }
  closestPointTangent() {
    return null;
  }
  length() {
    return 0;
  }
  lengthAtT() {
    return 0;
  }
  divideAt() {
    return [this.clone(), this.clone()];
  }
  divideAtLength() {
    return [this.clone(), this.clone()];
  }
  getSubdivisions() {
    return [];
  }
  pointAt() {
    return this.end.clone();
  }
  pointAtLength() {
    return this.end.clone();
  }
  pointAtT() {
    return this.end.clone();
  }
  tangentAt() {
    return null;
  }
  tangentAtLength() {
    return null;
  }
  tangentAtT() {
    return null;
  }
  isDifferentiable() {
    return !1;
  }
  scale(e, t, i) {
    return this.end.scale(e, t, i), this;
  }
  rotate(e, t) {
    return this.end.rotate(e, t), this;
  }
  translate(e, t) {
    return typeof e == "number" ? this.end.translate(e, t) : this.end.translate(e), this;
  }
  clone() {
    return new lc(this.end);
  }
  equals(e) {
    return this.type === e.type && this.end.equals(e.end);
  }
  toJSON() {
    return {
      type: this.type,
      end: this.end.toJSON()
    };
  }
  serialize() {
    const e = this.end;
    return `${this.type} ${e.x} ${e.y}`;
  }
}
(function(n) {
  function e(...t) {
    const i = t.length, s = t[0];
    if (me.isLine(s))
      return new n(s);
    if (zt.isCurve(s))
      return new n(s);
    if (I.isPointLike(s)) {
      if (i === 1)
        return new n(s);
      const o = [];
      for (let l = 0; l < i; l += 1)
        l === 0 ? o.push(new n(t[l])) : o.push(new Wn(t[l]));
      return o;
    }
    if (i === 2)
      return new n(+t[0], +t[1]);
    const r = [];
    for (let o = 0; o < i; o += 2) {
      const l = +t[o], a = +t[o + 1];
      o === 0 ? r.push(new n(l, a)) : r.push(new Wn(l, a));
    }
    return r;
  }
  n.create = e;
})(lc || (lc = {}));
class Vi extends Eg {
  constructor(e, t, i, s, r, o) {
    super(), zt.isCurve(e) ? (this.controlPoint1 = e.controlPoint1.clone().round(2), this.controlPoint2 = e.controlPoint2.clone().round(2), this.endPoint = e.end.clone().round(2)) : typeof e == "number" ? (this.controlPoint1 = new I(e, t).round(2), this.controlPoint2 = new I(i, s).round(2), this.endPoint = new I(r, o).round(2)) : (this.controlPoint1 = I.create(e).round(2), this.controlPoint2 = I.create(t).round(2), this.endPoint = I.create(i).round(2));
  }
  get type() {
    return "C";
  }
  get curve() {
    return new zt(this.start, this.controlPoint1, this.controlPoint2, this.end);
  }
  bbox() {
    return this.curve.bbox();
  }
  closestPoint(e) {
    return this.curve.closestPoint(e);
  }
  closestPointLength(e) {
    return this.curve.closestPointLength(e);
  }
  closestPointNormalizedLength(e) {
    return this.curve.closestPointNormalizedLength(e);
  }
  closestPointTangent(e) {
    return this.curve.closestPointTangent(e);
  }
  length() {
    return this.curve.length();
  }
  divideAt(e, t = {}) {
    const i = this.curve.divideAt(e, t);
    return [new Vi(i[0]), new Vi(i[1])];
  }
  divideAtLength(e, t = {}) {
    const i = this.curve.divideAtLength(e, t);
    return [new Vi(i[0]), new Vi(i[1])];
  }
  divideAtT(e) {
    const t = this.curve.divideAtT(e);
    return [new Vi(t[0]), new Vi(t[1])];
  }
  getSubdivisions() {
    return [];
  }
  pointAt(e) {
    return this.curve.pointAt(e);
  }
  pointAtLength(e) {
    return this.curve.pointAtLength(e);
  }
  tangentAt(e) {
    return this.curve.tangentAt(e);
  }
  tangentAtLength(e) {
    return this.curve.tangentAtLength(e);
  }
  isDifferentiable() {
    if (!this.previousSegment)
      return !1;
    const e = this.start, t = this.controlPoint1, i = this.controlPoint2, s = this.end;
    return !(e.equals(t) && t.equals(i) && i.equals(s));
  }
  scale(e, t, i) {
    return this.controlPoint1.scale(e, t, i), this.controlPoint2.scale(e, t, i), this.end.scale(e, t, i), this;
  }
  rotate(e, t) {
    return this.controlPoint1.rotate(e, t), this.controlPoint2.rotate(e, t), this.end.rotate(e, t), this;
  }
  translate(e, t) {
    return typeof e == "number" ? (this.controlPoint1.translate(e, t), this.controlPoint2.translate(e, t), this.end.translate(e, t)) : (this.controlPoint1.translate(e), this.controlPoint2.translate(e), this.end.translate(e)), this;
  }
  equals(e) {
    return this.start.equals(e.start) && this.end.equals(e.end) && this.controlPoint1.equals(e.controlPoint1) && this.controlPoint2.equals(e.controlPoint2);
  }
  clone() {
    return new Vi(this.controlPoint1, this.controlPoint2, this.end);
  }
  toJSON() {
    return {
      type: this.type,
      start: this.start.toJSON(),
      controlPoint1: this.controlPoint1.toJSON(),
      controlPoint2: this.controlPoint2.toJSON(),
      end: this.end.toJSON()
    };
  }
  serialize() {
    const e = this.controlPoint1, t = this.controlPoint2, i = this.end;
    return [this.type, e.x, e.y, t.x, t.y, i.x, i.y].join(" ");
  }
}
(function(n) {
  function e(...t) {
    const i = t.length, s = t[0];
    if (zt.isCurve(s))
      return new n(s);
    if (I.isPointLike(s)) {
      if (i === 3)
        return new n(t[0], t[1], t[2]);
      const o = [];
      for (let l = 0; l < i; l += 3)
        o.push(new n(t[l], t[l + 1], t[l + 2]));
      return o;
    }
    if (i === 6)
      return new n(t[0], t[1], t[2], t[3], t[4], t[5]);
    const r = [];
    for (let o = 0; o < i; o += 6)
      r.push(new n(t[o], t[o + 1], t[o + 2], t[o + 3], t[o + 4], t[o + 5]));
    return r;
  }
  n.create = e;
})(Vi || (Vi = {}));
function Uf(n, e, t) {
  return {
    x: n * Math.cos(t) - e * Math.sin(t),
    y: n * Math.sin(t) + e * Math.cos(t)
  };
}
function SC(n, e, t, i, s, r) {
  const o = 0.3333333333333333, l = 2 / 3;
  return [
    o * n + l * t,
    o * e + l * i,
    o * s + l * t,
    o * r + l * i,
    s,
    r
  ];
}
function V_(n, e, t, i, s, r, o, l, a, c) {
  const u = Math.PI * 120 / 180, h = Math.PI / 180 * (+s || 0);
  let f = [], d, p, g, m, b;
  if (c)
    p = c[0], g = c[1], m = c[2], b = c[3];
  else {
    d = Uf(n, e, -h), n = d.x, e = d.y, d = Uf(l, a, -h), l = d.x, a = d.y;
    const D = (n - l) / 2, P = (e - a) / 2;
    let A = D * D / (t * t) + P * P / (i * i);
    A > 1 && (A = Math.sqrt(A), t = A * t, i = A * i);
    const Q = t * t, X = i * i, z = (r === o ? -1 : 1) * Math.sqrt(Math.abs((Q * X - Q * P * P - X * D * D) / (Q * P * P + X * D * D)));
    m = z * t * P / i + (n + l) / 2, b = z * -i * D / t + (e + a) / 2, p = Math.asin((e - b) / i), g = Math.asin((a - b) / i), p = n < m ? Math.PI - p : p, g = l < m ? Math.PI - g : g, p < 0 && (p = Math.PI * 2 + p), g < 0 && (g = Math.PI * 2 + g), o && p > g && (p -= Math.PI * 2), !o && g > p && (g -= Math.PI * 2);
  }
  let y = g - p;
  if (Math.abs(y) > u) {
    const D = g, P = l, A = a;
    g = p + u * (o && g > p ? 1 : -1), l = m + t * Math.cos(g), a = b + i * Math.sin(g), f = V_(l, a, t, i, s, 0, o, P, A, [
      g,
      D,
      m,
      b
    ]);
  }
  y = g - p;
  const v = Math.cos(p), O = Math.sin(p), x = Math.cos(g), S = Math.sin(g), C = Math.tan(y / 4), k = 4 / 3 * (t * C), E = 4 / 3 * (i * C), $ = [n, e], T = [n + k * O, e - E * v], M = [l + k * S, a - E * x], j = [l, a];
  if (T[0] = 2 * $[0] - T[0], T[1] = 2 * $[1] - T[1], c)
    return [T, M, j].concat(f);
  {
    f = [T, M, j].concat(f).join().split(",");
    const D = [], P = f.length;
    for (let A = 0; A < P; A += 1)
      D[A] = A % 2 ? Uf(+f[A - 1], +f[A], h).y : Uf(+f[A], +f[A + 1], h).x;
    return D;
  }
}
function qBe(n) {
  if (!n)
    return null;
  const e = `	
\v\f\r   ᠎             　\u2028\u2029`, t = new RegExp(
    `([a-z])[${e},]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[${e}]*,?[${e}]*)+)`,
    // eslint-disable-line
    "ig"
  ), i = new RegExp(
    // eslint-disable-next-line
    `(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[${e}]*,?[${e}]*`,
    "ig"
  ), s = {
    a: 7,
    c: 6,
    h: 1,
    l: 2,
    m: 2,
    q: 4,
    s: 4,
    t: 2,
    v: 1,
    z: 0
  }, r = [];
  return n.replace(t, (o, l, a) => {
    const c = [];
    let u = l.toLowerCase();
    a.replace(i, (f, d) => (d && c.push(+d), f)), u === "m" && c.length > 2 && (r.push([l, ...c.splice(0, 2)]), u = "l", l = l === "m" ? "l" : "L");
    const h = s[u];
    for (; c.length >= h && (r.push([l, ...c.splice(0, h)]), !!h); )
      ;
    return o;
  }), r;
}
function WBe(n) {
  const e = qBe(n);
  if (!e || !e.length)
    return [["M", 0, 0]];
  let t = 0, i = 0, s = 0, r = 0;
  const o = [];
  for (let l = 0, a = e.length; l < a; l += 1) {
    const c = [];
    o.push(c);
    const u = e[l], h = u[0];
    if (h !== h.toUpperCase())
      switch (c[0] = h.toUpperCase(), c[0]) {
        case "A":
          c[1] = u[1], c[2] = u[2], c[3] = u[3], c[4] = u[4], c[5] = u[5], c[6] = +u[6] + t, c[7] = +u[7] + i;
          break;
        case "V":
          c[1] = +u[1] + i;
          break;
        case "H":
          c[1] = +u[1] + t;
          break;
        case "M":
          s = +u[1] + t, r = +u[2] + i;
          for (let f = 1, d = u.length; f < d; f += 1)
            c[f] = +u[f] + (f % 2 ? t : i);
          break;
        default:
          for (let f = 1, d = u.length; f < d; f += 1)
            c[f] = +u[f] + (f % 2 ? t : i);
          break;
      }
    else
      for (let f = 0, d = u.length; f < d; f += 1)
        c[f] = u[f];
    switch (c[0]) {
      case "Z":
        t = +s, i = +r;
        break;
      case "H":
        t = c[1];
        break;
      case "V":
        i = c[1];
        break;
      case "M":
        s = c[c.length - 2], r = c[c.length - 1], t = c[c.length - 2], i = c[c.length - 1];
        break;
      default:
        t = c[c.length - 2], i = c[c.length - 1];
        break;
    }
  }
  return o;
}
function XBe(n) {
  const e = WBe(n), t = { x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null };
  function i(a, c, u) {
    let h, f;
    if (!a)
      return ["C", c.x, c.y, c.x, c.y, c.x, c.y];
    switch (a[0] in { T: 1, Q: 1 } || (c.qx = null, c.qy = null), a[0]) {
      case "M":
        c.X = a[1], c.Y = a[2];
        break;
      case "A":
        return parseFloat(a[1]) === 0 || parseFloat(a[2]) === 0 ? ["L", a[6], a[7]] : ["C"].concat(V_.apply(0, [c.x, c.y].concat(a.slice(1))));
      case "S":
        return u === "C" || u === "S" ? (h = c.x * 2 - c.bx, f = c.y * 2 - c.by) : (h = c.x, f = c.y), ["C", h, f].concat(a.slice(1));
      case "T":
        return u === "Q" || u === "T" ? (c.qx = c.x * 2 - c.qx, c.qy = c.y * 2 - c.qy) : (c.qx = c.x, c.qy = c.y), ["C"].concat(SC(c.x, c.y, c.qx, c.qy, a[1], a[2]));
      case "Q":
        return c.qx = a[1], c.qy = a[2], ["C"].concat(SC(c.x, c.y, a[1], a[2], a[3], a[4]));
      case "H":
        return ["L"].concat(a[1], c.y);
      case "V":
        return ["L"].concat(c.x, a[1]);
    }
    return a;
  }
  function s(a, c) {
    if (a[c].length > 7) {
      a[c].shift();
      const u = a[c];
      for (; u.length; )
        r[c] = "A", c += 1, a.splice(c, 0, ["C"].concat(u.splice(0, 6)));
      a.splice(c, 1), l = e.length;
    }
  }
  const r = [];
  let o = "", l = e.length;
  for (let a = 0; a < l; a += 1) {
    let c = "";
    e[a] && (c = e[a][0]), c !== "C" && (r[a] = c, a > 0 && (o = r[a - 1])), e[a] = i(e[a], t, o), r[a] !== "A" && c === "C" && (r[a] = "C"), s(e, a);
    const u = e[a], h = u.length;
    t.x = u[h - 2], t.y = u[h - 1], t.bx = parseFloat(u[h - 4]) || t.x, t.by = parseFloat(u[h - 3]) || t.y;
  }
  return (!e[0][0] || e[0][0] !== "M") && e.unshift(["M", 0, 0]), e;
}
function YBe(n) {
  return XBe(n).map((e) => e.map((t) => typeof t == "string" ? t : ct.round(t, 2))).join(",").split(",").join(" ");
}
class ke extends Yo {
  constructor(e) {
    if (super(), this.PRECISION = 3, this.segments = [], Array.isArray(e))
      if (me.isLine(e[0]) || zt.isCurve(e[0])) {
        let t = null;
        e.forEach((s, r) => {
          r === 0 && this.appendSegment(ke.createSegment("M", s.start)), t != null && !t.end.equals(s.start) && this.appendSegment(ke.createSegment("M", s.start)), me.isLine(s) ? this.appendSegment(ke.createSegment("L", s.end)) : zt.isCurve(s) && this.appendSegment(ke.createSegment("C", s.controlPoint1, s.controlPoint2, s.end)), t = s;
        });
      } else
        e.forEach((i) => {
          i.isSegment && this.appendSegment(i);
        });
    else
      e != null && (me.isLine(e) ? (this.appendSegment(ke.createSegment("M", e.start)), this.appendSegment(ke.createSegment("L", e.end))) : zt.isCurve(e) ? (this.appendSegment(ke.createSegment("M", e.start)), this.appendSegment(ke.createSegment("C", e.controlPoint1, e.controlPoint2, e.end))) : Yt.isPolyline(e) ? e.points && e.points.length && e.points.forEach((t, i) => {
        const s = i === 0 ? ke.createSegment("M", t) : ke.createSegment("L", t);
        this.appendSegment(s);
      }) : e.isSegment && this.appendSegment(e));
  }
  get start() {
    const e = this.segments, t = e.length;
    if (t === 0)
      return null;
    for (let i = 0; i < t; i += 1) {
      const s = e[i];
      if (s.isVisible)
        return s.start;
    }
    return e[t - 1].end;
  }
  get end() {
    const e = this.segments, t = e.length;
    if (t === 0)
      return null;
    for (let i = t - 1; i >= 0; i -= 1) {
      const s = e[i];
      if (s.isVisible)
        return s.end;
    }
    return e[t - 1].end;
  }
  moveTo(...e) {
    return this.appendSegment(lc.create.call(null, ...e));
  }
  lineTo(...e) {
    return this.appendSegment(Wn.create.call(null, ...e));
  }
  curveTo(...e) {
    return this.appendSegment(Vi.create.call(null, ...e));
  }
  arcTo(e, t, i, s, r, o, l) {
    const a = this.end || new I(), c = typeof o == "number" ? yp(a.x, a.y, e, t, i, s, r, o, l) : yp(a.x, a.y, e, t, i, s, r, o.x, o.y);
    if (c != null)
      for (let u = 0, h = c.length; u < h; u += 6)
        this.curveTo(c[u], c[u + 1], c[u + 2], c[u + 3], c[u + 4], c[u + 5]);
    return this;
  }
  quadTo(e, t, i, s) {
    const r = this.end || new I(), o = ["M", r.x, r.y];
    if (typeof e == "number")
      o.push("Q", e, t, i, s);
    else {
      const a = t;
      o.push("Q", e.x, e.y, a.x, a.y);
    }
    const l = ke.parse(o.join(" "));
    return this.appendSegment(l.segments.slice(1)), this;
  }
  close() {
    return this.appendSegment(oc.create());
  }
  drawPoints(e, t = {}) {
    const i = F_(e, t), s = ke.parse(i);
    s && s.segments && this.appendSegment(s.segments);
  }
  bbox() {
    const e = this.segments, t = e.length;
    if (t === 0)
      return null;
    let i;
    for (let r = 0; r < t; r += 1) {
      const o = e[r];
      if (o.isVisible) {
        const l = o.bbox();
        l != null && (i = i ? i.union(l) : l);
      }
    }
    if (i != null)
      return i;
    const s = e[t - 1];
    return new ue(s.end.x, s.end.y, 0, 0);
  }
  appendSegment(e) {
    const t = this.segments.length;
    let i = t !== 0 ? this.segments[t - 1] : null, s;
    const r = null;
    if (Array.isArray(e))
      for (let o = 0, l = e.length; o < l; o += 1) {
        const a = e[o];
        s = this.prepareSegment(a, i, r), this.segments.push(s), i = s;
      }
    else
      e != null && e.isSegment && (s = this.prepareSegment(e, i, r), this.segments.push(s));
    return this;
  }
  insertSegment(e, t) {
    const i = this.segments.length;
    if (e < 0 && (e = i + e + 1), e > i || e < 0)
      throw new Error("Index out of range.");
    let s, r = null, o = null;
    if (i !== 0 && (e >= 1 ? (r = this.segments[e - 1], o = r.nextSegment) : (r = null, o = this.segments[0])), !Array.isArray(t))
      s = this.prepareSegment(t, r, o), this.segments.splice(e, 0, s);
    else
      for (let l = 0, a = t.length; l < a; l += 1) {
        const c = t[l];
        s = this.prepareSegment(c, r, o), this.segments.splice(e + l, 0, s), r = s;
      }
    return this;
  }
  removeSegment(e) {
    const t = this.fixIndex(e), i = this.segments.splice(t, 1)[0], s = i.previousSegment, r = i.nextSegment;
    return s && (s.nextSegment = r), r && (r.previousSegment = s), i.isSubpathStart && r && this.updateSubpathStartSegment(r), i;
  }
  replaceSegment(e, t) {
    const i = this.fixIndex(e);
    let s;
    const r = this.segments[i];
    let o = r.previousSegment;
    const l = r.nextSegment;
    let a = r.isSubpathStart;
    if (!Array.isArray(t))
      s = this.prepareSegment(t, o, l), this.segments.splice(i, 1, s), a && s.isSubpathStart && (a = !1);
    else {
      this.segments.splice(e, 1);
      for (let c = 0, u = t.length; c < u; c += 1) {
        const h = t[c];
        s = this.prepareSegment(h, o, l), this.segments.splice(e + c, 0, s), o = s, a && s.isSubpathStart && (a = !1);
      }
    }
    a && l && this.updateSubpathStartSegment(l);
  }
  getSegment(e) {
    const t = this.fixIndex(e);
    return this.segments[t];
  }
  fixIndex(e) {
    const t = this.segments.length;
    if (t === 0)
      throw new Error("Path has no segments.");
    let i = e;
    for (; i < 0; )
      i = t + i;
    if (i >= t || i < 0)
      throw new Error("Index out of range.");
    return i;
  }
  segmentAt(e, t = {}) {
    const i = this.segmentIndexAt(e, t);
    return i ? this.getSegment(i) : null;
  }
  segmentAtLength(e, t = {}) {
    const i = this.segmentIndexAtLength(e, t);
    return i ? this.getSegment(i) : null;
  }
  segmentIndexAt(e, t = {}) {
    if (this.segments.length === 0)
      return null;
    const i = ct.clamp(e, 0, 1), s = this.getOptions(t), o = this.length(s) * i;
    return this.segmentIndexAtLength(o, s);
  }
  segmentIndexAtLength(e, t = {}) {
    const i = this.segments.length;
    if (i === 0)
      return null;
    let s = !0;
    e < 0 && (s = !1, e = -e);
    const r = this.getPrecision(t), o = this.getSubdivisions(t);
    let l = 0, a = null;
    for (let c = 0; c < i; c += 1) {
      const u = s ? c : i - 1 - c, h = this.segments[u], f = o[u], d = h.length({ precision: r, subdivisions: f });
      if (h.isVisible) {
        if (e <= l + d)
          return u;
        a = u;
      }
      l += d;
    }
    return a;
  }
  getSegmentSubdivisions(e = {}) {
    const t = this.getPrecision(e), i = [];
    for (let s = 0, r = this.segments.length; s < r; s += 1) {
      const l = this.segments[s].getSubdivisions({ precision: t });
      i.push(l);
    }
    return i;
  }
  updateSubpathStartSegment(e) {
    let t = e.previousSegment, i = e;
    for (; i && !i.isSubpathStart; )
      t != null ? i.subpathStartSegment = t.subpathStartSegment : i.subpathStartSegment = null, t = i, i = i.nextSegment;
  }
  prepareSegment(e, t, i) {
    e.previousSegment = t, e.nextSegment = i, t != null && (t.nextSegment = e), i != null && (i.previousSegment = e);
    let s = e;
    return e.isSubpathStart && (e.subpathStartSegment = e, s = i), s != null && this.updateSubpathStartSegment(s), e;
  }
  closestPoint(e, t = {}) {
    const i = this.closestPointT(e, t);
    return i ? this.pointAtT(i) : null;
  }
  closestPointLength(e, t = {}) {
    const i = this.getOptions(t), s = this.closestPointT(e, i);
    return s ? this.lengthAtT(s, i) : 0;
  }
  closestPointNormalizedLength(e, t = {}) {
    const i = this.getOptions(t), s = this.closestPointLength(e, i);
    if (s === 0)
      return 0;
    const r = this.length(i);
    return r === 0 ? 0 : s / r;
  }
  closestPointT(e, t = {}) {
    if (this.segments.length === 0)
      return null;
    const i = this.getPrecision(t), s = this.getSubdivisions(t);
    let r, o = 1 / 0;
    for (let l = 0, a = this.segments.length; l < a; l += 1) {
      const c = this.segments[l], u = s[l];
      if (c.isVisible) {
        const h = c.closestPointT(e, {
          precision: i,
          subdivisions: u
        }), f = c.pointAtT(h), d = ct.squaredLength(f, e);
        d < o && (r = { segmentIndex: l, value: h }, o = d);
      }
    }
    return r || { segmentIndex: this.segments.length - 1, value: 1 };
  }
  closestPointTangent(e, t = {}) {
    if (this.segments.length === 0)
      return null;
    const i = this.getPrecision(t), s = this.getSubdivisions(t);
    let r, o = 1 / 0;
    for (let l = 0, a = this.segments.length; l < a; l += 1) {
      const c = this.segments[l], u = s[l];
      if (c.isDifferentiable()) {
        const h = c.closestPointT(e, {
          precision: i,
          subdivisions: u
        }), f = c.pointAtT(h), d = ct.squaredLength(f, e);
        d < o && (r = c.tangentAtT(h), o = d);
      }
    }
    return r || null;
  }
  containsPoint(e, t = {}) {
    const i = this.toPolylines(t);
    if (!i)
      return !1;
    let s = 0;
    for (let r = 0, o = i.length; r < o; r += 1)
      i[r].containsPoint(e) && (s += 1);
    return s % 2 === 1;
  }
  pointAt(e, t = {}) {
    if (this.segments.length === 0)
      return null;
    if (e <= 0)
      return this.start.clone();
    if (e >= 1)
      return this.end.clone();
    const i = this.getOptions(t), r = this.length(i) * e;
    return this.pointAtLength(r, i);
  }
  pointAtLength(e, t = {}) {
    if (this.segments.length === 0)
      return null;
    if (e === 0)
      return this.start.clone();
    let i = !0;
    e < 0 && (i = !1, e = -e);
    const s = this.getPrecision(t), r = this.getSubdivisions(t);
    let o, l = 0;
    for (let c = 0, u = this.segments.length; c < u; c += 1) {
      const h = i ? c : u - 1 - c, f = this.segments[h], d = r[h], p = f.length({
        precision: s,
        subdivisions: d
      });
      if (f.isVisible) {
        if (e <= l + p)
          return f.pointAtLength((i ? 1 : -1) * (e - l), {
            precision: s,
            subdivisions: d
          });
        o = f;
      }
      l += p;
    }
    return o ? i ? o.end : o.start : this.segments[this.segments.length - 1].end.clone();
  }
  pointAtT(e) {
    const t = this.segments, i = t.length;
    if (i === 0)
      return null;
    const s = e.segmentIndex;
    if (s < 0)
      return t[0].pointAtT(0);
    if (s >= i)
      return t[i - 1].pointAtT(1);
    const r = ct.clamp(e.value, 0, 1);
    return t[s].pointAtT(r);
  }
  divideAt(e, t = {}) {
    if (this.segments.length === 0)
      return null;
    const i = ct.clamp(e, 0, 1), s = this.getOptions(t), o = this.length(s) * i;
    return this.divideAtLength(o, s);
  }
  divideAtLength(e, t = {}) {
    if (this.segments.length === 0)
      return null;
    let i = !0;
    e < 0 && (i = !1, e = -e);
    const s = this.getPrecision(t), r = this.getSubdivisions(t);
    let o = 0, l, a, c, u, h;
    for (let x = 0, S = this.segments.length; x < S; x += 1) {
      const C = i ? x : S - 1 - x, k = this.getSegment(C), E = r[C], $ = { precision: s, subdivisions: E }, T = k.length($);
      if (k.isDifferentiable() && (c = k, u = C, e <= o + T)) {
        a = C, l = k.divideAtLength((i ? 1 : -1) * (e - o), $);
        break;
      }
      o += T;
    }
    if (!c)
      return null;
    l || (a = u, h = i ? 1 : 0, l = c.divideAtT(h));
    const f = this.clone(), d = a;
    f.replaceSegment(d, l);
    const p = d;
    let g = d + 1, m = d + 2;
    l[0].isDifferentiable() || (f.removeSegment(p), g -= 1, m -= 1);
    const b = f.getSegment(g).start;
    f.insertSegment(g, ke.createSegment("M", b)), m += 1, l[1].isDifferentiable() || (f.removeSegment(m - 1), m -= 1);
    const y = m - p - 1;
    for (let x = m, S = f.segments.length; x < S; x += 1) {
      const C = this.getSegment(x - y), k = f.getSegment(x);
      if (k.type === "Z" && !C.subpathStartSegment.end.equals(k.subpathStartSegment.end)) {
        const E = ke.createSegment("L", C.end);
        f.replaceSegment(x, E);
      }
    }
    const v = new ke(f.segments.slice(0, g)), O = new ke(f.segments.slice(g));
    return [v, O];
  }
  intersectsWithLine(e, t = {}) {
    const i = this.toPolylines(t);
    if (i == null)
      return null;
    let s = null;
    for (let r = 0, o = i.length; r < o; r += 1) {
      const l = i[r], a = e.intersect(l);
      a && (s == null && (s = []), Array.isArray(a) ? s.push(...a) : s.push(a));
    }
    return s;
  }
  isDifferentiable() {
    for (let e = 0, t = this.segments.length; e < t; e += 1)
      if (this.segments[e].isDifferentiable())
        return !0;
    return !1;
  }
  isValid() {
    const e = this.segments;
    return e.length === 0 || e[0].type === "M";
  }
  length(e = {}) {
    if (this.segments.length === 0)
      return 0;
    const t = this.getSubdivisions(e);
    let i = 0;
    for (let s = 0, r = this.segments.length; s < r; s += 1) {
      const o = this.segments[s], l = t[s];
      i += o.length({ subdivisions: l });
    }
    return i;
  }
  lengthAtT(e, t = {}) {
    const i = this.segments.length;
    if (i === 0)
      return 0;
    let s = e.segmentIndex;
    if (s < 0)
      return 0;
    let r = ct.clamp(e.value, 0, 1);
    s >= i && (s = i - 1, r = 1);
    const o = this.getPrecision(t), l = this.getSubdivisions(t);
    let a = 0;
    for (let h = 0; h < s; h += 1) {
      const f = this.segments[h], d = l[h];
      a += f.length({ precision: o, subdivisions: d });
    }
    const c = this.segments[s], u = l[s];
    return a += c.lengthAtT(r, { precision: o, subdivisions: u }), a;
  }
  tangentAt(e, t = {}) {
    if (this.segments.length === 0)
      return null;
    const i = ct.clamp(e, 0, 1), s = this.getOptions(t), o = this.length(s) * i;
    return this.tangentAtLength(o, s);
  }
  tangentAtLength(e, t = {}) {
    if (this.segments.length === 0)
      return null;
    let i = !0;
    e < 0 && (i = !1, e = -e);
    const s = this.getPrecision(t), r = this.getSubdivisions(t);
    let o, l = 0;
    for (let a = 0, c = this.segments.length; a < c; a += 1) {
      const u = i ? a : c - 1 - a, h = this.segments[u], f = r[u], d = h.length({ precision: s, subdivisions: f });
      if (h.isDifferentiable()) {
        if (e <= l + d)
          return h.tangentAtLength((i ? 1 : -1) * (e - l), {
            precision: s,
            subdivisions: f
          });
        o = h;
      }
      l += d;
    }
    if (o) {
      const a = i ? 1 : 0;
      return o.tangentAtT(a);
    }
    return null;
  }
  tangentAtT(e) {
    const t = this.segments.length;
    if (t === 0)
      return null;
    const i = e.segmentIndex;
    if (i < 0)
      return this.segments[0].tangentAtT(0);
    if (i >= t)
      return this.segments[t - 1].tangentAtT(1);
    const s = ct.clamp(e.value, 0, 1);
    return this.segments[i].tangentAtT(s);
  }
  getPrecision(e = {}) {
    return e.precision == null ? this.PRECISION : e.precision;
  }
  getSubdivisions(e = {}) {
    if (e.segmentSubdivisions == null) {
      const t = this.getPrecision(e);
      return this.getSegmentSubdivisions({ precision: t });
    }
    return e.segmentSubdivisions;
  }
  getOptions(e = {}) {
    const t = this.getPrecision(e), i = this.getSubdivisions(e);
    return { precision: t, segmentSubdivisions: i };
  }
  toPoints(e = {}) {
    const t = this.segments, i = t.length;
    if (i === 0)
      return null;
    const s = this.getSubdivisions(e), r = [];
    let o = [];
    for (let l = 0; l < i; l += 1) {
      const a = t[l];
      if (a.isVisible) {
        const c = s[l];
        c.length > 0 ? c.forEach((u) => o.push(u.start)) : o.push(a.start);
      } else
        o.length > 0 && (o.push(t[l - 1].end), r.push(o), o = []);
    }
    return o.length > 0 && (o.push(this.end), r.push(o)), r;
  }
  toPolylines(e = {}) {
    const t = this.toPoints(e);
    return t ? t.map((i) => new Yt(i)) : null;
  }
  scale(e, t, i) {
    return this.segments.forEach((s) => s.scale(e, t, i)), this;
  }
  rotate(e, t) {
    return this.segments.forEach((i) => i.rotate(e, t)), this;
  }
  translate(e, t) {
    return typeof e == "number" ? this.segments.forEach((i) => i.translate(e, t)) : this.segments.forEach((i) => i.translate(e)), this;
  }
  clone() {
    const e = new ke();
    return this.segments.forEach((t) => e.appendSegment(t.clone())), e;
  }
  equals(e) {
    if (e == null)
      return !1;
    const t = this.segments, i = e.segments, s = t.length;
    if (i.length !== s)
      return !1;
    for (let r = 0; r < s; r += 1) {
      const o = t[r], l = i[r];
      if (o.type !== l.type || !o.equals(l))
        return !1;
    }
    return !0;
  }
  toJSON() {
    return this.segments.map((e) => e.toJSON());
  }
  serialize() {
    if (!this.isValid())
      throw new Error("Invalid path segments.");
    return this.segments.map((e) => e.serialize()).join(" ");
  }
  toString() {
    return this.serialize();
  }
}
(function(n) {
  function e(t) {
    return t != null && t instanceof n;
  }
  n.isPath = e;
})(ke || (ke = {}));
(function(n) {
  function e(i) {
    if (!i)
      return new n();
    const s = new n(), r = /(?:[a-zA-Z] *)(?:(?:-?\d+(?:\.\d+)?(?:e[-+]?\d+)? *,? *)|(?:-?\.\d+ *,? *))+|(?:[a-zA-Z] *)(?! |\d|-|\.)/g, o = n.normalize(i).match(r);
    if (o != null)
      for (let l = 0, a = o.length; l < a; l += 1) {
        const c = o[l], u = /(?:[a-zA-Z])|(?:(?:-?\d+(?:\.\d+)?(?:e[-+]?\d+)?))|(?:(?:-?\.\d+))/g, h = c.match(u);
        if (h != null) {
          const f = h[0], d = h.slice(1).map((g) => +g), p = t.call(null, f, ...d);
          s.appendSegment(p);
        }
      }
    return s;
  }
  n.parse = e;
  function t(i, ...s) {
    if (i === "M")
      return lc.create.call(null, ...s);
    if (i === "L")
      return Wn.create.call(null, ...s);
    if (i === "C")
      return Vi.create.call(null, ...s);
    if (i === "z" || i === "Z")
      return oc.create();
    throw new Error(`Invalid path segment type "${i}"`);
  }
  n.createSegment = t;
})(ke || (ke = {}));
(function(n) {
  n.normalize = YBe, n.isValid = ZBe, n.drawArc = VBe, n.drawPoints = F_, n.arcToCurves = yp;
})(ke || (ke = {}));
class Ut {
  constructor(e) {
    this.options = Object.assign({}, e), this.data = this.options.data || {}, this.register = this.register.bind(this), this.unregister = this.unregister.bind(this);
  }
  get names() {
    return Object.keys(this.data);
  }
  register(e, t, i = !1) {
    if (typeof e == "object") {
      Object.entries(e).forEach(([o, l]) => {
        this.register(o, l, t);
      });
      return;
    }
    this.exist(e) && !i && !Do.isApplyingHMR() && this.onDuplicated(e);
    const s = this.options.process, r = s ? Ee(s, this, e, t) : t;
    return this.data[e] = r, r;
  }
  unregister(e) {
    const t = e ? this.data[e] : null;
    return delete this.data[e], t;
  }
  get(e) {
    return e ? this.data[e] : null;
  }
  exist(e) {
    return e ? this.data[e] != null : !1;
  }
  onDuplicated(e) {
    try {
      throw this.options.onConflict && Ee(this.options.onConflict, this, e), new Error(`${Rd(this.options.type)} with name '${e}' already registered.`);
    } catch (t) {
      throw t;
    }
  }
  onNotFound(e, t) {
    throw new Error(this.getSpellingSuggestion(e, t));
  }
  getSpellingSuggestion(e, t) {
    const i = this.getSpellingSuggestionForName(e), s = t ? `${t} ${c5(this.options.type)}` : this.options.type;
    return (
      // eslint-disable-next-line
      `${Rd(s)} with name '${e}' does not exist.${i ? ` Did you mean '${i}'?` : ""}`
    );
  }
  getSpellingSuggestionForName(e) {
    return Y4e(e, Object.keys(this.data), (t) => t);
  }
}
(function(n) {
  function e(t) {
    return new n(t);
  }
  n.create = e;
})(Ut || (Ut = {}));
const HBe = {
  color: "#aaaaaa",
  thickness: 1,
  markup: "rect",
  update(n, e) {
    const t = e.thickness * e.sx, i = e.thickness * e.sy;
    nt(n, {
      width: t,
      height: i,
      rx: t,
      ry: i,
      fill: e.color
    });
  }
}, GBe = {
  color: "#aaaaaa",
  thickness: 1,
  markup: "rect",
  update(n, e) {
    const t = e.sx <= 1 ? e.thickness * e.sx : e.thickness;
    nt(n, {
      width: t,
      height: t,
      rx: t,
      ry: t,
      fill: e.color
    });
  }
}, UBe = {
  color: "rgba(224,224,224,1)",
  thickness: 1,
  markup: "path",
  update(n, e) {
    let t;
    const i = e.width, s = e.height, r = e.thickness;
    i - r >= 0 && s - r >= 0 ? t = ["M", i, 0, "H0 M0 0 V0", s].join(" ") : t = "M 0 0 0 0", nt(n, {
      d: t,
      stroke: e.color,
      "stroke-width": e.thickness
    });
  }
}, KBe = [
  {
    color: "rgba(224,224,224,1)",
    thickness: 1,
    markup: "path",
    update(n, e) {
      let t;
      const i = e.width, s = e.height, r = e.thickness;
      i - r >= 0 && s - r >= 0 ? t = ["M", i, 0, "H0 M0 0 V0", s].join(" ") : t = "M 0 0 0 0", nt(n, {
        d: t,
        stroke: e.color,
        "stroke-width": e.thickness
      });
    }
  },
  {
    color: "rgba(224,224,224,0.2)",
    thickness: 3,
    factor: 4,
    markup: "path",
    update(n, e) {
      let t;
      const i = e.factor || 1, s = e.width * i, r = e.height * i, o = e.thickness;
      s - o >= 0 && r - o >= 0 ? t = ["M", s, 0, "H0 M0 0 V0", r].join(" ") : t = "M 0 0 0 0", e.width = s, e.height = r, nt(n, {
        d: t,
        stroke: e.color,
        "stroke-width": e.thickness
      });
    }
  }
], JBe = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  dot: HBe,
  doubleMesh: KBe,
  fixedDot: GBe,
  mesh: UBe
}, Symbol.toStringTag, { value: "Module" }));
class xo {
  constructor() {
    this.patterns = {}, this.root = Ie.create(gp(), {
      width: "100%",
      height: "100%"
    }, [Bs("defs")]).node;
  }
  add(e, t) {
    const i = this.root.childNodes[0];
    i && i.appendChild(t), this.patterns[e] = t, Ie.create("rect", {
      width: "100%",
      height: "100%",
      fill: `url(#${e})`
    }).appendTo(this.root);
  }
  get(e) {
    return this.patterns[e];
  }
  has(e) {
    return this.patterns[e] != null;
  }
}
(function(n) {
  n.presets = JBe, n.registry = Ut.create({
    type: "grid"
  }), n.registry.register(n.presets, !0);
})(xo || (xo = {}));
const q_ = function(n) {
  const e = document.createElement("canvas"), t = n.width, i = n.height;
  e.width = t * 2, e.height = i;
  const s = e.getContext("2d");
  return s.drawImage(n, 0, 0, t, i), s.translate(2 * t, 0), s.scale(-1, 1), s.drawImage(n, 0, 0, t, i), e;
}, W_ = function(n) {
  const e = document.createElement("canvas"), t = n.width, i = n.height;
  e.width = t, e.height = i * 2;
  const s = e.getContext("2d");
  return s.drawImage(n, 0, 0, t, i), s.translate(0, 2 * i), s.scale(1, -1), s.drawImage(n, 0, 0, t, i), e;
}, X_ = function(n) {
  const e = document.createElement("canvas"), t = n.width, i = n.height;
  e.width = 2 * t, e.height = 2 * i;
  const s = e.getContext("2d");
  return s.drawImage(n, 0, 0, t, i), s.setTransform(-1, 0, 0, -1, e.width, e.height), s.drawImage(n, 0, 0, t, i), s.setTransform(-1, 0, 0, 1, e.width, 0), s.drawImage(n, 0, 0, t, i), s.setTransform(1, 0, 0, -1, 0, e.height), s.drawImage(n, 0, 0, t, i), e;
}, eje = function(n, e) {
  const t = n.width, i = n.height, s = document.createElement("canvas");
  s.width = t * 3, s.height = i * 3;
  const r = s.getContext("2d"), o = e.angle != null ? -e.angle : -20, l = st.toRad(o), a = s.width / 4, c = s.height / 4;
  for (let u = 0; u < 4; u += 1)
    for (let h = 0; h < 4; h += 1)
      (u + h) % 2 > 0 && (r.setTransform(1, 0, 0, 1, (2 * u - 1) * a, (2 * h - 1) * c), r.rotate(l), r.drawImage(n, -t / 2, -i / 2, t, i));
  return s;
}, tje = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  flipX: q_,
  flipXY: X_,
  flipY: W_,
  watermark: eje
}, Symbol.toStringTag, { value: "Module" }));
var vh;
(function(n) {
  n.presets = Object.assign({}, tje), n.presets["flip-x"] = q_, n.presets["flip-y"] = W_, n.presets["flip-xy"] = X_, n.registry = Ut.create({
    type: "background pattern"
  }), n.registry.register(n.presets, !0);
})(vh || (vh = {}));
function sO(n, e) {
  return n ?? e;
}
function Sn(n, e) {
  return n != null && Number.isFinite(n) ? n : e;
}
function nje(n = {}) {
  const e = sO(n.color, "blue"), t = Sn(n.width, 1), i = Sn(n.margin, 2), s = Sn(n.opacity, 1), r = i, o = i + t;
  return `
    <filter>
      <feFlood flood-color="${e}" flood-opacity="${s}" result="colored"/>
      <feMorphology in="SourceAlpha" result="morphedOuter" operator="dilate" radius="${o}" />
      <feMorphology in="SourceAlpha" result="morphedInner" operator="dilate" radius="${r}" />
      <feComposite result="morphedOuterColored" in="colored" in2="morphedOuter" operator="in"/>
      <feComposite operator="xor" in="morphedOuterColored" in2="morphedInner" result="outline"/>
      <feMerge>
        <feMergeNode in="outline"/>
        <feMergeNode in="SourceGraphic"/>
      </feMerge>
    </filter>
  `.trim();
}
function ije(n = {}) {
  const e = sO(n.color, "red"), t = Sn(n.blur, 0), i = Sn(n.width, 1), s = Sn(n.opacity, 1);
  return `
      <filter>
        <feFlood flood-color="${e}" flood-opacity="${s}" result="colored"/>
        <feMorphology result="morphed" in="SourceGraphic" operator="dilate" radius="${i}"/>
        <feComposite result="composed" in="colored" in2="morphed" operator="in"/>
        <feGaussianBlur result="blured" in="composed" stdDeviation="${t}"/>
        <feBlend in="SourceGraphic" in2="blured" mode="normal"/>
      </filter>
    `.trim();
}
function sje(n = {}) {
  const e = Sn(n.x, 2);
  return `
    <filter>
      <feGaussianBlur stdDeviation="${n.y != null && Number.isFinite(n.y) ? [e, n.y] : e}"/>
    </filter>
  `.trim();
}
function rje(n = {}) {
  const e = Sn(n.dx, 0), t = Sn(n.dy, 0), i = sO(n.color, "black"), s = Sn(n.blur, 4), r = Sn(n.opacity, 1);
  return "SVGFEDropShadowElement" in window ? `<filter>
         <feDropShadow stdDeviation="${s}" dx="${e}" dy="${t}" flood-color="${i}" flood-opacity="${r}" />
       </filter>`.trim() : `<filter>
         <feGaussianBlur in="SourceAlpha" stdDeviation="${s}" />
         <feOffset dx="${e}" dy="${t}" result="offsetblur" />
         <feFlood flood-color="${i}" />
         <feComposite in2="offsetblur" operator="in" />
         <feComponentTransfer>
           <feFuncA type="linear" slope="${r}" />
         </feComponentTransfer>
         <feMerge>
           <feMergeNode/>
           <feMergeNode in="SourceGraphic"/>
         </feMerge>
       </filter>`.trim();
}
function oje(n = {}) {
  const e = Sn(n.amount, 1), t = 0.2126 + 0.7874 * (1 - e), i = 0.7152 - 0.7152 * (1 - e), s = 0.0722 - 0.0722 * (1 - e), r = 0.2126 - 0.2126 * (1 - e), o = 0.7152 + 0.2848 * (1 - e), l = 0.0722 - 0.0722 * (1 - e), a = 0.2126 - 0.2126 * (1 - e), c = 0.0722 + 0.9278 * (1 - e);
  return `
    <filter>
      <feColorMatrix type="matrix" values="${t} ${i} ${s} 0 0 ${r} ${o} ${l} 0 0 ${a} ${i} ${c} 0 0 0 0 0 1 0"/>
    </filter>
  `.trim();
}
function lje(n = {}) {
  const e = Sn(n.amount, 1), t = 0.393 + 0.607 * (1 - e), i = 0.769 - 0.769 * (1 - e), s = 0.189 - 0.189 * (1 - e), r = 0.349 - 0.349 * (1 - e), o = 0.686 + 0.314 * (1 - e), l = 0.168 - 0.168 * (1 - e), a = 0.272 - 0.272 * (1 - e), c = 0.534 - 0.534 * (1 - e), u = 0.131 + 0.869 * (1 - e);
  return `
      <filter>
        <feColorMatrix type="matrix" values="${t} ${i} ${s} 0 0 ${r} ${o} ${l} 0 0 ${a} ${c} ${u} 0 0 0 0 0 1 0"/>
      </filter>
    `.trim();
}
function aje(n = {}) {
  return `
      <filter>
        <feColorMatrix type="saturate" values="${1 - Sn(n.amount, 1)}"/>
      </filter>
    `.trim();
}
function cje(n = {}) {
  return `
      <filter>
        <feColorMatrix type="hueRotate" values="${Sn(n.angle, 0)}"/>
      </filter>
    `.trim();
}
function uje(n = {}) {
  const e = Sn(n.amount, 1), t = 1 - e;
  return `
      <filter>
        <feComponentTransfer>
          <feFuncR type="table" tableValues="${e} ${t}"/>
          <feFuncG type="table" tableValues="${e} ${t}"/>
          <feFuncB type="table" tableValues="${e} ${t}"/>
        </feComponentTransfer>
      </filter>
    `.trim();
}
function hje(n = {}) {
  const e = Sn(n.amount, 1);
  return `
    <filter>
      <feComponentTransfer>
        <feFuncR type="linear" slope="${e}"/>
        <feFuncG type="linear" slope="${e}"/>
        <feFuncB type="linear" slope="${e}"/>
      </feComponentTransfer>
    </filter>
  `.trim();
}
function fje(n = {}) {
  const e = Sn(n.amount, 1), t = 0.5 - e / 2;
  return `
    <filter>
     <feComponentTransfer>
        <feFuncR type="linear" slope="${e}" intercept="${t}"/>
        <feFuncG type="linear" slope="${e}" intercept="${t}"/>
        <feFuncB type="linear" slope="${e}" intercept="${t}"/>
      </feComponentTransfer>
    </filter>
  `.trim();
}
const dje = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  blur: sje,
  brightness: hje,
  contrast: fje,
  dropShadow: rje,
  grayScale: oje,
  highlight: ije,
  hueRotate: cje,
  invert: uje,
  outline: nje,
  saturate: aje,
  sepia: lje
}, Symbol.toStringTag, { value: "Module" }));
var ac;
(function(n) {
  n.presets = dje, n.registry = Ut.create({
    type: "filter"
  }), n.registry.register(n.presets, !0);
})(ac || (ac = {}));
const pje = {
  xlinkHref: "xlink:href",
  xlinkShow: "xlink:show",
  xlinkRole: "xlink:role",
  xlinkType: "xlink:type",
  xlinkArcrole: "xlink:arcrole",
  xlinkTitle: "xlink:title",
  xlinkActuate: "xlink:actuate",
  xmlSpace: "xml:space",
  xmlBase: "xml:base",
  xmlLang: "xml:lang",
  preserveAspectRatio: "preserveAspectRatio",
  requiredExtension: "requiredExtension",
  requiredFeatures: "requiredFeatures",
  systemLanguage: "systemLanguage",
  externalResourcesRequired: "externalResourceRequired"
}, gje = {
  // We do not set `ref` attribute directly on an element.
  // The attribute itself does not qualify for relative positioning.
}, Y_ = {
  position: $g("x", "width", "origin")
}, H_ = {
  position: $g("y", "height", "origin")
}, mje = {
  position: $g("x", "width", "corner")
}, bje = {
  position: $g("y", "height", "corner")
}, G_ = {
  set: Io("width", "width")
}, U_ = {
  set: Io("height", "height")
}, vje = {
  set: Io("rx", "width")
}, yje = {
  set: Io("ry", "height")
}, K_ = {
  set: ((n) => {
    const e = Io(n, "width"), t = Io(n, "height");
    return function(i, s) {
      const r = s.refBBox, o = r.height > r.width ? e : t;
      return Ee(o, this, i, s);
    };
  })("r")
}, Oje = {
  set(n, { refBBox: e }) {
    let t = parseFloat(n);
    const i = Fr(n);
    i && (t /= 100);
    const s = Math.sqrt(e.height * e.height + e.width * e.width);
    let r;
    return Number.isFinite(t) && (i || t >= 0 && t <= 1 ? r = t * s : r = Math.max(t + s, 0)), { r };
  }
}, wje = {
  set: Io("cx", "width")
}, xje = {
  set: Io("cy", "height")
}, J_ = {
  set: nM({ resetOffset: !0 })
}, Sje = {
  set: nM({ resetOffset: !1 })
}, eM = {
  set: iM({ resetOffset: !0 })
}, Cje = {
  set: iM({ resetOffset: !1 })
}, kje = K_, Pje = J_, Aje = eM, Eje = Y_, $je = H_, Tje = G_, _je = U_;
function $g(n, e, t) {
  return (i, { refBBox: s }) => {
    if (i == null)
      return null;
    let r = parseFloat(i);
    const o = Fr(i);
    o && (r /= 100);
    let l;
    if (Number.isFinite(r)) {
      const c = s[t];
      o || r > 0 && r < 1 ? l = c[n] + s[e] * r : l = c[n] + r;
    }
    const a = new I();
    return a[n] = l || 0, a;
  };
}
function Io(n, e) {
  return function(t, { refBBox: i }) {
    let s = parseFloat(t);
    const r = Fr(t);
    r && (s /= 100);
    const o = {};
    if (Number.isFinite(s)) {
      const l = r || s >= 0 && s <= 1 ? s * i[e] : Math.max(s + i[e], 0);
      o[n] = l;
    }
    return o;
  };
}
function tM(n, e) {
  const t = "x6-shape", i = e && e.resetOffset;
  return function(s, { elem: r, refBBox: o }) {
    let l = Vl(r, t);
    if (!l || l.value !== s) {
      const g = n(s);
      l = {
        value: s,
        shape: g,
        shapeBBox: g.bbox()
      }, Vl(r, t, l);
    }
    const a = l.shape.clone(), c = l.shapeBBox.clone(), u = c.getOrigin(), h = o.getOrigin();
    c.x = h.x, c.y = h.y;
    const f = o.getMaxScaleToFit(c, h), d = c.width === 0 || o.width === 0 ? 1 : f.sx, p = c.height === 0 || o.height === 0 ? 1 : f.sy;
    return a.scale(d, p, u), i && a.translate(-u.x, -u.y), a;
  };
}
function nM(n) {
  function e(i) {
    return ke.parse(i);
  }
  const t = tM(e, n);
  return (i, s) => ({
    d: t(i, s).serialize()
  });
}
function iM(n) {
  const e = tM((t) => new Yt(t), n);
  return (t, i) => ({
    points: e(t, i).serialize()
  });
}
const Mje = {
  qualify: Rs,
  set(n, { view: e }) {
    return `url(#${e.graph.defineGradient(n)})`;
  }
}, Rje = {
  qualify: Rs,
  set(n, { view: e }) {
    const t = e.cell, i = Object.assign({}, n);
    if (t.isEdge() && i.type === "linearGradient") {
      const s = e, r = s.sourcePoint, o = s.targetPoint;
      i.id = `gradient-${i.type}-${t.id}`, i.attrs = Object.assign(Object.assign({}, i.attrs), { x1: r.x, y1: r.y, x2: o.x, y2: o.y, gradientUnits: "userSpaceOnUse" }), e.graph.defs.remove(i.id);
    }
    return `url(#${e.graph.defineGradient(i)})`;
  }
}, sM = {
  qualify(n, { attrs: e }) {
    return e.textWrap == null || !Rs(e.textWrap);
  },
  set(n, { view: e, elem: t, attrs: i }) {
    const s = "x6-text", r = Vl(t, s), o = (u) => {
      try {
        return JSON.parse(u);
      } catch {
        return u;
      }
    }, l = {
      x: i.x,
      eol: i.eol,
      annotations: o(i.annotations),
      textPath: o(i["text-path"] || i.textPath),
      textVerticalAnchor: i["text-vertical-anchor"] || i.textVerticalAnchor,
      displayEmpty: (i["display-empty"] || i.displayEmpty) === "true",
      lineHeight: i["line-height"] || i.lineHeight
    }, a = i["font-size"] || i.fontSize, c = JSON.stringify([n, l]);
    if (a && t.setAttribute("font-size", a), r == null || r !== c) {
      const u = l.textPath;
      if (u != null && typeof u == "object") {
        const h = u.selector;
        if (typeof h == "string") {
          const f = e.find(h)[0];
          f instanceof SVGPathElement && (Ky(f), l.textPath = Object.assign({ "xlink:href": `#${f.id}` }, u));
        }
      }
      L_(t, `${n}`, l), Vl(t, s, c);
    }
  }
}, Dje = {
  qualify: Rs,
  set(n, { view: e, elem: t, attrs: i, refBBox: s }) {
    const r = n, o = r.width || 0;
    Fr(o) ? s.width *= parseFloat(o) / 100 : o <= 0 ? s.width += o : s.width = o;
    const l = r.height || 0;
    Fr(l) ? s.height *= parseFloat(l) / 100 : l <= 0 ? s.height += l : s.height = l;
    let a, c = r.text;
    c == null && (c = i.text || (t == null ? void 0 : t.textContent)), c != null ? a = N_(`${c}`, s, {
      "font-weight": i["font-weight"] || i.fontWeight,
      "font-size": i["font-size"] || i.fontSize,
      "font-family": i["font-family"] || i.fontFamily,
      lineHeight: i.lineHeight
    }, {
      // svgDocument: view.graph.view.svg,
      ellipsis: r.ellipsis
      // hyphen: info.hyphen as string,
      // breakWord: info.breakWord as boolean,
    }) : a = "", Ee(sM.set, this, a, {
      view: e,
      elem: t,
      attrs: i,
      refBBox: s,
      cell: e.cell
    });
  }
}, Zc = (n, { attrs: e }) => e.text !== void 0, Lje = {
  qualify: Zc
}, Nje = {
  qualify: Zc
}, Ije = {
  qualify: Zc
}, Qje = {
  qualify: Zc
}, Bje = {
  qualify: Zc
}, jje = {
  qualify: Zc
}, zje = {
  qualify(n, { elem: e }) {
    return e instanceof SVGElement;
  },
  set(n, { elem: e }) {
    const t = "x6-title", i = `${n}`, s = Vl(e, t);
    if (s == null || s !== i) {
      Vl(e, t, i);
      const r = e.firstChild;
      if (r && r.tagName.toUpperCase() === "TITLE") {
        const o = r;
        o.textContent = i;
      } else {
        const o = document.createElementNS(e.namespaceURI, "title");
        o.textContent = i, e.insertBefore(o, r);
      }
    }
  }
}, Zje = {
  offset: rM("x", "width", "right")
}, Fje = {
  offset: rM("y", "height", "bottom")
}, Vje = {
  offset(n, { refBBox: e }) {
    return n ? { x: -e.x, y: -e.y } : { x: 0, y: 0 };
  }
};
function rM(n, e, t) {
  return (i, { refBBox: s }) => {
    const r = new I();
    let o;
    return i === "middle" ? o = s[e] / 2 : i === t ? o = s[e] : typeof i == "number" && Number.isFinite(i) ? o = i > -1 && i < 1 ? -s[e] * i : -i : Fr(i) ? o = s[e] * parseFloat(i) / 100 : o = 0, r[n] = -(s[n] + o), r;
  };
}
const qje = {
  qualify: Rs,
  set(n, { elem: e }) {
    fn(e, n);
  }
}, Wje = {
  set(n, { elem: e }) {
    e.innerHTML = `${n}`;
  }
}, Xje = {
  qualify: Rs,
  set(n, { view: e }) {
    return `url(#${e.graph.defineFilter(n)})`;
  }
}, Yje = {
  set(n) {
    return n != null && typeof n == "object" && n.id ? n.id : n;
  }
};
function Ho(n, e, t) {
  let i, s;
  typeof e == "object" ? (i = e.x, s = e.y) : (i = e, s = t);
  const r = ke.parse(n), o = r.bbox();
  if (o) {
    let l = -o.height / 2 - o.y, a = -o.width / 2 - o.x;
    typeof i == "number" && (a -= i), typeof s == "number" && (l -= s), r.translate(a, l);
  }
  return r.serialize();
}
var oM = function(n, e) {
  var t = {};
  for (var i in n)
    Object.prototype.hasOwnProperty.call(n, i) && e.indexOf(i) < 0 && (t[i] = n[i]);
  if (n != null && typeof Object.getOwnPropertySymbols == "function")
    for (var s = 0, i = Object.getOwnPropertySymbols(n); s < i.length; s++)
      e.indexOf(i[s]) < 0 && Object.prototype.propertyIsEnumerable.call(n, i[s]) && (t[i[s]] = n[i[s]]);
  return t;
};
const Hje = (n) => {
  var { size: e, width: t, height: i, offset: s, open: r } = n, o = oM(n, ["size", "width", "height", "offset", "open"]);
  return lM({ size: e, width: t, height: i, offset: s }, r === !0, !0, void 0, o);
}, Gje = (n) => {
  var { size: e, width: t, height: i, offset: s, factor: r } = n, o = oM(n, ["size", "width", "height", "offset", "factor"]);
  return lM({ size: e, width: t, height: i, offset: s }, !1, !1, r, o);
};
function lM(n, e, t, i = 3 / 4, s = {}) {
  const r = n.size || 10, o = n.width || r, l = n.height || r, a = new ke(), c = {};
  if (e)
    a.moveTo(o, 0).lineTo(0, l / 2).lineTo(o, l), c.fill = "none";
  else {
    if (a.moveTo(0, l / 2), a.lineTo(o, 0), !t) {
      const u = di(i, 0, 1);
      a.lineTo(o * u, l / 2);
    }
    a.lineTo(o, l), a.close();
  }
  return Object.assign(Object.assign(Object.assign({}, c), s), { tagName: "path", d: Ho(a.serialize(), {
    x: n.offset != null ? n.offset : -o / 2
  }) });
}
var Uje = function(n, e) {
  var t = {};
  for (var i in n)
    Object.prototype.hasOwnProperty.call(n, i) && e.indexOf(i) < 0 && (t[i] = n[i]);
  if (n != null && typeof Object.getOwnPropertySymbols == "function")
    for (var s = 0, i = Object.getOwnPropertySymbols(n); s < i.length; s++)
      e.indexOf(i[s]) < 0 && Object.prototype.propertyIsEnumerable.call(n, i[s]) && (t[i[s]] = n[i[s]]);
  return t;
};
const Kje = (n) => {
  var { size: e, width: t, height: i, offset: s } = n, r = Uje(n, ["size", "width", "height", "offset"]);
  const o = e || 10, l = t || o, a = i || o, c = new ke();
  return c.moveTo(0, a / 2).lineTo(l / 2, 0).lineTo(l, a / 2).lineTo(l / 2, a).close(), Object.assign(Object.assign({}, r), { tagName: "path", d: Ho(c.serialize(), s ?? -l / 2) });
};
var Jje = function(n, e) {
  var t = {};
  for (var i in n)
    Object.prototype.hasOwnProperty.call(n, i) && e.indexOf(i) < 0 && (t[i] = n[i]);
  if (n != null && typeof Object.getOwnPropertySymbols == "function")
    for (var s = 0, i = Object.getOwnPropertySymbols(n); s < i.length; s++)
      e.indexOf(i[s]) < 0 && Object.prototype.propertyIsEnumerable.call(n, i[s]) && (t[i[s]] = n[i[s]]);
  return t;
};
const eze = (n) => {
  var { d: e, offsetX: t, offsetY: i } = n, s = Jje(n, ["d", "offsetX", "offsetY"]);
  return Object.assign(Object.assign({}, s), { tagName: "path", d: Ho(e, t, i) });
};
var tze = function(n, e) {
  var t = {};
  for (var i in n)
    Object.prototype.hasOwnProperty.call(n, i) && e.indexOf(i) < 0 && (t[i] = n[i]);
  if (n != null && typeof Object.getOwnPropertySymbols == "function")
    for (var s = 0, i = Object.getOwnPropertySymbols(n); s < i.length; s++)
      e.indexOf(i[s]) < 0 && Object.prototype.propertyIsEnumerable.call(n, i[s]) && (t[i[s]] = n[i[s]]);
  return t;
};
const nze = (n) => {
  var { size: e, width: t, height: i, offset: s } = n, r = tze(n, ["size", "width", "height", "offset"]);
  const o = e || 10, l = t || o, a = i || o, c = new ke();
  return c.moveTo(0, 0).lineTo(l, a).moveTo(0, a).lineTo(l, 0), Object.assign(Object.assign({}, r), { tagName: "path", fill: "none", d: Ho(c.serialize(), s || -l / 2) });
};
var ize = function(n, e) {
  var t = {};
  for (var i in n)
    Object.prototype.hasOwnProperty.call(n, i) && e.indexOf(i) < 0 && (t[i] = n[i]);
  if (n != null && typeof Object.getOwnPropertySymbols == "function")
    for (var s = 0, i = Object.getOwnPropertySymbols(n); s < i.length; s++)
      e.indexOf(i[s]) < 0 && Object.prototype.propertyIsEnumerable.call(n, i[s]) && (t[i[s]] = n[i[s]]);
  return t;
};
const sze = (n) => {
  var { width: e, height: t, offset: i, open: s, flip: r } = n, o = ize(n, ["width", "height", "offset", "open", "flip"]);
  let l = t || 6;
  const a = e || 10, c = s === !0, u = r === !0, h = Object.assign(Object.assign({}, o), { tagName: "path" });
  u && (l = -l);
  const f = new ke();
  return f.moveTo(0, l).lineTo(a, 0), c ? h.fill = "none" : (f.lineTo(a, l), f.close()), h.d = Ho(f.serialize(), {
    x: i || -a / 2,
    y: l / 2
  }), h;
};
var aM = function(n, e) {
  var t = {};
  for (var i in n)
    Object.prototype.hasOwnProperty.call(n, i) && e.indexOf(i) < 0 && (t[i] = n[i]);
  if (n != null && typeof Object.getOwnPropertySymbols == "function")
    for (var s = 0, i = Object.getOwnPropertySymbols(n); s < i.length; s++)
      e.indexOf(i[s]) < 0 && Object.prototype.propertyIsEnumerable.call(n, i[s]) && (t[i[s]] = n[i[s]]);
  return t;
};
const cM = (n) => {
  var { r: e } = n, t = aM(n, ["r"]);
  const i = e || 5;
  return Object.assign(Object.assign({ cx: i }, t), { tagName: "circle", r: i });
}, rze = (n) => {
  var { r: e } = n, t = aM(n, ["r"]);
  const i = e || 5, s = new ke();
  return s.moveTo(i, 0).lineTo(i, i * 2), s.moveTo(0, i).lineTo(i * 2, i), {
    children: [
      Object.assign(Object.assign({}, cM({ r: i })), { fill: "none" }),
      Object.assign(Object.assign({}, t), { tagName: "path", d: Ho(s.serialize(), -i) })
    ]
  };
};
var oze = function(n, e) {
  var t = {};
  for (var i in n)
    Object.prototype.hasOwnProperty.call(n, i) && e.indexOf(i) < 0 && (t[i] = n[i]);
  if (n != null && typeof Object.getOwnPropertySymbols == "function")
    for (var s = 0, i = Object.getOwnPropertySymbols(n); s < i.length; s++)
      e.indexOf(i[s]) < 0 && Object.prototype.propertyIsEnumerable.call(n, i[s]) && (t[i[s]] = n[i[s]]);
  return t;
};
const lze = (n) => {
  var { rx: e, ry: t } = n, i = oze(n, ["rx", "ry"]);
  const s = e || 5, r = t || 5;
  return Object.assign(Object.assign({ cx: s }, i), { tagName: "ellipse", rx: s, ry: r });
}, aze = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  async: sze,
  block: Hje,
  circle: cM,
  circlePlus: rze,
  classic: Gje,
  cross: nze,
  diamond: Kje,
  ellipse: lze,
  path: eze
}, Symbol.toStringTag, { value: "Module" }));
var Qo;
(function(n) {
  n.presets = aze, n.registry = Ut.create({
    type: "marker"
  }), n.registry.register(n.presets, !0);
})(Qo || (Qo = {}));
(function(n) {
  n.normalize = Ho;
})(Qo || (Qo = {}));
var cze = function(n, e) {
  var t = {};
  for (var i in n)
    Object.prototype.hasOwnProperty.call(n, i) && e.indexOf(i) < 0 && (t[i] = n[i]);
  if (n != null && typeof Object.getOwnPropertySymbols == "function")
    for (var s = 0, i = Object.getOwnPropertySymbols(n); s < i.length; s++)
      e.indexOf(i[s]) < 0 && Object.prototype.propertyIsEnumerable.call(n, i[s]) && (t[i[s]] = n[i[s]]);
  return t;
};
function rO(n) {
  return typeof n == "string" || Rs(n);
}
const uze = {
  qualify: rO,
  set(n, { view: e, attrs: t }) {
    return oO("marker-start", n, e, t);
  }
}, hze = {
  qualify: rO,
  set(n, { view: e, attrs: t }) {
    return oO("marker-end", n, e, t, {
      transform: "rotate(180)"
    });
  }
}, fze = {
  qualify: rO,
  set(n, { view: e, attrs: t }) {
    return oO("marker-mid", n, e, t);
  }
};
function oO(n, e, t, i, s = {}) {
  const r = typeof e == "string" ? { name: e } : e, { name: o, args: l } = r, a = cze(r, ["name", "args"]);
  let c = a;
  if (o && typeof o == "string") {
    const h = Qo.registry.get(o);
    if (h)
      c = h(Object.assign(Object.assign({}, a), l));
    else
      return Qo.registry.onNotFound(o);
  }
  const u = Object.assign(Object.assign(Object.assign({}, dze(i, n)), s), c);
  return {
    [n]: `url(#${t.graph.defineMarker(u)})`
  };
}
function dze(n, e) {
  const t = {}, i = n.stroke;
  typeof i == "string" && (t.stroke = i, t.fill = i);
  let s = n.strokeOpacity;
  if (s == null && (s = n["stroke-opacity"]), s == null && (s = n.opacity), s != null && (t["stroke-opacity"] = s, t["fill-opacity"] = s), e !== "marker-mid") {
    const r = parseFloat(n.strokeWidth || n["stroke-width"]);
    if (Number.isFinite(r) && r > 1) {
      const o = Math.ceil(r / 2);
      t.refX = e === "marker-start" ? o : -o;
    }
  }
  return t;
}
const sf = (n, { view: e }) => e.cell.isEdge(), pze = {
  qualify: sf,
  set(n, e) {
    var t, i, s, r;
    const o = e.view, l = n.reverse || !1, a = n.stubs || 0;
    let c;
    if (Number.isFinite(a) && a !== 0)
      if (l) {
        let u, h;
        const f = o.getConnectionLength() || 0;
        a < 0 ? (u = (f + a) / 2, h = -a) : (u = a, h = f - a * 2);
        const d = o.getConnection();
        c = (r = (s = (i = (t = d == null ? void 0 : d.divideAtLength(u)) === null || t === void 0 ? void 0 : t[1]) === null || i === void 0 ? void 0 : i.divideAtLength(h)) === null || s === void 0 ? void 0 : s[0]) === null || r === void 0 ? void 0 : r.serialize();
      } else {
        let u;
        a < 0 ? u = ((o.getConnectionLength() || 0) + a) / 2 : u = a;
        const h = o.getConnection();
        if (h) {
          const f = h.divideAtLength(u), d = h.divideAtLength(-u);
          f && d && (c = `${f[0].serialize()} ${d[1].serialize()}`);
        }
      }
    return { d: c || o.getConnectionPathData() };
  }
}, uM = {
  qualify: sf,
  set: Tg("getTangentAtLength", { rotate: !0 })
}, gze = {
  qualify: sf,
  set: Tg("getTangentAtLength", { rotate: !1 })
}, hM = {
  qualify: sf,
  set: Tg("getTangentAtRatio", { rotate: !0 })
}, mze = {
  qualify: sf,
  set: Tg("getTangentAtRatio", { rotate: !1 })
}, bze = uM, vze = hM;
function Tg(n, e) {
  const t = { x: 1, y: 0 };
  return (i, s) => {
    let r, o;
    const l = s.view, a = l[n](Number(i));
    return a ? (o = e.rotate ? a.vector().vectorAngle(t) : 0, r = a.start) : (r = l.path.start, o = 0), o === 0 ? { transform: `translate(${r.x},${r.y}')` } : {
      transform: `translate(${r.x},${r.y}') rotate(${o})`
    };
  };
}
const yze = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  annotations: Qje,
  atConnectionLength: bze,
  atConnectionLengthIgnoreGradient: gze,
  atConnectionLengthKeepGradient: uM,
  atConnectionRatio: vze,
  atConnectionRatioIgnoreGradient: mze,
  atConnectionRatioKeepGradient: hM,
  connection: pze,
  displayEmpty: jje,
  eol: Bje,
  fill: Mje,
  filter: Xje,
  html: Wje,
  lineHeight: Lje,
  port: Yje,
  ref: gje,
  refCx: wje,
  refCy: xje,
  refD: Pje,
  refDKeepOffset: Sje,
  refDResetOffset: J_,
  refDx: mje,
  refDy: bje,
  refHeight: U_,
  refHeight2: _je,
  refPoints: Aje,
  refPointsKeepOffset: Cje,
  refPointsResetOffset: eM,
  refR: kje,
  refRCircumscribed: Oje,
  refRInscribed: K_,
  refRx: vje,
  refRy: yje,
  refWidth: G_,
  refWidth2: Tje,
  refX: Y_,
  refX2: Eje,
  refY: H_,
  refY2: $je,
  resetOffset: Vje,
  sourceMarker: uze,
  stroke: Rje,
  style: qje,
  targetMarker: hze,
  text: sM,
  textPath: Ije,
  textVerticalAnchor: Nje,
  textWrap: Dje,
  title: zje,
  vertexMarker: fze,
  xAlign: Zje,
  yAlign: Fje
}, Symbol.toStringTag, { value: "Module" }));
var gr;
(function(n) {
  function e(t, i, s) {
    return !!(t != null && (typeof t == "string" || typeof t.qualify != "function" || Ee(t.qualify, this, i, s)));
  }
  n.isValidDefinition = e;
})(gr || (gr = {}));
(function(n) {
  n.presets = Object.assign(Object.assign({}, pje), yze), n.registry = Ut.create({
    type: "attribute definition"
  }), n.registry.register(n.presets, !0);
})(gr || (gr = {}));
const rs = {
  prefixCls: "x6",
  autoInsertCSS: !0,
  useCSSSelector: !0,
  prefix(n) {
    return `${rs.prefixCls}-${n}`;
  }
}, CC = rs.prefix("highlighted"), Oze = {
  highlight(n, e, t) {
    const i = t && t.className || CC;
    Me(e, i);
  },
  unhighlight(n, e, t) {
    const i = t && t.className || CC;
    nn(e, i);
  }
}, kC = rs.prefix("highlight-opacity"), wze = {
  highlight(n, e) {
    Me(e, kC);
  },
  unhighlight(n, e) {
    nn(e, kC);
  }
};
var yt;
(function(n) {
  n.normalizeMarker = Ho;
  function e(f, d) {
    const p = EBe(f.x, f.y).matrixTransform(d);
    return new I(p.x, p.y);
  }
  n.transformPoint = e;
  function t(f, d) {
    return new me(e(f.start, d), e(f.end, d));
  }
  n.transformLine = t;
  function i(f, d) {
    let p = f instanceof Yt ? f.points : f;
    return Array.isArray(p) || (p = []), new Yt(p.map((g) => e(g, d)));
  }
  n.transformPolyline = i;
  function s(f, d) {
    const g = Bs("svg").createSVGPoint();
    g.x = f.x, g.y = f.y;
    const m = g.matrixTransform(d);
    g.x = f.x + f.width, g.y = f.y;
    const b = g.matrixTransform(d);
    g.x = f.x + f.width, g.y = f.y + f.height;
    const y = g.matrixTransform(d);
    g.x = f.x, g.y = f.y + f.height;
    const v = g.matrixTransform(d), O = Math.min(m.x, b.x, y.x, v.x), x = Math.max(m.x, b.x, y.x, v.x), S = Math.min(m.y, b.y, y.y, v.y), C = Math.max(m.y, b.y, y.y, v.y);
    return new ue(O, S, x - O, C - S);
  }
  n.transformRectangle = s;
  function r(f, d, p) {
    let g;
    const m = f.ownerSVGElement;
    if (!m)
      return new ue(0, 0, 0, 0);
    try {
      g = f.getBBox();
    } catch {
      g = {
        x: f.clientLeft,
        y: f.clientTop,
        width: f.clientWidth,
        height: f.clientHeight
      };
    }
    if (d)
      return ue.create(g);
    const b = Mu(f, p || m);
    return s(g, b);
  }
  n.bbox = r;
  function o(f, d = {}) {
    let p;
    if (!f.ownerSVGElement || !Lo(f)) {
      if (gC(f)) {
        const { left: y, top: v, width: O, height: x } = l(f);
        return new ue(y, v, O, x);
      }
      return new ue(0, 0, 0, 0);
    }
    let m = d.target;
    if (!d.recursive) {
      try {
        p = f.getBBox();
      } catch {
        p = {
          x: f.clientLeft,
          y: f.clientTop,
          width: f.clientWidth,
          height: f.clientHeight
        };
      }
      if (!m)
        return ue.create(p);
      const y = Mu(f, m);
      return s(p, y);
    }
    {
      const y = f.childNodes, v = y.length;
      if (v === 0)
        return o(f, {
          target: m
        });
      m || (m = f);
      for (let O = 0; O < v; O += 1) {
        const x = y[O];
        let S;
        x.childNodes.length === 0 ? S = o(x, {
          target: m
        }) : S = o(x, {
          target: m,
          recursive: !0
        }), p ? p = p.union(S) : p = S;
      }
      return p;
    }
  }
  n.getBBox = o;
  function l(f) {
    let d = 0, p = 0, g = 0, m = 0;
    if (f) {
      let b = f;
      for (; b; )
        d += b.offsetLeft, p += b.offsetTop, b = b.offsetParent, b && (d += parseInt(yC(b, "borderLeft"), 10), p += parseInt(yC(b, "borderTop"), 10));
      g = f.offsetWidth, m = f.offsetHeight;
    }
    return {
      left: d,
      top: p,
      width: g,
      height: m
    };
  }
  n.getBoundingOffsetRect = l;
  function a(f) {
    const d = (p) => {
      const g = f.getAttribute(p), m = g ? parseFloat(g) : 0;
      return Number.isNaN(m) ? 0 : m;
    };
    switch (f instanceof SVGElement && f.nodeName.toLowerCase()) {
      case "rect":
        return new ue(d("x"), d("y"), d("width"), d("height"));
      case "circle":
        return new _s(d("cx"), d("cy"), d("r"), d("r"));
      case "ellipse":
        return new _s(d("cx"), d("cy"), d("rx"), d("ry"));
      case "polyline": {
        const p = bp(f);
        return new Yt(p);
      }
      case "polygon": {
        const p = bp(f);
        return p.length > 1 && p.push(p[0]), new Yt(p);
      }
      case "path": {
        let p = f.getAttribute("d");
        return ke.isValid(p) || (p = ke.normalize(p)), ke.parse(p);
      }
      case "line":
        return new me(d("x1"), d("y1"), d("x2"), d("y2"));
    }
    return o(f);
  }
  n.toGeometryShape = a;
  function c(f, d, p, g) {
    const m = I.create(d), b = I.create(p);
    g || (g = f instanceof SVGSVGElement ? f : f.ownerSVGElement);
    const y = Hb(f);
    f.setAttribute("transform", "");
    const v = o(f, {
      target: g
    }).scale(y.sx, y.sy), O = hu();
    O.setTranslate(-v.x - v.width / 2, -v.y - v.height / 2);
    const x = hu(), S = m.angleBetween(b, m.clone().translate(1, 0));
    S && x.setRotate(S, 0, 0);
    const C = hu(), k = m.clone().move(b, v.width / 2);
    C.setTranslate(2 * m.x - k.x, 2 * m.y - k.y);
    const E = Mu(f, g), $ = hu();
    $.setMatrix(C.matrix.multiply(x.matrix.multiply(O.matrix.multiply(E.scale(y.sx, y.sy))))), f.setAttribute("transform", zc($.matrix));
  }
  n.translateAndAutoOrient = c;
  function u(f) {
    if (f == null)
      return null;
    let d = f;
    do {
      let p = d.tagName;
      if (typeof p != "string")
        return null;
      if (p = p.toUpperCase(), jc(d, "x6-port"))
        d = d.nextElementSibling;
      else if (p === "G")
        d = d.firstElementChild;
      else if (p === "TITLE")
        d = d.nextElementSibling;
      else
        break;
    } while (d);
    return d;
  }
  n.findShapeNode = u;
  function h(f) {
    const d = u(f);
    if (!Lo(d)) {
      if (gC(f)) {
        const { left: m, top: b, width: y, height: v } = l(f);
        return new ue(m, b, y, v);
      }
      return new ue(0, 0, 0, 0);
    }
    return a(d).bbox() || ue.create();
  }
  n.getBBoxV2 = h;
})(yt || (yt = {}));
const xze = {
  padding: 3,
  rx: 0,
  ry: 0,
  attrs: {
    "stroke-width": 3,
    stroke: "#FEB663"
  }
}, Sze = {
  highlight(n, e, t) {
    const i = ho.getHighlighterId(e, t);
    if (ho.hasCache(i))
      return;
    t = Yk({}, t, xze);
    const s = Ie.create(e);
    let r, o;
    try {
      r = s.toPathData();
    } catch {
      o = yt.bbox(s.node, !0), r = Q_(Object.assign(Object.assign({}, t), o));
    }
    const l = Bs("path");
    if (nt(l, Object.assign({ d: r, "pointer-events": "none", "vector-effect": "non-scaling-stroke", fill: "none" }, t.attrs ? ph(t.attrs) : null)), n.isEdgeElement(e))
      nt(l, "d", n.getConnectionPathData());
    else {
      let u = s.getTransformToElement(n.container);
      const h = t.padding;
      if (h) {
        o == null && (o = yt.bbox(s.node, !0));
        const f = o.x + o.width / 2, d = o.y + o.height / 2;
        o = yt.transformRectangle(o, u);
        const p = Math.max(o.width, 1), g = Math.max(o.height, 1), m = (p + h) / p, b = (g + h) / g, y = kn({
          a: m,
          b: 0,
          c: 0,
          d: b,
          e: f - m * f,
          f: d - b * d
        });
        u = u.multiply(y);
      }
      rc(l, u);
    }
    Me(l, rs.prefix("highlight-stroke"));
    const a = n.cell, c = () => ho.removeHighlighter(i);
    a.on("removed", c), a.model && a.model.on("reseted", c), n.container.appendChild(l), ho.setCache(i, l);
  },
  unhighlight(n, e, t) {
    ho.removeHighlighter(ho.getHighlighterId(e, t));
  }
};
var ho;
(function(n) {
  function e(o, l) {
    return Ky(o), o.id + JSON.stringify(l);
  }
  n.getHighlighterId = e;
  const t = {};
  function i(o, l) {
    t[o] = l;
  }
  n.setCache = i;
  function s(o) {
    return t[o] != null;
  }
  n.hasCache = s;
  function r(o) {
    const l = t[o];
    l && (ar(l), delete t[o]);
  }
  n.removeHighlighter = r;
})(ho || (ho = {}));
const Cze = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  className: Oze,
  opacity: wze,
  stroke: Sze
}, Symbol.toStringTag, { value: "Module" }));
var Nr;
(function(n) {
  function e(t, i) {
    if (typeof i.highlight != "function")
      throw new Error(`Highlighter '${t}' is missing required \`highlight()\` method`);
    if (typeof i.unhighlight != "function")
      throw new Error(`Highlighter '${t}' is missing required \`unhighlight()\` method`);
  }
  n.check = e;
})(Nr || (Nr = {}));
(function(n) {
  n.presets = Cze, n.registry = Ut.create({
    type: "highlighter"
  }), n.registry.register(n.presets, !0);
})(Nr || (Nr = {}));
function Jb(n, e = {}) {
  return new I(ks(e.x, n.width), ks(e.y, n.height));
}
function lO(n, e, t) {
  return Object.assign({ angle: e, position: n.toJSON() }, t);
}
const kze = (n, e) => n.map(({ x: t, y: i, angle: s }) => lO(Jb(e, { x: t, y: i }), s || 0)), Pze = (n, e, t) => {
  const i = t.start || 0, s = t.step || 20;
  return fM(n, e, i, (r, o) => (r + 0.5 - o / 2) * s);
}, Aze = (n, e, t) => {
  const i = t.start || 0, s = t.step || 360 / n.length;
  return fM(n, e, i, (r) => r * s);
};
function fM(n, e, t, i) {
  const s = e.getCenter(), r = e.getTopCenter(), o = e.width / e.height, l = _s.fromRect(e), a = n.length;
  return n.map((c, u) => {
    const h = t + i(u, a), f = r.clone().rotate(-h, s).scale(o, 1, s), d = c.compensateRotate ? -l.tangentTheta(f) : 0;
    return (c.dx || c.dy) && f.translate(c.dx || 0, c.dy || 0), c.dr && f.move(s, c.dr), lO(f.round(), d, c);
  });
}
var Eze = function(n, e) {
  var t = {};
  for (var i in n)
    Object.prototype.hasOwnProperty.call(n, i) && e.indexOf(i) < 0 && (t[i] = n[i]);
  if (n != null && typeof Object.getOwnPropertySymbols == "function")
    for (var s = 0, i = Object.getOwnPropertySymbols(n); s < i.length; s++)
      e.indexOf(i[s]) < 0 && Object.prototype.propertyIsEnumerable.call(n, i[s]) && (t[i[s]] = n[i[s]]);
  return t;
};
const $ze = (n, e, t) => {
  const i = Jb(e, t.start || e.getOrigin()), s = Jb(e, t.end || e.getCorner());
  return rf(n, i, s, t);
}, Tze = (n, e, t) => rf(n, e.getTopLeft(), e.getBottomLeft(), t), _ze = (n, e, t) => rf(n, e.getTopRight(), e.getBottomRight(), t), Mze = (n, e, t) => rf(n, e.getTopLeft(), e.getTopRight(), t), Rze = (n, e, t) => rf(n, e.getBottomLeft(), e.getBottomRight(), t);
function rf(n, e, t, i) {
  const s = new me(e, t), r = n.length;
  return n.map((o, l) => {
    var { strict: a } = o, c = Eze(o, ["strict"]);
    const u = a || i.strict ? (l + 1) / (r + 1) : (l + 0.5) / r, h = s.pointAt(u);
    return (c.dx || c.dy) && h.translate(c.dx || 0, c.dy || 0), lO(h.round(), 0, c);
  });
}
const Dze = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  absolute: kze,
  bottom: Rze,
  ellipse: Pze,
  ellipseSpread: Aze,
  left: Tze,
  line: $ze,
  right: _ze,
  top: Mze
}, Symbol.toStringTag, { value: "Module" }));
var El;
(function(n) {
  n.presets = Dze, n.registry = Ut.create({
    type: "port layout"
  }), n.registry.register(n.presets, !0);
})(El || (El = {}));
const Lze = {
  position: { x: 0, y: 0 },
  angle: 0,
  attrs: {
    ".": {
      y: "0",
      "text-anchor": "start"
    }
  }
};
function Go(n, e) {
  const { x: t, y: i, angle: s, attrs: r } = e || {};
  return Yk({}, { angle: s, attrs: r, position: { x: t, y: i } }, n, Lze);
}
const Nze = (n, e, t) => Go({ position: e.getTopLeft() }, t), Ize = (n, e, t) => Go({
  position: { x: -15, y: 0 },
  attrs: { ".": { y: ".3em", "text-anchor": "end" } }
}, t), Qze = (n, e, t) => Go({
  position: { x: 15, y: 0 },
  attrs: { ".": { y: ".3em", "text-anchor": "start" } }
}, t), Bze = (n, e, t) => Go({
  position: { x: 0, y: -15 },
  attrs: { ".": { "text-anchor": "middle" } }
}, t), jze = (n, e, t) => Go({
  position: { x: 0, y: 15 },
  attrs: { ".": { y: ".6em", "text-anchor": "middle" } }
}, t), zze = (n, e, t) => dM(n, e, !1, t), Zze = (n, e, t) => dM(n, e, !0, t), Fze = (n, e, t) => pM(n, e, !1, t), Vze = (n, e, t) => pM(n, e, !0, t);
function dM(n, e, t, i) {
  const s = i.offset != null ? i.offset : 15, r = e.getCenter().theta(n), o = gM(e);
  let l, a, c, u, h = 0;
  return r < o[1] || r > o[2] ? (l = ".3em", a = s, c = 0, u = "start") : r < o[0] ? (l = "0", a = 0, c = -s, t ? (h = -90, u = "start") : u = "middle") : r < o[3] ? (l = ".3em", a = -s, c = 0, u = "end") : (l = ".6em", a = 0, c = s, t ? (h = 90, u = "start") : u = "middle"), Go({
    position: {
      x: Math.round(a),
      y: Math.round(c)
    },
    angle: h,
    attrs: {
      ".": {
        y: l,
        "text-anchor": u
      }
    }
  }, i);
}
function pM(n, e, t, i) {
  const s = i.offset != null ? i.offset : 15, r = e.getCenter().theta(n), o = gM(e);
  let l, a, c, u, h = 0;
  return r < o[1] || r > o[2] ? (l = ".3em", a = -s, c = 0, u = "end") : r < o[0] ? (l = ".6em", a = 0, c = s, t ? (h = 90, u = "start") : u = "middle") : r < o[3] ? (l = ".3em", a = s, c = 0, u = "start") : (l = "0em", a = 0, c = -s, t ? (h = -90, u = "start") : u = "middle"), Go({
    position: {
      x: Math.round(a),
      y: Math.round(c)
    },
    angle: h,
    attrs: {
      ".": {
        y: l,
        "text-anchor": u
      }
    }
  }, i);
}
function gM(n) {
  const e = n.getCenter(), t = e.theta(n.getTopLeft()), i = e.theta(n.getBottomLeft()), s = e.theta(n.getBottomRight()), r = e.theta(n.getTopRight());
  return [t, r, s, i];
}
const qze = (n, e, t) => mM(n.diff(e.getCenter()), !1, t), Wze = (n, e, t) => mM(n.diff(e.getCenter()), !0, t);
function mM(n, e, t) {
  const i = t.offset != null ? t.offset : 20, s = new I(0, 0), r = -n.theta(s), o = n.clone().move(s, i).diff(n).round();
  let l = ".3em", a, c = r;
  return (r + 90) % 180 === 0 ? (a = e ? "end" : "middle", !e && r === -270 && (l = "0em")) : r > -270 && r < -90 ? (a = "start", c = r - 180) : a = "end", Go({
    position: o.round().toJSON(),
    angle: e ? c : 0,
    attrs: {
      ".": {
        y: l,
        "text-anchor": a
      }
    }
  }, t);
}
const Xze = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  bottom: jze,
  inside: Fze,
  insideOriented: Vze,
  left: Ize,
  manual: Nze,
  outside: zze,
  outsideOriented: Zze,
  radial: qze,
  radialOriented: Wze,
  right: Qze,
  top: Bze
}, Symbol.toStringTag, { value: "Module" }));
var cc;
(function(n) {
  n.presets = Xze, n.registry = Ut.create({
    type: "port label layout"
  }), n.registry.register(n.presets, !0);
})(cc || (cc = {}));
var Yze = function(n, e, t, i) {
  var s = arguments.length, r = s < 3 ? e : i === null ? i = Object.getOwnPropertyDescriptor(e, t) : i, o;
  if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
    r = Reflect.decorate(n, e, t, i);
  else
    for (var l = n.length - 1; l >= 0; l--)
      (o = n[l]) && (r = (s < 3 ? o(r) : s > 3 ? o(e, t, r) : o(e, t)) || r);
  return s > 3 && r && Object.defineProperty(e, t, r), r;
};
class dt extends Qt {
  get priority() {
    return 2;
  }
  /** If need remove `this.container` DOM */
  get disposeContainer() {
    return !0;
  }
  constructor() {
    super(), this.cid = ev.uniqueId(), dt.views[this.cid] = this;
  }
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  confirmUpdate(e, t) {
    return 0;
  }
  empty(e = this.container) {
    return nf(e), this;
  }
  unmount(e = this.container) {
    return ar(e), this;
  }
  remove(e = this.container) {
    return e === this.container ? (this.removeEventListeners(document), this.onRemove(), delete dt.views[this.cid], this.disposeContainer && this.unmount(e)) : this.unmount(e), this;
  }
  onRemove() {
  }
  setClass(e, t = this.container) {
    t.classList.value = Array.isArray(e) ? e.join(" ") : e;
  }
  addClass(e, t = this.container) {
    return Me(t, Array.isArray(e) ? e.join(" ") : e), this;
  }
  removeClass(e, t = this.container) {
    return nn(t, Array.isArray(e) ? e.join(" ") : e), this;
  }
  setStyle(e, t = this.container) {
    return fn(t, e), this;
  }
  setAttrs(e, t = this.container) {
    return e != null && t != null && nt(t, e), this;
  }
  /**
   * Returns the value of the specified attribute of `node`.
   *
   * If the node does not set a value for attribute, start recursing up
   * the DOM tree from node to lookup for attribute at the ancestors of
   * node. If the recursion reaches CellView's root node and attribute
   * is not found even there, return `null`.
   */
  findAttr(e, t = this.container) {
    let i = t;
    for (; i && i.nodeType === 1; ) {
      const s = i.getAttribute(e);
      if (s != null)
        return s;
      if (i === this.container)
        return null;
      i = i.parentNode;
    }
    return null;
  }
  find(e, t = this.container, i = this.selectors) {
    return dt.find(e, t, i).elems;
  }
  findOne(e, t = this.container, i = this.selectors) {
    const s = this.find(e, t, i);
    return s.length > 0 ? s[0] : null;
  }
  findByAttr(e, t = this.container) {
    let i = t;
    for (; i && i.getAttribute; ) {
      const s = i.getAttribute(e);
      if ((s != null || i === this.container) && s !== "false")
        return i;
      i = i.parentNode;
    }
    return null;
  }
  getSelector(e, t) {
    let i;
    if (e === this.container)
      return typeof t == "string" && (i = `> ${t}`), i;
    if (e) {
      const s = eO(e) + 1;
      i = `${e.tagName.toLowerCase()}:nth-child(${s})`, t && (i += ` > ${t}`), i = this.getSelector(e.parentNode, i);
    }
    return i;
  }
  prefixClassName(e) {
    return rs.prefix(e);
  }
  delegateEvents(e, t) {
    if (e == null)
      return this;
    t || this.undelegateEvents();
    const i = /^(\S+)\s*(.*)$/;
    return Object.keys(e).forEach((s) => {
      const r = s.match(i);
      if (r == null)
        return;
      const o = this.getEventHandler(e[s]);
      typeof o == "function" && this.delegateEvent(r[1], r[2], o);
    }), this;
  }
  undelegateEvents() {
    return _n.off(this.container, this.getEventNamespace()), this;
  }
  delegateDocumentEvents(e, t) {
    return this.addEventListeners(document, e, t), this;
  }
  undelegateDocumentEvents() {
    return this.removeEventListeners(document), this;
  }
  delegateEvent(e, t, i) {
    return _n.on(this.container, e + this.getEventNamespace(), t, i), this;
  }
  undelegateEvent(e, t, i) {
    const s = e + this.getEventNamespace();
    return t == null ? _n.off(this.container, s) : typeof t == "string" ? _n.off(this.container, s, t, i) : _n.off(this.container, s, t), this;
  }
  addEventListeners(e, t, i) {
    if (t == null)
      return this;
    const s = this.getEventNamespace();
    return Object.keys(t).forEach((r) => {
      const o = this.getEventHandler(t[r]);
      typeof o == "function" && _n.on(e, r + s, i, o);
    }), this;
  }
  removeEventListeners(e) {
    return e != null && _n.off(e, this.getEventNamespace()), this;
  }
  getEventNamespace() {
    return `.${rs.prefixCls}-event-${this.cid}`;
  }
  // eslint-disable-next-line
  getEventHandler(e) {
    let t;
    if (typeof e == "string") {
      const i = this[e];
      typeof i == "function" && (t = (...s) => i.call(this, ...s));
    } else
      t = (...i) => e.call(this, ...i);
    return t;
  }
  getEventTarget(e, t = {}) {
    const { target: i, type: s, clientX: r = 0, clientY: o = 0 } = e;
    return t.fromPoint || s === "touchmove" || s === "touchend" ? document.elementFromPoint(r, o) : i;
  }
  stopPropagation(e) {
    return this.setEventData(e, { propagationStopped: !0 }), this;
  }
  isPropagationStopped(e) {
    return this.getEventData(e).propagationStopped === !0;
  }
  getEventData(e) {
    return this.eventData(e);
  }
  setEventData(e, t) {
    return this.eventData(e, t);
  }
  eventData(e, t) {
    if (e == null)
      throw new TypeError("Event object required");
    let i = e.data;
    const s = `__${this.cid}__`;
    return t == null ? i == null ? {} : i[s] || {} : (i == null && (i = e.data = {}), i[s] == null ? i[s] = Object.assign({}, t) : i[s] = Object.assign(Object.assign({}, i[s]), t), i[s]);
  }
  normalizeEvent(e) {
    return dt.normalizeEvent(e);
  }
  dispose() {
    this.remove();
  }
}
Yze([
  dt.dispose()
], dt.prototype, "dispose", null);
(function(n) {
  function e(s, r) {
    return r ? Bs(s || "g") : Jy(s || "div");
  }
  n.createElement = e;
  function t(s, r, o) {
    if (!s || s === ".")
      return { elems: [r] };
    if (o) {
      const l = o[s];
      if (l)
        return { elems: Array.isArray(l) ? l : [l] };
    }
    {
      const l = s.includes(">") ? `:scope ${s}` : s;
      return {
        isCSSSelector: !0,
        // $(rootElem).find(selector).toArray() as Element[]
        elems: Array.prototype.slice.call(r.querySelectorAll(l))
      };
    }
  }
  n.find = t;
  function i(s) {
    let r = s;
    const o = s.originalEvent, l = o && o.changedTouches && o.changedTouches[0];
    if (l) {
      for (const a in s)
        l[a] === void 0 && (l[a] = s[a]);
      r = l;
    }
    return r;
  }
  n.normalizeEvent = i;
})(dt || (dt = {}));
(function(n) {
  n.views = {};
  function e(t) {
    return n.views[t] || null;
  }
  n.getView = e;
})(dt || (dt = {}));
var ev;
(function(n) {
  let e = 0;
  function t() {
    const i = `v${e}`;
    return e += 1, i;
  }
  n.uniqueId = t;
})(ev || (ev = {}));
class Hze {
  constructor(e) {
    this.view = e, this.clean();
  }
  clean() {
    this.elemCache && this.elemCache.dispose(), this.elemCache = new Kb(), this.pathCache = {};
  }
  get(e) {
    return this.elemCache.has(e) || this.elemCache.set(e, {}), this.elemCache.get(e);
  }
  getData(e) {
    const t = this.get(e);
    return t.data || (t.data = {}), t.data;
  }
  getMatrix(e) {
    const t = this.get(e);
    if (t.matrix == null) {
      const i = this.view.container;
      t.matrix = RBe(e, i);
    }
    return kn(t.matrix);
  }
  getShape(e) {
    const t = this.get(e);
    return t.shape == null && (t.shape = yt.toGeometryShape(e)), t.shape.clone();
  }
  getBoundingRect(e) {
    const t = this.get(e);
    return t.boundingRect == null && (t.boundingRect = yt.getBBoxV2(e)), t.boundingRect.clone();
  }
}
var kt;
(function(n) {
  function e(c) {
    return c != null && !t(c);
  }
  n.isJSONMarkup = e;
  function t(c) {
    return c != null && typeof c == "string";
  }
  n.isStringMarkup = t;
  function i(c) {
    return c == null || t(c) ? c : Tt(c);
  }
  n.clone = i;
  function s(c) {
    return `${c}`.trim().replace(/[\r|\n]/g, " ").replace(/>\s+</g, "><");
  }
  n.sanitize = s;
  function r(c, u = { ns: wn.svg }) {
    const h = document.createDocumentFragment(), f = {}, d = {}, p = [
      {
        markup: Array.isArray(c) ? c : [c],
        parent: h,
        ns: u.ns
      }
    ];
    for (; p.length > 0; ) {
      const g = p.pop();
      let m = g.ns || wn.svg;
      const b = g.markup, y = g.parent;
      b.forEach((v) => {
        const O = v.tagName;
        if (!O)
          throw new TypeError("Invalid tagName");
        v.ns && (m = v.ns);
        const x = m ? Jy(O, m) : pC(O), S = v.attrs;
        S && nt(x, ph(S));
        const C = v.style;
        C && fn(x, C);
        const k = v.className;
        k != null && x.setAttribute("class", Array.isArray(k) ? k.join(" ") : k), v.textContent && (x.textContent = v.textContent);
        const E = v.selector;
        if (E != null) {
          if (d[E])
            throw new TypeError("Selector must be unique");
          d[E] = x;
        }
        if (v.groupSelector) {
          let T = v.groupSelector;
          Array.isArray(T) || (T = [T]), T.forEach((M) => {
            f[M] || (f[M] = []), f[M].push(x);
          });
        }
        y.appendChild(x);
        const $ = v.children;
        Array.isArray($) && p.push({ ns: m, markup: $, parent: x });
      });
    }
    return Object.keys(f).forEach((g) => {
      if (d[g])
        throw new Error("Ambiguous group selector");
      d[g] = f[g];
    }), { fragment: h, selectors: d, groups: f };
  }
  n.parseJSONMarkup = r;
  function o(c) {
    return c instanceof SVGElement ? Bs("g") : pC("div");
  }
  function l(c) {
    if (t(c)) {
      const d = Ie.createVectors(c), p = d.length;
      if (p === 1)
        return {
          elem: d[0].node
        };
      if (p > 1) {
        const g = o(d[0].node);
        return d.forEach((m) => {
          g.appendChild(m.node);
        }), { elem: g };
      }
      return {};
    }
    const u = r(c), h = u.fragment;
    let f = null;
    return h.childNodes.length > 1 ? (f = o(h.firstChild), f.appendChild(h)) : f = h.firstChild, { elem: f, selectors: u.selectors };
  }
  n.renderMarkup = l;
  function a(c) {
    const u = Ie.createVectors(c), h = document.createDocumentFragment();
    for (let f = 0, d = u.length; f < d; f += 1) {
      const p = u[f].node;
      h.appendChild(p);
    }
    return { fragment: h, selectors: {} };
  }
  n.parseLabelStringMarkup = a;
})(kt || (kt = {}));
(function(n) {
  function e(t, i, s) {
    if (t != null) {
      let r;
      const o = t.tagName.toLowerCase();
      if (t === i)
        return typeof s == "string" ? r = `> ${o} > ${s}` : r = `> ${o}`, r;
      const l = t.parentNode;
      if (l && l.childNodes.length > 1) {
        const a = eO(t) + 1;
        r = `${o}:nth-child(${a})`;
      } else
        r = o;
      return s && (r += ` > ${s}`), e(t.parentNode, i, r);
    }
    return s;
  }
  n.getSelector = e;
})(kt || (kt = {}));
(function(n) {
  function e() {
    return "g";
  }
  n.getPortContainerMarkup = e;
  function t() {
    return {
      tagName: "circle",
      selector: "circle",
      attrs: {
        r: 10,
        fill: "#FFFFFF",
        stroke: "#000000"
      }
    };
  }
  n.getPortMarkup = t;
  function i() {
    return {
      tagName: "text",
      selector: "text",
      attrs: {
        fill: "#000000"
      }
    };
  }
  n.getPortLabelMarkup = i;
})(kt || (kt = {}));
(function(n) {
  function e() {
    return [
      {
        tagName: "path",
        selector: "wrap",
        groupSelector: "lines",
        attrs: {
          fill: "none",
          cursor: "pointer",
          stroke: "transparent",
          strokeLinecap: "round"
        }
      },
      {
        tagName: "path",
        selector: "line",
        groupSelector: "lines",
        attrs: {
          fill: "none",
          pointerEvents: "none"
        }
      }
    ];
  }
  n.getEdgeMarkup = e;
})(kt || (kt = {}));
(function(n) {
  function e(t = !1) {
    return {
      tagName: "foreignObject",
      selector: "fo",
      children: [
        {
          ns: wn.xhtml,
          tagName: "body",
          selector: "foBody",
          attrs: {
            xmlns: wn.xhtml
          },
          style: {
            width: "100%",
            height: "100%",
            background: "transparent"
          },
          children: t ? [] : [
            {
              tagName: "div",
              selector: "foContent",
              style: {
                width: "100%",
                height: "100%"
              }
            }
          ]
        }
      ]
    };
  }
  n.getForeignObjectMarkup = e;
})(kt || (kt = {}));
class bM {
  constructor(e) {
    this.view = e;
  }
  get cell() {
    return this.view.cell;
  }
  getDefinition(e) {
    return this.cell.getAttrDefinition(e);
  }
  processAttrs(e, t) {
    let i, s, r, o;
    const l = [];
    return Object.keys(t).forEach((a) => {
      const c = t[a], u = this.getDefinition(a), h = Ee(gr.isValidDefinition, this.view, u, c, {
        elem: e,
        attrs: t,
        cell: this.cell,
        view: this.view
      });
      if (u && h)
        typeof u == "string" ? (i == null && (i = {}), i[u] = c) : c !== null && l.push({ name: a, definition: u });
      else {
        i == null && (i = {});
        const f = T_.includes(a) ? a : h_(a);
        i[f] = c;
      }
    }), l.forEach(({ name: a, definition: c }) => {
      const u = t[a];
      typeof c.set == "function" && (s == null && (s = {}), s[a] = u), typeof c.offset == "function" && (r == null && (r = {}), r[a] = u), typeof c.position == "function" && (o == null && (o = {}), o[a] = u);
    }), {
      raw: t,
      normal: i,
      set: s,
      offset: r,
      position: o
    };
  }
  mergeProcessedAttrs(e, t) {
    e.set = Object.assign(Object.assign({}, e.set), t.set), e.position = Object.assign(Object.assign({}, e.position), t.position), e.offset = Object.assign(Object.assign({}, e.offset), t.offset);
    const i = e.normal && e.normal.transform;
    i != null && t.normal && (t.normal.transform = i), e.normal = t.normal;
  }
  findAttrs(e, t, i, s) {
    const r = [], o = new Kb();
    return Object.keys(e).forEach((l) => {
      const a = e[l];
      if (!Rs(a))
        return;
      const { isCSSSelector: c, elems: u } = dt.find(l, t, s);
      i[l] = u;
      for (let h = 0, f = u.length; h < f; h += 1) {
        const d = u[h], p = s && s[l] === d, g = o.get(d);
        if (g) {
          g.array || (r.push(d), g.array = !0, g.attrs = [g.attrs], g.priority = [g.priority]);
          const m = g.attrs, b = g.priority;
          if (p)
            m.unshift(a), b.unshift(-1);
          else {
            const y = T5(b, c ? -1 : f);
            m.splice(y, 0, a), b.splice(y, 0, f);
          }
        } else
          o.set(d, {
            elem: d,
            attrs: a,
            priority: p ? -1 : f,
            array: !1
          });
      }
    }), r.forEach((l) => {
      const a = o.get(l), c = a.attrs;
      a.attrs = c.reduceRight((u, h) => Ft(u, h), {});
    }), o;
  }
  updateRelativeAttrs(e, t, i) {
    const s = t.raw || {};
    let r = t.normal || {};
    const o = t.set, l = t.position, a = t.offset, c = () => ({
      elem: e,
      cell: this.cell,
      view: this.view,
      attrs: s,
      refBBox: i.clone()
    });
    if (o != null && Object.keys(o).forEach((m) => {
      const b = o[m], y = this.getDefinition(m);
      if (y != null) {
        const v = Ee(y.set, this.view, b, c());
        typeof v == "object" ? r = Object.assign(Object.assign({}, r), v) : v != null && (r[m] = v);
      }
    }), e instanceof HTMLElement) {
      this.view.setAttrs(r, e);
      return;
    }
    const u = r.transform, h = u ? `${u}` : null, f = gh(h), d = new I(f.e, f.f);
    u && (delete r.transform, f.e = 0, f.f = 0);
    let p = !1;
    l != null && Object.keys(l).forEach((m) => {
      const b = l[m], y = this.getDefinition(m);
      if (y != null) {
        const v = Ee(y.position, this.view, b, c());
        v != null && (p = !0, d.translate(I.create(v)));
      }
    }), this.view.setAttrs(r, e);
    let g = !1;
    if (a != null) {
      const m = this.view.getBoundingRectOfElement(e);
      if (m.width > 0 && m.height > 0) {
        const b = yt.transformRectangle(m, f);
        Object.keys(a).forEach((y) => {
          const v = a[y], O = this.getDefinition(y);
          if (O != null) {
            const x = Ee(O.offset, this.view, v, {
              elem: e,
              cell: this.cell,
              view: this.view,
              attrs: s,
              refBBox: b
            });
            x != null && (g = !0, d.translate(I.create(x)));
          }
        });
      }
    }
    (u != null || p || g) && (d.round(1), f.e = d.x, f.f = d.y, e.setAttribute("transform", zc(f)));
  }
  update(e, t, i) {
    const s = {}, r = this.findAttrs(i.attrs || t, e, s, i.selectors), o = i.attrs ? this.findAttrs(t, e, s, i.selectors) : r, l = [];
    r.each((u) => {
      const h = u.elem, f = u.attrs, d = this.processAttrs(h, f);
      if (d.set == null && d.position == null && d.offset == null)
        this.view.setAttrs(d.normal, h);
      else {
        const p = o.get(h), g = p ? p.attrs : null, m = g && f.ref == null ? g.ref : f.ref;
        let b;
        if (m) {
          if (b = (s[m] || this.view.find(m, e, i.selectors))[0], !b)
            throw new Error(`"${m}" reference does not exist.`);
        } else
          b = null;
        const y = {
          node: h,
          refNode: b,
          attributes: g,
          processedAttributes: d
        }, v = l.findIndex((O) => O.refNode === h);
        v > -1 ? l.splice(v, 0, y) : l.push(y);
      }
    });
    const a = new Kb();
    let c;
    l.forEach((u) => {
      const h = u.node, f = u.refNode;
      let d;
      const p = f != null && i.rotatableNode != null && E_(i.rotatableNode, f);
      if (f && (d = a.get(f)), !d) {
        const b = p ? i.rotatableNode : e;
        d = f ? yt.getBBox(f, { target: b }) : i.rootBBox, f && a.set(f, d);
      }
      let g;
      i.attrs && u.attributes ? (g = this.processAttrs(h, u.attributes), this.mergeProcessedAttrs(g, u.processedAttributes)) : g = u.processedAttributes;
      let m = d;
      p && i.rotatableNode != null && !i.rotatableNode.contains(h) && (c || (c = gh(nt(i.rotatableNode, "transform"))), m = yt.transformRectangle(d, c)), this.updateRelativeAttrs(h, g, m);
    });
  }
}
class vM {
  get cell() {
    return this.view.cell;
  }
  constructor(e, t, i = []) {
    this.view = e;
    const s = {}, r = {};
    let o = 0;
    Object.keys(t).forEach((a) => {
      let c = t[a];
      Array.isArray(c) || (c = [c]), c.forEach((u) => {
        let h = s[u];
        h || (o += 1, h = s[u] = 1 << o), r[a] |= h;
      });
    });
    let l = i;
    if (Array.isArray(l) || (l = [l]), l.forEach((a) => {
      s[a] || (o += 1, s[a] = 1 << o);
    }), o > 25)
      throw new Error("Maximum number of flags exceeded.");
    this.flags = s, this.attrs = r, this.bootstrap = i;
  }
  getFlag(e) {
    const t = this.flags;
    return t == null ? 0 : Array.isArray(e) ? e.reduce((i, s) => i | t[s], 0) : t[e] | 0;
  }
  hasAction(e, t) {
    return e & this.getFlag(t);
  }
  removeAction(e, t) {
    return e ^ e & this.getFlag(t);
  }
  getBootstrapFlag() {
    return this.getFlag(this.bootstrap);
  }
  getChangedFlag() {
    let e = 0;
    return this.attrs && Object.keys(this.attrs).forEach((t) => {
      this.cell.hasChanged(t) && (e |= this.attrs[t]);
    }), e;
  }
}
var Gze = function(n, e, t, i) {
  var s = arguments.length, r = s < 3 ? e : i === null ? i = Object.getOwnPropertyDescriptor(e, t) : i, o;
  if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
    r = Reflect.decorate(n, e, t, i);
  else
    for (var l = n.length - 1; l >= 0; l--)
      (o = n[l]) && (r = (s < 3 ? o(r) : s > 3 ? o(e, t, r) : o(e, t)) || r);
  return s > 3 && r && Object.defineProperty(e, t, r), r;
}, Uze = function(n, e) {
  var t = {};
  for (var i in n)
    Object.prototype.hasOwnProperty.call(n, i) && e.indexOf(i) < 0 && (t[i] = n[i]);
  if (n != null && typeof Object.getOwnPropertySymbols == "function")
    for (var s = 0, i = Object.getOwnPropertySymbols(n); s < i.length; s++)
      e.indexOf(i[s]) < 0 && Object.prototype.propertyIsEnumerable.call(n, i[s]) && (t[i[s]] = n[i[s]]);
  return t;
};
class Gt extends dt {
  static getDefaults() {
    return this.defaults;
  }
  static config(e) {
    this.defaults = this.getOptions(e);
  }
  static getOptions(e) {
    const t = (c, u) => u != null ? s2([
      ...Array.isArray(c) ? c : [c],
      ...Array.isArray(u) ? u : [u]
    ]) : Array.isArray(c) ? [...c] : [c], i = Tt(this.getDefaults()), { bootstrap: s, actions: r, events: o, documentEvents: l } = e, a = Uze(e, ["bootstrap", "actions", "events", "documentEvents"]);
    return s && (i.bootstrap = t(i.bootstrap, s)), r && Object.entries(r).forEach(([c, u]) => {
      const h = i.actions[c];
      u && h ? i.actions[c] = t(h, u) : u && (i.actions[c] = t(u));
    }), o && (i.events = Object.assign(Object.assign({}, i.events), o)), e.documentEvents && (i.documentEvents = Object.assign(Object.assign({}, i.documentEvents), l)), Ft(i, a);
  }
  get [Symbol.toStringTag]() {
    return Gt.toStringTag;
  }
  constructor(e, t = {}) {
    super(), this.cell = e, this.options = this.ensureOptions(t), this.graph = this.options.graph, this.attr = new bM(this), this.flag = new vM(this, this.options.actions, this.options.bootstrap), this.cache = new Hze(this), this.setContainer(this.ensureContainer()), this.setup(), this.init();
  }
  init() {
  }
  onRemove() {
    this.removeTools();
  }
  get priority() {
    return this.options.priority;
  }
  get rootSelector() {
    return this.options.rootSelector;
  }
  getConstructor() {
    return this.constructor;
  }
  ensureOptions(e) {
    return this.getConstructor().getOptions(e);
  }
  getContainerTagName() {
    return this.options.isSvgElement ? "g" : "div";
  }
  getContainerStyle() {
  }
  getContainerAttrs() {
    return {
      "data-cell-id": this.cell.id,
      "data-shape": this.cell.shape
    };
  }
  getContainerClassName() {
    return this.prefixClassName("cell");
  }
  ensureContainer() {
    return dt.createElement(this.getContainerTagName(), this.options.isSvgElement);
  }
  setContainer(e) {
    if (this.container !== e) {
      this.undelegateEvents(), this.container = e, this.options.events != null && this.delegateEvents(this.options.events);
      const t = this.getContainerAttrs();
      t != null && this.setAttrs(t, e);
      const i = this.getContainerStyle();
      i != null && this.setStyle(i, e);
      const s = this.getContainerClassName();
      s != null && this.addClass(s, e);
    }
    return this;
  }
  isNodeView() {
    return !1;
  }
  isEdgeView() {
    return !1;
  }
  render() {
    return this;
  }
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  confirmUpdate(e, t = {}) {
    return 0;
  }
  getBootstrapFlag() {
    return this.flag.getBootstrapFlag();
  }
  getFlag(e) {
    return this.flag.getFlag(e);
  }
  hasAction(e, t) {
    return this.flag.hasAction(e, t);
  }
  removeAction(e, t) {
    return this.flag.removeAction(e, t);
  }
  handleAction(e, t, i, s) {
    if (this.hasAction(e, t)) {
      i();
      const r = [t];
      return s && (typeof s == "string" ? r.push(s) : r.push(...s)), this.removeAction(e, r);
    }
    return e;
  }
  setup() {
    this.cell.on("changed", this.onCellChanged, this);
  }
  onCellChanged({ options: e }) {
    this.onAttrsChange(e);
  }
  onAttrsChange(e) {
    let t = this.flag.getChangedFlag();
    e.updated || !t || (e.dirty && this.hasAction(t, "update") && (t |= this.getFlag("render")), e.toolId && (e.async = !1), this.graph != null && this.graph.renderer.requestViewUpdate(this, t, e));
  }
  parseJSONMarkup(e, t) {
    const i = kt.parseJSONMarkup(e), s = i.selectors, r = this.rootSelector;
    if (t && r) {
      if (s[r])
        throw new Error("Invalid root selector");
      s[r] = t;
    }
    return i;
  }
  can(e) {
    let t = this.graph.options.interacting;
    if (typeof t == "function" && (t = Ee(t, this.graph, this)), typeof t == "object") {
      let i = t[e];
      return typeof i == "function" && (i = Ee(i, this.graph, this)), i !== !1;
    }
    return typeof t == "boolean" ? t : !1;
  }
  cleanCache() {
    return this.cache.clean(), this;
  }
  getCache(e) {
    return this.cache.get(e);
  }
  getDataOfElement(e) {
    return this.cache.getData(e);
  }
  getMatrixOfElement(e) {
    return this.cache.getMatrix(e);
  }
  getShapeOfElement(e) {
    return this.cache.getShape(e);
  }
  getBoundingRectOfElement(e) {
    return this.cache.getBoundingRect(e);
  }
  getBBoxOfElement(e) {
    const t = this.getBoundingRectOfElement(e), i = this.getMatrixOfElement(e), s = this.getRootRotatedMatrix(), r = this.getRootTranslatedMatrix();
    return yt.transformRectangle(t, r.multiply(s).multiply(i));
  }
  getUnrotatedBBoxOfElement(e) {
    const t = this.getBoundingRectOfElement(e), i = this.getMatrixOfElement(e), s = this.getRootTranslatedMatrix();
    return yt.transformRectangle(t, s.multiply(i));
  }
  getBBox(e = {}) {
    let t;
    if (e.useCellGeometry) {
      const i = this.cell, s = i.isNode() ? i.getAngle() : 0;
      t = i.getBBox().bbox(s);
    } else
      t = this.getBBoxOfElement(this.container);
    return this.graph.coord.localToGraphRect(t);
  }
  getRootTranslatedMatrix() {
    const e = this.cell, t = e.isNode() ? e.getPosition() : { x: 0, y: 0 };
    return kn().translate(t.x, t.y);
  }
  getRootRotatedMatrix() {
    let e = kn();
    const t = this.cell, i = t.isNode() ? t.getAngle() : 0;
    if (i) {
      const s = t.getBBox(), r = s.width / 2, o = s.height / 2;
      e = e.translate(r, o).rotate(i).translate(-r, -o);
    }
    return e;
  }
  findMagnet(e = this.container) {
    return this.findByAttr("magnet", e);
  }
  updateAttrs(e, t, i = {}) {
    i.rootBBox == null && (i.rootBBox = new ue()), i.selectors == null && (i.selectors = this.selectors), this.attr.update(e, t, i);
  }
  isEdgeElement(e) {
    return this.cell.isEdge() && (e == null || e === this.container);
  }
  // #region highlight
  prepareHighlight(e, t = {}) {
    const i = e || this.container;
    return t.partial = i === this.container, i;
  }
  highlight(e, t = {}) {
    const i = this.prepareHighlight(e, t);
    return this.notify("cell:highlight", {
      magnet: i,
      options: t,
      view: this,
      cell: this.cell
    }), this.isEdgeView() ? this.notify("edge:highlight", {
      magnet: i,
      options: t,
      view: this,
      edge: this.cell,
      cell: this.cell
    }) : this.isNodeView() && this.notify("node:highlight", {
      magnet: i,
      options: t,
      view: this,
      node: this.cell,
      cell: this.cell
    }), this;
  }
  unhighlight(e, t = {}) {
    const i = this.prepareHighlight(e, t);
    return this.notify("cell:unhighlight", {
      magnet: i,
      options: t,
      view: this,
      cell: this.cell
    }), this.isNodeView() ? this.notify("node:unhighlight", {
      magnet: i,
      options: t,
      view: this,
      node: this.cell,
      cell: this.cell
    }) : this.isEdgeView() && this.notify("edge:unhighlight", {
      magnet: i,
      options: t,
      view: this,
      edge: this.cell,
      cell: this.cell
    }), this;
  }
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  notifyUnhighlight(e, t) {
  }
  // #endregion
  getEdgeTerminal(e, t, i, s, r) {
    const o = this.cell, l = this.findAttr("port", e), a = e.getAttribute("data-selector"), c = { cell: o.id };
    return a != null && (c.magnet = a), l != null ? (c.port = l, o.isNode() && !o.hasPort(l) && a == null && (c.selector = this.getSelector(e))) : a == null && this.container !== e && (c.selector = this.getSelector(e)), c;
  }
  getMagnetFromEdgeTerminal(e) {
    const t = this.cell, i = this.container, s = e.port;
    let r = e.magnet, o;
    return s != null && t.isNode() && t.hasPort(s) ? o = this.findPortElem(s, r) || i : (r || (r = e.selector), !r && s != null && (r = `[port="${s}"]`), o = this.findOne(r, i, this.selectors)), o;
  }
  hasTools(e) {
    const t = this.tools;
    return t == null ? !1 : e == null ? !0 : t.name === e;
  }
  addTools(e) {
    if (this.removeTools(), e) {
      if (!this.can("toolsAddable"))
        return this;
      const t = rn.isToolsView(e) ? e : new rn(e);
      this.tools = t, t.config({ view: this }), t.mount();
    }
    return this;
  }
  updateTools(e = {}) {
    return this.tools && this.tools.update(e), this;
  }
  removeTools() {
    return this.tools && (this.tools.remove(), this.tools = null), this;
  }
  hideTools() {
    return this.tools && this.tools.hide(), this;
  }
  showTools() {
    return this.tools && this.tools.show(), this;
  }
  renderTools() {
    const e = this.cell.getTools();
    return this.addTools(e), this;
  }
  notify(e, t) {
    return this.trigger(e, t), this.graph.trigger(e, t), this;
  }
  getEventArgs(e, t, i) {
    const s = this, r = s.cell;
    return t == null || i == null ? { e, view: s, cell: r } : { e, x: t, y: i, view: s, cell: r };
  }
  onClick(e, t, i) {
    this.notify("cell:click", this.getEventArgs(e, t, i));
  }
  onDblClick(e, t, i) {
    this.notify("cell:dblclick", this.getEventArgs(e, t, i));
  }
  onContextMenu(e, t, i) {
    this.notify("cell:contextmenu", this.getEventArgs(e, t, i));
  }
  onMouseDown(e, t, i) {
    this.cell.model && (this.cachedModelForMouseEvent = this.cell.model, this.cachedModelForMouseEvent.startBatch("mouse")), this.notify("cell:mousedown", this.getEventArgs(e, t, i));
  }
  onMouseUp(e, t, i) {
    this.notify("cell:mouseup", this.getEventArgs(e, t, i)), this.cachedModelForMouseEvent && (this.cachedModelForMouseEvent.stopBatch("mouse", { cell: this.cell }), this.cachedModelForMouseEvent = null);
  }
  onMouseMove(e, t, i) {
    this.notify("cell:mousemove", this.getEventArgs(e, t, i));
  }
  onMouseOver(e) {
    this.notify("cell:mouseover", this.getEventArgs(e));
  }
  onMouseOut(e) {
    this.notify("cell:mouseout", this.getEventArgs(e));
  }
  onMouseEnter(e) {
    this.notify("cell:mouseenter", this.getEventArgs(e));
  }
  onMouseLeave(e) {
    this.notify("cell:mouseleave", this.getEventArgs(e));
  }
  onMouseWheel(e, t, i, s) {
    this.notify("cell:mousewheel", Object.assign({ delta: s }, this.getEventArgs(e, t, i)));
  }
  onCustomEvent(e, t, i, s) {
    this.notify("cell:customevent", Object.assign({ name: t }, this.getEventArgs(e, i, s))), this.notify(t, Object.assign({}, this.getEventArgs(e, i, s)));
  }
  onMagnetMouseDown(e, t, i, s) {
  }
  onMagnetDblClick(e, t, i, s) {
  }
  onMagnetContextMenu(e, t, i, s) {
  }
  onLabelMouseDown(e, t, i) {
  }
  checkMouseleave(e) {
    const t = this.getEventTarget(e, { fromPoint: !0 }), i = this.graph.findViewByElem(t);
    i !== this && (this.onMouseLeave(e), i && i.onMouseEnter(e));
  }
  dispose() {
    this.cell.off("changed", this.onCellChanged, this);
  }
}
Gt.defaults = {
  isSvgElement: !0,
  rootSelector: "root",
  priority: 0,
  bootstrap: [],
  actions: {}
};
Gze([
  Gt.dispose()
], Gt.prototype, "dispose", null);
(function(n) {
  n.Flag = vM, n.Attr = bM;
})(Gt || (Gt = {}));
(function(n) {
  n.toStringTag = `X6.${n.name}`;
  function e(t) {
    if (t == null)
      return !1;
    if (t instanceof n)
      return !0;
    const i = t[Symbol.toStringTag], s = t;
    return (i == null || i === n.toStringTag) && typeof s.isNodeView == "function" && typeof s.isEdgeView == "function" && typeof s.confirmUpdate == "function";
  }
  n.isCellView = e;
})(Gt || (Gt = {}));
(function(n) {
  function e(i) {
    return function(s) {
      s.config({ priority: i });
    };
  }
  n.priority = e;
  function t(i) {
    return function(s) {
      s.config({ bootstrap: i });
    };
  }
  n.bootstrap = t;
})(Gt || (Gt = {}));
(function(n) {
  n.registry = Ut.create({
    type: "view"
  });
})(Gt || (Gt = {}));
class rn extends dt {
  get name() {
    return this.options.name;
  }
  get graph() {
    return this.cellView.graph;
  }
  get cell() {
    return this.cellView.cell;
  }
  get [Symbol.toStringTag]() {
    return rn.toStringTag;
  }
  constructor(e = {}) {
    super(), this.svgContainer = this.createContainer(!0, e), this.htmlContainer = this.createContainer(!1, e), this.config(e);
  }
  createContainer(e, t) {
    const i = e ? dt.createElement("g", !0) : dt.createElement("div", !1);
    return Me(i, this.prefixClassName("cell-tools")), t.className && Me(i, t.className), i;
  }
  config(e) {
    if (this.options = Object.assign(Object.assign({}, this.options), e), !Gt.isCellView(e.view) || e.view === this.cellView)
      return this;
    this.cellView = e.view, this.cell.isEdge() ? (Me(this.svgContainer, this.prefixClassName("edge-tools")), Me(this.htmlContainer, this.prefixClassName("edge-tools"))) : this.cell.isNode() && (Me(this.svgContainer, this.prefixClassName("node-tools")), Me(this.htmlContainer, this.prefixClassName("node-tools"))), this.svgContainer.setAttribute("data-cell-id", this.cell.id), this.htmlContainer.setAttribute("data-cell-id", this.cell.id), this.name && (this.svgContainer.setAttribute("data-tools-name", this.name), this.htmlContainer.setAttribute("data-tools-name", this.name));
    const t = this.options.items;
    if (!Array.isArray(t))
      return this;
    this.tools = [];
    const i = [];
    t.forEach((s) => {
      rn.ToolItem.isToolItem(s) ? s.name === "vertices" ? i.unshift(s) : i.push(s) : (typeof s == "object" ? s.name : s) === "vertices" ? i.unshift(s) : i.push(s);
    });
    for (let s = 0; s < i.length; s += 1) {
      const r = i[s];
      let o;
      if (rn.ToolItem.isToolItem(r))
        o = r;
      else {
        const l = typeof r == "object" ? r.name : r, a = typeof r == "object" ? r.args || {} : {};
        if (l) {
          if (this.cell.isNode()) {
            const c = hc.registry.get(l);
            if (c)
              o = new c(a);
            else
              return hc.registry.onNotFound(l);
          } else if (this.cell.isEdge()) {
            const c = fc.registry.get(l);
            if (c)
              o = new c(a);
            else
              return fc.registry.onNotFound(l);
          }
        }
      }
      o && (o.config(this.cellView, this), o.render(), (o.options.isSVGElement !== !1 ? this.svgContainer : this.htmlContainer).appendChild(o.container), this.tools.push(o));
    }
    return this;
  }
  update(e = {}) {
    const t = this.tools;
    return t && t.forEach((i) => {
      e.toolId !== i.cid && i.isVisible() && i.update();
    }), this;
  }
  focus(e) {
    const t = this.tools;
    return t && t.forEach((i) => {
      e === i ? i.show() : i.hide();
    }), this;
  }
  blur(e) {
    const t = this.tools;
    return t && t.forEach((i) => {
      i !== e && !i.isVisible() && (i.show(), i.update());
    }), this;
  }
  hide() {
    return this.focus(null);
  }
  show() {
    return this.blur(null);
  }
  remove() {
    const e = this.tools;
    return e && (e.forEach((t) => t.remove()), this.tools = null), ar(this.svgContainer), ar(this.htmlContainer), super.remove();
  }
  mount() {
    const e = this.tools, t = this.cellView;
    if (t && e) {
      const i = e.some((r) => r.options.isSVGElement !== !1), s = e.some((r) => r.options.isSVGElement === !1);
      i && (this.options.local ? t.container : t.graph.view.decorator).appendChild(this.svgContainer), s && this.graph.container.appendChild(this.htmlContainer);
    }
    return this;
  }
}
(function(n) {
  n.toStringTag = `X6.${n.name}`;
  function e(t) {
    if (t == null)
      return !1;
    if (t instanceof n)
      return !0;
    const i = t[Symbol.toStringTag], s = t;
    return (i == null || i === n.toStringTag) && s.graph != null && s.cell != null && typeof s.config == "function" && typeof s.update == "function" && typeof s.focus == "function" && typeof s.blur == "function" && typeof s.show == "function" && typeof s.hide == "function";
  }
  n.isToolsView = e;
})(rn || (rn = {}));
(function(n) {
  class e extends dt {
    static getDefaults() {
      return this.defaults;
    }
    static config(i) {
      this.defaults = this.getOptions(i);
    }
    static getOptions(i) {
      return Ft(Tt(this.getDefaults()), i);
    }
    get graph() {
      return this.cellView.graph;
    }
    get cell() {
      return this.cellView.cell;
    }
    get name() {
      return this.options.name;
    }
    get [Symbol.toStringTag]() {
      return e.toStringTag;
    }
    constructor(i = {}) {
      super(), this.visible = !0, this.options = this.getOptions(i), this.container = dt.createElement(this.options.tagName || "g", this.options.isSVGElement !== !1), Me(this.container, this.prefixClassName("cell-tool")), typeof this.options.className == "string" && Me(this.container, this.options.className), this.init();
    }
    init() {
    }
    getOptions(i) {
      return this.constructor.getOptions(i);
    }
    delegateEvents() {
      return this.options.events && super.delegateEvents(this.options.events), this;
    }
    config(i, s) {
      return this.cellView = i, this.parent = s, this.stamp(this.container), this.cell.isEdge() ? Me(this.container, this.prefixClassName("edge-tool")) : this.cell.isNode() && Me(this.container, this.prefixClassName("node-tool")), this.name && this.container.setAttribute("data-tool-name", this.name), this.delegateEvents(), this;
    }
    render() {
      this.empty();
      const i = this.options.markup;
      if (i) {
        const s = kt.parseJSONMarkup(i);
        this.container.appendChild(s.fragment), this.childNodes = s.selectors;
      }
      return this.onRender(), this;
    }
    onRender() {
    }
    update() {
      return this;
    }
    stamp(i) {
      i && i.setAttribute("data-cell-id", this.cellView.cell.id);
    }
    show() {
      return this.container.style.display = "", this.visible = !0, this;
    }
    hide() {
      return this.container.style.display = "none", this.visible = !1, this;
    }
    isVisible() {
      return this.visible;
    }
    focus() {
      const i = this.options.focusOpacity;
      return i != null && Number.isFinite(i) && (this.container.style.opacity = `${i}`), this.parent.focus(this), this;
    }
    blur() {
      return this.container.style.opacity = "", this.parent.blur(this), this;
    }
    guard(i) {
      return this.graph == null || this.cellView == null ? !0 : this.graph.view.guard(i, this.cellView);
    }
  }
  e.defaults = {
    isSVGElement: !0,
    tagName: "g"
  }, n.ToolItem = e, function(t) {
    let i = 0;
    function s(o) {
      return o ? Yy(o) : (i += 1, `CustomTool${i}`);
    }
    function r(o) {
      const l = Wy(s(o.name), this);
      return l.config(o), l;
    }
    t.define = r;
  }(e = n.ToolItem || (n.ToolItem = {})), function(t) {
    t.toStringTag = `X6.${t.name}`;
    function i(s) {
      if (s == null)
        return !1;
      if (s instanceof t)
        return !0;
      const r = s[Symbol.toStringTag], o = s;
      return (r == null || r === t.toStringTag) && o.graph != null && o.cell != null && typeof o.config == "function" && typeof o.update == "function" && typeof o.focus == "function" && typeof o.blur == "function" && typeof o.show == "function" && typeof o.hide == "function" && typeof o.isVisible == "function";
    }
    t.isToolItem = i;
  }(e = n.ToolItem || (n.ToolItem = {}));
})(rn || (rn = {}));
const Kze = (n) => n;
function PC(n, e) {
  return e === 0 ? "0%" : `${Math.round(n / e * 100)}%`;
}
function yM(n) {
  return (t, i, s, r) => i.isEdgeElement(s) ? e6e(n, t, i, s, r) : Jze(n, t, i, s, r);
}
function Jze(n, e, t, i, s) {
  const r = t.cell, o = r.getAngle(), l = t.getUnrotatedBBoxOfElement(i), a = r.getBBox().getCenter(), c = I.create(s).rotate(o, a);
  let u = c.x - l.x, h = c.y - l.y;
  return n && (u = PC(u, l.width), h = PC(h, l.height)), e.anchor = {
    name: "topLeft",
    args: {
      dx: u,
      dy: h,
      rotate: !0
    }
  }, e;
}
function e6e(n, e, t, i, s) {
  const r = t.getConnection();
  if (!r)
    return e;
  const o = r.closestPointLength(s);
  if (n) {
    const l = r.length();
    e.anchor = {
      name: "ratio",
      args: {
        ratio: o / l
      }
    };
  } else
    e.anchor = {
      name: "length",
      args: {
        length: o
      }
    };
  return e;
}
const t6e = yM(!0), n6e = yM(!1), i6e = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  noop: Kze,
  pinAbsolute: n6e,
  pinRelative: t6e
}, Symbol.toStringTag, { value: "Module" }));
var tv;
(function(n) {
  n.presets = i6e, n.registry = Ut.create({
    type: "connection strategy"
  }), n.registry.register(n.presets, !0);
})(tv || (tv = {}));
function OM(n, e, t, i) {
  return Ee(tv.presets.pinRelative, this.graph, {}, e, t, n, this.cell, i, {}).anchor;
}
function wM(n, e) {
  return e ? n.cell.getBBox() : n.cell.isEdge() ? n.getConnection().bbox() : n.getUnrotatedBBoxOfElement(n.container);
}
class Bo extends rn.ToolItem {
  onRender() {
    Me(this.container, this.prefixClassName("cell-tool-button")), this.update();
  }
  update() {
    return this.updatePosition(), this;
  }
  updatePosition() {
    const t = this.cellView.cell.isEdge() ? this.getEdgeMatrix() : this.getNodeMatrix();
    rc(this.container, t, { absolute: !0 });
  }
  getNodeMatrix() {
    const e = this.cellView, t = this.options;
    let { x: i = 0, y: s = 0 } = t;
    const { offset: r, useCellGeometry: o, rotate: l } = t;
    let a = wM(e, o);
    const c = e.cell.getAngle();
    l || (a = a.bbox(c));
    let u = 0, h = 0;
    typeof r == "number" ? (u = r, h = r) : typeof r == "object" && (u = r.x, h = r.y), i = ks(i, a.width), s = ks(s, a.height);
    let f = kn().translate(a.x + a.width / 2, a.y + a.height / 2);
    return l && (f = f.rotate(c)), f = f.translate(i + u - a.width / 2, s + h - a.height / 2), f;
  }
  getEdgeMatrix() {
    const e = this.cellView, t = this.options, { offset: i = 0, distance: s = 0, rotate: r } = t;
    let o, l, a;
    const c = ks(s, 1);
    c >= 0 && c <= 1 ? o = e.getTangentAtRatio(c) : o = e.getTangentAtLength(c), o ? (l = o.start, a = o.vector().vectorAngle(new I(1, 0)) || 0) : (l = e.getConnection().start, a = 0);
    let u = kn().translate(l.x, l.y).rotate(a);
    return typeof i == "object" ? u = u.translate(i.x || 0, i.y || 0) : u = u.translate(0, i), r || (u = u.rotate(-a)), u;
  }
  onMouseDown(e) {
    if (this.guard(e))
      return;
    e.stopPropagation(), e.preventDefault();
    const t = this.options.onClick;
    typeof t == "function" && Ee(t, this.cellView, {
      e,
      view: this.cellView,
      cell: this.cellView.cell,
      btn: this
    });
  }
}
(function(n) {
  n.config({
    name: "button",
    useCellGeometry: !0,
    events: {
      mousedown: "onMouseDown",
      touchstart: "onMouseDown"
    }
  });
})(Bo || (Bo = {}));
(function(n) {
  n.Remove = n.define({
    name: "button-remove",
    markup: [
      {
        tagName: "circle",
        selector: "button",
        attrs: {
          r: 7,
          fill: "#FF1D00",
          cursor: "pointer"
        }
      },
      {
        tagName: "path",
        selector: "icon",
        attrs: {
          d: "M -3 -3 3 3 M -3 3 3 -3",
          fill: "none",
          stroke: "#FFFFFF",
          "stroke-width": 2,
          "pointer-events": "none"
        }
      }
    ],
    distance: 60,
    offset: 0,
    useCellGeometry: !0,
    onClick({ view: e, btn: t }) {
      t.parent.remove(), e.cell.remove({ ui: !0, toolId: t.cid });
    }
  });
})(Bo || (Bo = {}));
var s6e = function(n, e) {
  var t = {};
  for (var i in n)
    Object.prototype.hasOwnProperty.call(n, i) && e.indexOf(i) < 0 && (t[i] = n[i]);
  if (n != null && typeof Object.getOwnPropertySymbols == "function")
    for (var s = 0, i = Object.getOwnPropertySymbols(n); s < i.length; s++)
      e.indexOf(i[s]) < 0 && Object.prototype.propertyIsEnumerable.call(n, i[s]) && (t[i[s]] = n[i[s]]);
  return t;
};
class Op extends rn.ToolItem {
  onRender() {
    if (Me(this.container, this.prefixClassName("cell-tool-boundary")), this.options.attrs) {
      const e = this.options.attrs, { class: t } = e, i = s6e(e, ["class"]);
      nt(this.container, ph(i)), t && Me(this.container, t);
    }
    this.update();
  }
  update() {
    const e = this.cellView, t = this.options, { useCellGeometry: i, rotate: s } = t, r = Fl(t.padding);
    let o = wM(e, i).moveAndExpand({
      x: -r.left,
      y: -r.top,
      width: r.left + r.right,
      height: r.top + r.bottom
    });
    const l = e.cell;
    if (l.isNode()) {
      const a = l.getAngle();
      if (a)
        if (s) {
          const c = l.getBBox().getCenter();
          Yb(this.container, a, c.x, c.y, {
            absolute: !0
          });
        } else
          o = o.bbox(a);
    }
    return nt(this.container, o.toJSON()), this;
  }
}
(function(n) {
  n.config({
    name: "boundary",
    tagName: "rect",
    padding: 10,
    useCellGeometry: !0,
    attrs: {
      fill: "none",
      stroke: "#333",
      "stroke-width": 0.5,
      "stroke-dasharray": "5, 5",
      "pointer-events": "none"
    }
  });
})(Op || (Op = {}));
class yh extends rn.ToolItem {
  constructor() {
    super(...arguments), this.handles = [];
  }
  get vertices() {
    return this.cellView.cell.getVertices();
  }
  onRender() {
    return this.addClass(this.prefixClassName("edge-tool-vertices")), this.options.addable && this.updatePath(), this.resetHandles(), this.renderHandles(), this;
  }
  update() {
    return this.vertices.length === this.handles.length ? this.updateHandles() : (this.resetHandles(), this.renderHandles()), this.options.addable && this.updatePath(), this;
  }
  resetHandles() {
    const e = this.handles;
    this.handles = [], e && e.forEach((t) => {
      this.stopHandleListening(t), t.remove();
    });
  }
  renderHandles() {
    const e = this.vertices;
    for (let t = 0, i = e.length; t < i; t += 1) {
      const s = e[t], r = this.options.createHandle, o = this.options.processHandle, l = r({
        index: t,
        graph: this.graph,
        guard: (a) => this.guard(a),
        attrs: this.options.attrs || {}
      });
      o && o(l), l.updatePosition(s.x, s.y), this.stamp(l.container), this.container.appendChild(l.container), this.handles.push(l), this.startHandleListening(l);
    }
  }
  updateHandles() {
    const e = this.vertices;
    for (let t = 0, i = e.length; t < i; t += 1) {
      const s = e[t], r = this.handles[t];
      r && r.updatePosition(s.x, s.y);
    }
  }
  updatePath() {
    const e = this.childNodes.connection;
    e && e.setAttribute("d", this.cellView.getConnectionPathData());
  }
  startHandleListening(e) {
    const t = this.cellView;
    t.can("vertexMovable") && (e.on("change", this.onHandleChange, this), e.on("changing", this.onHandleChanging, this), e.on("changed", this.onHandleChanged, this)), t.can("vertexDeletable") && e.on("remove", this.onHandleRemove, this);
  }
  stopHandleListening(e) {
    const t = this.cellView;
    t.can("vertexMovable") && (e.off("change", this.onHandleChange, this), e.off("changing", this.onHandleChanging, this), e.off("changed", this.onHandleChanged, this)), t.can("vertexDeletable") && e.off("remove", this.onHandleRemove, this);
  }
  getNeighborPoints(e) {
    const t = this.cellView, i = this.vertices, s = e > 0 ? i[e - 1] : t.sourceAnchor, r = e < i.length - 1 ? i[e + 1] : t.targetAnchor;
    return {
      prev: I.create(s),
      next: I.create(r)
    };
  }
  getMouseEventArgs(e) {
    const t = this.normalizeEvent(e), { x: i, y: s } = this.graph.snapToGrid(t.clientX, t.clientY);
    return { e: t, x: i, y: s };
  }
  onHandleChange({ e }) {
    this.focus();
    const t = this.cellView;
    if (t.cell.startBatch("move-vertex", { ui: !0, toolId: this.cid }), !this.options.stopPropagation) {
      const { e: i, x: s, y: r } = this.getMouseEventArgs(e);
      this.eventData(i, { start: { x: s, y: r } }), t.notifyMouseDown(i, s, r);
    }
  }
  onHandleChanging({ handle: e, e: t }) {
    const i = this.cellView, s = e.options.index, { e: r, x: o, y: l } = this.getMouseEventArgs(t), a = { x: o, y: l };
    this.snapVertex(a, s), i.cell.setVertexAt(s, a, { ui: !0, toolId: this.cid }), e.updatePosition(a.x, a.y), this.options.stopPropagation || i.notifyMouseMove(r, o, l);
  }
  stopBatch(e) {
    this.cell.stopBatch("move-vertex", { ui: !0, toolId: this.cid }), e && this.cell.stopBatch("add-vertex", { ui: !0, toolId: this.cid });
  }
  onHandleChanged({ e }) {
    const t = this.options, i = this.cellView;
    if (t.addable && this.updatePath(), !t.removeRedundancies) {
      this.stopBatch(this.eventData(e).vertexAdded);
      return;
    }
    i.removeRedundantLinearVertices({
      ui: !0,
      toolId: this.cid
    }) && this.render(), this.blur(), this.stopBatch(this.eventData(e).vertexAdded);
    const { e: r, x: o, y: l } = this.getMouseEventArgs(e);
    if (!this.options.stopPropagation) {
      i.notifyMouseUp(r, o, l);
      const { start: a } = this.eventData(r);
      if (a) {
        const { x: c, y: u } = a;
        c === o && u === l && i.onClick(r, o, l);
      }
    }
    i.checkMouseleave(r), t.onChanged && t.onChanged({ edge: i.cell, edgeView: i });
  }
  snapVertex(e, t) {
    const i = this.options.snapRadius || 0;
    if (i > 0) {
      const s = this.getNeighborPoints(t), r = s.prev, o = s.next;
      Math.abs(e.x - r.x) < i ? e.x = r.x : Math.abs(e.x - o.x) < i && (e.x = o.x), Math.abs(e.y - r.y) < i ? e.y = s.prev.y : Math.abs(e.y - o.y) < i && (e.y = o.y);
    }
  }
  onHandleRemove({ handle: e, e: t }) {
    if (this.options.removable) {
      const i = e.options.index, s = this.cellView;
      s.cell.removeVertexAt(i, { ui: !0 }), this.options.addable && this.updatePath(), s.checkMouseleave(this.normalizeEvent(t));
    }
  }
  allowAddVertex(e) {
    const t = this.guard(e), i = this.options.addable && this.cellView.can("vertexAddable"), s = this.options.modifiers ? No.isMatch(e, this.options.modifiers) : !0;
    return !t && i && s;
  }
  onPathMouseDown(e) {
    const t = this.cellView;
    if (!this.allowAddVertex(e))
      return;
    e.stopPropagation(), e.preventDefault();
    const i = this.normalizeEvent(e), s = this.graph.snapToGrid(i.clientX, i.clientY).toJSON();
    t.cell.startBatch("add-vertex", { ui: !0, toolId: this.cid });
    const r = t.getVertexIndex(s.x, s.y);
    this.snapVertex(s, r), t.cell.insertVertex(s, r, {
      ui: !0,
      toolId: this.cid
    }), this.render();
    const o = this.handles[r];
    this.eventData(i, { vertexAdded: !0 }), o.onMouseDown(i);
  }
  onRemove() {
    this.resetHandles();
  }
}
(function(n) {
  class e extends dt {
    get graph() {
      return this.options.graph;
    }
    constructor(i) {
      super(), this.options = i, this.render(), this.delegateEvents({
        mousedown: "onMouseDown",
        touchstart: "onMouseDown",
        dblclick: "onDoubleClick"
      });
    }
    render() {
      this.container = dt.createElement("circle", !0);
      const i = this.options.attrs;
      if (typeof i == "function") {
        const s = n.getDefaults();
        this.setAttrs(Object.assign(Object.assign({}, s.attrs), i(this)));
      } else
        this.setAttrs(i);
      this.addClass(this.prefixClassName("edge-tool-vertex"));
    }
    updatePosition(i, s) {
      this.setAttrs({ cx: i, cy: s });
    }
    onMouseDown(i) {
      this.options.guard(i) || (i.stopPropagation(), i.preventDefault(), this.graph.view.undelegateEvents(), this.delegateDocumentEvents({
        mousemove: "onMouseMove",
        touchmove: "onMouseMove",
        mouseup: "onMouseUp",
        touchend: "onMouseUp",
        touchcancel: "onMouseUp"
      }, i.data), this.emit("change", { e: i, handle: this }));
    }
    onMouseMove(i) {
      this.emit("changing", { e: i, handle: this });
    }
    onMouseUp(i) {
      this.emit("changed", { e: i, handle: this }), this.undelegateDocumentEvents(), this.graph.view.delegateEvents();
    }
    onDoubleClick(i) {
      this.emit("remove", { e: i, handle: this });
    }
  }
  n.Handle = e;
})(yh || (yh = {}));
(function(n) {
  const e = rs.prefix("edge-tool-vertex-path");
  n.config({
    name: "vertices",
    snapRadius: 20,
    addable: !0,
    removable: !0,
    removeRedundancies: !0,
    stopPropagation: !0,
    attrs: {
      r: 6,
      fill: "#333",
      stroke: "#fff",
      cursor: "move",
      "stroke-width": 2
    },
    createHandle: (t) => new n.Handle(t),
    markup: [
      {
        tagName: "path",
        selector: "connection",
        className: e,
        attrs: {
          fill: "none",
          stroke: "transparent",
          "stroke-width": 10,
          cursor: "pointer"
        }
      }
    ],
    events: {
      [`mousedown .${e}`]: "onPathMouseDown",
      [`touchstart .${e}`]: "onPathMouseDown"
    }
  });
})(yh || (yh = {}));
class Oh extends rn.ToolItem {
  constructor() {
    super(...arguments), this.handles = [];
  }
  get vertices() {
    return this.cellView.cell.getVertices();
  }
  update() {
    return this.render(), this;
  }
  onRender() {
    Me(this.container, this.prefixClassName("edge-tool-segments")), this.resetHandles();
    const e = this.cellView, t = [...this.vertices];
    t.unshift(e.sourcePoint), t.push(e.targetPoint);
    for (let i = 0, s = t.length; i < s - 1; i += 1) {
      const r = t[i], o = t[i + 1], l = this.renderHandle(r, o, i);
      this.stamp(l.container), this.handles.push(l);
    }
    return this;
  }
  renderHandle(e, t, i) {
    const s = this.options.createHandle({
      index: i,
      graph: this.graph,
      guard: (r) => this.guard(r),
      attrs: this.options.attrs || {}
    });
    return this.options.processHandle && this.options.processHandle(s), this.updateHandle(s, e, t), this.container.appendChild(s.container), this.startHandleListening(s), s;
  }
  startHandleListening(e) {
    e.on("change", this.onHandleChange, this), e.on("changing", this.onHandleChanging, this), e.on("changed", this.onHandleChanged, this);
  }
  stopHandleListening(e) {
    e.off("change", this.onHandleChange, this), e.off("changing", this.onHandleChanging, this), e.off("changed", this.onHandleChanged, this);
  }
  resetHandles() {
    const e = this.handles;
    this.handles = [], e && e.forEach((t) => {
      this.stopHandleListening(t), t.remove();
    });
  }
  shiftHandleIndexes(e) {
    const t = this.handles;
    for (let i = 0, s = t.length; i < s; i += 1)
      t[i].options.index += e;
  }
  resetAnchor(e, t) {
    const i = this.cellView.cell, s = {
      ui: !0,
      toolId: this.cid
    };
    t ? i.prop([e, "anchor"], t, s) : i.removeProp([e, "anchor"], s);
  }
  snapHandle(e, t, i) {
    const s = e.options.axis, r = e.options.index, a = this.cellView.cell.getVertices(), c = a[r - 2] || i.sourceAnchor, u = a[r + 1] || i.targetAnchor, h = this.options.snapRadius;
    return Math.abs(t[s] - c[s]) < h ? t[s] = c[s] : Math.abs(t[s] - u[s]) < h && (t[s] = u[s]), t;
  }
  onHandleChanging({ handle: e, e: t }) {
    const i = this.graph, s = this.options, r = this.cellView, o = s.anchor, l = e.options.axis, a = e.options.index - 1, c = this.getEventData(t), u = this.normalizeEvent(t), h = i.snapToGrid(u.clientX, u.clientY), f = this.snapHandle(e, h.clone(), c), d = Tt(this.vertices);
    let p = d[a], g = d[a + 1];
    const m = r.sourceView, b = r.sourceBBox;
    let y = !1, v = !1;
    if (p ? a === 0 ? b.containsPoint(p) ? (d.shift(), this.shiftHandleIndexes(-1), y = !0) : (p[l] = f[l], v = !0) : p[l] = f[l] : (p = r.sourceAnchor.toJSON(), p[l] = f[l], b.containsPoint(p) ? y = !0 : (d.unshift(p), this.shiftHandleIndexes(1), v = !0)), typeof o == "function" && m) {
      if (y) {
        const k = c.sourceAnchor.clone();
        k[l] = f[l];
        const E = Ee(o, r, k, m, r.sourceMagnet || m.container, "source", r, this);
        this.resetAnchor("source", E);
      }
      v && this.resetAnchor("source", c.sourceAnchorDef);
    }
    const O = r.targetView, x = r.targetBBox;
    let S = !1, C = !1;
    if (g ? a === d.length - 2 ? x.containsPoint(g) ? (d.pop(), S = !0) : (g[l] = f[l], C = !0) : g[l] = f[l] : (g = r.targetAnchor.toJSON(), g[l] = f[l], x.containsPoint(g) ? S = !0 : (d.push(g), C = !0)), typeof o == "function" && O) {
      if (S) {
        const k = c.targetAnchor.clone();
        k[l] = f[l];
        const E = Ee(o, r, k, O, r.targetMagnet || O.container, "target", r, this);
        this.resetAnchor("target", E);
      }
      C && this.resetAnchor("target", c.targetAnchorDef);
    }
    I.equalPoints(d, this.vertices) || this.cellView.cell.setVertices(d, { ui: !0, toolId: this.cid }), this.updateHandle(e, p, g, 0), s.stopPropagation || r.notifyMouseMove(u, h.x, h.y);
  }
  onHandleChange({ handle: e, e: t }) {
    const i = this.options, s = this.handles, r = this.cellView, o = e.options.index;
    if (Array.isArray(s)) {
      for (let l = 0, a = s.length; l < a; l += 1)
        l !== o && s[l].hide();
      if (this.focus(), this.setEventData(t, {
        sourceAnchor: r.sourceAnchor.clone(),
        targetAnchor: r.targetAnchor.clone(),
        sourceAnchorDef: Tt(this.cell.prop(["source", "anchor"])),
        targetAnchorDef: Tt(this.cell.prop(["target", "anchor"]))
      }), this.cell.startBatch("move-segment", { ui: !0, toolId: this.cid }), !i.stopPropagation) {
        const l = this.normalizeEvent(t), a = this.graph.snapToGrid(l.clientX, l.clientY);
        r.notifyMouseDown(l, a.x, a.y);
      }
    }
  }
  onHandleChanged({ e }) {
    const t = this.options, i = this.cellView;
    t.removeRedundancies && i.removeRedundantLinearVertices({ ui: !0, toolId: this.cid });
    const s = this.normalizeEvent(e), r = this.graph.snapToGrid(s.clientX, s.clientY);
    this.render(), this.blur(), this.cell.stopBatch("move-segment", { ui: !0, toolId: this.cid }), t.stopPropagation || i.notifyMouseUp(s, r.x, r.y), i.checkMouseleave(s), t.onChanged && t.onChanged({ edge: i.cell, edgeView: i });
  }
  updateHandle(e, t, i, s = 0) {
    const r = this.options.precision || 0, o = Math.abs(t.x - i.x) < r, l = Math.abs(t.y - i.y) < r;
    if (o || l) {
      const a = new me(t, i);
      if (a.length() < this.options.threshold)
        e.hide();
      else {
        const u = a.getCenter(), h = o ? "x" : "y";
        u[h] += s || 0;
        const f = a.vector().vectorAngle(new I(1, 0));
        e.updatePosition(u.x, u.y, f, this.cellView), e.show(), e.options.axis = h;
      }
    } else
      e.hide();
  }
  onRemove() {
    this.resetHandles();
  }
}
(function(n) {
  class e extends dt {
    constructor(i) {
      super(), this.options = i, this.render(), this.delegateEvents({
        mousedown: "onMouseDown",
        touchstart: "onMouseDown"
      });
    }
    render() {
      this.container = dt.createElement("rect", !0);
      const i = this.options.attrs;
      if (typeof i == "function") {
        const s = n.getDefaults();
        this.setAttrs(Object.assign(Object.assign({}, s.attrs), i(this)));
      } else
        this.setAttrs(i);
      this.addClass(this.prefixClassName("edge-tool-segment"));
    }
    updatePosition(i, s, r, o) {
      const l = o.getClosestPoint(new I(i, s)) || new I(i, s);
      let a = kn().translate(l.x, l.y);
      if (l.equals({ x: i, y: s }))
        a = a.rotate(r);
      else {
        let u = new me(i, s, l.x, l.y).vector().vectorAngle(new I(1, 0));
        u !== 0 && (u += 90), a = a.rotate(u);
      }
      this.setAttrs({
        transform: zc(a),
        cursor: r % 180 === 0 ? "row-resize" : "col-resize"
      });
    }
    onMouseDown(i) {
      this.options.guard(i) || (this.trigger("change", { e: i, handle: this }), i.stopPropagation(), i.preventDefault(), this.options.graph.view.undelegateEvents(), this.delegateDocumentEvents({
        mousemove: "onMouseMove",
        touchmove: "onMouseMove",
        mouseup: "onMouseUp",
        touchend: "onMouseUp",
        touchcancel: "onMouseUp"
      }, i.data));
    }
    onMouseMove(i) {
      this.emit("changing", { e: i, handle: this });
    }
    onMouseUp(i) {
      this.emit("changed", { e: i, handle: this }), this.undelegateDocumentEvents(), this.options.graph.view.delegateEvents();
    }
    show() {
      this.container.style.display = "";
    }
    hide() {
      this.container.style.display = "none";
    }
  }
  n.Handle = e;
})(Oh || (Oh = {}));
(function(n) {
  n.config({
    name: "segments",
    precision: 0.5,
    threshold: 40,
    snapRadius: 10,
    stopPropagation: !0,
    removeRedundancies: !0,
    attrs: {
      width: 20,
      height: 8,
      x: -10,
      y: -4,
      rx: 4,
      ry: 4,
      fill: "#333",
      stroke: "#fff",
      "stroke-width": 2
    },
    createHandle: (e) => new n.Handle(e),
    anchor: OM
  });
})(Oh || (Oh = {}));
class wp extends rn.ToolItem {
  get type() {
    return this.options.type;
  }
  onRender() {
    Me(this.container, this.prefixClassName(`edge-tool-${this.type}-anchor`)), this.toggleArea(!1), this.update();
  }
  update() {
    const e = this.type;
    return this.cellView.getTerminalView(e) ? (this.updateAnchor(), this.updateArea(), this.container.style.display = "") : this.container.style.display = "none", this;
  }
  updateAnchor() {
    const e = this.childNodes;
    if (!e)
      return;
    const t = e.anchor;
    if (!t)
      return;
    const i = this.type, s = this.cellView, r = this.options, o = s.getTerminalAnchor(i), l = s.cell.prop([i, "anchor"]);
    t.setAttribute("transform", `translate(${o.x}, ${o.y})`);
    const a = l ? r.customAnchorAttrs : r.defaultAnchorAttrs;
    a && Object.keys(a).forEach((c) => {
      t.setAttribute(c, a[c]);
    });
  }
  updateArea() {
    const e = this.childNodes;
    if (!e)
      return;
    const t = e.area;
    if (!t)
      return;
    const i = this.type, s = this.cellView, r = s.getTerminalView(i);
    if (r) {
      const o = r.cell, l = s.getTerminalMagnet(i);
      let a = this.options.areaPadding || 0;
      Number.isFinite(a) || (a = 0);
      let c, u, h;
      r.isEdgeElement(l) ? (c = r.getBBox(), u = 0, h = c.getCenter()) : (c = r.getUnrotatedBBoxOfElement(l), u = o.getAngle(), h = c.getCenter(), u && h.rotate(-u, o.getBBox().getCenter())), c.inflate(a), nt(t, {
        x: -c.width / 2,
        y: -c.height / 2,
        width: c.width,
        height: c.height,
        transform: `translate(${h.x}, ${h.y}) rotate(${u})`
      });
    }
  }
  toggleArea(e) {
    if (this.childNodes) {
      const t = this.childNodes.area;
      t && (t.style.display = e ? "" : "none");
    }
  }
  onMouseDown(e) {
    this.guard(e) || (e.stopPropagation(), e.preventDefault(), this.graph.view.undelegateEvents(), this.options.documentEvents && this.delegateDocumentEvents(this.options.documentEvents), this.focus(), this.toggleArea(this.options.restrictArea), this.cell.startBatch("move-anchor", {
      ui: !0,
      toolId: this.cid
    }));
  }
  resetAnchor(e) {
    const t = this.type, i = this.cell;
    e ? i.prop([t, "anchor"], e, {
      rewrite: !0,
      ui: !0,
      toolId: this.cid
    }) : i.removeProp([t, "anchor"], {
      ui: !0,
      toolId: this.cid
    });
  }
  onMouseMove(e) {
    const t = this.type, i = this.cellView, s = i.getTerminalView(t);
    if (s == null)
      return;
    const r = this.normalizeEvent(e), o = s.cell, l = i.getTerminalMagnet(t);
    let a = this.graph.coord.clientToLocalPoint(r.clientX, r.clientY);
    const c = this.options.snap;
    if (typeof c == "function") {
      const f = Ee(c, i, a, s, l, t, i, this);
      a = I.create(f);
    }
    if (this.options.restrictArea)
      if (s.isEdgeElement(l)) {
        const f = s.getClosestPoint(a);
        f && (a = f);
      } else {
        const f = s.getUnrotatedBBoxOfElement(l), d = o.getAngle(), p = o.getBBox().getCenter(), g = a.clone().rotate(d, p);
        f.containsPoint(g) || (a = f.getNearestPointToPoint(g).rotate(-d, p));
      }
    let u;
    const h = this.options.anchor;
    typeof h == "function" && (u = Ee(h, i, a, s, l, t, i, this)), this.resetAnchor(u), this.update();
  }
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  onMouseUp(e) {
    this.graph.view.delegateEvents(), this.undelegateDocumentEvents(), this.blur(), this.toggleArea(!1);
    const t = this.cellView;
    this.options.removeRedundancies && t.removeRedundantLinearVertices({ ui: !0, toolId: this.cid }), this.cell.stopBatch("move-anchor", { ui: !0, toolId: this.cid });
  }
  onDblClick() {
    const e = this.options.resetAnchor;
    e && this.resetAnchor(e === !0 ? void 0 : e), this.update();
  }
}
(function(n) {
  n.config({
    tagName: "g",
    markup: [
      {
        tagName: "circle",
        selector: "anchor",
        attrs: {
          cursor: "pointer"
        }
      },
      {
        tagName: "rect",
        selector: "area",
        attrs: {
          "pointer-events": "none",
          fill: "none",
          stroke: "#33334F",
          "stroke-dasharray": "2,4",
          rx: 5,
          ry: 5
        }
      }
    ],
    events: {
      mousedown: "onMouseDown",
      touchstart: "onMouseDown",
      dblclick: "onDblClick"
    },
    documentEvents: {
      mousemove: "onMouseMove",
      touchmove: "onMouseMove",
      mouseup: "onMouseUp",
      touchend: "onMouseUp",
      touchcancel: "onMouseUp"
    },
    customAnchorAttrs: {
      "stroke-width": 4,
      stroke: "#33334F",
      fill: "#FFFFFF",
      r: 5
    },
    defaultAnchorAttrs: {
      "stroke-width": 2,
      stroke: "#FFFFFF",
      fill: "#33334F",
      r: 6
    },
    areaPadding: 6,
    snapRadius: 10,
    resetAnchor: !0,
    restrictArea: !0,
    removeRedundancies: !0,
    anchor: OM,
    snap(e, t, i, s, r, o) {
      const l = o.options.snapRadius || 0, a = s === "source", c = a ? 0 : -1, u = this.cell.getVertexAt(c) || this.getTerminalAnchor(a ? "target" : "source");
      return u && (Math.abs(u.x - e.x) < l && (e.x = u.x), Math.abs(u.y - e.y) < l && (e.y = u.y)), e;
    }
  });
})(wp || (wp = {}));
const r6e = wp.define({
  name: "source-anchor",
  type: "source"
}), o6e = wp.define({
  name: "target-anchor",
  type: "target"
});
var l6e = function(n, e) {
  var t = {};
  for (var i in n)
    Object.prototype.hasOwnProperty.call(n, i) && e.indexOf(i) < 0 && (t[i] = n[i]);
  if (n != null && typeof Object.getOwnPropertySymbols == "function")
    for (var s = 0, i = Object.getOwnPropertySymbols(n); s < i.length; s++)
      e.indexOf(i[s]) < 0 && Object.prototype.propertyIsEnumerable.call(n, i[s]) && (t[i[s]] = n[i[s]]);
  return t;
};
class xp extends rn.ToolItem {
  get type() {
    return this.options.type;
  }
  get ratio() {
    return this.options.ratio;
  }
  init() {
    if (this.options.attrs) {
      const e = this.options.attrs, { class: t } = e, i = l6e(e, ["class"]);
      this.setAttrs(i, this.container), t && Me(this.container, t);
    }
  }
  onRender() {
    Me(this.container, this.prefixClassName(`edge-tool-${this.type}-arrowhead`)), this.update();
  }
  update() {
    const e = this.ratio, t = this.cellView, i = t.getTangentAtRatio(e), s = i ? i.start : t.getPointAtRatio(e), r = i && i.vector().vectorAngle(new I(1, 0)) || 0;
    if (!s)
      return this;
    const o = kn().translate(s.x, s.y).rotate(r);
    return rc(this.container, o, { absolute: !0 }), this;
  }
  onMouseDown(e) {
    if (this.guard(e))
      return;
    e.stopPropagation(), e.preventDefault();
    const t = this.cellView;
    if (t.can("arrowheadMovable")) {
      t.cell.startBatch("move-arrowhead", {
        ui: !0,
        toolId: this.cid
      });
      const i = this.graph.snapToGrid(e.clientX, e.clientY), s = t.prepareArrowheadDragging(this.type, {
        x: i.x,
        y: i.y,
        options: Object.assign(Object.assign({}, this.options), { toolId: this.cid })
      });
      this.cellView.setEventData(e, s), this.delegateDocumentEvents(this.options.documentEvents, e.data), t.graph.view.undelegateEvents(), this.container.style.pointerEvents = "none";
    }
    this.focus();
  }
  onMouseMove(e) {
    const t = this.normalizeEvent(e), i = this.graph.snapToGrid(t.clientX, t.clientY);
    this.cellView.onMouseMove(t, i.x, i.y), this.update();
  }
  onMouseUp(e) {
    this.undelegateDocumentEvents();
    const t = this.normalizeEvent(e), i = this.cellView, s = this.graph.snapToGrid(t.clientX, t.clientY);
    i.onMouseUp(t, s.x, s.y), this.graph.view.delegateEvents(), this.blur(), this.container.style.pointerEvents = "", i.cell.stopBatch("move-arrowhead", {
      ui: !0,
      toolId: this.cid
    });
  }
}
(function(n) {
  n.config({
    tagName: "path",
    isSVGElement: !0,
    events: {
      mousedown: "onMouseDown",
      touchstart: "onMouseDown"
    },
    documentEvents: {
      mousemove: "onMouseMove",
      touchmove: "onMouseMove",
      mouseup: "onMouseUp",
      touchend: "onMouseUp",
      touchcancel: "onMouseUp"
    }
  });
})(xp || (xp = {}));
const a6e = xp.define({
  name: "source-arrowhead",
  type: "source",
  ratio: 0,
  attrs: {
    d: "M 10 -8 -10 0 10 8 Z",
    fill: "#333",
    stroke: "#fff",
    "stroke-width": 2,
    cursor: "move"
  }
}), c6e = xp.define({
  name: "target-arrowhead",
  type: "target",
  ratio: 1,
  attrs: {
    d: "M -10 -8 10 0 -10 8 Z",
    fill: "#333",
    stroke: "#fff",
    "stroke-width": 2,
    cursor: "move"
  }
});
class uc extends rn.ToolItem {
  constructor() {
    super(...arguments), this.labelIndex = -1, this.distance = 0.5, this.dblClick = this.onCellDblClick.bind(this);
  }
  onRender() {
    const e = this.cellView;
    e && e.on("cell:dblclick", this.dblClick);
  }
  createElement() {
    const e = [
      this.prefixClassName(`${this.cell.isEdge() ? "edge" : "node"}-tool-editor`),
      this.prefixClassName("cell-tool-editor")
    ];
    this.editor = rn.createElement("div", !1), this.addClass(e, this.editor), this.editor.contentEditable = "true", this.container.appendChild(this.editor);
  }
  removeElement() {
    this.undelegateDocumentEvents(), this.editor && (this.container.removeChild(this.editor), this.editor = null);
  }
  updateEditor() {
    const { cell: e, editor: t } = this;
    if (!t)
      return;
    const { style: i } = t;
    e.isNode() ? this.updateNodeEditorTransform() : e.isEdge() && this.updateEdgeEditorTransform();
    const { attrs: s } = this.options;
    i.fontSize = `${s.fontSize}px`, i.fontFamily = s.fontFamily, i.color = s.color, i.backgroundColor = s.backgroundColor;
    const r = this.getCellText() || "";
    return t.innerText = r, this.setCellText(""), this;
  }
  updateNodeEditorTransform() {
    const { graph: e, cell: t, editor: i } = this;
    if (!i)
      return;
    let s = I.create(), r = 20, o = "", { x: l, y: a } = this.options;
    const { width: c, height: u } = this.options;
    if (typeof l < "u" && typeof a < "u") {
      const d = t.getBBox();
      l = ks(l, d.width), a = ks(a, d.height), s = d.topLeft.translate(l, a), r = d.width - l * 2;
    } else {
      const d = t.getBBox();
      s = d.center, r = d.width - 4, o = "translate(-50%, -50%)";
    }
    const h = e.scale(), { style: f } = i;
    s = e.localToGraph(s), f.left = `${s.x}px`, f.top = `${s.y}px`, f.transform = `scale(${h.sx}, ${h.sy}) ${o}`, f.minWidth = `${r}px`, typeof c == "number" && (f.width = `${c}px`), typeof u == "number" && (f.height = `${u}px`);
  }
  updateEdgeEditorTransform() {
    if (!this.event)
      return;
    const { graph: e, editor: t } = this;
    if (!t)
      return;
    let i = I.create(), s = 20;
    const { style: r } = t, o = this.event.target, l = o.parentElement;
    if (l && jc(l, this.prefixClassName("edge-label"))) {
      const u = l.getAttribute("data-index") || "0";
      this.labelIndex = parseInt(u, 10);
      const h = l.getAttribute("transform"), { translation: f } = kg(h);
      i = new I(f.tx, f.ty), s = yt.getBBox(o).width;
    } else {
      if (!this.options.labelAddable)
        return this;
      i = e.clientToLocal(I.create(this.event.clientX, this.event.clientY));
      const h = this.cellView.path.closestPointLength(i);
      this.distance = h, this.labelIndex = -1;
    }
    i = e.localToGraph(i);
    const c = e.scale();
    r.left = `${i.x}px`, r.top = `${i.y}px`, r.minWidth = `${s}px`, r.transform = `scale(${c.sx}, ${c.sy}) translate(-50%, -50%)`;
  }
  onDocumentMouseUp(e) {
    if (this.editor && e.target !== this.editor) {
      const t = this.editor.innerText.replace(/\n$/, "") || "";
      this.setCellText(t !== "" ? t : null), this.removeElement();
    }
  }
  onCellDblClick({ e }) {
    this.editor || (e.stopPropagation(), this.removeElement(), this.event = e, this.createElement(), this.updateEditor(), this.autoFocus(), this.delegateDocumentEvents(this.options.documentEvents));
  }
  onMouseDown(e) {
    e.stopPropagation();
  }
  autoFocus() {
    setTimeout(() => {
      this.editor && (this.editor.focus(), this.selectText());
    });
  }
  selectText() {
    if (window.getSelection && this.editor) {
      const e = document.createRange(), t = window.getSelection();
      e.selectNodeContents(this.editor), t.removeAllRanges(), t.addRange(e);
    }
  }
  getCellText() {
    const { getText: e } = this.options;
    if (typeof e == "function")
      return Ee(e, this.cellView, {
        cell: this.cell,
        index: this.labelIndex
      });
    if (typeof e == "string") {
      if (this.cell.isNode())
        return this.cell.attr(e);
      if (this.cell.isEdge() && this.labelIndex !== -1)
        return this.cell.prop(`labels/${this.labelIndex}/attrs/${e}`);
    }
  }
  setCellText(e) {
    const t = this.options.setText;
    if (typeof t == "function") {
      Ee(t, this.cellView, {
        cell: this.cell,
        value: e,
        index: this.labelIndex,
        distance: this.distance
      });
      return;
    }
    if (typeof t == "string") {
      if (this.cell.isNode()) {
        e !== null && this.cell.attr(t, e);
        return;
      }
      if (this.cell.isEdge()) {
        const i = this.cell;
        if (this.labelIndex === -1) {
          if (e) {
            const s = {
              position: {
                distance: this.distance
              },
              attrs: {}
            };
            Bc(s, `attrs/${t}`, e), i.appendLabel(s);
          }
        } else
          e !== null ? i.prop(`labels/${this.labelIndex}/attrs/${t}`, e) : typeof this.labelIndex == "number" && i.removeLabelAt(this.labelIndex);
      }
    }
  }
  onRemove() {
    const e = this.cellView;
    e && e.off("cell:dblclick", this.dblClick), this.removeElement();
  }
}
(function(n) {
  n.config({
    tagName: "div",
    isSVGElement: !1,
    events: {
      mousedown: "onMouseDown",
      touchstart: "onMouseDown"
    },
    documentEvents: {
      mouseup: "onDocumentMouseUp",
      touchend: "onDocumentMouseUp",
      touchcancel: "onDocumentMouseUp"
    }
  });
})(uc || (uc = {}));
(function(n) {
  n.NodeEditor = n.define({
    attrs: {
      fontSize: 14,
      fontFamily: "Arial, helvetica, sans-serif",
      color: "#000",
      backgroundColor: "#fff"
    },
    getText: "text/text",
    setText: "text/text"
  }), n.EdgeEditor = n.define({
    attrs: {
      fontSize: 14,
      fontFamily: "Arial, helvetica, sans-serif",
      color: "#000",
      backgroundColor: "#fff"
    },
    labelAddable: !0,
    getText: "label/text",
    setText: "label/text"
  });
})(uc || (uc = {}));
var xM = function(n, e) {
  var t = {};
  for (var i in n)
    Object.prototype.hasOwnProperty.call(n, i) && e.indexOf(i) < 0 && (t[i] = n[i]);
  if (n != null && typeof Object.getOwnPropertySymbols == "function")
    for (var s = 0, i = Object.getOwnPropertySymbols(n); s < i.length; s++)
      e.indexOf(i[s]) < 0 && Object.prototype.propertyIsEnumerable.call(n, i[s]) && (t[i[s]] = n[i[s]]);
  return t;
}, hc;
(function(n) {
  n.presets = {
    boundary: Op,
    button: Bo,
    "button-remove": Bo.Remove,
    "node-editor": uc.NodeEditor
  }, n.registry = Ut.create({
    type: "node tool",
    process(e, t) {
      if (typeof t == "function")
        return t;
      let i = rn.ToolItem;
      const { inherit: s } = t, r = xM(t, ["inherit"]);
      if (s) {
        const o = this.get(s);
        o == null ? this.onNotFound(s, "inherited") : i = o;
      }
      return r.name == null && (r.name = e), i.define.call(i, r);
    }
  }), n.registry.register(n.presets, !0);
})(hc || (hc = {}));
var fc;
(function(n) {
  n.presets = {
    boundary: Op,
    vertices: yh,
    segments: Oh,
    button: Bo,
    "button-remove": Bo.Remove,
    "source-anchor": r6e,
    "target-anchor": o6e,
    "source-arrowhead": a6e,
    "target-arrowhead": c6e,
    "edge-editor": uc.EdgeEditor
  }, n.registry = Ut.create({
    type: "edge tool",
    process(e, t) {
      if (typeof t == "function")
        return t;
      let i = rn.ToolItem;
      const { inherit: s } = t, r = xM(t, ["inherit"]);
      if (s) {
        const o = this.get(s);
        o == null ? this.onNotFound(s, "inherited") : i = o;
      }
      return r.name == null && (r.name = e), i.define.call(i, r);
    }
  }), n.registry.register(n.presets, !0);
})(fc || (fc = {}));
const u6e = Ur("center"), h6e = Ur("topCenter"), f6e = Ur("bottomCenter"), d6e = Ur("leftMiddle"), p6e = Ur("rightMiddle"), g6e = Ur("topLeft"), m6e = Ur("topRight"), b6e = Ur("bottomLeft"), v6e = Ur("bottomRight");
function Ur(n) {
  return function(e, t, i, s = {}) {
    const r = s.rotate ? e.getUnrotatedBBoxOfElement(t) : e.getBBoxOfElement(t), o = r[n];
    o.x += ks(s.dx, r.width), o.y += ks(s.dy, r.height);
    const l = e.cell;
    return s.rotate ? o.rotate(-l.getAngle(), l.getBBox().getCenter()) : o;
  };
}
function _g(n) {
  return function(e, t, i, s) {
    if (i instanceof Element) {
      const r = this.graph.findViewByElem(i);
      let o;
      if (r)
        if (r.isEdgeElement(i)) {
          const l = s.fixedAt != null ? s.fixedAt : "50%";
          o = SM(r, l);
        } else
          o = r.getBBoxOfElement(i).getCenter();
      else
        o = new I();
      return n.call(this, e, t, o, s);
    }
    return n.apply(this, arguments);
  };
}
function SM(n, e) {
  const t = Fr(e), i = typeof e == "string" ? parseFloat(e) : e;
  return t ? n.getPointAtRatio(i / 100) : n.getPointAtLength(i);
}
const y6e = function(n, e, t, i) {
  const s = st.normalize(n.cell.getAngle()), r = n.getBBoxOfElement(e), o = r.getCenter(), l = r.getTopLeft(), a = r.getBottomRight();
  let c = i.padding;
  if (Number.isFinite(c) || (c = 0), l.y + c <= t.y && t.y <= a.y - c) {
    const u = t.y - o.y;
    o.x += s === 0 || s === 180 ? 0 : u * 1 / Math.tan(st.toRad(s)), o.y += u;
  } else if (l.x + c <= t.x && t.x <= a.x - c) {
    const u = t.x - o.x;
    o.y += s === 90 || s === 270 ? 0 : u * Math.tan(st.toRad(s)), o.x += u;
  }
  return o;
}, O6e = _g(y6e), w6e = function(n, e, t, i, s) {
  const r = n.cell.getConnectionPoint(this.cell, s);
  return (i.dx || i.dy) && r.translate(i.dx || 0, i.dy || 0), r;
}, x6e = function(n, e, t, i) {
  let s, r = 0, o;
  const l = n.cell;
  i.rotate ? (s = n.getUnrotatedBBoxOfElement(e), o = l.getBBox().getCenter(), r = l.getAngle()) : s = n.getBBoxOfElement(e);
  const a = i.padding;
  a != null && Number.isFinite(a) && s.inflate(a), i.rotate && t.rotate(r, o);
  const c = s.getNearestSideToPoint(t);
  let u;
  switch (c) {
    case "left":
      u = s.getLeftMiddle();
      break;
    case "right":
      u = s.getRightMiddle();
      break;
    case "top":
      u = s.getTopCenter();
      break;
    case "bottom":
      u = s.getBottomCenter();
      break;
  }
  const h = i.direction;
  return h === "H" ? (c === "top" || c === "bottom") && (t.x <= s.x + s.width ? u = s.getLeftMiddle() : u = s.getRightMiddle()) : h === "V" && (t.y <= s.y + s.height ? u = s.getTopCenter() : u = s.getBottomCenter()), i.rotate ? u.rotate(-r, o) : u;
}, S6e = _g(x6e), C6e = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  bottom: f6e,
  bottomLeft: b6e,
  bottomRight: v6e,
  center: u6e,
  left: d6e,
  midSide: S6e,
  nodeCenter: w6e,
  orth: O6e,
  right: p6e,
  top: h6e,
  topLeft: g6e,
  topRight: m6e
}, Symbol.toStringTag, { value: "Module" }));
var dc;
(function(n) {
  n.presets = C6e, n.registry = Ut.create({
    type: "node endpoint"
  }), n.registry.register(n.presets, !0);
})(dc || (dc = {}));
const k6e = function(n, e, t, i) {
  let s = i.ratio != null ? i.ratio : 0.5;
  return s > 1 && (s /= 100), n.getPointAtRatio(s);
}, P6e = function(n, e, t, i) {
  const s = i.length != null ? i.length : 20;
  return n.getPointAtLength(s);
}, CM = function(n, e, t, i) {
  const s = n.getClosestPoint(t);
  return s ?? new I();
}, A6e = _g(CM), E6e = function(n, e, t, i) {
  const r = n.getConnection(), o = n.getConnectionSubdivisions(), l = new me(t.clone().translate(0, 1e6), t.clone().translate(0, -1e6)), a = new me(t.clone().translate(1e6, 0), t.clone().translate(-1e6, 0)), c = l.intersect(r, {
    segmentSubdivisions: o
  }), u = a.intersect(r, {
    segmentSubdivisions: o
  }), h = [];
  return c && h.push(...c), u && h.push(...u), h.length > 0 ? t.closest(h) : i.fallbackAt != null ? SM(n, i.fallbackAt) : Ee(CM, this, n, e, t, i);
}, $6e = _g(E6e), T6e = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  closest: A6e,
  length: P6e,
  orth: $6e,
  ratio: k6e
}, Symbol.toStringTag, { value: "Module" }));
var pc;
(function(n) {
  n.presets = T6e, n.registry = Ut.create({
    type: "edge endpoint"
  }), n.registry.register(n.presets, !0);
})(pc || (pc = {}));
function Mg(n, e, t) {
  let i;
  if (typeof t == "object") {
    if (Number.isFinite(t.y)) {
      const r = new me(e, n), { start: o, end: l } = r.parallel(t.y);
      e = o, n = l;
    }
    i = t.x;
  } else
    i = t;
  if (i == null || !Number.isFinite(i))
    return n;
  const s = n.distance(e);
  return i === 0 && s > 0 ? n : n.move(e, -Math.min(i, s - 1));
}
function Sp(n) {
  const e = n.getAttribute("stroke-width");
  return e === null ? 0 : parseFloat(e) || 0;
}
function _6e(n) {
  if (n == null)
    return null;
  let e = n;
  do {
    let t = e.tagName;
    if (typeof t != "string")
      return null;
    if (t = t.toUpperCase(), t === "G")
      e = e.firstElementChild;
    else if (t === "TITLE")
      e = e.nextElementSibling;
    else
      break;
  } while (e);
  return e;
}
const kM = function(n, e, t, i) {
  const s = e.getBBoxOfElement(t);
  i.stroked && s.inflate(Sp(t) / 2);
  const r = n.intersect(s), o = r && r.length ? n.start.closest(r) : n.end;
  return Mg(o, n.start, i.offset);
}, M6e = function(n, e, t, i, s) {
  const r = e.cell, o = r.isNode() ? r.getAngle() : 0;
  if (o === 0)
    return Ee(kM, this, n, e, t, i, s);
  const l = e.getUnrotatedBBoxOfElement(t);
  i.stroked && l.inflate(Sp(t) / 2);
  const a = l.getCenter(), c = n.clone().rotate(o, a), u = c.setLength(1e6).intersect(l), h = u && u.length ? c.start.closest(u).rotate(-o, a) : n.end;
  return Mg(h, n.start, i.offset);
}, R6e = function(n, e, t, i) {
  let s, r;
  const o = n.end, l = i.selector;
  if (typeof l == "string" ? s = e.findOne(l) : Array.isArray(l) ? s = Xy(t, l) : s = _6e(t), !Lo(s)) {
    if (s === t || !Lo(t))
      return o;
    s = t;
  }
  const a = e.getShapeOfElement(s), c = e.getMatrixOfElement(s), u = e.getRootTranslatedMatrix(), h = e.getRootRotatedMatrix(), f = u.multiply(h).multiply(c), d = f.inverse(), p = yt.transformLine(n, d), g = p.start.clone(), m = e.getDataOfElement(s);
  if (i.insideout === !1) {
    m.shapeBBox == null && (m.shapeBBox = a.bbox());
    const O = m.shapeBBox;
    if (O != null && O.containsPoint(g))
      return o;
  }
  i.extrapolate === !0 && p.setLength(1e6);
  let b;
  if (ke.isPath(a)) {
    const O = i.precision || 2;
    m.segmentSubdivisions == null && (m.segmentSubdivisions = a.getSegmentSubdivisions({
      precision: O
    })), b = {
      precision: O,
      segmentSubdivisions: m.segmentSubdivisions
    }, r = p.intersect(a, b);
  } else
    r = p.intersect(a);
  r ? Array.isArray(r) && (r = g.closest(r)) : i.sticky === !0 && (ue.isRectangle(a) ? r = a.getNearestPointToPoint(g) : _s.isEllipse(a) ? r = a.intersectsWithLineFromCenterToPoint(g) : r = a.closestPoint(g, b));
  const y = r ? yt.transformPoint(r, f) : o;
  let v = i.offset || 0;
  return i.stroked !== !1 && (typeof v == "object" ? (v = Object.assign({}, v), v.x == null && (v.x = 0), v.x += Sp(s) / 2) : v += Sp(s) / 2), Mg(y, n.start, v);
};
function D6e(n, e, t = 0) {
  const { start: i, end: s } = n;
  let r, o, l, a;
  switch (e) {
    case "left":
      a = "x", r = s, o = i, l = -1;
      break;
    case "right":
      a = "x", r = i, o = s, l = 1;
      break;
    case "top":
      a = "y", r = s, o = i, l = -1;
      break;
    case "bottom":
      a = "y", r = i, o = s, l = 1;
      break;
    default:
      return;
  }
  i[a] < s[a] ? r[a] = o[a] : o[a] = r[a], Number.isFinite(t) && (r[a] += l * t, o[a] += l * t);
}
const L6e = function(n, e, t, i) {
  const { alignOffset: s, align: r } = i;
  return r && D6e(n, r, s), Mg(n.end, n.start, i.offset);
}, N6e = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  anchor: L6e,
  bbox: kM,
  boundary: R6e,
  rect: M6e
}, Symbol.toStringTag, { value: "Module" }));
var gc;
(function(n) {
  n.presets = N6e, n.registry = Ut.create({
    type: "connection point"
  }), n.registry.register(n.presets, !0);
})(gc || (gc = {}));
const I6e = function(n) {
  return [...n];
}, Q6e = function(n, e, t) {
  const i = e.side || "bottom", s = Fl(e.padding || 40), r = t.sourceBBox, o = t.targetBBox, l = r.getCenter(), a = o.getCenter();
  let c, u, h;
  switch (i) {
    case "top":
      h = -1, c = "y", u = "height";
      break;
    case "left":
      h = -1, c = "x", u = "width";
      break;
    case "right":
      h = 1, c = "x", u = "width";
      break;
    case "bottom":
    default:
      h = 1, c = "y", u = "height";
      break;
  }
  return l[c] += h * (r[u] / 2 + s[i]), a[c] += h * (o[u] / 2 + s[i]), h * (l[c] - a[c]) > 0 ? a[c] = l[c] : l[c] = a[c], [l.toJSON(), ...n, a.toJSON()];
};
function Kf(n) {
  return new ue(n.x, n.y, 0, 0);
}
function Cp(n = {}) {
  const e = Fl(n.padding || 20);
  return {
    x: -e.left,
    y: -e.top,
    width: e.left + e.right,
    height: e.top + e.bottom
  };
}
function PM(n, e = {}) {
  return n.sourceBBox.clone().moveAndExpand(Cp(e));
}
function AM(n, e = {}) {
  return n.targetBBox.clone().moveAndExpand(Cp(e));
}
function B6e(n, e = {}) {
  return n.sourceAnchor ? n.sourceAnchor : PM(n, e).getCenter();
}
function j6e(n, e = {}) {
  return n.targetAnchor ? n.targetAnchor : AM(n, e).getCenter();
}
const EM = function(n, e, t) {
  let i = PM(t, e), s = AM(t, e);
  const r = B6e(t, e), o = j6e(t, e);
  i = i.union(Kf(r)), s = s.union(Kf(o));
  const l = n.map((u) => I.create(u));
  l.unshift(r), l.push(o);
  let a = null;
  const c = [];
  for (let u = 0, h = l.length - 1; u < h; u += 1) {
    let f = null;
    const d = l[u], p = l[u + 1], g = Fi.getBearing(d, p) != null;
    if (u === 0)
      u + 1 === h ? i.intersectsWithRect(s.clone().inflate(1)) ? f = Fi.insideNode(d, p, i, s) : g || (f = Fi.nodeToNode(d, p, i, s)) : i.containsPoint(p) ? f = Fi.insideNode(d, p, i, Kf(p).moveAndExpand(Cp(e))) : g || (f = Fi.nodeToVertex(d, p, i));
    else if (u + 1 === h) {
      const m = g && Fi.getBearing(p, d) === a;
      s.containsPoint(d) || m ? f = Fi.insideNode(d, p, Kf(d).moveAndExpand(Cp(e)), s, a) : g || (f = Fi.vertexToNode(d, p, s, a));
    } else
      g || (f = Fi.vertexToVertex(d, p, a));
    f ? (c.push(...f.points), a = f.direction) : a = Fi.getBearing(d, p), u + 1 < h && c.push(p);
  }
  return c;
};
var Fi;
(function(n) {
  const e = {
    N: "S",
    S: "N",
    E: "W",
    W: "E"
  }, t = {
    N: -Math.PI / 2 * 3,
    S: -Math.PI / 2,
    E: 0,
    W: Math.PI
  };
  function i(h, f, d) {
    let p = new I(h.x, f.y);
    return d.containsPoint(p) && (p = new I(f.x, h.y)), p;
  }
  function s(h, f) {
    return h[f === "W" || f === "E" ? "width" : "height"];
  }
  n.getBBoxSize = s;
  function r(h, f) {
    return h.x === f.x ? h.y > f.y ? "N" : "S" : h.y === f.y ? h.x > f.x ? "W" : "E" : null;
  }
  n.getBearing = r;
  function o(h, f, d) {
    const p = new I(h.x, f.y), g = new I(f.x, h.y), m = r(h, p), b = r(h, g), y = d ? e[d] : null, v = m === d || m !== y && (b === y || b !== d) ? p : g;
    return { points: [v], direction: r(v, f) };
  }
  n.vertexToVertex = o;
  function l(h, f, d) {
    const p = i(h, f, d);
    return { points: [p], direction: r(p, f) };
  }
  n.nodeToVertex = l;
  function a(h, f, d, p) {
    const g = [new I(h.x, f.y), new I(f.x, h.y)], m = g.filter((v) => !d.containsPoint(v)), b = m.filter((v) => r(v, h) !== p);
    let y;
    if (b.length > 0)
      return y = b.filter((v) => r(h, v) === p).pop(), y = y || b[0], {
        points: [y],
        direction: r(y, f)
      };
    {
      y = ZQ(g, m)[0];
      const v = I.create(f).move(y, -s(d, p) / 2);
      return {
        points: [i(v, h, d), v],
        direction: r(v, f)
      };
    }
  }
  n.vertexToNode = a;
  function c(h, f, d, p) {
    let g = l(f, h, p);
    const m = g.points[0];
    if (d.containsPoint(m)) {
      g = l(h, f, d);
      const b = g.points[0];
      if (p.containsPoint(b)) {
        const y = I.create(h).move(b, -s(d, r(h, b)) / 2), v = I.create(f).move(m, -s(p, r(f, m)) / 2), O = new me(y, v).getCenter(), x = l(h, O, d), S = o(O, f, x.direction);
        g.points = [x.points[0], S.points[0]], g.direction = S.direction;
      }
    }
    return g;
  }
  n.nodeToNode = c;
  function u(h, f, d, p, g) {
    const m = d.union(p).inflate(1), b = m.getCenter(), y = b.distance(f) > b.distance(h), v = y ? f : h, O = y ? h : f;
    let x, S, C;
    g ? (x = I.fromPolar(m.width + m.height, t[g], v), x = m.getNearestPointToPoint(x).move(x, -1)) : x = m.getNearestPointToPoint(v).move(v, 1), S = i(x, O, m);
    let k;
    x.round().equals(S.round()) ? (S = I.fromPolar(m.width + m.height, st.toRad(x.theta(v)) + Math.PI / 2, O), S = m.getNearestPointToPoint(S).move(O, 1).round(), C = i(x, S, m), k = y ? [S, C, x] : [x, C, S]) : k = y ? [S, x] : [x, S];
    const E = r(y ? x : S, f);
    return {
      points: k,
      direction: E
    };
  }
  n.insideNode = u;
})(Fi || (Fi = {}));
const z6e = {
  step: 10,
  maxLoopCount: 2e3,
  precision: 1,
  maxDirectionChange: 90,
  perpendicular: !0,
  excludeTerminals: [],
  excludeNodes: [],
  excludeShapes: [],
  startDirections: ["top", "right", "bottom", "left"],
  endDirections: ["top", "right", "bottom", "left"],
  directionMap: {
    top: { x: 0, y: -1 },
    right: { x: 1, y: 0 },
    bottom: { x: 0, y: 1 },
    left: { x: -1, y: 0 }
  },
  cost() {
    return go(this.step, this);
  },
  directions() {
    const n = go(this.step, this), e = go(this.cost, this);
    return [
      { cost: e, offsetX: n, offsetY: 0 },
      { cost: e, offsetX: -n, offsetY: 0 },
      { cost: e, offsetX: 0, offsetY: n },
      { cost: e, offsetX: 0, offsetY: -n }
    ];
  },
  penalties() {
    const n = go(this.step, this);
    return {
      0: 0,
      45: n / 2,
      90: n / 2
    };
  },
  paddingBox() {
    const n = go(this.step, this);
    return {
      x: -n,
      y: -n,
      width: 2 * n,
      height: 2 * n
    };
  },
  fallbackRouter: EM,
  draggingRouter: null,
  snapToGrid: !0
};
function go(n, e) {
  return typeof n == "function" ? n.call(e) : n;
}
function Z6e(n) {
  const e = Object.keys(n).reduce((t, i) => {
    const s = t;
    return i === "fallbackRouter" || i === "draggingRouter" || i === "fallbackRoute" ? s[i] = n[i] : s[i] = go(n[i], n), t;
  }, {});
  if (e.padding) {
    const t = Fl(e.padding);
    e.paddingBox = {
      x: -t.left,
      y: -t.top,
      width: t.left + t.right,
      height: t.top + t.bottom
    };
  }
  return e.directions.forEach((t) => {
    const i = new I(0, 0), s = new I(t.offsetX, t.offsetY);
    t.angle = st.normalize(i.theta(s));
  }), e;
}
const AC = 1, EC = 2;
class F6e {
  constructor() {
    this.items = [], this.hash = {}, this.values = {};
  }
  add(e, t) {
    this.hash[e] ? this.items.splice(this.items.indexOf(e), 1) : this.hash[e] = AC, this.values[e] = t;
    const i = _5(this.items, e, (s) => this.values[s]);
    this.items.splice(i, 0, e);
  }
  pop() {
    const e = this.items.shift();
    return e && (this.hash[e] = EC), e;
  }
  isOpen(e) {
    return this.hash[e] === AC;
  }
  isClose(e) {
    return this.hash[e] === EC;
  }
  isEmpty() {
    return this.items.length === 0;
  }
}
class V6e {
  constructor(e) {
    this.options = e, this.mapGridSize = 100, this.map = {};
  }
  /**
   * Builds a map of all nodes for quicker obstacle queries i.e. is a point
   * contained in any obstacle?
   *
   * A simplified grid search.
   */
  build(e, t) {
    const i = this.options, s = i.excludeTerminals.reduce((c, u) => {
      const h = t[u];
      if (h) {
        const f = e.getCell(h.cell);
        f && c.push(f);
      }
      return c;
    }, []);
    let r = [];
    const o = e.getCell(t.getSourceCellId());
    o && (r = JO(r, o.getAncestors().map((c) => c.id)));
    const l = e.getCell(t.getTargetCellId());
    l && (r = JO(r, l.getAncestors().map((c) => c.id)));
    const a = this.mapGridSize;
    return e.getNodes().reduce((c, u) => {
      const h = s.some((m) => m.id === u.id), f = u.shape ? i.excludeShapes.includes(u.shape) : !1, d = i.excludeNodes.some((m) => typeof m == "string" ? u.id === m : m === u), p = r.includes(u.id), g = f || h || d || p;
      if (u.isVisible() && !g) {
        const m = u.getBBox().moveAndExpand(i.paddingBox), b = m.getOrigin().snapToGrid(a), y = m.getCorner().snapToGrid(a);
        for (let v = b.x; v <= y.x; v += a)
          for (let O = b.y; O <= y.y; O += a) {
            const x = new I(v, O).toString();
            c[x] == null && (c[x] = []), c[x].push(m);
          }
      }
      return c;
    }, this.map), this;
  }
  isAccessible(e) {
    const t = e.clone().snapToGrid(this.mapGridSize).toString(), i = this.map[t];
    return i ? i.every((s) => !s.containsPoint(e)) : !0;
  }
}
function $M(n, e) {
  const t = n.sourceBBox.clone();
  return e && e.paddingBox ? t.moveAndExpand(e.paddingBox) : t;
}
function TM(n, e) {
  const t = n.targetBBox.clone();
  return e && e.paddingBox ? t.moveAndExpand(e.paddingBox) : t;
}
function _M(n, e) {
  return n.sourceAnchor ? n.sourceAnchor : $M(n, e).getCenter();
}
function q6e(n, e) {
  return n.targetAnchor ? n.targetAnchor : TM(n, e).getCenter();
}
function Gm(n, e, t, i, s) {
  const r = 360 / t, o = n.theta(W6e(n, e, i, s)), l = st.normalize(o + r / 2);
  return r * Math.floor(l / r);
}
function W6e(n, e, t, i) {
  const s = i.step, r = e.x - n.x, o = e.y - n.y, l = r / t.x, a = o / t.y, c = l * s, u = a * s;
  return new I(n.x + c, n.y + u);
}
function $C(n, e) {
  const t = Math.abs(n - e);
  return t > 180 ? 360 - t : t;
}
function X6e(n, e) {
  const t = e.step;
  return e.directions.forEach((i) => {
    i.gridOffsetX = i.offsetX / t * n.x, i.gridOffsetY = i.offsetY / t * n.y;
  }), e.directions;
}
function Y6e(n, e, t) {
  return {
    source: e.clone(),
    x: TC(t.x - e.x, n),
    y: TC(t.y - e.y, n)
  };
}
function TC(n, e) {
  if (!n)
    return e;
  const t = Math.abs(n), i = Math.round(t / e);
  if (!i)
    return t;
  const s = i * e, o = (t - s) / i;
  return e + o;
}
function H6e(n, e) {
  const t = e.source, i = ct.snapToGrid(n.x - t.x, e.x) + t.x, s = ct.snapToGrid(n.y - t.y, e.y) + t.y;
  return new I(i, s);
}
function fu(n, e) {
  return n.round(e);
}
function $d(n, e, t) {
  return fu(H6e(n.clone(), e), t);
}
function Lu(n) {
  return n.toString();
}
function Um(n) {
  return new I(n.x === 0 ? 0 : Math.abs(n.x) / n.x, n.y === 0 ? 0 : Math.abs(n.y) / n.y);
}
function _C(n, e) {
  let t = 1 / 0;
  for (let i = 0, s = e.length; i < s; i += 1) {
    const r = n.manhattanDistance(e[i]);
    r < t && (t = r);
  }
  return t;
}
function MC(n, e, t, i, s) {
  const r = s.precision, o = s.directionMap, l = n.diff(e.getCenter()), a = Object.keys(o).reduce((c, u) => {
    if (t.includes(u)) {
      const h = o[u], f = new I(n.x + h.x * (Math.abs(l.x) + e.width), n.y + h.y * (Math.abs(l.y) + e.height)), p = new me(n, f).intersect(e) || [];
      let g, m = null;
      for (let b = 0; b < p.length; b += 1) {
        const y = p[b], v = n.squaredDistance(y);
        (g == null || v > g) && (g = v, m = y);
      }
      if (m) {
        let b = $d(m, i, r);
        e.containsPoint(b) && (b = $d(b.translate(h.x * i.x, h.y * i.y), i, r)), c.push(b);
      }
    }
    return c;
  }, []);
  return e.containsPoint(n) || a.push($d(n, i, r)), a;
}
function G6e(n, e, t, i, s) {
  const r = [];
  let o = Um(s.diff(t)), l = Lu(t), a = n[l], c;
  for (; a; ) {
    c = e[l];
    const f = Um(c.diff(a));
    f.equals(o) || (r.unshift(c), o = f), l = Lu(a), a = n[l];
  }
  const u = e[l];
  return Um(u.diff(i)).equals(o) || r.unshift(u), r;
}
function U6e(n, e, t, i, s) {
  const r = s.precision;
  let o, l;
  ue.isRectangle(e) ? o = fu(_M(n, s).clone(), r) : o = fu(e.clone(), r), ue.isRectangle(t) ? l = fu(q6e(n, s).clone(), r) : l = fu(t.clone(), r);
  const a = Y6e(s.step, o, l), c = o, u = l;
  let h, f;
  if (ue.isRectangle(e) ? h = MC(c, e, s.startDirections, a, s) : h = [c], ue.isRectangle(t) ? f = MC(l, t, s.endDirections, a, s) : f = [u], h = h.filter((d) => i.isAccessible(d)), f = f.filter((d) => i.isAccessible(d)), h.length > 0 && f.length > 0) {
    const d = new F6e(), p = {}, g = {}, m = {};
    for (let $ = 0, T = h.length; $ < T; $ += 1) {
      const M = h[$], j = Lu(M);
      d.add(j, _C(M, f)), p[j] = M, m[j] = 0;
    }
    const b = s.previousDirectionAngle, y = b === void 0;
    let v, O;
    const x = X6e(a, s), S = x.length, C = f.reduce(($, T) => {
      const M = Lu(T);
      return $.push(M), $;
    }, []), k = I.equalPoints(h, f);
    let E = s.maxLoopCount;
    for (; !d.isEmpty() && E > 0; ) {
      const $ = d.pop(), T = p[$], M = g[$], j = m[$], D = T.equals(c), P = M == null;
      let A;
      if (P ? y ? D ? A = null : A = Gm(c, T, S, a, s) : A = b : A = Gm(M, T, S, a, s), !(P && k) && C.indexOf($) >= 0)
        return s.previousDirectionAngle = A, G6e(g, p, T, c, u);
      for (let X = 0; X < S; X += 1) {
        v = x[X];
        const z = v.angle;
        if (O = $C(A, z), !(y && D) && O > s.maxDirectionChange)
          continue;
        const q = $d(T.clone().translate(v.gridOffsetX || 0, v.gridOffsetY || 0), a, r), re = Lu(q);
        if (d.isClose(re) || !i.isAccessible(q))
          continue;
        if (C.indexOf(re) >= 0 && !q.equals(u)) {
          const ce = Gm(q, u, S, a, s);
          if ($C(z, ce) > s.maxDirectionChange)
            continue;
        }
        const H = v.cost, G = D ? 0 : s.penalties[O], U = j + H + G;
        (!d.isOpen(re) || U < m[re]) && (p[re] = q, g[re] = T, m[re] = U, d.add(re, U + _C(q, f)));
      }
      E -= 1;
    }
  }
  return s.fallbackRoute ? Ee(s.fallbackRoute, this, c, u, s) : null;
}
function K6e(n, e = 10) {
  if (n.length <= 1)
    return n;
  for (let t = 0, i = n.length; t < i - 1; t += 1) {
    const s = n[t], r = n[t + 1];
    if (s.x === r.x) {
      const o = e * Math.round(s.x / e);
      s.x !== o && (s.x = o, r.x = o);
    } else if (s.y === r.y) {
      const o = e * Math.round(s.y / e);
      s.y !== o && (s.y = o, r.y = o);
    }
  }
  return n;
}
const J6e = function(n, e, t) {
  const i = Z6e(e), s = $M(t, i), r = TM(t, i), o = _M(t, i), l = new V6e(i).build(t.graph.model, t.cell), a = n.map((d) => I.create(d)), c = [];
  let u = o, h, f;
  for (let d = 0, p = a.length; d <= p; d += 1) {
    let g = null;
    if (h = f || s, f = a[d], f == null) {
      f = r;
      const b = t.cell;
      if ((b.getSourceCellId() == null || b.getTargetCellId() == null) && typeof i.draggingRouter == "function") {
        const v = h === s ? o : h, O = f.getOrigin();
        g = Ee(i.draggingRouter, t, v, O, i);
      }
    }
    if (g == null && (g = U6e(t, h, f, l, i)), g === null)
      return console.warn("Unable to execute manhattan algorithm, use orth instead"), Ee(i.fallbackRouter, this, n, i, t);
    const m = g[0];
    m && m.equals(u) && g.shift(), u = g[g.length - 1] || u, c.push(...g);
  }
  return i.snapToGrid ? K6e(c, t.graph.grid.getGridSize()) : c;
}, MM = function(n, e, t) {
  return Ee(J6e, this, n, Object.assign(Object.assign({}, z6e), e), t);
}, e8e = {
  maxDirectionChange: 45,
  // an array of directions to find next points on the route
  // different from start/end directions
  directions() {
    const n = go(this.step, this), e = go(this.cost, this), t = Math.ceil(Math.sqrt(n * n << 1));
    return [
      { cost: e, offsetX: n, offsetY: 0 },
      { cost: t, offsetX: n, offsetY: n },
      { cost: e, offsetX: 0, offsetY: n },
      { cost: t, offsetX: -n, offsetY: n },
      { cost: e, offsetX: -n, offsetY: 0 },
      { cost: t, offsetX: -n, offsetY: -n },
      { cost: e, offsetX: 0, offsetY: -n },
      { cost: t, offsetX: n, offsetY: -n }
    ];
  },
  // a simple route used in situations when main routing method fails
  // (exceed max number of loop iterations, inaccessible)
  fallbackRoute(n, e, t) {
    const i = n.theta(e), s = [];
    let r = { x: e.x, y: n.y }, o = { x: n.x, y: e.y };
    if (i % 180 > 90) {
      const v = r;
      r = o, o = v;
    }
    const l = i % 90 < 45 ? r : o, a = new me(n, l), c = 90 * Math.ceil(i / 90), u = I.fromPolar(a.squaredLength(), st.toRad(c + 135), l), h = new me(e, u), f = a.intersectsWithLine(h), d = f || e, p = f ? d : n, g = 360 / t.directions.length, m = p.theta(e), b = st.normalize(m + g / 2), y = g * Math.floor(b / g);
    return t.previousDirectionAngle = y, d && s.push(d.round()), s.push(e), s;
  }
}, t8e = function(n, e, t) {
  return Ee(MM, this, n, Object.assign(Object.assign({}, e8e), e), t);
}, n8e = function(n, e, t) {
  const i = e.offset || 32, s = e.min == null ? 16 : e.min;
  let r = 0, o = e.direction;
  const l = t.sourceBBox, a = t.targetBBox, c = l.getCenter(), u = a.getCenter();
  if (typeof i == "number" && (r = i), o == null) {
    let b = a.left - l.right, y = a.top - l.bottom;
    b >= 0 && y >= 0 ? o = b >= y ? "L" : "T" : b <= 0 && y >= 0 ? (b = l.left - a.right, b >= 0 ? o = b >= y ? "R" : "T" : o = "T") : b >= 0 && y <= 0 ? (y = l.top - a.bottom, y >= 0 ? o = b >= y ? "L" : "B" : o = "L") : (b = l.left - a.right, y = l.top - a.bottom, b >= 0 && y >= 0 ? o = b >= y ? "R" : "B" : b <= 0 && y >= 0 ? o = "B" : b >= 0 && y <= 0 ? o = "R" : o = Math.abs(b) > Math.abs(y) ? "R" : "B");
  }
  o === "H" ? o = u.x - c.x >= 0 ? "L" : "R" : o === "V" && (o = u.y - c.y >= 0 ? "T" : "B"), i === "center" && (o === "L" ? r = (a.left - l.right) / 2 : o === "R" ? r = (l.left - a.right) / 2 : o === "T" ? r = (a.top - l.bottom) / 2 : o === "B" && (r = (l.top - a.bottom) / 2));
  let h, f, d;
  const p = o === "L" || o === "R";
  if (p) {
    if (u.y === c.y)
      return [...n];
    d = o === "L" ? 1 : -1, h = "x", f = "width";
  } else {
    if (u.x === c.x)
      return [...n];
    d = o === "T" ? 1 : -1, h = "y", f = "height";
  }
  const g = c.clone(), m = u.clone();
  if (g[h] += d * (l[f] / 2 + r), m[h] -= d * (a[f] / 2 + r), p) {
    const b = g.x, y = m.x, v = l.width / 2 + s, O = a.width / 2 + s;
    u.x > c.x ? y <= b && (g.x = Math.max(y, c.x + v), m.x = Math.min(b, u.x - O)) : y >= b && (g.x = Math.min(y, c.x - v), m.x = Math.max(b, u.x + O));
  } else {
    const b = g.y, y = m.y, v = l.height / 2 + s, O = a.height / 2 + s;
    u.y > c.y ? y <= b && (g.y = Math.max(y, c.y + v), m.y = Math.min(b, u.y - O)) : y >= b && (g.y = Math.min(y, c.y - v), m.y = Math.max(b, u.y + O));
  }
  return [g.toJSON(), ...n, m.toJSON()];
};
function ua(n, e) {
  if (e != null && e !== !1) {
    const t = typeof e == "boolean" ? 0 : e;
    if (t > 0) {
      const i = I.create(n[1]).move(n[2], t), s = I.create(n[1]).move(n[0], t);
      return [i.toJSON(), ...n, s.toJSON()];
    }
    {
      const i = n[1];
      return [Object.assign({}, i), ...n, Object.assign({}, i)];
    }
  }
  return n;
}
const i8e = function(n, e, t) {
  const i = e.width || 50, r = (e.height || 80) / 2, o = e.angle || "auto", l = t.sourceAnchor, a = t.targetAnchor, c = t.sourceBBox, u = t.targetBBox;
  if (l.equals(a)) {
    const h = (b) => {
      const y = st.toRad(b), v = Math.sin(y), O = Math.cos(y), x = new I(l.x + O * i, l.y + v * i), S = new I(x.x - O * r, x.y - v * r), C = S.clone().rotate(-90, x), k = S.clone().rotate(90, x);
      return [C.toJSON(), x.toJSON(), k.toJSON()];
    }, f = (b) => {
      const y = l.clone().move(b, -1), v = new me(y, b);
      return !c.containsPoint(b) && !c.intersectsWithLine(v);
    }, d = [0, 90, 180, 270, 45, 135, 225, 315];
    if (typeof o == "number")
      return ua(h(o), e.merge);
    const p = c.getCenter();
    if (p.equals(l))
      return ua(h(0), e.merge);
    const g = p.angleBetween(l, p.clone().translate(1, 0));
    let m = h(g);
    if (f(m[1]))
      return ua(m, e.merge);
    for (let b = 1, y = d.length; b < y; b += 1)
      if (m = h(g + d[b]), f(m[1]))
        return ua(m, e.merge);
    return ua(m, e.merge);
  }
  {
    const h = new me(l, a);
    let f = h.parallel(-i), d = f.getCenter(), p = f.start.clone().move(f.end, r), g = f.end.clone().move(f.start, r);
    const m = h.parallel(-1), b = new me(m.start, d), y = new me(m.end, d);
    if ((c.containsPoint(d) || u.containsPoint(d) || c.intersectsWithLine(b) || c.intersectsWithLine(y) || u.intersectsWithLine(b) || u.intersectsWithLine(y)) && (f = h.parallel(i), d = f.getCenter(), p = f.start.clone().move(f.end, r), g = f.end.clone().move(f.start, r)), e.merge) {
      const v = new me(l, a), O = new me(d, v.center).setLength(Number.MAX_SAFE_INTEGER), x = c.intersectsWithLine(O), S = u.intersectsWithLine(O), C = x ? Array.isArray(x) ? x : [x] : [];
      S && (Array.isArray(S) ? C.push(...S) : C.push(S));
      const k = v.center.closest(C);
      k ? (t.sourceAnchor = k.clone(), t.targetAnchor = k.clone()) : (t.sourceAnchor = v.center.clone(), t.targetAnchor = v.center.clone());
    }
    return ua([p.toJSON(), d.toJSON(), g.toJSON()], e.merge);
  }
}, s8e = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  er: n8e,
  loop: i8e,
  manhattan: MM,
  metro: t8e,
  normal: I6e,
  oneSide: Q6e,
  orth: EM
}, Symbol.toStringTag, { value: "Module" }));
var So;
(function(n) {
  n.presets = s8e, n.registry = Ut.create({
    type: "router"
  }), n.registry.register(n.presets, !0);
})(So || (So = {}));
const r8e = function(n, e, t, i = {}) {
  const s = [n, ...t, e], r = new Yt(s), o = new ke(r);
  return i.raw ? o : o.serialize();
}, o8e = function(n, e, t, i = {}) {
  const s = t.length === 3 ? 0 : 1, r = I.create(t[0 + s]), o = I.create(t[2 + s]), l = I.create(t[1 + s]);
  if (!I.equals(n, e)) {
    const c = new I((n.x + e.x) / 2, (n.y + e.y) / 2), u = c.angleBetween(I.create(n).rotate(90, c), l);
    u > 1 && (r.rotate(180 - u, c), o.rotate(180 - u, c), l.rotate(180 - u, c));
  }
  const a = `
     M ${n.x} ${n.y}
     Q ${r.x} ${r.y} ${l.x} ${l.y}
     Q ${o.x} ${o.y} ${e.x} ${e.y}
  `;
  return i.raw ? ke.parse(a) : a;
}, l8e = function(n, e, t, i = {}) {
  const s = new ke();
  s.appendSegment(ke.createSegment("M", n));
  const r = 1 / 3, o = 2 / 3, l = i.radius || 10;
  let a, c;
  for (let u = 0, h = t.length; u < h; u += 1) {
    const f = I.create(t[u]), d = t[u - 1] || n, p = t[u + 1] || e;
    a = c || f.distance(d) / 2, c = f.distance(p) / 2;
    const g = -Math.min(l, a), m = -Math.min(l, c), b = f.clone().move(d, g).round(), y = f.clone().move(p, m).round(), v = new I(r * b.x + o * f.x, o * f.y + r * b.y), O = new I(r * y.x + o * f.x, o * f.y + r * y.y);
    s.appendSegment(ke.createSegment("L", b)), s.appendSegment(ke.createSegment("C", v, O, y));
  }
  return s.appendSegment(ke.createSegment("L", e)), i.raw ? s : s.serialize();
}, a8e = function(n, e, t, i = {}) {
  let s, r = i.direction;
  if (t && t.length !== 0) {
    const o = [n, ...t, e], l = zt.throughPoints(o);
    s = new ke(l);
  } else if (s = new ke(), s.appendSegment(ke.createSegment("M", n)), r || (r = Math.abs(n.x - e.x) >= Math.abs(n.y - e.y) ? "H" : "V"), r === "H") {
    const o = (n.x + e.x) / 2;
    s.appendSegment(ke.createSegment("C", o, n.y, o, e.y, e.x, e.y));
  } else {
    const o = (n.y + e.y) / 2;
    s.appendSegment(ke.createSegment("C", n.x, o, e.x, o, e.x, e.y));
  }
  return i.raw ? s : s.serialize();
}, RC = 1, Jf = 1 / 3, ed = 2 / 3;
function c8e(n) {
  let e = n.graph._jumpOverUpdateList;
  if (e == null && (e = n.graph._jumpOverUpdateList = [], n.graph.on("cell:mouseup", () => {
    const t = n.graph._jumpOverUpdateList;
    setTimeout(() => {
      for (let i = 0; i < t.length; i += 1)
        t[i].update();
    });
  }), n.graph.on("model:reseted", () => {
    e = n.graph._jumpOverUpdateList = [];
  })), e.indexOf(n) < 0) {
    e.push(n);
    const t = () => e.splice(e.indexOf(n), 1);
    n.cell.once("change:connector", t), n.cell.once("removed", t);
  }
}
function Km(n, e, t = []) {
  const i = [n, ...t, e], s = [];
  return i.forEach((r, o) => {
    const l = i[o + 1];
    l != null && s.push(new me(r, l));
  }), s;
}
function u8e(n, e) {
  const t = [];
  return e.forEach((i) => {
    const s = n.intersectsWithLine(i);
    s && t.push(s);
  }), t;
}
function DC(n, e) {
  return new me(n, e).squaredLength();
}
function h8e(n, e, t) {
  return e.reduce((i, s, r) => {
    if (kp.includes(s))
      return i;
    const o = i.pop() || n, l = I.create(s).move(o.start, -t);
    let a = I.create(s).move(o.start, +t);
    const c = e[r + 1];
    if (c != null) {
      const f = a.distance(c);
      f <= t && (a = c.move(o.start, f), kp.push(c));
    } else if (l.distance(o.end) < t * 2 + RC)
      return i.push(o), i;
    if (a.distance(o.start) < t * 2 + RC)
      return i.push(o), i;
    const h = new me(l, a);
    return wh.push(h), i.push(new me(o.start, l), h, new me(a, o.end)), i;
  }, []);
}
function LC(n, e, t, i) {
  const s = new ke();
  let r;
  return r = ke.createSegment("M", n[0].start), s.appendSegment(r), n.forEach((o, l) => {
    if (wh.includes(o)) {
      let a, c, u, h;
      if (t === "arc") {
        a = -90, c = o.start.diff(o.end), (c.x < 0 || c.x === 0 && c.y < 0) && (a += 180);
        const d = o.getCenter(), p = new me(d, o.end).rotate(a, d);
        let g;
        g = new me(o.start, d), u = g.pointAt(2 / 3).rotate(a, o.start), h = p.pointAt(1 / 3).rotate(-a, p.end), r = ke.createSegment("C", u, h, p.end), s.appendSegment(r), g = new me(d, o.end), u = p.pointAt(1 / 3).rotate(a, p.end), h = g.pointAt(1 / 3).rotate(-a, o.end), r = ke.createSegment("C", u, h, o.end), s.appendSegment(r);
      } else if (t === "gap")
        r = ke.createSegment("M", o.end), s.appendSegment(r);
      else if (t === "cubic") {
        a = o.start.theta(o.end);
        const f = e * 0.6;
        let d = e * 1.35;
        c = o.start.diff(o.end), (c.x < 0 || c.x === 0 && c.y < 0) && (d *= -1), u = new I(o.start.x + f, o.start.y + d).rotate(a, o.start), h = new I(o.end.x - f, o.end.y + d).rotate(a, o.end), r = ke.createSegment("C", u, h, o.end), s.appendSegment(r);
      }
    } else {
      const a = n[l + 1];
      i === 0 || !a || wh.includes(a) ? (r = ke.createSegment("L", o.end), s.appendSegment(r)) : f8e(i, s, o.end, o.start, a.end);
    }
  }), s;
}
function f8e(n, e, t, i, s) {
  const r = t.distance(i) / 2, o = t.distance(s) / 2, l = -Math.min(n, r), a = -Math.min(n, o), c = t.clone().move(i, l).round(), u = t.clone().move(s, a).round(), h = new I(Jf * c.x + ed * t.x, ed * t.y + Jf * c.y), f = new I(Jf * u.x + ed * t.x, ed * t.y + Jf * u.y);
  let d;
  d = ke.createSegment("L", c), e.appendSegment(d), d = ke.createSegment("C", h, f, u), e.appendSegment(d);
}
let wh, kp;
const d8e = function(n, e, t, i = {}) {
  wh = [], kp = [], c8e(this);
  const s = i.size || 5, r = i.type || "arc", o = i.radius || 0, l = i.ignoreConnectors || ["smooth"], a = this.graph, u = a.model.getEdges();
  if (u.length === 1)
    return LC(Km(n, e, t), s, r, o);
  const h = this.cell, f = u.indexOf(h), d = a.options.connecting.connector || {}, p = u.filter((O, x) => {
    const S = O.getConnector() || d;
    return l.includes(S.name) ? !1 : x > f ? S.name !== "jumpover" : !0;
  }), g = p.map((O) => a.findViewByCell(O)), m = Km(n, e, t), b = g.map((O) => O == null ? [] : O === this ? m : Km(O.sourcePoint, O.targetPoint, O.routePoints)), y = [];
  m.forEach((O) => {
    const x = p.reduce((S, C, k) => {
      if (C !== h) {
        const E = u8e(O, b[k]);
        S.push(...E);
      }
      return S;
    }, []).sort((S, C) => DC(O.start, S) - DC(O.start, C));
    x.length > 0 ? y.push(...h8e(O, x, s)) : y.push(O);
  });
  const v = LC(y, s, r, o);
  return wh = [], kp = [], i.raw ? v : v.serialize();
}, p8e = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  jumpover: d8e,
  loop: o8e,
  normal: r8e,
  rounded: l8e,
  smooth: a8e
}, Symbol.toStringTag, { value: "Module" }));
var $l;
(function(n) {
  n.presets = p8e, n.registry = Ut.create({
    type: "connector"
  }), n.registry.register(n.presets, !0);
})($l || ($l = {}));
var g8e = function(n, e, t, i) {
  var s = arguments.length, r = s < 3 ? e : i === null ? i = Object.getOwnPropertyDescriptor(e, t) : i, o;
  if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
    r = Reflect.decorate(n, e, t, i);
  else
    for (var l = n.length - 1; l >= 0; l--)
      (o = n[l]) && (r = (s < 3 ? o(r) : s > 3 ? o(e, t, r) : o(e, t)) || r);
  return s > 3 && r && Object.defineProperty(e, t, r), r;
};
class RM extends Qt {
  constructor(e = {}) {
    super(), this.pending = !1, this.changing = !1, this.data = {}, this.mutate(Tt(e)), this.changed = {};
  }
  mutate(e, t = {}) {
    const i = t.unset === !0, s = t.silent === !0, r = [], o = this.changing;
    this.changing = !0, o || (this.previous = Tt(this.data), this.changed = {});
    const l = this.data, a = this.previous, c = this.changed;
    if (Object.keys(e).forEach((u) => {
      const h = u, f = e[h];
      Xn(l[h], f) || r.push(h), Xn(a[h], f) ? delete c[h] : c[h] = f, i ? delete l[h] : l[h] = f;
    }), !s && r.length > 0 && (this.pending = !0, this.pendingOptions = t, r.forEach((u) => {
      this.emit("change:*", {
        key: u,
        options: t,
        store: this,
        current: l[u],
        previous: a[u]
      });
    })), o)
      return this;
    if (!s)
      for (; this.pending; )
        this.pending = !1, this.emit("changed", {
          current: l,
          previous: a,
          store: this,
          options: this.pendingOptions
        });
    return this.pending = !1, this.changing = !1, this.pendingOptions = null, this;
  }
  get(e, t) {
    if (e == null)
      return this.data;
    const i = this.data[e];
    return i ?? t;
  }
  getPrevious(e) {
    if (this.previous) {
      const t = this.previous[e];
      return t ?? void 0;
    }
  }
  set(e, t, i) {
    return e != null && (typeof e == "object" ? this.mutate(e, t) : this.mutate({ [e]: t }, i)), this;
  }
  remove(e, t) {
    const s = {};
    let r;
    if (typeof e == "string")
      s[e] = void 0, r = t;
    else if (Array.isArray(e))
      e.forEach((o) => s[o] = void 0), r = t;
    else {
      for (const o in this.data)
        s[o] = void 0;
      r = e;
    }
    return this.mutate(s, Object.assign(Object.assign({}, r), { unset: !0 })), this;
  }
  getByPath(e) {
    return Xy(this.data, e, "/");
  }
  setByPath(e, t, i = {}) {
    const s = "/", r = Array.isArray(e) ? [...e] : e.split(s), o = Array.isArray(e) ? e.join(s) : e, l = r[0], a = r.length;
    if (i.propertyPath = o, i.propertyValue = t, i.propertyPathArray = r, a === 1)
      this.set(l, t, i);
    else {
      const c = {};
      let u = c, h = l;
      for (let p = 1; p < a; p += 1) {
        const g = r[p], m = Number.isFinite(Number(g));
        u = u[h] = m ? [] : {}, h = g;
      }
      Bc(c, r, t, s);
      const f = Tt(this.data);
      i.rewrite && hC(f, e, s);
      const d = Ft(f, c);
      this.set(l, d[l], i);
    }
    return this;
  }
  removeByPath(e, t) {
    const i = Array.isArray(e) ? e : e.split("/"), s = i[0];
    if (i.length === 1)
      this.remove(s, t);
    else {
      const r = i.slice(1), o = Tt(this.get(s));
      o && hC(o, r), this.set(s, o, t);
    }
    return this;
  }
  hasChanged(e) {
    return e == null ? Object.keys(this.changed).length > 0 : e in this.changed;
  }
  /**
   * Returns an object containing all the data that have changed,
   * or `null` if there are no changes. Useful for determining what
   * parts of a view need to be updated.
   */
  getChanges(e) {
    if (e == null)
      return this.hasChanged() ? Tt(this.changed) : null;
    const t = this.changing ? this.previous : this.data, i = {};
    let s;
    for (const r in e) {
      const o = e[r];
      Xn(t[r], o) || (i[r] = o, s = !0);
    }
    return s ? Tt(i) : null;
  }
  /**
   * Returns a copy of the store's `data` object.
   */
  toJSON() {
    return Tt(this.data);
  }
  clone() {
    const e = this.constructor;
    return new e(this.data);
  }
  dispose() {
    this.off(), this.data = {}, this.previous = {}, this.changed = {}, this.pending = !1, this.changing = !1, this.pendingOptions = null, this.trigger("disposed", { store: this });
  }
}
g8e([
  Qt.dispose()
], RM.prototype, "dispose", null);
class xh {
  constructor(e) {
    this.cell = e, this.ids = {}, this.cache = {};
  }
  get() {
    return Object.keys(this.ids);
  }
  start(e, t, i = {}, s = "/") {
    const r = this.cell.getPropByPath(e), o = LQ(i, xh.defaultOptions), l = this.getTiming(o.timing), a = this.getInterp(o.interp, r, t);
    let c = 0;
    const u = Array.isArray(e) ? e.join(s) : e, h = Array.isArray(e) ? e : e.split(s), f = () => {
      const d = (/* @__PURE__ */ new Date()).getTime();
      c === 0 && (c = d);
      let g = (d - c) / o.duration;
      g < 1 ? this.ids[u] = requestAnimationFrame(f) : g = 1;
      const m = a(l(g));
      this.cell.setPropByPath(h, m), i.progress && i.progress(Object.assign({ progress: g, currentValue: m }, this.getArgs(u))), g === 1 && (this.cell.notify("transition:complete", this.getArgs(u)), i.complete && i.complete(this.getArgs(u)), this.cell.notify("transition:finish", this.getArgs(u)), i.finish && i.finish(this.getArgs(u)), this.clean(u));
    };
    return setTimeout(() => {
      this.stop(e, void 0, s), this.cache[u] = { startValue: r, targetValue: t, options: o }, this.ids[u] = requestAnimationFrame(f), this.cell.notify("transition:start", this.getArgs(u)), i.start && i.start(this.getArgs(u));
    }, i.delay), this.stop.bind(this, e, s, i);
  }
  stop(e, t = {}, i = "/") {
    const s = Array.isArray(e) ? e : e.split(i);
    return Object.keys(this.ids).filter((r) => Xn(s, r.split(i).slice(0, s.length))).forEach((r) => {
      cancelAnimationFrame(this.ids[r]);
      const o = this.cache[r], l = this.getArgs(r), a = Object.assign(Object.assign({}, o.options), t), c = a.jumpedToEnd;
      c && o.targetValue != null && (this.cell.setPropByPath(r, o.targetValue), this.cell.notify("transition:end", Object.assign({}, l)), this.cell.notify("transition:complete", Object.assign({}, l)), a.complete && a.complete(Object.assign({}, l)));
      const u = Object.assign({ jumpedToEnd: c }, l);
      this.cell.notify("transition:stop", Object.assign({}, u)), a.stop && a.stop(Object.assign({}, u)), this.cell.notify("transition:finish", Object.assign({}, l)), a.finish && a.finish(Object.assign({}, l)), this.clean(r);
    }), this;
  }
  clean(e) {
    delete this.ids[e], delete this.cache[e];
  }
  getTiming(e) {
    return typeof e == "string" ? ql[e] : e;
  }
  getInterp(e, t, i) {
    return e ? e(t, i) : typeof i == "number" ? vl.number(t, i) : typeof i == "string" ? i[0] === "#" ? vl.color(t, i) : vl.unit(t, i) : vl.object(t, i);
  }
  getArgs(e) {
    const t = this.cache[e];
    return {
      path: e,
      startValue: t.startValue,
      targetValue: t.targetValue,
      cell: this.cell
    };
  }
}
(function(n) {
  n.defaultOptions = {
    delay: 10,
    duration: 100,
    timing: "linear"
  };
})(xh || (xh = {}));
var m8e = function(n, e, t, i) {
  var s = arguments.length, r = s < 3 ? e : i === null ? i = Object.getOwnPropertyDescriptor(e, t) : i, o;
  if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
    r = Reflect.decorate(n, e, t, i);
  else
    for (var l = n.length - 1; l >= 0; l--)
      (o = n[l]) && (r = (s < 3 ? o(r) : s > 3 ? o(e, t, r) : o(e, t)) || r);
  return s > 3 && r && Object.defineProperty(e, t, r), r;
}, DM = function(n, e) {
  var t = {};
  for (var i in n)
    Object.prototype.hasOwnProperty.call(n, i) && e.indexOf(i) < 0 && (t[i] = n[i]);
  if (n != null && typeof Object.getOwnPropertySymbols == "function")
    for (var s = 0, i = Object.getOwnPropertySymbols(n); s < i.length; s++)
      e.indexOf(i[s]) < 0 && Object.prototype.propertyIsEnumerable.call(n, i[s]) && (t[i[s]] = n[i[s]]);
  return t;
};
class He extends Qt {
  static config(e) {
    const { markup: t, propHooks: i, attrHooks: s } = e, r = DM(e, ["markup", "propHooks", "attrHooks"]);
    t != null && (this.markup = t), i && (this.propHooks = this.propHooks.slice(), Array.isArray(i) ? this.propHooks.push(...i) : typeof i == "function" ? this.propHooks.push(i) : Object.values(i).forEach((o) => {
      typeof o == "function" && this.propHooks.push(o);
    })), s && (this.attrHooks = Object.assign(Object.assign({}, this.attrHooks), s)), this.defaults = Ft({}, this.defaults, r);
  }
  static getMarkup() {
    return this.markup;
  }
  static getDefaults(e) {
    return e ? this.defaults : Tt(this.defaults);
  }
  static getAttrHooks() {
    return this.attrHooks;
  }
  static applyPropHooks(e, t) {
    return this.propHooks.reduce((i, s) => s ? Ee(s, e, i) : i, t);
  }
  // #endregion
  get [Symbol.toStringTag]() {
    return He.toStringTag;
  }
  constructor(e = {}) {
    super();
    const i = this.constructor.getDefaults(!0), s = Ft({}, this.preprocess(i), this.preprocess(e));
    this.id = s.id || pp(), this.store = new RM(s), this.animation = new xh(this), this.setup(), this.init(), this.postprocess(e);
  }
  init() {
  }
  // #region model
  get model() {
    return this._model;
  }
  set model(e) {
    this._model !== e && (this._model = e);
  }
  // #endregion
  preprocess(e, t) {
    const i = e.id, r = this.constructor.applyPropHooks(this, e);
    return i == null && t !== !0 && (r.id = pp()), r;
  }
  postprocess(e) {
  }
  // eslint-disable-line
  setup() {
    this.store.on("change:*", (e) => {
      const { key: t, current: i, previous: s, options: r } = e;
      this.notify("change:*", {
        key: t,
        options: r,
        current: i,
        previous: s,
        cell: this
      }), this.notify(`change:${t}`, {
        options: r,
        current: i,
        previous: s,
        cell: this
      });
      const o = t;
      (o === "source" || o === "target") && this.notify("change:terminal", {
        type: o,
        current: i,
        previous: s,
        options: r,
        cell: this
      });
    }), this.store.on("changed", ({ options: e }) => this.notify("changed", { options: e, cell: this }));
  }
  notify(e, t) {
    this.trigger(e, t);
    const i = this.model;
    return i && (i.notify(`cell:${e}`, t), this.isNode() ? i.notify(`node:${e}`, Object.assign(Object.assign({}, t), { node: this })) : this.isEdge() && i.notify(`edge:${e}`, Object.assign(Object.assign({}, t), { edge: this }))), this;
  }
  isNode() {
    return !1;
  }
  isEdge() {
    return !1;
  }
  isSameStore(e) {
    return this.store === e.store;
  }
  get view() {
    return this.store.get("view");
  }
  get shape() {
    return this.store.get("shape", "");
  }
  getProp(e, t) {
    return e == null ? this.store.get() : this.store.get(e, t);
  }
  setProp(e, t, i) {
    if (typeof e == "string")
      this.store.set(e, t, i);
    else {
      const s = this.preprocess(e, !0);
      this.store.set(Ft({}, this.getProp(), s), t), this.postprocess(e);
    }
    return this;
  }
  removeProp(e, t) {
    return typeof e == "string" || Array.isArray(e) ? this.store.removeByPath(e, t) : this.store.remove(t), this;
  }
  hasChanged(e) {
    return e == null ? this.store.hasChanged() : this.store.hasChanged(e);
  }
  getPropByPath(e) {
    return this.store.getByPath(e);
  }
  setPropByPath(e, t, i = {}) {
    return this.model && (e === "children" ? this._children = t ? t.map((s) => this.model.getCell(s)).filter((s) => s != null) : null : e === "parent" && (this._parent = t ? this.model.getCell(t) : null)), this.store.setByPath(e, t, i), this;
  }
  removePropByPath(e, t = {}) {
    const i = Array.isArray(e) ? e : e.split("/");
    return i[0] === "attrs" && (t.dirty = !0), this.store.removeByPath(i, t), this;
  }
  prop(e, t, i) {
    return e == null ? this.getProp() : typeof e == "string" || Array.isArray(e) ? arguments.length === 1 ? this.getPropByPath(e) : t == null ? this.removePropByPath(e, i || {}) : this.setPropByPath(e, t, i || {}) : this.setProp(e, t || {});
  }
  previous(e) {
    return this.store.getPrevious(e);
  }
  // #endregion
  // #region zIndex
  get zIndex() {
    return this.getZIndex();
  }
  set zIndex(e) {
    e == null ? this.removeZIndex() : this.setZIndex(e);
  }
  getZIndex() {
    return this.store.get("zIndex");
  }
  setZIndex(e, t = {}) {
    return this.store.set("zIndex", e, t), this;
  }
  removeZIndex(e = {}) {
    return this.store.remove("zIndex", e), this;
  }
  toFront(e = {}) {
    const t = this.model;
    if (t) {
      let i = t.getMaxZIndex(), s;
      e.deep ? (s = this.getDescendants({ deep: !0, breadthFirst: !0 }), s.unshift(this)) : s = [this], i = i - s.length + 1;
      const r = t.total();
      let o = t.indexOf(this) !== r - s.length;
      o || (o = s.some((l, a) => l.getZIndex() !== i + a)), o && this.batchUpdate("to-front", () => {
        i += s.length, s.forEach((l, a) => {
          l.setZIndex(i + a, e);
        });
      });
    }
    return this;
  }
  toBack(e = {}) {
    const t = this.model;
    if (t) {
      let i = t.getMinZIndex(), s;
      e.deep ? (s = this.getDescendants({ deep: !0, breadthFirst: !0 }), s.unshift(this)) : s = [this];
      let r = t.indexOf(this) !== 0;
      r || (r = s.some((o, l) => o.getZIndex() !== i + l)), r && this.batchUpdate("to-back", () => {
        i -= s.length, s.forEach((o, l) => {
          o.setZIndex(i + l, e);
        });
      });
    }
    return this;
  }
  // #endregion
  // #region markup
  get markup() {
    return this.getMarkup();
  }
  set markup(e) {
    e == null ? this.removeMarkup() : this.setMarkup(e);
  }
  getMarkup() {
    let e = this.store.get("markup");
    return e == null && (e = this.constructor.getMarkup()), e;
  }
  setMarkup(e, t = {}) {
    return this.store.set("markup", e, t), this;
  }
  removeMarkup(e = {}) {
    return this.store.remove("markup", e), this;
  }
  // #endregion
  // #region attrs
  get attrs() {
    return this.getAttrs();
  }
  set attrs(e) {
    e == null ? this.removeAttrs() : this.setAttrs(e);
  }
  getAttrs() {
    const e = this.store.get("attrs");
    return e ? Object.assign({}, e) : {};
  }
  setAttrs(e, t = {}) {
    if (e == null)
      this.removeAttrs(t);
    else {
      const i = (s) => this.store.set("attrs", s, t);
      if (t.overwrite === !0)
        i(e);
      else {
        const s = this.getAttrs();
        t.deep === !1 ? i(Object.assign(Object.assign({}, s), e)) : i(Ft({}, s, e));
      }
    }
    return this;
  }
  replaceAttrs(e, t = {}) {
    return this.setAttrs(e, Object.assign(Object.assign({}, t), { overwrite: !0 }));
  }
  updateAttrs(e, t = {}) {
    return this.setAttrs(e, Object.assign(Object.assign({}, t), { deep: !1 }));
  }
  removeAttrs(e = {}) {
    return this.store.remove("attrs", e), this;
  }
  getAttrDefinition(e) {
    if (!e)
      return null;
    const i = this.constructor.getAttrHooks() || {};
    let s = i[e] || gr.registry.get(e);
    if (!s) {
      const r = Qp(e);
      s = i[r] || gr.registry.get(r);
    }
    return s || null;
  }
  getAttrByPath(e) {
    return e == null || e === "" ? this.getAttrs() : this.getPropByPath(this.prefixAttrPath(e));
  }
  setAttrByPath(e, t, i = {}) {
    return this.setPropByPath(this.prefixAttrPath(e), t, i), this;
  }
  removeAttrByPath(e, t = {}) {
    return this.removePropByPath(this.prefixAttrPath(e), t), this;
  }
  prefixAttrPath(e) {
    return Array.isArray(e) ? ["attrs"].concat(e) : `attrs/${e}`;
  }
  attr(e, t, i) {
    return e == null ? this.getAttrByPath() : typeof e == "string" || Array.isArray(e) ? arguments.length === 1 ? this.getAttrByPath(e) : t == null ? this.removeAttrByPath(e, i || {}) : this.setAttrByPath(e, t, i || {}) : this.setAttrs(e, t || {});
  }
  // #endregion
  // #region visible
  get visible() {
    return this.isVisible();
  }
  set visible(e) {
    this.setVisible(e);
  }
  setVisible(e, t = {}) {
    return this.store.set("visible", e, t), this;
  }
  isVisible() {
    return this.store.get("visible") !== !1;
  }
  show(e = {}) {
    return this.isVisible() || this.setVisible(!0, e), this;
  }
  hide(e = {}) {
    return this.isVisible() && this.setVisible(!1, e), this;
  }
  toggleVisible(e, t = {}) {
    const i = typeof e == "boolean" ? e : !this.isVisible(), s = typeof e == "boolean" ? t : e;
    return i ? this.show(s) : this.hide(s), this;
  }
  // #endregion
  // #region data
  get data() {
    return this.getData();
  }
  set data(e) {
    this.setData(e);
  }
  getData() {
    return this.store.get("data");
  }
  setData(e, t = {}) {
    if (e == null)
      this.removeData(t);
    else {
      const i = (s) => this.store.set("data", s, t);
      if (t.overwrite === !0)
        i(e);
      else {
        const s = this.getData();
        t.deep === !1 ? i(typeof e == "object" ? Object.assign(Object.assign({}, s), e) : e) : i(Ft({}, s, e));
      }
    }
    return this;
  }
  replaceData(e, t = {}) {
    return this.setData(e, Object.assign(Object.assign({}, t), { overwrite: !0 }));
  }
  updateData(e, t = {}) {
    return this.setData(e, Object.assign(Object.assign({}, t), { deep: !1 }));
  }
  removeData(e = {}) {
    return this.store.remove("data", e), this;
  }
  // #endregion
  // #region parent children
  get parent() {
    return this.getParent();
  }
  get children() {
    return this.getChildren();
  }
  getParentId() {
    return this.store.get("parent");
  }
  getParent() {
    const e = this.getParentId();
    if (e && this.model) {
      const t = this.model.getCell(e);
      return this._parent = t, t;
    }
    return null;
  }
  getChildren() {
    const e = this.store.get("children");
    if (e && e.length && this.model) {
      const t = e.map((i) => {
        var s;
        return (s = this.model) === null || s === void 0 ? void 0 : s.getCell(i);
      }).filter((i) => i != null);
      return this._children = t, [...t];
    }
    return null;
  }
  hasParent() {
    return this.parent != null;
  }
  isParentOf(e) {
    return e != null && e.getParent() === this;
  }
  isChildOf(e) {
    return e != null && this.getParent() === e;
  }
  eachChild(e, t) {
    return this.children && this.children.forEach(e, t), this;
  }
  filterChild(e, t) {
    return this.children ? this.children.filter(e, t) : [];
  }
  getChildCount() {
    return this.children == null ? 0 : this.children.length;
  }
  getChildIndex(e) {
    return this.children == null ? -1 : this.children.indexOf(e);
  }
  getChildAt(e) {
    return this.children != null && e >= 0 ? this.children[e] : null;
  }
  getAncestors(e = {}) {
    const t = [];
    let i = this.getParent();
    for (; i; )
      t.push(i), i = e.deep !== !1 ? i.getParent() : null;
    return t;
  }
  getDescendants(e = {}) {
    if (e.deep !== !1) {
      if (e.breadthFirst) {
        const t = [], i = this.getChildren() || [];
        for (; i.length > 0; ) {
          const s = i.shift(), r = s.getChildren();
          t.push(s), r && i.push(...r);
        }
        return t;
      }
      {
        const t = this.getChildren() || [];
        return t.forEach((i) => {
          t.push(...i.getDescendants(e));
        }), t;
      }
    }
    return this.getChildren() || [];
  }
  isDescendantOf(e, t = {}) {
    if (e == null)
      return !1;
    if (t.deep !== !1) {
      let i = this.getParent();
      for (; i; ) {
        if (i === e)
          return !0;
        i = i.getParent();
      }
      return !1;
    }
    return this.isChildOf(e);
  }
  isAncestorOf(e, t = {}) {
    return e == null ? !1 : e.isDescendantOf(this, t);
  }
  contains(e) {
    return this.isAncestorOf(e);
  }
  getCommonAncestor(...e) {
    return He.getCommonAncestor(this, ...e);
  }
  setParent(e, t = {}) {
    return this._parent = e, e ? this.store.set("parent", e.id, t) : this.store.remove("parent", t), this;
  }
  setChildren(e, t = {}) {
    return this._children = e, e != null ? this.store.set("children", e.map((i) => i.id), t) : this.store.remove("children", t), this;
  }
  unembed(e, t = {}) {
    const i = this.children;
    if (i != null && e != null) {
      const s = this.getChildIndex(e);
      s !== -1 && (i.splice(s, 1), e.setParent(null, t), this.setChildren(i, t));
    }
    return this;
  }
  embed(e, t = {}) {
    return e.addTo(this, t), this;
  }
  addTo(e, t = {}) {
    return He.isCell(e) ? e.addChild(this, t) : e.addCell(this, t), this;
  }
  insertTo(e, t, i = {}) {
    return e.insertChild(this, t, i), this;
  }
  addChild(e, t = {}) {
    return this.insertChild(e, void 0, t);
  }
  insertChild(e, t, i = {}) {
    if (e != null && e !== this) {
      const s = e.getParent(), r = this !== s;
      let o = t;
      if (o == null && (o = this.getChildCount(), r || (o -= 1)), s) {
        const a = s.getChildren();
        if (a) {
          const c = a.indexOf(e);
          c >= 0 && (e.setParent(null, i), a.splice(c, 1), s.setChildren(a, i));
        }
      }
      let l = this.children;
      if (l == null ? (l = [], l.push(e)) : l.splice(o, 0, e), e.setParent(this, i), this.setChildren(l, i), r && this.model) {
        const a = this.model.getIncomingEdges(this), c = this.model.getOutgoingEdges(this);
        a && a.forEach((u) => u.updateParent(i)), c && c.forEach((u) => u.updateParent(i));
      }
      this.model && this.model.addCell(e, i);
    }
    return this;
  }
  removeFromParent(e = {}) {
    const t = this.getParent();
    if (t != null) {
      const i = t.getChildIndex(this);
      t.removeChildAt(i, e);
    }
    return this;
  }
  removeChild(e, t = {}) {
    const i = this.getChildIndex(e);
    return this.removeChildAt(i, t);
  }
  removeChildAt(e, t = {}) {
    const i = this.getChildAt(e);
    return this.children != null && i != null && (this.unembed(i, t), i.remove(t)), i;
  }
  remove(e = {}) {
    return this.batchUpdate("remove", () => {
      const t = this.getParent();
      t && t.removeChild(this, e), e.deep !== !1 && this.eachChild((i) => i.remove(e)), this.model && this.model.removeCell(this, e);
    }), this;
  }
  transition(e, t, i = {}, s = "/") {
    return this.animation.start(e, t, i, s);
  }
  stopTransition(e, t, i = "/") {
    return this.animation.stop(e, t, i), this;
  }
  getTransitions() {
    return this.animation.get();
  }
  // #endregion
  // #region transform
  // eslint-disable-next-line
  translate(e, t, i) {
    return this;
  }
  scale(e, t, i, s) {
    return this;
  }
  addTools(e, t, i) {
    const s = Array.isArray(e) ? e : [e], r = typeof t == "string" ? t : null, o = typeof t == "object" ? t : typeof i == "object" ? i : {};
    if (o.reset)
      return this.setTools({ name: r, items: s, local: o.local }, o);
    let l = Tt(this.getTools());
    if (l == null || r == null || l.name === r)
      return l == null && (l = {}), l.items || (l.items = []), l.name = r, l.items = [...l.items, ...s], this.setTools(Object.assign({}, l), o);
  }
  setTools(e, t = {}) {
    return e == null ? this.removeTools() : this.store.set("tools", He.normalizeTools(e), t), this;
  }
  getTools() {
    return this.store.get("tools");
  }
  removeTools(e = {}) {
    return this.store.remove("tools", e), this;
  }
  hasTools(e) {
    const t = this.getTools();
    return t == null ? !1 : e == null ? !0 : t.name === e;
  }
  hasTool(e) {
    const t = this.getTools();
    return t == null ? !1 : t.items.some((i) => typeof i == "string" ? i === e : i.name === e);
  }
  removeTool(e, t = {}) {
    const i = Tt(this.getTools());
    if (i) {
      let s = !1;
      const r = i.items.slice(), o = (l) => {
        r.splice(l, 1), s = !0;
      };
      if (typeof e == "number")
        o(e);
      else
        for (let l = r.length - 1; l >= 0; l -= 1) {
          const a = r[l];
          (typeof a == "string" ? a === e : a.name === e) && o(l);
        }
      s && (i.items = r, this.setTools(i, t));
    }
    return this;
  }
  // #endregion
  // #region common
  // eslint-disable-next-line
  getBBox(e) {
    return new ue();
  }
  // eslint-disable-next-line
  getConnectionPoint(e, t) {
    return new I();
  }
  toJSON(e = {}) {
    const t = Object.assign({}, this.store.get()), i = Object.prototype.toString, s = this.isNode() ? "node" : this.isEdge() ? "edge" : "cell";
    if (!t.shape) {
      const p = this.constructor;
      throw new Error(`Unable to serialize ${s} missing "shape" prop, check the ${s} "${p.name || i.call(p)}"`);
    }
    const r = this.constructor, o = e.diff === !0, l = t.attrs || {}, a = r.getDefaults(!0), c = o ? this.preprocess(a, !0) : a, u = c.attrs || {}, h = {};
    Object.entries(t).forEach(([p, g]) => {
      if (g != null && !Array.isArray(g) && typeof g == "object" && !Rs(g))
        throw new Error(`Can only serialize ${s} with plain-object props, but got a "${i.call(g)}" type of key "${p}" on ${s} "${this.id}"`);
      if (p !== "attrs" && p !== "shape" && o) {
        const m = c[p];
        Xn(g, m) && delete t[p];
      }
    }), Object.keys(l).forEach((p) => {
      const g = l[p], m = u[p];
      Object.keys(g).forEach((b) => {
        const y = g[b], v = m ? m[b] : null;
        y != null && typeof y == "object" && !Array.isArray(y) ? Object.keys(y).forEach((O) => {
          const x = y[O];
          if (m == null || v == null || !Vt(v) || !Xn(v[O], x)) {
            h[p] == null && (h[p] = {}), h[p][b] == null && (h[p][b] = {});
            const S = h[p][b];
            S[O] = x;
          }
        }) : (m == null || !Xn(v, y)) && (h[p] == null && (h[p] = {}), h[p][b] = y);
      });
    });
    const f = Object.assign(Object.assign({}, t), { attrs: Uk(h) ? void 0 : h });
    f.attrs == null && delete f.attrs;
    const d = f;
    return d.angle === 0 && delete d.angle, Tt(d);
  }
  clone(e = {}) {
    if (!e.deep) {
      const i = Object.assign({}, this.store.get());
      e.keepId || delete i.id, delete i.parent, delete i.children;
      const s = this.constructor;
      return new s(i);
    }
    return He.deepClone(this)[this.id];
  }
  findView(e) {
    return e.findViewByCell(this);
  }
  // #endregion
  // #region batch
  startBatch(e, t = {}, i = this.model) {
    return this.notify("batch:start", { name: e, data: t, cell: this }), i && i.startBatch(e, Object.assign(Object.assign({}, t), { cell: this })), this;
  }
  stopBatch(e, t = {}, i = this.model) {
    return i && i.stopBatch(e, Object.assign(Object.assign({}, t), { cell: this })), this.notify("batch:stop", { name: e, data: t, cell: this }), this;
  }
  batchUpdate(e, t, i) {
    const s = this.model;
    this.startBatch(e, i, s);
    const r = t();
    return this.stopBatch(e, i, s), r;
  }
  // #endregion
  // #region IDisposable
  dispose() {
    this.removeFromParent(), this.store.dispose();
  }
}
He.defaults = {};
He.attrHooks = {};
He.propHooks = [];
m8e([
  Qt.dispose()
], He.prototype, "dispose", null);
(function(n) {
  function e(t) {
    return typeof t == "string" ? { items: [t] } : Array.isArray(t) ? { items: t } : t.items ? t : {
      items: [t]
    };
  }
  n.normalizeTools = e;
})(He || (He = {}));
(function(n) {
  n.toStringTag = `X6.${n.name}`;
  function e(t) {
    if (t == null)
      return !1;
    if (t instanceof n)
      return !0;
    const i = t[Symbol.toStringTag], s = t;
    return (i == null || i === n.toStringTag) && typeof s.isNode == "function" && typeof s.isEdge == "function" && typeof s.prop == "function" && typeof s.attr == "function";
  }
  n.isCell = e;
})(He || (He = {}));
(function(n) {
  function e(...r) {
    const o = r.filter((a) => a != null).map((a) => a.getAncestors()).sort((a, c) => a.length - c.length);
    return o.shift().find((a) => o.every((c) => c.includes(a))) || null;
  }
  n.getCommonAncestor = e;
  function t(r, o = {}) {
    let l = null;
    for (let a = 0, c = r.length; a < c; a += 1) {
      const u = r[a];
      let h = u.getBBox(o);
      if (h) {
        if (u.isNode()) {
          const f = u.getAngle();
          f != null && f !== 0 && (h = h.bbox(f));
        }
        l = l == null ? h : l.union(h);
      }
    }
    return l;
  }
  n.getCellsBBox = t;
  function i(r) {
    const o = [r, ...r.getDescendants({ deep: !0 })];
    return n.cloneCells(o);
  }
  n.deepClone = i;
  function s(r) {
    const o = s2(r), l = o.reduce((a, c) => (a[c.id] = c.clone(), a), {});
    return o.forEach((a) => {
      const c = l[a.id];
      if (c.isEdge()) {
        const f = c.getSourceCellId(), d = c.getTargetCellId();
        f && l[f] && c.setSource(Object.assign(Object.assign({}, c.getSource()), { cell: l[f].id })), d && l[d] && c.setTarget(Object.assign(Object.assign({}, c.getTarget()), { cell: l[d].id }));
      }
      const u = a.getParent();
      u && l[u.id] && c.setParent(l[u.id]);
      const h = a.getChildren();
      if (h && h.length) {
        const f = h.reduce((d, p) => (l[p.id] && d.push(l[p.id]), d), []);
        f.length > 0 && c.setChildren(f);
      }
    }), l;
  }
  n.cloneCells = s;
})(He || (He = {}));
(function(n) {
  n.config({
    propHooks(e) {
      var { tools: t } = e, i = DM(e, ["tools"]);
      return t && (i.tools = n.normalizeTools(t)), i;
    }
  });
})(He || (He = {}));
var mc;
(function(n) {
  let e, t;
  function i(o, l) {
    return l ? e != null && e.exist(o) : t != null && t.exist(o);
  }
  n.exist = i;
  function s(o) {
    e = o;
  }
  n.setEdgeRegistry = s;
  function r(o) {
    t = o;
  }
  n.setNodeRegistry = r;
})(mc || (mc = {}));
class b8e {
  constructor(e) {
    this.ports = [], this.groups = {}, this.init(Tt(e));
  }
  getPorts() {
    return this.ports;
  }
  getGroup(e) {
    return e != null ? this.groups[e] : null;
  }
  getPortsByGroup(e) {
    return this.ports.filter((t) => t.group === e || t.group == null && e == null);
  }
  getPortsLayoutByGroup(e, t) {
    const i = this.getPortsByGroup(e), s = e ? this.getGroup(e) : null, r = s ? s.position : null, o = r ? r.name : null;
    let l;
    if (o != null) {
      const h = El.registry.get(o);
      if (h == null)
        return El.registry.onNotFound(o);
      l = h;
    } else
      l = El.presets.left;
    const a = i.map((h) => h && h.position && h.position.args || {}), c = r && r.args || {};
    return l(a, t, c).map((h, f) => {
      const d = i[f];
      return {
        portLayout: h,
        portId: d.id,
        portSize: d.size,
        portAttrs: d.attrs,
        labelSize: d.label.size,
        labelLayout: this.getPortLabelLayout(d, I.create(h.position), t)
      };
    });
  }
  init(e) {
    const { groups: t, items: i } = e;
    t != null && Object.keys(t).forEach((s) => {
      this.groups[s] = this.parseGroup(t[s]);
    }), Array.isArray(i) && i.forEach((s) => {
      this.ports.push(this.parsePort(s));
    });
  }
  parseGroup(e) {
    return Object.assign(Object.assign({}, e), { label: this.getLabel(e, !0), position: this.getPortPosition(e.position, !0) });
  }
  parsePort(e) {
    const t = Object.assign({}, e), i = this.getGroup(e.group) || {};
    return t.markup = t.markup || i.markup, t.attrs = Ft({}, i.attrs, t.attrs), t.position = this.createPosition(i, t), t.label = Ft({}, i.label, this.getLabel(t)), t.zIndex = this.getZIndex(i, t), t.size = Object.assign(Object.assign({}, i.size), t.size), t;
  }
  getZIndex(e, t) {
    return typeof t.zIndex == "number" ? t.zIndex : typeof e.zIndex == "number" || e.zIndex === "auto" ? e.zIndex : "auto";
  }
  createPosition(e, t) {
    return Ft({
      name: "left",
      args: {}
    }, e.position, { args: t.args });
  }
  getPortPosition(e, t = !1) {
    if (e == null) {
      if (t)
        return { name: "left", args: {} };
    } else {
      if (typeof e == "string")
        return {
          name: e,
          args: {}
        };
      if (Array.isArray(e))
        return {
          name: "absolute",
          args: { x: e[0], y: e[1] }
        };
      if (typeof e == "object")
        return e;
    }
    return { args: {} };
  }
  getPortLabelPosition(e, t = !1) {
    if (e == null) {
      if (t)
        return { name: "left", args: {} };
    } else {
      if (typeof e == "string")
        return {
          name: e,
          args: {}
        };
      if (typeof e == "object")
        return e;
    }
    return { args: {} };
  }
  getLabel(e, t = !1) {
    const i = e.label || {};
    return i.position = this.getPortLabelPosition(i.position, t), i;
  }
  getPortLabelLayout(e, t, i) {
    const s = e.label.position.name || "left", r = e.label.position.args || {}, o = cc.registry.get(s) || cc.presets.left;
    return o ? o(t, i, r) : null;
  }
}
var Rg = function(n, e) {
  var t = {};
  for (var i in n)
    Object.prototype.hasOwnProperty.call(n, i) && e.indexOf(i) < 0 && (t[i] = n[i]);
  if (n != null && typeof Object.getOwnPropertySymbols == "function")
    for (var s = 0, i = Object.getOwnPropertySymbols(n); s < i.length; s++)
      e.indexOf(i[s]) < 0 && Object.prototype.propertyIsEnumerable.call(n, i[s]) && (t[i[s]] = n[i[s]]);
  return t;
};
let Kt = class LM extends He {
  get [Symbol.toStringTag]() {
    return LM.toStringTag;
  }
  constructor(e = {}) {
    super(e), this.initPorts();
  }
  preprocess(e, t) {
    const { x: i, y: s, width: r, height: o } = e, l = Rg(e, ["x", "y", "width", "height"]);
    if (i != null || s != null) {
      const a = l.position;
      l.position = Object.assign(Object.assign({}, a), { x: i ?? (a ? a.x : 0), y: s ?? (a ? a.y : 0) });
    }
    if (r != null || o != null) {
      const a = l.size;
      l.size = Object.assign(Object.assign({}, a), { width: r ?? (a ? a.width : 0), height: o ?? (a ? a.height : 0) });
    }
    return super.preprocess(l, t);
  }
  isNode() {
    return !0;
  }
  size(e, t, i) {
    return e === void 0 ? this.getSize() : typeof e == "number" ? this.setSize(e, t, i) : this.setSize(e, t);
  }
  getSize() {
    const e = this.store.get("size");
    return e ? Object.assign({}, e) : { width: 1, height: 1 };
  }
  setSize(e, t, i) {
    return typeof e == "object" ? this.resize(e.width, e.height, t) : this.resize(e, t, i), this;
  }
  resize(e, t, i = {}) {
    this.startBatch("resize", i);
    const s = i.direction;
    if (s) {
      const r = this.getSize();
      switch (s) {
        case "left":
        case "right":
          t = r.height;
          break;
        case "top":
        case "bottom":
          e = r.width;
          break;
      }
      let l = {
        right: 0,
        "top-right": 0,
        top: 1,
        "top-left": 1,
        left: 2,
        "bottom-left": 2,
        bottom: 3,
        "bottom-right": 3
      }[s];
      const a = st.normalize(this.getAngle() || 0);
      i.absolute && (l += Math.floor((a + 45) / 90), l %= 4);
      const c = this.getBBox();
      let u;
      l === 0 ? u = c.getBottomLeft() : l === 1 ? u = c.getCorner() : l === 2 ? u = c.getTopRight() : u = c.getOrigin();
      const h = u.clone().rotate(-a, c.getCenter()), f = Math.sqrt(e * e + t * t) / 2;
      let d = l * Math.PI / 2;
      d += Math.atan(l % 2 === 0 ? t / e : e / t), d -= st.toRad(a);
      const g = I.fromPolar(f, d, h).clone().translate(e / -2, t / -2);
      this.store.set("size", { width: e, height: t }, i), this.setPosition(g.x, g.y, i);
    } else
      this.store.set("size", { width: e, height: t }, i);
    return this.stopBatch("resize", i), this;
  }
  scale(e, t, i, s = {}) {
    const r = this.getBBox().scale(e, t, i ?? void 0);
    return this.startBatch("scale", s), this.setPosition(r.x, r.y, s), this.resize(r.width, r.height, s), this.stopBatch("scale"), this;
  }
  position(e, t, i) {
    return typeof e == "number" ? this.setPosition(e, t, i) : this.getPosition(e);
  }
  getPosition(e = {}) {
    if (e.relative) {
      const i = this.getParent();
      if (i != null && i.isNode()) {
        const s = this.getPosition(), r = i.getPosition();
        return {
          x: s.x - r.x,
          y: s.y - r.y
        };
      }
    }
    const t = this.store.get("position");
    return t ? Object.assign({}, t) : { x: 0, y: 0 };
  }
  setPosition(e, t, i = {}) {
    let s, r, o;
    if (typeof e == "object" ? (s = e.x, r = e.y, o = t || {}) : (s = e, r = t, o = i || {}), o.relative) {
      const l = this.getParent();
      if (l != null && l.isNode()) {
        const a = l.getPosition();
        s += a.x, r += a.y;
      }
    }
    if (o.deep) {
      const l = this.getPosition();
      this.translate(s - l.x, r - l.y, o);
    } else
      this.store.set("position", { x: s, y: r }, o);
    return this;
  }
  translate(e = 0, t = 0, i = {}) {
    if (e === 0 && t === 0)
      return this;
    i.translateBy = i.translateBy || this.id;
    const s = this.getPosition();
    if (i.restrict != null && i.translateBy === this.id) {
      const o = this.getBBox({ deep: !0 }), l = i.restrict, a = s.x - o.x, c = s.y - o.y, u = Math.max(l.x + a, Math.min(l.x + l.width + a - o.width, s.x + e)), h = Math.max(l.y + c, Math.min(l.y + l.height + c - o.height, s.y + t));
      e = u - s.x, t = h - s.y;
    }
    const r = {
      x: s.x + e,
      y: s.y + t
    };
    return i.tx = e, i.ty = t, i.transition ? (typeof i.transition != "object" && (i.transition = {}), this.transition("position", r, Object.assign(Object.assign({}, i.transition), { interp: vl.object })), this.eachChild((o) => {
      var l;
      ((l = i.exclude) === null || l === void 0 ? void 0 : l.includes(o)) || o.translate(e, t, i);
    })) : (this.startBatch("translate", i), this.store.set("position", r, i), this.eachChild((o) => {
      var l;
      ((l = i.exclude) === null || l === void 0 ? void 0 : l.includes(o)) || o.translate(e, t, i);
    }), this.stopBatch("translate", i)), this;
  }
  angle(e, t) {
    return e == null ? this.getAngle() : this.rotate(e, t);
  }
  getAngle() {
    return this.store.get("angle", 0);
  }
  rotate(e, t = {}) {
    const i = this.getAngle();
    if (t.center) {
      const s = this.getSize(), r = this.getPosition(), o = this.getBBox().getCenter();
      o.rotate(i - e, t.center);
      const l = o.x - s.width / 2 - r.x, a = o.y - s.height / 2 - r.y;
      this.startBatch("rotate", { angle: e, options: t }), this.setPosition(r.x + l, r.y + a, t), this.rotate(e, Object.assign(Object.assign({}, t), { center: null })), this.stopBatch("rotate");
    } else
      this.store.set("angle", t.absolute ? e : (i + e) % 360, t);
    return this;
  }
  // #endregion
  // #region common
  getBBox(e = {}) {
    if (e.deep) {
      const t = this.getDescendants({ deep: !0, breadthFirst: !0 });
      return t.push(this), He.getCellsBBox(t);
    }
    return ue.fromPositionAndSize(this.getPosition(), this.getSize());
  }
  getConnectionPoint(e, t) {
    const i = this.getBBox(), s = i.getCenter(), r = e.getTerminal(t);
    if (r == null)
      return s;
    const o = r.port;
    if (!o || !this.hasPort(o))
      return s;
    const l = this.getPort(o);
    if (!l || !l.group)
      return s;
    const c = this.getPortsPosition(l.group)[o].position, u = I.create(c).translate(i.getOrigin()), h = this.getAngle();
    return h && u.rotate(-h, s), u;
  }
  /**
   * Sets cell's size and position based on the children bbox and given padding.
   */
  fit(e = {}) {
    const i = (this.getChildren() || []).filter((c) => c.isNode());
    if (i.length === 0)
      return this;
    this.startBatch("fit-embeds", e), e.deep && i.forEach((c) => c.fit(e));
    let { x: s, y: r, width: o, height: l } = He.getCellsBBox(i);
    const a = Fl(e.padding);
    return s -= a.left, r -= a.top, o += a.left + a.right, l += a.bottom + a.top, this.store.set({
      position: { x: s, y: r },
      size: { width: o, height: l }
    }, e), this.stopBatch("fit-embeds"), this;
  }
  // #endregion
  // #region ports
  get portContainerMarkup() {
    return this.getPortContainerMarkup();
  }
  set portContainerMarkup(e) {
    this.setPortContainerMarkup(e);
  }
  getDefaultPortContainerMarkup() {
    return this.store.get("defaultPortContainerMarkup") || kt.getPortContainerMarkup();
  }
  getPortContainerMarkup() {
    return this.store.get("portContainerMarkup") || this.getDefaultPortContainerMarkup();
  }
  setPortContainerMarkup(e, t = {}) {
    return this.store.set("portContainerMarkup", kt.clone(e), t), this;
  }
  get portMarkup() {
    return this.getPortMarkup();
  }
  set portMarkup(e) {
    this.setPortMarkup(e);
  }
  getDefaultPortMarkup() {
    return this.store.get("defaultPortMarkup") || kt.getPortMarkup();
  }
  getPortMarkup() {
    return this.store.get("portMarkup") || this.getDefaultPortMarkup();
  }
  setPortMarkup(e, t = {}) {
    return this.store.set("portMarkup", kt.clone(e), t), this;
  }
  get portLabelMarkup() {
    return this.getPortLabelMarkup();
  }
  set portLabelMarkup(e) {
    this.setPortLabelMarkup(e);
  }
  getDefaultPortLabelMarkup() {
    return this.store.get("defaultPortLabelMarkup") || kt.getPortLabelMarkup();
  }
  getPortLabelMarkup() {
    return this.store.get("portLabelMarkup") || this.getDefaultPortLabelMarkup();
  }
  setPortLabelMarkup(e, t = {}) {
    return this.store.set("portLabelMarkup", kt.clone(e), t), this;
  }
  get ports() {
    const e = this.store.get("ports", { items: [] });
    return e.items == null && (e.items = []), e;
  }
  getPorts() {
    return Tt(this.ports.items);
  }
  getPortsByGroup(e) {
    return this.getPorts().filter((t) => t.group === e);
  }
  getPort(e) {
    return Tt(this.ports.items.find((t) => t.id && t.id === e));
  }
  getPortAt(e) {
    return this.ports.items[e] || null;
  }
  hasPorts() {
    return this.ports.items.length > 0;
  }
  hasPort(e) {
    return this.getPortIndex(e) !== -1;
  }
  getPortIndex(e) {
    const t = typeof e == "string" ? e : e.id;
    return t != null ? this.ports.items.findIndex((i) => i.id === t) : -1;
  }
  getPortsPosition(e) {
    const t = this.getSize();
    return this.port.getPortsLayoutByGroup(e, new ue(0, 0, t.width, t.height)).reduce((s, r) => {
      const o = r.portLayout;
      return s[r.portId] = {
        position: Object.assign({}, o.position),
        angle: o.angle || 0
      }, s;
    }, {});
  }
  getPortProp(e, t) {
    return this.getPropByPath(this.prefixPortPath(e, t));
  }
  setPortProp(e, t, i, s) {
    if (typeof t == "string" || Array.isArray(t)) {
      const l = this.prefixPortPath(e, t), a = i;
      return this.setPropByPath(l, a, s);
    }
    const r = this.prefixPortPath(e), o = t;
    return this.setPropByPath(r, o, i);
  }
  removePortProp(e, t, i) {
    return typeof t == "string" || Array.isArray(t) ? this.removePropByPath(this.prefixPortPath(e, t), i) : this.removePropByPath(this.prefixPortPath(e), t);
  }
  portProp(e, t, i, s) {
    return t == null ? this.getPortProp(e) : typeof t == "string" || Array.isArray(t) ? arguments.length === 2 ? this.getPortProp(e, t) : i == null ? this.removePortProp(e, t, s) : this.setPortProp(e, t, i, s) : this.setPortProp(e, t, i);
  }
  prefixPortPath(e, t) {
    const i = this.getPortIndex(e);
    if (i === -1)
      throw new Error(`Unable to find port with id: "${e}"`);
    return t == null || t === "" ? ["ports", "items", `${i}`] : Array.isArray(t) ? ["ports", "items", `${i}`, ...t] : `ports/items/${i}/${t}`;
  }
  addPort(e, t) {
    const i = [...this.ports.items];
    return i.push(e), this.setPropByPath("ports/items", i, t), this;
  }
  addPorts(e, t) {
    return this.setPropByPath("ports/items", [...this.ports.items, ...e], t), this;
  }
  insertPort(e, t, i) {
    const s = [...this.ports.items];
    return s.splice(e, 0, t), this.setPropByPath("ports/items", s, i), this;
  }
  removePort(e, t = {}) {
    return this.removePortAt(this.getPortIndex(e), t);
  }
  removePortAt(e, t = {}) {
    if (e >= 0) {
      const i = [...this.ports.items];
      i.splice(e, 1), t.rewrite = !0, this.setPropByPath("ports/items", i, t);
    }
    return this;
  }
  removePorts(e, t) {
    let i;
    if (Array.isArray(e)) {
      if (i = t || {}, e.length) {
        i.rewrite = !0;
        const r = [...this.ports.items].filter((o) => !e.some((l) => {
          const a = typeof l == "string" ? l : l.id;
          return o.id === a;
        }));
        this.setPropByPath("ports/items", r, i);
      }
    } else
      i = e || {}, i.rewrite = !0, this.setPropByPath("ports/items", [], i);
    return this;
  }
  getParsedPorts() {
    return this.port.getPorts();
  }
  getParsedGroups() {
    return this.port.groups;
  }
  getPortsLayoutByGroup(e, t) {
    return this.port.getPortsLayoutByGroup(e, t);
  }
  initPorts() {
    this.updatePortData(), this.on("change:ports", () => {
      this.processRemovedPort(), this.updatePortData();
    });
  }
  processRemovedPort() {
    const e = this.ports, t = {};
    e.items.forEach((o) => {
      o.id && (t[o.id] = !0);
    });
    const i = {};
    (this.store.getPrevious("ports") || {
      items: []
    }).items.forEach((o) => {
      o.id && !t[o.id] && (i[o.id] = !0);
    });
    const r = this.model;
    r && !Uk(i) && (r.getConnectedEdges(this, { incoming: !0 }).forEach((a) => {
      const c = a.getTargetPortId();
      c && i[c] && a.remove();
    }), r.getConnectedEdges(this, { outgoing: !0 }).forEach((a) => {
      const c = a.getSourcePortId();
      c && i[c] && a.remove();
    }));
  }
  validatePorts() {
    const e = {}, t = [];
    return this.ports.items.forEach((i) => {
      typeof i != "object" && t.push(`Invalid port ${i}.`), i.id == null && (i.id = this.generatePortId()), e[i.id] && t.push("Duplicitied port id."), e[i.id] = !0;
    }), t;
  }
  generatePortId() {
    return pp();
  }
  updatePortData() {
    const e = this.validatePorts();
    if (e.length > 0)
      throw this.store.set("ports", this.store.getPrevious("ports")), new Error(e.join(" "));
    const t = this.port ? this.port.getPorts() : null;
    this.port = new b8e(this.ports);
    const i = this.port.getPorts(), s = t ? i.filter((o) => t.find((l) => l.id === o.id) ? null : o) : [...i], r = t ? t.filter((o) => i.find((l) => l.id === o.id) ? null : o) : [];
    s.length > 0 && this.notify("ports:added", { added: s, cell: this, node: this }), r.length > 0 && this.notify("ports:removed", { removed: r, cell: this, node: this });
  }
};
Kt.defaults = {
  angle: 0,
  position: { x: 0, y: 0 },
  size: { width: 1, height: 1 }
};
(function(n) {
  n.toStringTag = `X6.${n.name}`;
  function e(t) {
    if (t == null)
      return !1;
    if (t instanceof n)
      return !0;
    const i = t[Symbol.toStringTag], s = t;
    return (i == null || i === n.toStringTag) && typeof s.isNode == "function" && typeof s.isEdge == "function" && typeof s.prop == "function" && typeof s.attr == "function" && typeof s.size == "function" && typeof s.position == "function";
  }
  n.isNode = e;
})(Kt || (Kt = {}));
(function(n) {
  n.config({
    propHooks(e) {
      var { ports: t } = e, i = Rg(e, ["ports"]);
      return t && (i.ports = Array.isArray(t) ? { items: t } : t), i;
    }
  });
})(Kt || (Kt = {}));
(function(n) {
  n.registry = Ut.create({
    type: "node",
    process(e, t) {
      if (mc.exist(e, !0))
        throw new Error(`Node with name '${e}' was registered by anthor Edge`);
      if (typeof t == "function")
        return t.config({ shape: e }), t;
      let i = n;
      const { inherit: s } = t, r = Rg(t, ["inherit"]);
      if (s)
        if (typeof s == "string") {
          const l = this.get(s);
          l == null ? this.onNotFound(s, "inherited") : i = l;
        } else
          i = s;
      r.constructorName == null && (r.constructorName = e);
      const o = i.define.call(i, r);
      return o.config({ shape: e }), o;
    }
  }), mc.setNodeRegistry(n.registry);
})(Kt || (Kt = {}));
(function(n) {
  let e = 0;
  function t(r) {
    return r ? Yy(r) : (e += 1, `CustomNode${e}`);
  }
  function i(r) {
    const { constructorName: o, overwrite: l } = r, a = Rg(r, ["constructorName", "overwrite"]), c = Wy(t(o || a.shape), this);
    return c.config(a), a.shape && n.registry.register(a.shape, c, l), c;
  }
  n.define = i;
  function s(r) {
    const o = r.shape || "rect", l = n.registry.get(o);
    return l ? new l(r) : n.registry.onNotFound(o);
  }
  n.create = s;
})(Kt || (Kt = {}));
var Dg = function(n, e) {
  var t = {};
  for (var i in n)
    Object.prototype.hasOwnProperty.call(n, i) && e.indexOf(i) < 0 && (t[i] = n[i]);
  if (n != null && typeof Object.getOwnPropertySymbols == "function")
    for (var s = 0, i = Object.getOwnPropertySymbols(n); s < i.length; s++)
      e.indexOf(i[s]) < 0 && Object.prototype.propertyIsEnumerable.call(n, i[s]) && (t[i[s]] = n[i[s]]);
  return t;
};
let qt = class NM extends He {
  get [Symbol.toStringTag]() {
    return NM.toStringTag;
  }
  constructor(e = {}) {
    super(e);
  }
  preprocess(e, t) {
    const { source: i, sourceCell: s, sourcePort: r, sourcePoint: o, target: l, targetCell: a, targetPort: c, targetPoint: u } = e, f = Dg(e, ["source", "sourceCell", "sourcePort", "sourcePoint", "target", "targetCell", "targetPort", "targetPoint"]), d = (p) => typeof p == "string" || typeof p == "number";
    if (i != null)
      if (He.isCell(i))
        f.source = { cell: i.id };
      else if (d(i))
        f.source = { cell: i };
      else if (I.isPoint(i))
        f.source = i.toJSON();
      else if (Array.isArray(i))
        f.source = { x: i[0], y: i[1] };
      else {
        const p = i.cell;
        He.isCell(p) ? f.source = Object.assign(Object.assign({}, i), { cell: p.id }) : f.source = i;
      }
    if (s != null || r != null) {
      let p = f.source;
      if (s != null) {
        const g = d(s) ? s : s.id;
        p ? p.cell = g : p = f.source = { cell: g };
      }
      r != null && p && (p.port = r);
    } else
      o != null && (f.source = I.create(o).toJSON());
    if (l != null)
      if (He.isCell(l))
        f.target = { cell: l.id };
      else if (d(l))
        f.target = { cell: l };
      else if (I.isPoint(l))
        f.target = l.toJSON();
      else if (Array.isArray(l))
        f.target = { x: l[0], y: l[1] };
      else {
        const p = l.cell;
        He.isCell(p) ? f.target = Object.assign(Object.assign({}, l), { cell: p.id }) : f.target = l;
      }
    if (a != null || c != null) {
      let p = f.target;
      if (a != null) {
        const g = d(a) ? a : a.id;
        p ? p.cell = g : p = f.target = { cell: g };
      }
      c != null && p && (p.port = c);
    } else
      u != null && (f.target = I.create(u).toJSON());
    return super.preprocess(f, t);
  }
  setup() {
    super.setup(), this.on("change:labels", (e) => this.onLabelsChanged(e)), this.on("change:vertices", (e) => this.onVertexsChanged(e));
  }
  isEdge() {
    return !0;
  }
  // #region terminal
  disconnect(e = {}) {
    return this.store.set({
      source: { x: 0, y: 0 },
      target: { x: 0, y: 0 }
    }, e), this;
  }
  get source() {
    return this.getSource();
  }
  set source(e) {
    this.setSource(e);
  }
  getSource() {
    return this.getTerminal("source");
  }
  getSourceCellId() {
    return this.source.cell;
  }
  getSourcePortId() {
    return this.source.port;
  }
  setSource(e, t, i = {}) {
    return this.setTerminal("source", e, t, i);
  }
  get target() {
    return this.getTarget();
  }
  set target(e) {
    this.setTarget(e);
  }
  getTarget() {
    return this.getTerminal("target");
  }
  getTargetCellId() {
    return this.target.cell;
  }
  getTargetPortId() {
    return this.target.port;
  }
  setTarget(e, t, i = {}) {
    return this.setTerminal("target", e, t, i);
  }
  getTerminal(e) {
    return Object.assign({}, this.store.get(e));
  }
  setTerminal(e, t, i, s = {}) {
    if (He.isCell(t))
      return this.store.set(e, Ft({}, i, { cell: t.id }), s), this;
    const r = t;
    return I.isPoint(t) || r.x != null && r.y != null ? (this.store.set(e, Ft({}, i, { x: r.x, y: r.y }), s), this) : (this.store.set(e, Tt(t), s), this);
  }
  getSourcePoint() {
    return this.getTerminalPoint("source");
  }
  getTargetPoint() {
    return this.getTerminalPoint("target");
  }
  getTerminalPoint(e) {
    const t = this[e];
    if (I.isPointLike(t))
      return I.create(t);
    const i = this.getTerminalCell(e);
    return i ? i.getConnectionPoint(this, e) : new I();
  }
  getSourceCell() {
    return this.getTerminalCell("source");
  }
  getTargetCell() {
    return this.getTerminalCell("target");
  }
  getTerminalCell(e) {
    if (this.model) {
      const t = e === "source" ? this.getSourceCellId() : this.getTargetCellId();
      if (t)
        return this.model.getCell(t);
    }
    return null;
  }
  getSourceNode() {
    return this.getTerminalNode("source");
  }
  getTargetNode() {
    return this.getTerminalNode("target");
  }
  getTerminalNode(e) {
    let t = this;
    const i = {};
    for (; t && t.isEdge(); ) {
      if (i[t.id])
        return null;
      i[t.id] = !0, t = t.getTerminalCell(e);
    }
    return t && t.isNode() ? t : null;
  }
  // #endregion
  // #region router
  get router() {
    return this.getRouter();
  }
  set router(e) {
    e == null ? this.removeRouter() : this.setRouter(e);
  }
  getRouter() {
    return this.store.get("router");
  }
  setRouter(e, t, i) {
    return typeof e == "object" ? this.store.set("router", e, t) : this.store.set("router", { name: e, args: t }, i), this;
  }
  removeRouter(e = {}) {
    return this.store.remove("router", e), this;
  }
  // #endregion
  // #region connector
  get connector() {
    return this.getConnector();
  }
  set connector(e) {
    e == null ? this.removeConnector() : this.setConnector(e);
  }
  getConnector() {
    return this.store.get("connector");
  }
  setConnector(e, t, i) {
    return typeof e == "object" ? this.store.set("connector", e, t) : this.store.set("connector", { name: e, args: t }, i), this;
  }
  removeConnector(e = {}) {
    return this.store.remove("connector", e);
  }
  // #endregion
  // #region labels
  getDefaultLabel() {
    const e = this.constructor, t = this.store.get("defaultLabel") || e.defaultLabel || {};
    return Tt(t);
  }
  get labels() {
    return this.getLabels();
  }
  set labels(e) {
    this.setLabels(e);
  }
  getLabels() {
    return [...this.store.get("labels", [])].map((e) => this.parseLabel(e));
  }
  setLabels(e, t = {}) {
    return this.store.set("labels", Array.isArray(e) ? e : [e], t), this;
  }
  insertLabel(e, t, i = {}) {
    const s = this.getLabels(), r = s.length;
    let o = t != null && Number.isFinite(t) ? t : r;
    return o < 0 && (o = r + o + 1), s.splice(o, 0, this.parseLabel(e)), this.setLabels(s, i);
  }
  appendLabel(e, t = {}) {
    return this.insertLabel(e, -1, t);
  }
  getLabelAt(e) {
    const t = this.getLabels();
    return e != null && Number.isFinite(e) ? this.parseLabel(t[e]) : null;
  }
  setLabelAt(e, t, i = {}) {
    if (e != null && Number.isFinite(e)) {
      const s = this.getLabels();
      s[e] = this.parseLabel(t), this.setLabels(s, i);
    }
    return this;
  }
  removeLabelAt(e, t = {}) {
    const i = this.getLabels(), s = e != null && Number.isFinite(e) ? e : -1, r = i.splice(s, 1);
    return this.setLabels(i, t), r.length ? r[0] : null;
  }
  parseLabel(e) {
    return typeof e == "string" ? this.constructor.parseStringLabel(e) : e;
  }
  onLabelsChanged({ previous: e, current: t }) {
    const i = e && t ? t.filter((r) => e.find((o) => r === o || Xn(r, o)) ? null : r) : t ? [...t] : [], s = e && t ? e.filter((r) => t.find((o) => r === o || Xn(r, o)) ? null : r) : e ? [...e] : [];
    i.length > 0 && this.notify("labels:added", { added: i, cell: this, edge: this }), s.length > 0 && this.notify("labels:removed", { removed: s, cell: this, edge: this });
  }
  // #endregion
  // #region vertices
  get vertices() {
    return this.getVertices();
  }
  set vertices(e) {
    this.setVertices(e);
  }
  getVertices() {
    return [...this.store.get("vertices", [])];
  }
  setVertices(e, t = {}) {
    const i = Array.isArray(e) ? e : [e];
    return this.store.set("vertices", i.map((s) => I.toJSON(s)), t), this;
  }
  insertVertex(e, t, i = {}) {
    const s = this.getVertices(), r = s.length;
    let o = t != null && Number.isFinite(t) ? t : r;
    return o < 0 && (o = r + o + 1), s.splice(o, 0, I.toJSON(e)), this.setVertices(s, i);
  }
  appendVertex(e, t = {}) {
    return this.insertVertex(e, -1, t);
  }
  getVertexAt(e) {
    return e != null && Number.isFinite(e) ? this.getVertices()[e] : null;
  }
  setVertexAt(e, t, i = {}) {
    if (e != null && Number.isFinite(e)) {
      const s = this.getVertices();
      s[e] = t, this.setVertices(s, i);
    }
    return this;
  }
  removeVertexAt(e, t = {}) {
    const i = this.getVertices(), s = e != null && Number.isFinite(e) ? e : -1;
    return i.splice(s, 1), this.setVertices(i, t);
  }
  onVertexsChanged({ previous: e, current: t }) {
    const i = e && t ? t.filter((r) => e.find((o) => I.equals(r, o)) ? null : r) : t ? [...t] : [], s = e && t ? e.filter((r) => t.find((o) => I.equals(r, o)) ? null : r) : e ? [...e] : [];
    i.length > 0 && this.notify("vertexs:added", { added: i, cell: this, edge: this }), s.length > 0 && this.notify("vertexs:removed", { removed: s, cell: this, edge: this });
  }
  // #endregion
  // #region markup
  getDefaultMarkup() {
    return this.store.get("defaultMarkup") || kt.getEdgeMarkup();
  }
  getMarkup() {
    return super.getMarkup() || this.getDefaultMarkup();
  }
  // #endregion
  // #region transform
  /**
   * Translate the edge vertices (and source and target if they are points)
   * by `tx` pixels in the x-axis and `ty` pixels in the y-axis.
   */
  translate(e, t, i = {}) {
    return i.translateBy = i.translateBy || this.id, i.tx = e, i.ty = t, this.applyToPoints((s) => ({
      x: (s.x || 0) + e,
      y: (s.y || 0) + t
    }), i);
  }
  /**
   * Scales the edge's points (vertices) relative to the given origin.
   */
  scale(e, t, i, s = {}) {
    return this.applyToPoints((r) => I.create(r).scale(e, t, i).toJSON(), s);
  }
  applyToPoints(e, t = {}) {
    const i = {}, s = this.getSource(), r = this.getTarget();
    I.isPointLike(s) && (i.source = e(s)), I.isPointLike(r) && (i.target = e(r));
    const o = this.getVertices();
    return o.length > 0 && (i.vertices = o.map(e)), this.store.set(i, t), this;
  }
  // #endregion
  // #region common
  getBBox() {
    return this.getPolyline().bbox();
  }
  getConnectionPoint() {
    return this.getPolyline().pointAt(0.5);
  }
  getPolyline() {
    const e = [
      this.getSourcePoint(),
      ...this.getVertices().map((t) => I.create(t)),
      this.getTargetPoint()
    ];
    return new Yt(e);
  }
  updateParent(e) {
    let t = null;
    const i = this.getSourceCell(), s = this.getTargetCell(), r = this.getParent();
    return i && s && (i === s || i.isDescendantOf(s) ? t = s : s.isDescendantOf(i) ? t = i : t = He.getCommonAncestor(i, s)), r && t && t.id !== r.id && r.unembed(this, e), t && (!r || r.id !== t.id) && t.embed(this, e), t;
  }
  hasLoop(e = {}) {
    const t = this.getSource(), i = this.getTarget(), s = t.cell, r = i.cell;
    if (!s || !r)
      return !1;
    let o = s === r;
    if (!o && e.deep && this._model) {
      const l = this.getSourceCell(), a = this.getTargetCell();
      l && a && (o = l.isAncestorOf(a, e) || a.isAncestorOf(l, e));
    }
    return o;
  }
  getFragmentAncestor() {
    const e = [this, this.getSourceNode(), this.getTargetNode()].filter((t) => t != null);
    return this.getCommonAncestor(...e);
  }
  isFragmentDescendantOf(e) {
    const t = this.getFragmentAncestor();
    return !!t && (t.id === e.id || t.isDescendantOf(e));
  }
};
qt.defaults = {};
(function(n) {
  function e(t, i) {
    const s = t, r = i;
    return s.cell === r.cell ? s.port === r.port || s.port == null && r.port == null : !1;
  }
  n.equalTerminals = e;
})(qt || (qt = {}));
(function(n) {
  n.defaultLabel = {
    markup: [
      {
        tagName: "rect",
        selector: "body"
      },
      {
        tagName: "text",
        selector: "label"
      }
    ],
    attrs: {
      text: {
        fill: "#000",
        fontSize: 14,
        textAnchor: "middle",
        textVerticalAnchor: "middle",
        pointerEvents: "none"
      },
      rect: {
        ref: "label",
        fill: "#fff",
        rx: 3,
        ry: 3,
        refWidth: 1,
        refHeight: 1,
        refX: 0,
        refY: 0
      }
    },
    position: {
      distance: 0.5
    }
  };
  function e(t) {
    return {
      attrs: { label: { text: t } }
    };
  }
  n.parseStringLabel = e;
})(qt || (qt = {}));
(function(n) {
  n.toStringTag = `X6.${n.name}`;
  function e(t) {
    if (t == null)
      return !1;
    if (t instanceof n)
      return !0;
    const i = t[Symbol.toStringTag], s = t;
    return (i == null || i === n.toStringTag) && typeof s.isNode == "function" && typeof s.isEdge == "function" && typeof s.prop == "function" && typeof s.attr == "function" && typeof s.disconnect == "function" && typeof s.getSource == "function" && typeof s.getTarget == "function";
  }
  n.isEdge = e;
})(qt || (qt = {}));
(function(n) {
  n.registry = Ut.create({
    type: "edge",
    process(e, t) {
      if (mc.exist(e, !1))
        throw new Error(`Edge with name '${e}' was registered by anthor Node`);
      if (typeof t == "function")
        return t.config({ shape: e }), t;
      let i = n;
      const { inherit: s = "edge" } = t, r = Dg(t, ["inherit"]);
      if (typeof s == "string") {
        const l = this.get(s || "edge");
        l == null && s ? this.onNotFound(s, "inherited") : i = l;
      } else
        i = s;
      r.constructorName == null && (r.constructorName = e);
      const o = i.define.call(i, r);
      return o.config({ shape: e }), o;
    }
  }), mc.setEdgeRegistry(n.registry);
})(qt || (qt = {}));
(function(n) {
  let e = 0;
  function t(r) {
    return r ? Yy(r) : (e += 1, `CustomEdge${e}`);
  }
  function i(r) {
    const { constructorName: o, overwrite: l } = r, a = Dg(r, ["constructorName", "overwrite"]), c = Wy(t(o || a.shape), this);
    return c.config(a), a.shape && n.registry.register(a.shape, c, l), c;
  }
  n.define = i;
  function s(r) {
    const o = r.shape || "edge", l = n.registry.get(o);
    return l ? new l(r) : n.registry.onNotFound(o);
  }
  n.create = s;
})(qt || (qt = {}));
(function(n) {
  const e = "basic.edge";
  n.config({
    shape: e,
    propHooks(t) {
      const { label: i, vertices: s } = t, r = Dg(t, ["label", "vertices"]);
      if (i) {
        r.labels == null && (r.labels = []);
        const o = typeof i == "string" ? n.parseStringLabel(i) : i;
        r.labels.push(o);
      }
      return s && Array.isArray(s) && (r.vertices = s.map((o) => I.create(o).toJSON())), r;
    }
  }), n.registry.register(e, n);
})(qt || (qt = {}));
var v8e = function(n, e, t, i) {
  var s = arguments.length, r = s < 3 ? e : i === null ? i = Object.getOwnPropertyDescriptor(e, t) : i, o;
  if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
    r = Reflect.decorate(n, e, t, i);
  else
    for (var l = n.length - 1; l >= 0; l--)
      (o = n[l]) && (r = (s < 3 ? o(r) : s > 3 ? o(e, t, r) : o(e, t)) || r);
  return s > 3 && r && Object.defineProperty(e, t, r), r;
};
class Pp extends Qt {
  constructor(e, t = {}) {
    super(), this.length = 0, this.comparator = t.comparator || "zIndex", this.clean(), e && this.reset(e, { silent: !0 });
  }
  toJSON() {
    return this.cells.map((e) => e.toJSON());
  }
  add(e, t, i) {
    let s, r;
    typeof t == "number" ? (s = t, r = Object.assign({ merge: !1 }, i)) : (s = this.length, r = Object.assign({ merge: !1 }, t)), s > this.length && (s = this.length), s < 0 && (s += this.length + 1);
    const o = Array.isArray(e) ? e : [e], l = this.comparator && typeof t != "number" && r.sort !== !1, a = this.comparator || null;
    let c = !1;
    const u = [], h = [];
    return o.forEach((f) => {
      const d = this.get(f);
      d ? r.merge && !f.isSameStore(d) && (d.setProp(f.getProp(), i), h.push(d), l && !c && (a == null || typeof a == "function" ? c = d.hasChanged() : typeof a == "string" ? c = d.hasChanged(a) : c = a.some((p) => d.hasChanged(p)))) : (u.push(f), this.reference(f));
    }), u.length && (l && (c = !0), this.cells.splice(s, 0, ...u), this.length = this.cells.length), c && this.sort({ silent: !0 }), r.silent || (u.forEach((f, d) => {
      const p = {
        cell: f,
        index: s + d,
        options: r
      };
      this.trigger("added", p), r.dryrun || f.notify("added", Object.assign({}, p));
    }), c && this.trigger("sorted"), (u.length || h.length) && this.trigger("updated", {
      added: u,
      merged: h,
      removed: [],
      options: r
    })), this;
  }
  remove(e, t = {}) {
    const i = Array.isArray(e) ? e : [e], s = this.removeCells(i, t);
    return !t.silent && s.length > 0 && this.trigger("updated", {
      options: t,
      removed: s,
      added: [],
      merged: []
    }), Array.isArray(e) ? s : s[0];
  }
  removeCells(e, t) {
    const i = [];
    for (let s = 0; s < e.length; s += 1) {
      const r = this.get(e[s]);
      if (r == null)
        continue;
      const o = this.cells.indexOf(r);
      this.cells.splice(o, 1), this.length -= 1, delete this.map[r.id], i.push(r), this.unreference(r), t.dryrun || r.remove(), t.silent || (this.trigger("removed", { cell: r, index: o, options: t }), t.dryrun || r.notify("removed", { cell: r, index: o, options: t }));
    }
    return i;
  }
  reset(e, t = {}) {
    const i = this.cells.slice();
    if (i.forEach((s) => this.unreference(s)), this.clean(), this.add(e, Object.assign({ silent: !0 }, t)), !t.silent) {
      const s = this.cells.slice();
      this.trigger("reseted", {
        options: t,
        previous: i,
        current: s
      });
      const r = [], o = [];
      s.forEach((l) => {
        i.some((c) => c.id === l.id) || r.push(l);
      }), i.forEach((l) => {
        s.some((c) => c.id === l.id) || o.push(l);
      }), this.trigger("updated", { options: t, added: r, removed: o, merged: [] });
    }
    return this;
  }
  push(e, t) {
    return this.add(e, this.length, t);
  }
  pop(e) {
    const t = this.at(this.length - 1);
    return this.remove(t, e);
  }
  unshift(e, t) {
    return this.add(e, 0, t);
  }
  shift(e) {
    const t = this.at(0);
    return this.remove(t, e);
  }
  get(e) {
    if (e == null)
      return null;
    const t = typeof e == "string" || typeof e == "number" ? e : e.id;
    return this.map[t] || null;
  }
  has(e) {
    return this.get(e) != null;
  }
  at(e) {
    return e < 0 && (e += this.length), this.cells[e] || null;
  }
  first() {
    return this.at(0);
  }
  last() {
    return this.at(-1);
  }
  indexOf(e) {
    return this.cells.indexOf(e);
  }
  toArray() {
    return this.cells.slice();
  }
  sort(e = {}) {
    return this.comparator != null && (this.cells = t2(this.cells, this.comparator), e.silent || this.trigger("sorted")), this;
  }
  clone() {
    const e = this.constructor;
    return new e(this.cells.slice(), {
      comparator: this.comparator
    });
  }
  reference(e) {
    this.map[e.id] = e, e.on("*", this.notifyCellEvent, this);
  }
  unreference(e) {
    e.off("*", this.notifyCellEvent, this), delete this.map[e.id];
  }
  notifyCellEvent(e, t) {
    const i = t.cell;
    this.trigger(`cell:${e}`, t), i && (i.isNode() ? this.trigger(`node:${e}`, Object.assign(Object.assign({}, t), { node: i })) : i.isEdge() && this.trigger(`edge:${e}`, Object.assign(Object.assign({}, t), { edge: i })));
  }
  clean() {
    this.length = 0, this.cells = [], this.map = {};
  }
  dispose() {
    this.reset([]);
  }
}
v8e([
  Pp.dispose()
], Pp.prototype, "dispose", null);
var y8e = function(n, e, t, i) {
  var s = arguments.length, r = s < 3 ? e : i === null ? i = Object.getOwnPropertyDescriptor(e, t) : i, o;
  if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
    r = Reflect.decorate(n, e, t, i);
  else
    for (var l = n.length - 1; l >= 0; l--)
      (o = n[l]) && (r = (s < 3 ? o(r) : s > 3 ? o(e, t, r) : o(e, t)) || r);
  return s > 3 && r && Object.defineProperty(e, t, r), r;
};
class wi extends Qt {
  get [Symbol.toStringTag]() {
    return wi.toStringTag;
  }
  constructor(e = []) {
    super(), this.batches = {}, this.addings = /* @__PURE__ */ new WeakMap(), this.nodes = {}, this.edges = {}, this.outgoings = {}, this.incomings = {}, this.collection = new Pp(e), this.setup();
  }
  notify(e, t) {
    this.trigger(e, t);
    const i = this.graph;
    return i && (e === "sorted" || e === "reseted" || e === "updated" ? i.trigger(`model:${e}`, t) : i.trigger(e, t)), this;
  }
  setup() {
    const e = this.collection;
    e.on("sorted", () => this.notify("sorted", null)), e.on("updated", (t) => this.notify("updated", t)), e.on("cell:change:zIndex", () => this.sortOnChangeZ()), e.on("added", ({ cell: t }) => {
      this.onCellAdded(t);
    }), e.on("removed", (t) => {
      const i = t.cell;
      this.onCellRemoved(i, t.options), this.notify("cell:removed", t), i.isNode() ? this.notify("node:removed", Object.assign(Object.assign({}, t), { node: i })) : i.isEdge() && this.notify("edge:removed", Object.assign(Object.assign({}, t), { edge: i }));
    }), e.on("reseted", (t) => {
      this.onReset(t.current), this.notify("reseted", t);
    }), e.on("edge:change:source", ({ edge: t }) => this.onEdgeTerminalChanged(t, "source")), e.on("edge:change:target", ({ edge: t }) => {
      this.onEdgeTerminalChanged(t, "target");
    });
  }
  sortOnChangeZ() {
    this.collection.sort();
  }
  onCellAdded(e) {
    const t = e.id;
    e.isEdge() ? (e.updateParent(), this.edges[t] = !0, this.onEdgeTerminalChanged(e, "source"), this.onEdgeTerminalChanged(e, "target")) : this.nodes[t] = !0;
  }
  onCellRemoved(e, t) {
    const i = e.id;
    if (e.isEdge()) {
      delete this.edges[i];
      const s = e.getSource(), r = e.getTarget();
      if (s && s.cell) {
        const o = this.outgoings[s.cell], l = o ? o.indexOf(i) : -1;
        l >= 0 && (o.splice(l, 1), o.length === 0 && delete this.outgoings[s.cell]);
      }
      if (r && r.cell) {
        const o = this.incomings[r.cell], l = o ? o.indexOf(i) : -1;
        l >= 0 && (o.splice(l, 1), o.length === 0 && delete this.incomings[r.cell]);
      }
    } else
      delete this.nodes[i];
    t.clear || (t.disconnectEdges ? this.disconnectConnectedEdges(e, t) : this.removeConnectedEdges(e, t)), e.model === this && (e.model = null);
  }
  onReset(e) {
    this.nodes = {}, this.edges = {}, this.outgoings = {}, this.incomings = {}, e.forEach((t) => this.onCellAdded(t));
  }
  onEdgeTerminalChanged(e, t) {
    const i = t === "source" ? this.outgoings : this.incomings, s = e.previous(t);
    if (s && s.cell) {
      const o = He.isCell(s.cell) ? s.cell.id : s.cell, l = i[o], a = l ? l.indexOf(e.id) : -1;
      a >= 0 && (l.splice(a, 1), l.length === 0 && delete i[o]);
    }
    const r = e.getTerminal(t);
    if (r && r.cell) {
      const o = He.isCell(r.cell) ? r.cell.id : r.cell, l = i[o] || [];
      l.indexOf(e.id) === -1 && l.push(e.id), i[o] = l;
    }
  }
  prepareCell(e, t) {
    return !e.model && (!t || !t.dryrun) && (e.model = this), e.zIndex == null && e.setZIndex(this.getMaxZIndex() + 1, { silent: !0 }), e;
  }
  resetCells(e, t = {}) {
    return e.map((i) => this.prepareCell(i, Object.assign(Object.assign({}, t), { dryrun: !0 }))), this.collection.reset(e, t), e.map((i) => this.prepareCell(i, { options: t })), this;
  }
  clear(e = {}) {
    const t = this.getCells();
    if (t.length === 0)
      return this;
    const i = Object.assign(Object.assign({}, e), { clear: !0 });
    return this.batchUpdate("clear", () => {
      const s = t.sort((r, o) => {
        const l = r.isEdge() ? 1 : 2, a = o.isEdge() ? 1 : 2;
        return l - a;
      });
      for (; s.length > 0; ) {
        const r = s.shift();
        r && r.remove(i);
      }
    }, i), this;
  }
  addNode(e, t = {}) {
    const i = Kt.isNode(e) ? e : this.createNode(e);
    return this.addCell(i, t), i;
  }
  updateNode(e, t = {}) {
    const i = this.createNode(e), s = i.getProp();
    return i.dispose(), this.updateCell(s, t);
  }
  createNode(e) {
    return Kt.create(e);
  }
  addEdge(e, t = {}) {
    const i = qt.isEdge(e) ? e : this.createEdge(e);
    return this.addCell(i, t), i;
  }
  createEdge(e) {
    return qt.create(e);
  }
  updateEdge(e, t = {}) {
    const i = this.createEdge(e), s = i.getProp();
    return i.dispose(), this.updateCell(s, t);
  }
  addCell(e, t = {}) {
    return Array.isArray(e) ? this.addCells(e, t) : (!this.collection.has(e) && !this.addings.has(e) && (this.addings.set(e, !0), this.collection.add(this.prepareCell(e, t), t), e.eachChild((i) => this.addCell(i, t)), this.addings.delete(e)), this);
  }
  addCells(e, t = {}) {
    const i = e.length;
    if (i === 0)
      return this;
    const s = Object.assign(Object.assign({}, t), { position: i - 1, maxPosition: i - 1 });
    return this.startBatch("add", Object.assign(Object.assign({}, s), { cells: e })), e.forEach((r) => {
      this.addCell(r, s), s.position -= 1;
    }), this.stopBatch("add", Object.assign(Object.assign({}, s), { cells: e })), this;
  }
  updateCell(e, t = {}) {
    const i = e.id && this.getCell(e.id);
    return i ? this.batchUpdate("update", () => (Object.entries(e).forEach(([s, r]) => i.setProp(s, r, t)), !0), e) : !1;
  }
  removeCell(e, t = {}) {
    const i = typeof e == "string" ? this.getCell(e) : e;
    return i && this.has(i) ? this.collection.remove(i, t) : null;
  }
  updateCellId(e, t) {
    if (e.id === t)
      return;
    this.startBatch("update", { id: t }), e.prop("id", t);
    const i = e.clone({ keepId: !0 });
    return this.addCell(i), this.getConnectedEdges(e).forEach((r) => {
      const o = r.getSourceCell(), l = r.getTargetCell();
      o === e && r.setSource(Object.assign(Object.assign({}, r.getSource()), { cell: t })), l === e && r.setTarget(Object.assign(Object.assign({}, r.getTarget()), { cell: t }));
    }), this.removeCell(e), this.stopBatch("update", { id: t }), i;
  }
  removeCells(e, t = {}) {
    return e.length ? this.batchUpdate("remove", () => e.map((i) => this.removeCell(i, t))) : [];
  }
  removeConnectedEdges(e, t = {}) {
    const i = this.getConnectedEdges(e);
    return i.forEach((s) => {
      s.remove(t);
    }), i;
  }
  disconnectConnectedEdges(e, t = {}) {
    const i = typeof e == "string" ? e : e.id;
    this.getConnectedEdges(e).forEach((s) => {
      const r = s.getSourceCellId(), o = s.getTargetCellId();
      r === i && s.setSource({ x: 0, y: 0 }, t), o === i && s.setTarget({ x: 0, y: 0 }, t);
    });
  }
  has(e) {
    return this.collection.has(e);
  }
  total() {
    return this.collection.length;
  }
  indexOf(e) {
    return this.collection.indexOf(e);
  }
  /**
   * Returns a cell from the graph by its id.
   */
  getCell(e) {
    return this.collection.get(e);
  }
  /**
   * Returns all the nodes and edges in the graph.
   */
  getCells() {
    return this.collection.toArray();
  }
  /**
   * Returns the first cell (node or edge) in the graph. The first cell is
   * defined as the cell with the lowest `zIndex`.
   */
  getFirstCell() {
    return this.collection.first();
  }
  /**
   * Returns the last cell (node or edge) in the graph. The last cell is
   * defined as the cell with the highest `zIndex`.
   */
  getLastCell() {
    return this.collection.last();
  }
  /**
   * Returns the lowest `zIndex` value in the graph.
   */
  getMinZIndex() {
    const e = this.collection.first();
    return e && e.getZIndex() || 0;
  }
  /**
   * Returns the highest `zIndex` value in the graph.
   */
  getMaxZIndex() {
    const e = this.collection.last();
    return e && e.getZIndex() || 0;
  }
  getCellsFromCache(e) {
    return e ? Object.keys(e).map((t) => this.getCell(t)).filter((t) => t != null) : [];
  }
  /**
   * Returns all the nodes in the graph.
   */
  getNodes() {
    return this.getCellsFromCache(this.nodes);
  }
  /**
   * Returns all the edges in the graph.
   */
  getEdges() {
    return this.getCellsFromCache(this.edges);
  }
  /**
   * Returns all outgoing edges for the node.
   */
  getOutgoingEdges(e) {
    const t = typeof e == "string" ? e : e.id, i = this.outgoings[t];
    return i ? i.map((s) => this.getCell(s)).filter((s) => s && s.isEdge()) : null;
  }
  /**
   * Returns all incoming edges for the node.
   */
  getIncomingEdges(e) {
    const t = typeof e == "string" ? e : e.id, i = this.incomings[t];
    return i ? i.map((s) => this.getCell(s)).filter((s) => s && s.isEdge()) : null;
  }
  /**
   * Returns edges connected with cell.
   */
  getConnectedEdges(e, t = {}) {
    const i = [], s = typeof e == "string" ? this.getCell(e) : e;
    if (s == null)
      return i;
    const r = {}, o = t.indirect;
    let l = t.incoming, a = t.outgoing;
    l == null && a == null && (l = a = !0);
    const c = (u, h) => {
      const f = h ? this.getOutgoingEdges(u) : this.getIncomingEdges(u);
      if (f != null && f.forEach((d) => {
        r[d.id] || (i.push(d), r[d.id] = !0, o && (l && c(d, !1), a && c(d, !0)));
      }), o && u.isEdge()) {
        const d = h ? u.getTargetCell() : u.getSourceCell();
        d && d.isEdge() && (r[d.id] || (i.push(d), c(d, h)));
      }
    };
    if (a && c(s, !0), l && c(s, !1), t.deep) {
      const u = s.getDescendants({ deep: !0 }), h = {};
      u.forEach((d) => {
        d.isNode() && (h[d.id] = !0);
      });
      const f = (d, p) => {
        const g = p ? this.getOutgoingEdges(d.id) : this.getIncomingEdges(d.id);
        g != null && g.forEach((m) => {
          if (!r[m.id]) {
            const b = m.getSourceCell(), y = m.getTargetCell();
            if (!t.enclosed && b && h[b.id] && y && h[y.id])
              return;
            i.push(m), r[m.id] = !0;
          }
        });
      };
      u.forEach((d) => {
        d.isEdge() || (a && f(d, !0), l && f(d, !1));
      });
    }
    return i;
  }
  isBoundary(e, t) {
    const i = typeof e == "string" ? this.getCell(e) : e, s = t ? this.getIncomingEdges(i) : this.getOutgoingEdges(i);
    return s == null || s.length === 0;
  }
  getBoundaryNodes(e) {
    const t = [];
    return Object.keys(this.nodes).forEach((i) => {
      if (this.isBoundary(i, e)) {
        const s = this.getCell(i);
        s && t.push(s);
      }
    }), t;
  }
  /**
   * Returns an array of all the roots of the graph.
   */
  getRoots() {
    return this.getBoundaryNodes(!0);
  }
  /**
   * Returns an array of all the leafs of the graph.
   */
  getLeafs() {
    return this.getBoundaryNodes(!1);
  }
  /**
   * Returns `true` if the node is a root node, i.e. there is no edges
   * coming to the node.
   */
  isRoot(e) {
    return this.isBoundary(e, !0);
  }
  /**
   * Returns `true` if the node is a leaf node, i.e. there is no edges
   * going out from the node.
   */
  isLeaf(e) {
    return this.isBoundary(e, !1);
  }
  /**
   * Returns all the neighbors of node in the graph. Neighbors are all
   * the nodes connected to node via either incoming or outgoing edge.
   */
  getNeighbors(e, t = {}) {
    let i = t.incoming, s = t.outgoing;
    i == null && s == null && (i = s = !0);
    const o = this.getConnectedEdges(e, t).reduce((l, a) => {
      const c = a.hasLoop(t), u = a.getSourceCell(), h = a.getTargetCell();
      return i && u && u.isNode() && !l[u.id] && (c || u !== e && (!t.deep || !u.isDescendantOf(e))) && (l[u.id] = u), s && h && h.isNode() && !l[h.id] && (c || h !== e && (!t.deep || !h.isDescendantOf(e))) && (l[h.id] = h), l;
    }, {});
    if (e.isEdge()) {
      if (i) {
        const l = e.getSourceCell();
        l && l.isNode() && !o[l.id] && (o[l.id] = l);
      }
      if (s) {
        const l = e.getTargetCell();
        l && l.isNode() && !o[l.id] && (o[l.id] = l);
      }
    }
    return Object.keys(o).map((l) => o[l]);
  }
  /**
   * Returns `true` if `cell2` is a neighbor of `cell1`.
   */
  isNeighbor(e, t, i = {}) {
    let s = i.incoming, r = i.outgoing;
    return s == null && r == null && (s = r = !0), this.getConnectedEdges(e, i).some((o) => {
      const l = o.getSourceCell(), a = o.getTargetCell();
      return !!(s && l && l.id === t.id || r && a && a.id === t.id);
    });
  }
  getSuccessors(e, t = {}) {
    const i = [];
    return this.search(e, (s, r) => {
      s !== e && this.matchDistance(r, t.distance) && i.push(s);
    }, Object.assign(Object.assign({}, t), { outgoing: !0 })), i;
  }
  /**
   * Returns `true` if `cell2` is a successor of `cell1`.
   */
  isSuccessor(e, t, i = {}) {
    let s = !1;
    return this.search(e, (r, o) => {
      if (r === t && r !== e && this.matchDistance(o, i.distance))
        return s = !0, !1;
    }, Object.assign(Object.assign({}, i), { outgoing: !0 })), s;
  }
  getPredecessors(e, t = {}) {
    const i = [];
    return this.search(e, (s, r) => {
      s !== e && this.matchDistance(r, t.distance) && i.push(s);
    }, Object.assign(Object.assign({}, t), { incoming: !0 })), i;
  }
  /**
   * Returns `true` if `cell2` is a predecessor of `cell1`.
   */
  isPredecessor(e, t, i = {}) {
    let s = !1;
    return this.search(e, (r, o) => {
      if (r === t && r !== e && this.matchDistance(o, i.distance))
        return s = !0, !1;
    }, Object.assign(Object.assign({}, i), { incoming: !0 })), s;
  }
  matchDistance(e, t) {
    return t == null ? !0 : typeof t == "function" ? t(e) : Array.isArray(t) && t.includes(e) ? !0 : e === t;
  }
  /**
   * Returns the common ancestor of the passed cells.
   */
  getCommonAncestor(...e) {
    const t = [];
    return e.forEach((i) => {
      i && (Array.isArray(i) ? t.push(...i) : t.push(i));
    }), He.getCommonAncestor(...t);
  }
  /**
   * Returns an array of cells that result from finding nodes/edges that
   * are connected to any of the cells in the cells array. This function
   * loops over cells and if the current cell is a edge, it collects its
   * source/target nodes; if it is an node, it collects its incoming and
   * outgoing edges if both the edge terminal (source/target) are in the
   * cells array.
   */
  getSubGraph(e, t = {}) {
    const i = [], s = {}, r = [], o = [], l = (a) => {
      s[a.id] || (i.push(a), s[a.id] = a, a.isEdge() && o.push(a), a.isNode() && r.push(a));
    };
    return e.forEach((a) => {
      l(a), t.deep && a.getDescendants({ deep: !0 }).forEach((u) => l(u));
    }), o.forEach((a) => {
      const c = a.getSourceCell(), u = a.getTargetCell();
      c && !s[c.id] && (i.push(c), s[c.id] = c, c.isNode() && r.push(c)), u && !s[u.id] && (i.push(u), s[u.id] = u, u.isNode() && r.push(u));
    }), r.forEach((a) => {
      this.getConnectedEdges(a, t).forEach((u) => {
        const h = u.getSourceCell(), f = u.getTargetCell();
        !s[u.id] && h && s[h.id] && f && s[f.id] && (i.push(u), s[u.id] = u);
      });
    }), i;
  }
  /**
   * Clones the whole subgraph (including all the connected links whose
   * source/target is in the subgraph). If `options.deep` is `true`, also
   * take into account all the embedded cells of all the subgraph cells.
   *
   * Returns a map of the form: { [original cell ID]: [clone] }.
   */
  cloneSubGraph(e, t = {}) {
    const i = this.getSubGraph(e, t);
    return this.cloneCells(i);
  }
  cloneCells(e) {
    return He.cloneCells(e);
  }
  getNodesFromPoint(e, t) {
    const i = typeof e == "number" ? { x: e, y: t || 0 } : e;
    return this.getNodes().filter((s) => s.getBBox().containsPoint(i));
  }
  getNodesInArea(e, t, i, s, r) {
    const o = typeof e == "number" ? new ue(e, t, i, s) : ue.create(e), l = typeof e == "number" ? r : t, a = l && l.strict;
    return this.getNodes().filter((c) => {
      const u = c.getBBox();
      return a ? o.containsRect(u) : o.isIntersectWithRect(u);
    });
  }
  getEdgesInArea(e, t, i, s, r) {
    const o = typeof e == "number" ? new ue(e, t, i, s) : ue.create(e), l = typeof e == "number" ? r : t, a = l && l.strict;
    return this.getEdges().filter((c) => {
      const u = c.getBBox();
      return u.width === 0 ? u.inflate(1, 0) : u.height === 0 && u.inflate(0, 1), a ? o.containsRect(u) : o.isIntersectWithRect(u);
    });
  }
  getNodesUnderNode(e, t = {}) {
    const i = e.getBBox();
    return (t.by == null || t.by === "bbox" ? this.getNodesInArea(i) : this.getNodesFromPoint(i[t.by])).filter((r) => e.id !== r.id && !r.isDescendantOf(e));
  }
  /**
   * Returns the bounding box that surrounds all cells in the graph.
   */
  getAllCellsBBox() {
    return this.getCellsBBox(this.getCells());
  }
  /**
   * Returns the bounding box that surrounds all the given cells.
   */
  getCellsBBox(e, t = {}) {
    return He.getCellsBBox(e, t);
  }
  // #region search
  search(e, t, i = {}) {
    i.breadthFirst ? this.breadthFirstSearch(e, t, i) : this.depthFirstSearch(e, t, i);
  }
  breadthFirstSearch(e, t, i = {}) {
    const s = [], r = {}, o = {};
    for (s.push(e), o[e.id] = 0; s.length > 0; ) {
      const l = s.shift();
      if (l == null || r[l.id] || (r[l.id] = !0, Ee(t, this, l, o[l.id]) === !1))
        continue;
      this.getNeighbors(l, i).forEach((c) => {
        o[c.id] = o[l.id] + 1, s.push(c);
      });
    }
  }
  depthFirstSearch(e, t, i = {}) {
    const s = [], r = {}, o = {};
    for (s.push(e), o[e.id] = 0; s.length > 0; ) {
      const l = s.pop();
      if (l == null || r[l.id] || (r[l.id] = !0, Ee(t, this, l, o[l.id]) === !1))
        continue;
      const a = this.getNeighbors(l, i), c = s.length;
      a.forEach((u) => {
        o[u.id] = o[l.id] + 1, s.splice(c, 0, u);
      });
    }
  }
  // #endregion
  // #region shortest path
  /** *
   * Returns an array of IDs of nodes on the shortest
   * path between source and target.
   */
  getShortestPath(e, t, i = {}) {
    const s = {};
    this.getEdges().forEach((c) => {
      const u = c.getSourceCellId(), h = c.getTargetCellId();
      u && h && (s[u] || (s[u] = []), s[h] || (s[h] = []), s[u].push(h), i.directed || s[h].push(u));
    });
    const r = typeof e == "string" ? e : e.id, o = Ub.run(s, r, i.weight), l = [];
    let a = typeof t == "string" ? t : t.id;
    for (o[a] && l.push(a); a = o[a]; )
      l.unshift(a);
    return l;
  }
  // #endregion
  // #region transform
  /**
   * Translate all cells in the graph by `tx` and `ty` pixels.
   */
  translate(e, t, i) {
    return this.getCells().filter((s) => !s.hasParent()).forEach((s) => s.translate(e, t, i)), this;
  }
  resize(e, t, i) {
    return this.resizeCells(e, t, this.getCells(), i);
  }
  resizeCells(e, t, i, s = {}) {
    const r = this.getCellsBBox(i);
    if (r) {
      const o = Math.max(e / r.width, 0), l = Math.max(t / r.height, 0), a = r.getOrigin();
      i.forEach((c) => c.scale(o, l, a, s));
    }
    return this;
  }
  // #endregion
  // #region serialize/deserialize
  toJSON(e = {}) {
    return wi.toJSON(this.getCells(), e);
  }
  parseJSON(e) {
    return wi.fromJSON(e);
  }
  fromJSON(e, t = {}) {
    const i = this.parseJSON(e);
    return this.resetCells(i, t), this;
  }
  // #endregion
  // #region batch
  startBatch(e, t = {}) {
    return this.batches[e] = (this.batches[e] || 0) + 1, this.notify("batch:start", { name: e, data: t }), this;
  }
  stopBatch(e, t = {}) {
    return this.batches[e] = (this.batches[e] || 0) - 1, this.notify("batch:stop", { name: e, data: t }), this;
  }
  batchUpdate(e, t, i = {}) {
    this.startBatch(e, i);
    const s = t();
    return this.stopBatch(e, i), s;
  }
  hasActiveBatch(e = Object.keys(this.batches)) {
    return (Array.isArray(e) ? e : [e]).some((i) => this.batches[i] > 0);
  }
  // #endregion
  dispose() {
    this.collection.dispose();
  }
}
y8e([
  wi.dispose()
], wi.prototype, "dispose", null);
(function(n) {
  n.toStringTag = `X6.${n.name}`;
  function e(t) {
    if (t == null)
      return !1;
    if (t instanceof n)
      return !0;
    const i = t[Symbol.toStringTag], s = t;
    return (i == null || i === n.toStringTag) && typeof s.addNode == "function" && typeof s.addEdge == "function" && s.collection != null;
  }
  n.isModel = e;
})(wi || (wi = {}));
(function(n) {
  function e(i, s = {}) {
    return {
      cells: i.map((r) => r.toJSON(s))
    };
  }
  n.toJSON = e;
  function t(i) {
    const s = [];
    return Array.isArray(i) ? s.push(...i) : (i.cells && s.push(...i.cells), i.nodes && i.nodes.forEach((r) => {
      r.shape == null && (r.shape = "rect"), s.push(r);
    }), i.edges && i.edges.forEach((r) => {
      r.shape == null && (r.shape = "edge"), s.push(r);
    })), s.map((r) => {
      const o = r.shape;
      if (o) {
        if (Kt.registry.exist(o))
          return Kt.create(r);
        if (qt.registry.exist(o))
          return qt.create(r);
      }
      throw new Error("The `shape` should be specified when creating a node/edge instance");
    });
  }
  n.fromJSON = t;
})(wi || (wi = {}));
var O8e = function(n, e) {
  var t = {};
  for (var i in n)
    Object.prototype.hasOwnProperty.call(n, i) && e.indexOf(i) < 0 && (t[i] = n[i]);
  if (n != null && typeof Object.getOwnPropertySymbols == "function")
    for (var s = 0, i = Object.getOwnPropertySymbols(n); s < i.length; s++)
      e.indexOf(i[s]) < 0 && Object.prototype.propertyIsEnumerable.call(n, i[s]) && (t[i[s]] = n[i[s]]);
  return t;
};
let jo = class extends Kt {
  get label() {
    return this.getLabel();
  }
  set label(e) {
    this.setLabel(e);
  }
  getLabel() {
    return this.getAttrByPath("text/text");
  }
  setLabel(e, t) {
    return e == null ? this.removeLabel() : this.setAttrByPath("text/text", e, t), this;
  }
  removeLabel() {
    return this.removeAttrByPath("text/text"), this;
  }
};
(function(n) {
  n.bodyAttr = {
    fill: "#ffffff",
    stroke: "#333333",
    strokeWidth: 2
  }, n.labelAttr = {
    fontSize: 14,
    fill: "#000000",
    refX: 0.5,
    refY: 0.5,
    textAnchor: "middle",
    textVerticalAnchor: "middle",
    fontFamily: "Arial, helvetica, sans-serif"
  }, n.config({
    attrs: { text: Object.assign({}, n.labelAttr) },
    propHooks(e) {
      const { label: t } = e, i = O8e(e, ["label"]);
      return t && Bc(i, "attrs/text/text", t), i;
    },
    visible: !0
  });
})(jo || (jo = {}));
var w8e = function(n, e) {
  var t = {};
  for (var i in n)
    Object.prototype.hasOwnProperty.call(n, i) && e.indexOf(i) < 0 && (t[i] = n[i]);
  if (n != null && typeof Object.getOwnPropertySymbols == "function")
    for (var s = 0, i = Object.getOwnPropertySymbols(n); s < i.length; s++)
      e.indexOf(i[s]) < 0 && Object.prototype.propertyIsEnumerable.call(n, i[s]) && (t[i[s]] = n[i[s]]);
  return t;
};
function x8e(n, e = "body") {
  return [
    {
      tagName: n,
      selector: e
    },
    {
      tagName: "text",
      selector: "label"
    }
  ];
}
function S8e(n = "xlink:href") {
  return (t) => {
    const { imageUrl: i, imageWidth: s, imageHeight: r } = t, o = w8e(t, ["imageUrl", "imageWidth", "imageHeight"]);
    if (i != null || s != null || r != null) {
      const l = () => {
        if (o.attrs) {
          const a = o.attrs.image;
          i != null && (a[n] = i), s != null && (a.width = s), r != null && (a.height = r), o.attrs.image = a;
        }
      };
      o.attrs ? (o.attrs.image == null && (o.attrs.image = {}), l()) : (o.attrs = {
        image: {}
      }, l());
    }
    return o;
  };
}
function Fc(n, e, t = {}) {
  const i = {
    constructorName: n,
    markup: x8e(n, t.selector),
    attrs: {
      [n]: Object.assign({}, jo.bodyAttr)
    }
  };
  return (t.parent || jo).define(Ft(i, e, { shape: n }));
}
Fc("rect", {
  attrs: {
    body: {
      refWidth: "100%",
      refHeight: "100%"
    }
  }
});
const C8e = qt.define({
  shape: "edge",
  markup: [
    {
      tagName: "path",
      selector: "wrap",
      groupSelector: "lines",
      attrs: {
        fill: "none",
        cursor: "pointer",
        stroke: "transparent",
        strokeLinecap: "round"
      }
    },
    {
      tagName: "path",
      selector: "line",
      groupSelector: "lines",
      attrs: {
        fill: "none",
        pointerEvents: "none"
      }
    }
  ],
  attrs: {
    lines: {
      connection: !0,
      strokeLinejoin: "round"
    },
    wrap: {
      strokeWidth: 10
    },
    line: {
      stroke: "#333",
      strokeWidth: 2,
      targetMarker: "classic"
    }
  }
});
Fc("ellipse", {
  attrs: {
    body: {
      refCx: "50%",
      refCy: "50%",
      refRx: "50%",
      refRy: "50%"
    }
  }
});
var k8e = function(n, e) {
  var t = {};
  for (var i in n)
    Object.prototype.hasOwnProperty.call(n, i) && e.indexOf(i) < 0 && (t[i] = n[i]);
  if (n != null && typeof Object.getOwnPropertySymbols == "function")
    for (var s = 0, i = Object.getOwnPropertySymbols(n); s < i.length; s++)
      e.indexOf(i[s]) < 0 && Object.prototype.propertyIsEnumerable.call(n, i[s]) && (t[i[s]] = n[i[s]]);
  return t;
};
class bc extends jo {
  get points() {
    return this.getPoints();
  }
  set points(e) {
    this.setPoints(e);
  }
  getPoints() {
    return this.getAttrByPath("body/refPoints");
  }
  setPoints(e, t) {
    return e == null ? this.removePoints() : this.setAttrByPath("body/refPoints", bc.pointsToString(e), t), this;
  }
  removePoints() {
    return this.removeAttrByPath("body/refPoints"), this;
  }
}
(function(n) {
  function e(t) {
    return typeof t == "string" ? t : t.map((i) => Array.isArray(i) ? i.join(",") : I.isPointLike(i) ? `${i.x}, ${i.y}` : "").join(" ");
  }
  n.pointsToString = e, n.config({
    propHooks(t) {
      const { points: i } = t, s = k8e(t, ["points"]);
      if (i) {
        const r = e(i);
        r && Bc(s, "attrs/body/refPoints", r);
      }
      return s;
    }
  });
})(bc || (bc = {}));
Fc("polygon", {}, { parent: bc });
Fc("polyline", {}, { parent: bc });
var P8e = function(n, e) {
  var t = {};
  for (var i in n)
    Object.prototype.hasOwnProperty.call(n, i) && e.indexOf(i) < 0 && (t[i] = n[i]);
  if (n != null && typeof Object.getOwnPropertySymbols == "function")
    for (var s = 0, i = Object.getOwnPropertySymbols(n); s < i.length; s++)
      e.indexOf(i[s]) < 0 && Object.prototype.propertyIsEnumerable.call(n, i[s]) && (t[i[s]] = n[i[s]]);
  return t;
};
jo.define({
  shape: "path",
  markup: [
    {
      tagName: "rect",
      selector: "bg"
    },
    {
      tagName: "path",
      selector: "body"
    },
    {
      tagName: "text",
      selector: "label"
    }
  ],
  attrs: {
    bg: {
      refWidth: "100%",
      refHeight: "100%",
      fill: "none",
      stroke: "none",
      pointerEvents: "all"
    },
    body: {
      fill: "none",
      stroke: "#000",
      strokeWidth: 2
    }
  },
  propHooks(n) {
    const { path: e } = n, t = P8e(n, ["path"]);
    return e && Bc(t, "attrs/body/refD", e), t;
  }
});
var A8e = function(n, e) {
  var t = {};
  for (var i in n)
    Object.prototype.hasOwnProperty.call(n, i) && e.indexOf(i) < 0 && (t[i] = n[i]);
  if (n != null && typeof Object.getOwnPropertySymbols == "function")
    for (var s = 0, i = Object.getOwnPropertySymbols(n); s < i.length; s++)
      e.indexOf(i[s]) < 0 && Object.prototype.propertyIsEnumerable.call(n, i[s]) && (t[i[s]] = n[i[s]]);
  return t;
};
jo.define({
  shape: "text-block",
  markup: [
    {
      tagName: "rect",
      selector: "body"
    },
    Do.SUPPORT_FOREIGNOBJECT ? {
      tagName: "foreignObject",
      selector: "foreignObject",
      children: [
        {
          tagName: "div",
          ns: wn.xhtml,
          selector: "label",
          style: {
            width: "100%",
            height: "100%",
            position: "static",
            backgroundColor: "transparent",
            textAlign: "center",
            margin: 0,
            padding: "0px 5px",
            boxSizing: "border-box",
            display: "flex",
            alignItems: "center",
            justifyContent: "center"
          }
        }
      ]
    } : {
      tagName: "text",
      selector: "label",
      attrs: {
        textAnchor: "middle"
      }
    }
  ],
  attrs: {
    body: Object.assign(Object.assign({}, jo.bodyAttr), { refWidth: "100%", refHeight: "100%" }),
    foreignObject: {
      refWidth: "100%",
      refHeight: "100%"
    },
    label: {
      style: {
        fontSize: 14
      }
    }
  },
  propHooks(n) {
    const { text: e } = n, t = A8e(n, ["text"]);
    return e && Bc(t, "attrs/label/text", e), t;
  },
  attrHooks: {
    text: {
      set(n, { cell: e, view: t, refBBox: i, elem: s, attrs: r }) {
        if (s instanceof HTMLElement)
          s.textContent = n;
        else {
          const o = r.style || {}, l = { text: n, width: -5, height: "100%" }, a = Object.assign({ textVerticalAnchor: "middle" }, o), c = gr.presets.textWrap;
          return Ee(c.set, this, l, {
            cell: e,
            view: t,
            elem: s,
            refBBox: i,
            attrs: a
          }), { fill: o.color || null };
        }
      },
      position(n, { refBBox: e, elem: t }) {
        if (t instanceof SVGElement)
          return e.getCenter();
      }
    }
  }
});
Fc("image", {
  attrs: {
    image: {
      refWidth: "100%",
      refHeight: "100%"
    }
  },
  propHooks: S8e()
}, {
  selector: "image"
});
Fc("circle", {
  attrs: {
    body: {
      refCx: "50%",
      refCy: "50%",
      refR: "50%"
    }
  }
});
class zi extends Gt {
  constructor() {
    super(...arguments), this.portsCache = {};
  }
  get [Symbol.toStringTag]() {
    return zi.toStringTag;
  }
  getContainerClassName() {
    const e = [
      super.getContainerClassName(),
      this.prefixClassName("node")
    ];
    return this.can("nodeMovable") || e.push(this.prefixClassName("node-immovable")), e.join(" ");
  }
  updateClassName(e) {
    const t = e.target;
    if (t.hasAttribute("magnet")) {
      const i = this.prefixClassName("port-unconnectable");
      this.can("magnetConnectable") ? nn(t, i) : Me(t, i);
    } else {
      const i = this.prefixClassName("node-immovable");
      this.can("nodeMovable") ? this.removeClass(i) : this.addClass(i);
    }
  }
  isNodeView() {
    return !0;
  }
  confirmUpdate(e, t = {}) {
    let i = e;
    return this.hasAction(i, "ports") && (this.removePorts(), this.cleanPortsCache()), this.hasAction(i, "render") ? (this.render(), i = this.removeAction(i, [
      "render",
      "update",
      "resize",
      "translate",
      "rotate",
      "ports",
      "tools"
    ])) : (i = this.handleAction(i, "resize", () => this.resize(), "update"), i = this.handleAction(
      i,
      "update",
      () => this.update(),
      // `update()` will render ports when useCSSSelectors are enabled
      "ports"
    ), i = this.handleAction(i, "translate", () => this.translate()), i = this.handleAction(i, "rotate", () => this.rotate()), i = this.handleAction(i, "ports", () => this.renderPorts()), i = this.handleAction(i, "tools", () => {
      this.getFlag("tools") === e ? this.renderTools() : this.updateTools(t);
    })), i;
  }
  update(e) {
    this.cleanCache(), this.removePorts();
    const t = this.cell, i = t.getSize(), s = t.getAttrs();
    this.updateAttrs(this.container, s, {
      attrs: e === s ? null : e,
      rootBBox: new ue(0, 0, i.width, i.height),
      selectors: this.selectors
    }), this.renderPorts();
  }
  renderMarkup() {
    const e = this.cell.markup;
    if (e) {
      if (typeof e == "string")
        throw new TypeError("Not support string markup.");
      return this.renderJSONMarkup(e);
    }
    throw new TypeError("Invalid node markup.");
  }
  renderJSONMarkup(e) {
    const t = this.parseJSONMarkup(e, this.container);
    this.selectors = t.selectors, this.container.appendChild(t.fragment);
  }
  render() {
    return this.empty(), this.renderMarkup(), this.resize(), this.updateTransform(), this.renderTools(), this;
  }
  resize() {
    this.cell.getAngle() && this.rotate(), this.update();
  }
  translate() {
    this.updateTransform();
  }
  rotate() {
    this.updateTransform();
  }
  getTranslationString() {
    const e = this.cell.getPosition();
    return `translate(${e.x},${e.y})`;
  }
  getRotationString() {
    const e = this.cell.getAngle();
    if (e) {
      const t = this.cell.getSize();
      return `rotate(${e},${t.width / 2},${t.height / 2})`;
    }
  }
  updateTransform() {
    let e = this.getTranslationString();
    const t = this.getRotationString();
    t && (e += ` ${t}`), this.container.setAttribute("transform", e);
  }
  // #region ports
  findPortElem(e, t) {
    const i = e ? this.portsCache[e] : null;
    if (!i)
      return null;
    const s = i.portContentElement, r = i.portContentSelectors || {};
    return this.findOne(t, s, r);
  }
  cleanPortsCache() {
    this.portsCache = {};
  }
  removePorts() {
    Object.values(this.portsCache).forEach((e) => {
      ar(e.portElement);
    });
  }
  renderPorts() {
    const e = this.container, t = [];
    e.childNodes.forEach((o) => {
      t.push(o);
    });
    const i = this.cell.getParsedPorts(), s = UO(i, "zIndex"), r = "auto";
    s[r] && s[r].forEach((o) => {
      const l = this.getPortElement(o);
      e.append(l), t.push(l);
    }), Object.keys(s).forEach((o) => {
      if (o !== r) {
        const l = parseInt(o, 10);
        this.appendPorts(s[o], l, t);
      }
    }), this.updatePorts();
  }
  appendPorts(e, t, i) {
    const s = e.map((r) => this.getPortElement(r));
    i[t] || t < 0 ? tO(i[Math.max(t, 0)], s) : Xo(this.container, s);
  }
  getPortElement(e) {
    const t = this.portsCache[e.id];
    return t ? t.portElement : this.createPortElement(e);
  }
  createPortElement(e) {
    let t = kt.renderMarkup(this.cell.getPortContainerMarkup());
    const i = t.elem;
    if (i == null)
      throw new Error("Invalid port container markup.");
    t = kt.renderMarkup(this.getPortMarkup(e));
    const s = t.elem, r = t.selectors;
    if (s == null)
      throw new Error("Invalid port markup.");
    this.setAttrs({
      port: e.id,
      "port-group": e.group
    }, s);
    let o = "x6-port";
    e.group && (o += ` x6-port-${e.group}`), Me(i, o), Me(i, "x6-port"), Me(s, "x6-port-body"), i.appendChild(s);
    let l = r, a, c;
    if (this.existPortLabel(e)) {
      if (t = kt.renderMarkup(this.getPortLabelMarkup(e.label)), a = t.elem, c = t.selectors, a == null)
        throw new Error("Invalid port label markup.");
      if (r && c) {
        for (const h in c)
          if (r[h] && h !== this.rootSelector)
            throw new Error("Selectors within port must be unique.");
        l = Object.assign(Object.assign({}, r), c);
      }
      Me(a, "x6-port-label"), i.appendChild(a);
    }
    return this.portsCache[e.id] = {
      portElement: i,
      portSelectors: l,
      portLabelElement: a,
      portLabelSelectors: c,
      portContentElement: s,
      portContentSelectors: r
    }, this.graph.options.onPortRendered && this.graph.options.onPortRendered({
      port: e,
      node: this.cell,
      container: i,
      selectors: l,
      labelContainer: a,
      labelSelectors: c,
      contentContainer: s,
      contentSelectors: r
    }), i;
  }
  updatePorts() {
    const e = this.cell.getParsedGroups(), t = Object.keys(e);
    t.length === 0 ? this.updatePortGroup() : t.forEach((i) => this.updatePortGroup(i));
  }
  updatePortGroup(e) {
    const t = ue.fromSize(this.cell.getSize()), i = this.cell.getPortsLayoutByGroup(e, t);
    for (let s = 0, r = i.length; s < r; s += 1) {
      const o = i[s], l = o.portId, a = this.portsCache[l] || {}, c = o.portLayout;
      if (this.applyPortTransform(a.portElement, c), o.portAttrs != null) {
        const h = {
          selectors: a.portSelectors || {}
        };
        o.portSize && (h.rootBBox = ue.fromSize(o.portSize)), this.updateAttrs(a.portElement, o.portAttrs, h);
      }
      const u = o.labelLayout;
      if (u && a.portLabelElement && (this.applyPortTransform(a.portLabelElement, u, -(c.angle || 0)), u.attrs)) {
        const h = {
          selectors: a.portLabelSelectors || {}
        };
        o.labelSize && (h.rootBBox = ue.fromSize(o.labelSize)), this.updateAttrs(a.portLabelElement, u.attrs, h);
      }
    }
  }
  applyPortTransform(e, t, i = 0) {
    const s = t.angle, r = t.position, o = kn().rotate(i).translate(r.x || 0, r.y || 0).rotate(s || 0);
    rc(e, o, { absolute: !0 });
  }
  getPortMarkup(e) {
    return e.markup || this.cell.portMarkup;
  }
  getPortLabelMarkup(e) {
    return e.markup || this.cell.portLabelMarkup;
  }
  existPortLabel(e) {
    return e.attrs && e.attrs.text;
  }
  getEventArgs(e, t, i) {
    const s = this, r = s.cell, o = r;
    return t == null || i == null ? { e, view: s, node: r, cell: o } : { e, x: t, y: i, view: s, node: r, cell: o };
  }
  getPortEventArgs(e, t, i) {
    const s = this, r = s.cell, o = r;
    return i ? {
      e,
      x: i.x,
      y: i.y,
      view: s,
      node: r,
      cell: o,
      port: t
    } : { e, view: s, node: r, cell: o, port: t };
  }
  notifyMouseDown(e, t, i) {
    super.onMouseDown(e, t, i), this.notify("node:mousedown", this.getEventArgs(e, t, i));
  }
  notifyMouseMove(e, t, i) {
    super.onMouseMove(e, t, i), this.notify("node:mousemove", this.getEventArgs(e, t, i));
  }
  notifyMouseUp(e, t, i) {
    super.onMouseUp(e, t, i), this.notify("node:mouseup", this.getEventArgs(e, t, i));
  }
  notifyPortEvent(e, t, i) {
    const s = this.findAttr("port", t.target);
    if (s) {
      const r = t.type;
      e === "node:port:mouseenter" ? t.type = "mouseenter" : e === "node:port:mouseleave" && (t.type = "mouseleave"), this.notify(e, this.getPortEventArgs(t, s, i)), t.type = r;
    }
  }
  onClick(e, t, i) {
    super.onClick(e, t, i), this.notify("node:click", this.getEventArgs(e, t, i)), this.notifyPortEvent("node:port:click", e, { x: t, y: i });
  }
  onDblClick(e, t, i) {
    super.onDblClick(e, t, i), this.notify("node:dblclick", this.getEventArgs(e, t, i)), this.notifyPortEvent("node:port:dblclick", e, { x: t, y: i });
  }
  onContextMenu(e, t, i) {
    super.onContextMenu(e, t, i), this.notify("node:contextmenu", this.getEventArgs(e, t, i)), this.notifyPortEvent("node:port:contextmenu", e, { x: t, y: i });
  }
  onMouseDown(e, t, i) {
    this.isPropagationStopped(e) || (this.notifyMouseDown(e, t, i), this.notifyPortEvent("node:port:mousedown", e, { x: t, y: i }), this.startNodeDragging(e, t, i));
  }
  onMouseMove(e, t, i) {
    const s = this.getEventData(e), r = s.action;
    if (r === "magnet")
      this.dragMagnet(e, t, i);
    else {
      if (r === "move") {
        const l = s.targetView || this;
        l.dragNode(e, t, i), l.notify("node:moving", {
          e,
          x: t,
          y: i,
          view: l,
          cell: l.cell,
          node: l.cell
        });
      }
      this.notifyMouseMove(e, t, i), this.notifyPortEvent("node:port:mousemove", e, { x: t, y: i });
    }
    this.setEventData(e, s);
  }
  onMouseUp(e, t, i) {
    const s = this.getEventData(e), r = s.action;
    r === "magnet" ? this.stopMagnetDragging(e, t, i) : (this.notifyMouseUp(e, t, i), this.notifyPortEvent("node:port:mouseup", e, { x: t, y: i }), r === "move" && (s.targetView || this).stopNodeDragging(e, t, i));
    const o = s.targetMagnet;
    o && this.onMagnetClick(e, o, t, i), this.checkMouseleave(e);
  }
  onMouseOver(e) {
    super.onMouseOver(e), this.notify("node:mouseover", this.getEventArgs(e)), this.notifyPortEvent("node:port:mouseenter", e), this.notifyPortEvent("node:port:mouseover", e);
  }
  onMouseOut(e) {
    super.onMouseOut(e), this.notify("node:mouseout", this.getEventArgs(e)), this.notifyPortEvent("node:port:mouseleave", e), this.notifyPortEvent("node:port:mouseout", e);
  }
  onMouseEnter(e) {
    this.updateClassName(e), super.onMouseEnter(e), this.notify("node:mouseenter", this.getEventArgs(e));
  }
  onMouseLeave(e) {
    super.onMouseLeave(e), this.notify("node:mouseleave", this.getEventArgs(e));
  }
  onMouseWheel(e, t, i, s) {
    super.onMouseWheel(e, t, i, s), this.notify("node:mousewheel", Object.assign({ delta: s }, this.getEventArgs(e, t, i)));
  }
  onMagnetClick(e, t, i, s) {
    const r = this.graph;
    r.view.getMouseMovedCount(e) > r.options.clickThreshold || this.notify("node:magnet:click", Object.assign({ magnet: t }, this.getEventArgs(e, i, s)));
  }
  onMagnetDblClick(e, t, i, s) {
    this.notify("node:magnet:dblclick", Object.assign({ magnet: t }, this.getEventArgs(e, i, s)));
  }
  onMagnetContextMenu(e, t, i, s) {
    this.notify("node:magnet:contextmenu", Object.assign({ magnet: t }, this.getEventArgs(e, i, s)));
  }
  onMagnetMouseDown(e, t, i, s) {
    this.startMagnetDragging(e, i, s);
  }
  onCustomEvent(e, t, i, s) {
    this.notify("node:customevent", Object.assign({ name: t }, this.getEventArgs(e, i, s))), super.onCustomEvent(e, t, i, s);
  }
  prepareEmbedding(e) {
    const t = this.graph, s = this.getEventData(e).cell || this.cell, r = t.findViewByCell(s), o = t.snapToGrid(e.clientX, e.clientY);
    this.notify("node:embed", {
      e,
      node: s,
      view: r,
      cell: s,
      x: o.x,
      y: o.y,
      currentParent: s.getParent()
    });
  }
  processEmbedding(e, t) {
    const i = t.cell || this.cell, s = t.graph || this.graph, r = s.options.embedding, o = r.findParent;
    let l = typeof o == "function" ? Ee(o, s, {
      view: this,
      node: this.cell
    }).filter((f) => He.isCell(f) && this.cell.id !== f.id && !f.isDescendantOf(this.cell)) : s.model.getNodesUnderNode(i, {
      by: o
    });
    if (r.frontOnly && l.length > 0) {
      const f = UO(l, "zIndex"), d = h5(Object.keys(f).map((p) => parseInt(p, 10)));
      d && (l = f[d]);
    }
    l = l.filter((f) => f.visible);
    let a = null;
    const c = t.candidateEmbedView, u = r.validate;
    for (let f = l.length - 1; f >= 0; f -= 1) {
      const d = l[f];
      if (c && c.cell.id === d.id) {
        a = c;
        break;
      } else {
        const p = d.findView(s);
        if (u && Ee(u, s, {
          child: this.cell,
          parent: p.cell,
          childView: this,
          parentView: p
        })) {
          a = p;
          break;
        }
      }
    }
    this.clearEmbedding(t), a && a.highlight(null, { type: "embedding" }), t.candidateEmbedView = a;
    const h = s.snapToGrid(e.clientX, e.clientY);
    this.notify("node:embedding", {
      e,
      cell: i,
      node: i,
      view: s.findViewByCell(i),
      x: h.x,
      y: h.y,
      currentParent: i.getParent(),
      candidateParent: a ? a.cell : null
    });
  }
  clearEmbedding(e) {
    const t = e.candidateEmbedView;
    t && (t.unhighlight(null, { type: "embedding" }), e.candidateEmbedView = null);
  }
  finalizeEmbedding(e, t) {
    this.graph.startBatch("embedding");
    const i = t.cell || this.cell, s = t.graph || this.graph, r = s.findViewByCell(i), o = i.getParent(), l = t.candidateEmbedView;
    if (l ? (l.unhighlight(null, { type: "embedding" }), t.candidateEmbedView = null, (o == null || o.id !== l.cell.id) && l.cell.insertChild(i, void 0, { ui: !0 })) : o && o.unembed(i, { ui: !0 }), s.model.getConnectedEdges(i, { deep: !0 }).forEach((a) => {
      a.updateParent({ ui: !0 });
    }), r && l) {
      const a = s.snapToGrid(e.clientX, e.clientY);
      r.notify("node:embedded", {
        e,
        cell: i,
        x: a.x,
        y: a.y,
        node: i,
        view: s.findViewByCell(i),
        previousParent: o,
        currentParent: i.getParent()
      });
    }
    this.graph.stopBatch("embedding");
  }
  getDelegatedView() {
    let e = this.cell, t = this;
    for (; t && !e.isEdge(); ) {
      if (!e.hasParent() || t.can("stopDelegateOnDragging"))
        return t;
      e = e.getParent(), t = this.graph.findViewByCell(e);
    }
    return null;
  }
  validateMagnet(e, t, i) {
    if (t.getAttribute("magnet") !== "passive") {
      const s = this.graph.options.connecting.validateMagnet;
      return s ? Ee(s, this.graph, {
        e: i,
        magnet: t,
        view: e,
        cell: e.cell
      }) : !0;
    }
    return !1;
  }
  startMagnetDragging(e, t, i) {
    if (!this.can("magnetConnectable"))
      return;
    e.stopPropagation();
    const s = e.currentTarget, r = this.graph;
    this.setEventData(e, {
      targetMagnet: s
    }), this.validateMagnet(this, s, e) ? (r.options.magnetThreshold <= 0 && this.startConnectting(e, s, t, i), this.setEventData(e, {
      action: "magnet"
    }), this.stopPropagation(e)) : this.onMouseDown(e, t, i), r.view.delegateDragEvents(e, this);
  }
  startConnectting(e, t, i, s) {
    this.graph.model.startBatch("add-edge");
    const r = this.createEdgeFromMagnet(t, i, s);
    r.setEventData(e, r.prepareArrowheadDragging("target", {
      x: i,
      y: s,
      isNewEdge: !0,
      fallbackAction: "remove"
    })), this.setEventData(e, { edgeView: r }), r.notifyMouseDown(e, i, s);
  }
  getDefaultEdge(e, t) {
    let i;
    const s = this.graph.options.connecting.createEdge;
    return s && (i = Ee(s, this.graph, {
      sourceMagnet: t,
      sourceView: e,
      sourceCell: e.cell
    })), i;
  }
  createEdgeFromMagnet(e, t, i) {
    const s = this.graph, r = s.model, o = this.getDefaultEdge(this, e);
    return o.setSource(Object.assign(Object.assign({}, o.getSource()), this.getEdgeTerminal(e, t, i, o, "source"))), o.setTarget(Object.assign(Object.assign({}, o.getTarget()), { x: t, y: i })), o.addTo(r, { async: !1, ui: !0 }), o.findView(s);
  }
  dragMagnet(e, t, i) {
    const s = this.getEventData(e), r = s.edgeView;
    if (r)
      r.onMouseMove(e, t, i), this.autoScrollGraph(e.clientX, e.clientY);
    else {
      const o = this.graph, l = o.options.magnetThreshold, a = this.getEventTarget(e), c = s.targetMagnet;
      if (l === "onleave") {
        if (c === a || c.contains(a))
          return;
      } else if (o.view.getMouseMovedCount(e) <= l)
        return;
      this.startConnectting(e, c, t, i);
    }
  }
  stopMagnetDragging(e, t, i) {
    const r = this.eventData(e).edgeView;
    r && (r.onMouseUp(e, t, i), this.graph.model.stopBatch("add-edge"));
  }
  notifyUnhandledMouseDown(e, t, i) {
    this.notify("node:unhandled:mousedown", {
      e,
      x: t,
      y: i,
      view: this,
      cell: this.cell,
      node: this.cell
    });
  }
  notifyNodeMove(e, t, i, s, r) {
    let o = [r];
    const l = this.graph.getPlugin("selection");
    if (l && l.isSelectionMovable()) {
      const a = l.getSelectedCells();
      a.includes(r) && (o = a.filter((c) => c.isNode()));
    }
    o.forEach((a) => {
      this.notify(e, {
        e: t,
        x: i,
        y: s,
        cell: a,
        node: a,
        view: a.findView(this.graph)
      });
    });
  }
  getRestrictArea(e) {
    const t = this.graph.options.translating.restrict, i = typeof t == "function" ? Ee(t, this.graph, e) : t;
    return typeof i == "number" ? this.graph.transform.getGraphArea().inflate(i) : i === !0 ? this.graph.transform.getGraphArea() : i || null;
  }
  startNodeDragging(e, t, i) {
    const s = this.getDelegatedView();
    if (s == null || !s.can("nodeMovable"))
      return this.notifyUnhandledMouseDown(e, t, i);
    this.setEventData(e, {
      targetView: s,
      action: "move"
    });
    const r = I.create(s.cell.getPosition());
    s.setEventData(e, {
      moving: !1,
      offset: r.diff(t, i),
      restrict: this.getRestrictArea(s)
    });
  }
  dragNode(e, t, i) {
    const s = this.cell, r = this.graph, o = r.getGridSize(), l = this.getEventData(e), a = l.offset, c = l.restrict;
    l.moving || (l.moving = !0, this.addClass("node-moving"), this.notifyNodeMove("node:move", e, t, i, this.cell)), this.autoScrollGraph(e.clientX, e.clientY);
    const u = ct.snapToGrid(t + a.x, o), h = ct.snapToGrid(i + a.y, o);
    s.setPosition(u, h, {
      restrict: c,
      deep: !0,
      ui: !0
    }), r.options.embedding.enabled && (l.embedding || (this.prepareEmbedding(e), l.embedding = !0), this.processEmbedding(e, l));
  }
  stopNodeDragging(e, t, i) {
    const s = this.getEventData(e);
    s.embedding && this.finalizeEmbedding(e, s), s.moving && (this.removeClass("node-moving"), this.notifyNodeMove("node:moved", e, t, i, this.cell)), s.moving = !1, s.embedding = !1;
  }
  // eslint-disable-next-line
  autoScrollGraph(e, t) {
    const i = this.graph.getPlugin("scroller");
    i && i.autoScroll(e, t);
  }
}
(function(n) {
  n.toStringTag = `X6.${n.name}`;
  function e(t) {
    if (t == null)
      return !1;
    if (t instanceof n)
      return !0;
    const i = t[Symbol.toStringTag], s = t;
    return (i == null || i === n.toStringTag) && typeof s.isNodeView == "function" && typeof s.isEdgeView == "function" && typeof s.confirmUpdate == "function" && typeof s.update == "function" && typeof s.findPortElem == "function" && typeof s.resize == "function" && typeof s.rotate == "function" && typeof s.translate == "function";
  }
  n.isNodeView = e;
})(zi || (zi = {}));
zi.config({
  isSvgElement: !0,
  priority: 0,
  bootstrap: ["render"],
  actions: {
    view: ["render"],
    markup: ["render"],
    attrs: ["update"],
    size: ["resize", "ports", "tools"],
    angle: ["rotate", "tools"],
    position: ["translate", "tools"],
    ports: ["ports"],
    tools: ["tools"]
  }
});
zi.registry.register("node", zi, !0);
var E8e = function(n, e) {
  var t = {};
  for (var i in n)
    Object.prototype.hasOwnProperty.call(n, i) && e.indexOf(i) < 0 && (t[i] = n[i]);
  if (n != null && typeof Object.getOwnPropertySymbols == "function")
    for (var s = 0, i = Object.getOwnPropertySymbols(n); s < i.length; s++)
      e.indexOf(i[s]) < 0 && Object.prototype.propertyIsEnumerable.call(n, i[s]) && (t[i[s]] = n[i[s]]);
  return t;
};
class Vr extends Gt {
  constructor() {
    super(...arguments), this.POINT_ROUNDING = 2, this.labelDestroyFn = {};
  }
  get [Symbol.toStringTag]() {
    return Vr.toStringTag;
  }
  getContainerClassName() {
    return [super.getContainerClassName(), this.prefixClassName("edge")].join(" ");
  }
  get sourceBBox() {
    const e = this.sourceView;
    if (!e) {
      const i = this.cell.getSource();
      return new ue(i.x, i.y);
    }
    const t = this.sourceMagnet;
    return e.isEdgeElement(t) ? new ue(this.sourceAnchor.x, this.sourceAnchor.y) : e.getBBoxOfElement(t || e.container);
  }
  get targetBBox() {
    const e = this.targetView;
    if (!e) {
      const i = this.cell.getTarget();
      return new ue(i.x, i.y);
    }
    const t = this.targetMagnet;
    return e.isEdgeElement(t) ? new ue(this.targetAnchor.x, this.targetAnchor.y) : e.getBBoxOfElement(t || e.container);
  }
  isEdgeView() {
    return !0;
  }
  confirmUpdate(e, t = {}) {
    let i = e;
    if (this.hasAction(i, "source")) {
      if (!this.updateTerminalProperties("source"))
        return i;
      i = this.removeAction(i, "source");
    }
    if (this.hasAction(i, "target")) {
      if (!this.updateTerminalProperties("target"))
        return i;
      i = this.removeAction(i, "target");
    }
    return this.hasAction(i, "render") ? (this.render(), i = this.removeAction(i, ["render", "update", "labels", "tools"]), i) : (i = this.handleAction(i, "update", () => this.update(t)), i = this.handleAction(i, "labels", () => this.onLabelsChange(t)), i = this.handleAction(i, "tools", () => this.renderTools()), i);
  }
  // #region render
  render() {
    return this.empty(), this.renderMarkup(), this.labelContainer = null, this.renderLabels(), this.update(), this.renderTools(), this;
  }
  renderMarkup() {
    const e = this.cell.markup;
    if (e) {
      if (typeof e == "string")
        throw new TypeError("Not support string markup.");
      return this.renderJSONMarkup(e);
    }
    throw new TypeError("Invalid edge markup.");
  }
  renderJSONMarkup(e) {
    const t = this.parseJSONMarkup(e, this.container);
    this.selectors = t.selectors, this.container.append(t.fragment);
  }
  customizeLabels() {
    if (this.labelContainer) {
      const e = this.cell, t = e.labels;
      for (let i = 0, s = t.length; i < s; i += 1) {
        const r = t[i], o = this.labelCache[i], l = this.labelSelectors[i], a = this.graph.options.onEdgeLabelRendered;
        if (a) {
          const c = a({
            edge: e,
            label: r,
            container: o,
            selectors: l
          });
          c && (this.labelDestroyFn[i] = c);
        }
      }
    }
  }
  destroyCustomizeLabels() {
    const e = this.cell.labels;
    if (this.labelCache && this.labelSelectors && this.labelDestroyFn)
      for (let t = 0, i = e.length; t < i; t += 1) {
        const s = this.labelDestroyFn[t], r = this.labelCache[t], o = this.labelSelectors[t];
        s && r && o && s({
          edge: this.cell,
          label: e[t],
          container: r,
          selectors: o
        });
      }
    this.labelDestroyFn = {};
  }
  renderLabels() {
    const e = this.cell, t = e.getLabels(), i = t.length;
    let s = this.labelContainer;
    if (this.labelCache = {}, this.labelSelectors = {}, i <= 0)
      return s && s.parentNode && s.parentNode.removeChild(s), this;
    s ? this.empty(s) : (s = Bs("g"), this.addClass(this.prefixClassName("edge-labels"), s), this.labelContainer = s);
    for (let r = 0, o = t.length; r < o; r += 1) {
      const l = t[r], a = this.normalizeLabelMarkup(this.parseLabelMarkup(l.markup));
      let c, u;
      if (a)
        c = a.node, u = a.selectors;
      else {
        const f = e.getDefaultLabel(), d = this.normalizeLabelMarkup(this.parseLabelMarkup(f.markup));
        c = d.node, u = d.selectors;
      }
      c.setAttribute("data-index", `${r}`), s.appendChild(c);
      const h = this.rootSelector;
      if (u[h])
        throw new Error("Ambiguous label root selector.");
      u[h] = c, this.labelCache[r] = c, this.labelSelectors[r] = u;
    }
    return s.parentNode == null && this.container.appendChild(s), this.updateLabels(), this.customizeLabels(), this;
  }
  onLabelsChange(e = {}) {
    this.destroyCustomizeLabels(), this.shouldRerenderLabels(e) ? this.renderLabels() : this.updateLabels(), this.updateLabelPositions();
  }
  shouldRerenderLabels(e = {}) {
    const t = this.cell.previous("labels");
    if (t == null)
      return !0;
    if ("propertyPathArray" in e && "propertyValue" in e) {
      const i = e.propertyPathArray || [], s = i.length;
      if (s > 1) {
        const r = i[1];
        if (t[r]) {
          if (s === 2)
            return typeof e.propertyValue == "object" && cf(e.propertyValue, "markup");
          if (i[2] !== "markup")
            return !1;
        }
      }
    }
    return !0;
  }
  parseLabelMarkup(e) {
    return e ? typeof e == "string" ? this.parseLabelStringMarkup(e) : this.parseJSONMarkup(e) : null;
  }
  parseLabelStringMarkup(e) {
    const t = Ie.createVectors(e), i = document.createDocumentFragment();
    for (let s = 0, r = t.length; s < r; s += 1) {
      const o = t[s].node;
      i.appendChild(o);
    }
    return { fragment: i, selectors: {} };
  }
  normalizeLabelMarkup(e) {
    if (e == null)
      return;
    const t = e.fragment;
    if (!(t instanceof DocumentFragment) || !t.hasChildNodes())
      throw new Error("Invalid label markup.");
    let i;
    const s = t.childNodes;
    return s.length > 1 || s[0].nodeName.toUpperCase() !== "G" ? i = Ie.create("g").append(t) : i = Ie.create(s[0]), i.addClass(this.prefixClassName("edge-label")), {
      node: i.node,
      selectors: e.selectors
    };
  }
  updateLabels() {
    if (this.labelContainer) {
      const e = this.cell, t = e.labels, i = this.can("edgeLabelMovable"), s = e.getDefaultLabel();
      for (let r = 0, o = t.length; r < o; r += 1) {
        const l = this.labelCache[r], a = this.labelSelectors[r];
        l.setAttribute("cursor", i ? "move" : "default");
        const c = t[r], u = Ft({}, s.attrs, c.attrs);
        this.updateAttrs(l, u, {
          selectors: a,
          rootBBox: c.size ? ue.fromSize(c.size) : void 0
        });
      }
    }
  }
  renderTools() {
    const e = this.cell.getTools();
    return this.addTools(e), this;
  }
  // #endregion
  // #region updating
  update(e = {}) {
    this.cleanCache(), this.updateConnection(e);
    const t = this.cell.getAttrs(), i = E8e(t, ["text"]);
    return i != null && this.updateAttrs(this.container, i, {
      selectors: this.selectors
    }), this.updateLabelPositions(), this.updateTools(e), this;
  }
  removeRedundantLinearVertices(e = {}) {
    const t = this.cell, i = t.getVertices(), s = [this.sourceAnchor, ...i, this.targetAnchor], r = s.length, o = new Yt(s);
    o.simplify({ threshold: 0.01 });
    const l = o.points.map((c) => c.toJSON()), a = l.length;
    return r === a ? 0 : (t.setVertices(l.slice(1, a - 1), e), r - a);
  }
  getTerminalView(e) {
    switch (e) {
      case "source":
        return this.sourceView || null;
      case "target":
        return this.targetView || null;
      default:
        throw new Error(`Unknown terminal type '${e}'`);
    }
  }
  getTerminalAnchor(e) {
    switch (e) {
      case "source":
        return I.create(this.sourceAnchor);
      case "target":
        return I.create(this.targetAnchor);
      default:
        throw new Error(`Unknown terminal type '${e}'`);
    }
  }
  getTerminalConnectionPoint(e) {
    switch (e) {
      case "source":
        return I.create(this.sourcePoint);
      case "target":
        return I.create(this.targetPoint);
      default:
        throw new Error(`Unknown terminal type '${e}'`);
    }
  }
  getTerminalMagnet(e, t = {}) {
    switch (e) {
      case "source": {
        if (t.raw)
          return this.sourceMagnet;
        const i = this.sourceView;
        return i ? this.sourceMagnet || i.container : null;
      }
      case "target": {
        if (t.raw)
          return this.targetMagnet;
        const i = this.targetView;
        return i ? this.targetMagnet || i.container : null;
      }
      default:
        throw new Error(`Unknown terminal type '${e}'`);
    }
  }
  updateConnection(e = {}) {
    const t = this.cell;
    if (e.translateBy && t.isFragmentDescendantOf(e.translateBy)) {
      const i = e.tx || 0, s = e.ty || 0;
      this.routePoints = new Yt(this.routePoints).translate(i, s).points, this.translateConnectionPoints(i, s), this.path.translate(i, s);
    } else {
      const i = t.getVertices(), s = this.findAnchors(i);
      this.sourceAnchor = s.source, this.targetAnchor = s.target, this.routePoints = this.findRoutePoints(i);
      const r = this.findConnectionPoints(this.routePoints, this.sourceAnchor, this.targetAnchor);
      this.sourcePoint = r.source, this.targetPoint = r.target;
      const o = this.findMarkerPoints(this.routePoints, this.sourcePoint, this.targetPoint);
      this.path = this.findPath(this.routePoints, o.source || this.sourcePoint, o.target || this.targetPoint);
    }
    this.cleanCache();
  }
  findAnchors(e) {
    const t = this.cell, i = t.source, s = t.target, r = e[0], o = e[e.length - 1];
    return s.priority && !i.priority ? this.findAnchorsOrdered("target", o, "source", r) : this.findAnchorsOrdered("source", r, "target", o);
  }
  findAnchorsOrdered(e, t, i, s) {
    let r, o;
    const l = this.cell, a = l[e], c = l[i], u = this.getTerminalView(e), h = this.getTerminalView(i), f = this.getTerminalMagnet(e), d = this.getTerminalMagnet(i);
    if (u) {
      let p;
      t ? p = I.create(t) : h ? p = d : p = I.create(c), r = this.getAnchor(a.anchor, u, f, p, e);
    } else
      r = I.create(a);
    if (h) {
      const p = I.create(s || r);
      o = this.getAnchor(c.anchor, h, d, p, i);
    } else
      o = I.isPointLike(c) ? I.create(c) : new I();
    return {
      [e]: r,
      [i]: o
    };
  }
  getAnchor(e, t, i, s, r) {
    const o = t.isEdgeElement(i), l = this.graph.options.connecting;
    let a = typeof e == "string" ? { name: e } : e;
    if (!a) {
      const h = o ? (r === "source" ? l.sourceEdgeAnchor : l.targetEdgeAnchor) || l.edgeAnchor : (r === "source" ? l.sourceAnchor : l.targetAnchor) || l.anchor;
      a = typeof h == "string" ? { name: h } : h;
    }
    if (!a)
      throw new Error("Anchor should be specified.");
    let c;
    const u = a.name;
    if (o) {
      const h = pc.registry.get(u);
      if (typeof h != "function")
        return pc.registry.onNotFound(u);
      c = Ee(h, this, t, i, s, a.args || {}, r);
    } else {
      const h = dc.registry.get(u);
      if (typeof h != "function")
        return dc.registry.onNotFound(u);
      c = Ee(h, this, t, i, s, a.args || {}, r);
    }
    return c ? c.round(this.POINT_ROUNDING) : new I();
  }
  findRoutePoints(e = []) {
    const t = this.graph.options.connecting.router || So.presets.normal, i = this.cell.getRouter() || t;
    let s;
    if (typeof i == "function")
      s = Ee(i, this, e, {}, this);
    else {
      const r = typeof i == "string" ? i : i.name, o = typeof i == "string" ? {} : i.args || {}, l = r ? So.registry.get(r) : So.presets.normal;
      if (typeof l != "function")
        return So.registry.onNotFound(r);
      s = Ee(l, this, e, o, this);
    }
    return s == null ? e.map((r) => I.create(r)) : s.map((r) => I.create(r));
  }
  findConnectionPoints(e, t, i) {
    const s = this.cell, r = this.graph.options.connecting, o = s.getSource(), l = s.getTarget(), a = this.sourceView, c = this.targetView, u = e[0], h = e[e.length - 1];
    let f;
    if (a && !a.isEdgeElement(this.sourceMagnet)) {
      const p = this.sourceMagnet || a.container, g = u || i, m = new me(g, t), b = o.connectionPoint || r.sourceConnectionPoint || r.connectionPoint;
      f = this.getConnectionPoint(b, a, p, m, "source");
    } else
      f = t;
    let d;
    if (c && !c.isEdgeElement(this.targetMagnet)) {
      const p = this.targetMagnet || c.container, g = l.connectionPoint || r.targetConnectionPoint || r.connectionPoint, m = h || t, b = new me(m, i);
      d = this.getConnectionPoint(g, c, p, b, "target");
    } else
      d = i;
    return {
      source: f,
      target: d
    };
  }
  getConnectionPoint(e, t, i, s, r) {
    const o = s.end;
    if (e == null)
      return o;
    const l = typeof e == "string" ? e : e.name, a = typeof e == "string" ? {} : e.args, c = gc.registry.get(l);
    if (typeof c != "function")
      return gc.registry.onNotFound(l);
    const u = Ee(c, this, s, t, i, a || {}, r);
    return u ? u.round(this.POINT_ROUNDING) : o;
  }
  findMarkerPoints(e, t, i) {
    const s = (h) => {
      const f = this.cell.getAttrs(), d = Object.keys(f);
      for (let p = 0, g = d.length; p < g; p += 1) {
        const m = f[d[p]];
        if (m[`${h}Marker`] || m[`${h}-marker`]) {
          const b = m.strokeWidth || m["stroke-width"];
          if (b)
            return parseFloat(b);
          break;
        }
      }
      return null;
    }, r = e[0], o = e[e.length - 1];
    let l, a;
    const c = s("source");
    c && (l = t.clone().move(r || i, -c));
    const u = s("target");
    return u && (a = i.clone().move(o || t, -u)), this.sourceMarkerPoint = l || t.clone(), this.targetMarkerPoint = a || i.clone(), {
      source: l,
      target: a
    };
  }
  findPath(e, t, i) {
    const s = this.cell.getConnector() || this.graph.options.connecting.connector;
    let r, o, l;
    if (typeof s == "string" ? r = s : (r = s.name, o = s.args), r) {
      const c = $l.registry.get(r);
      if (typeof c != "function")
        return $l.registry.onNotFound(r);
      l = c;
    } else
      l = $l.presets.normal;
    const a = Ee(l, this, t, i, e, Object.assign(Object.assign({}, o), { raw: !0 }), this);
    return typeof a == "string" ? ke.parse(a) : a;
  }
  translateConnectionPoints(e, t) {
    this.sourcePoint.translate(e, t), this.targetPoint.translate(e, t), this.sourceAnchor.translate(e, t), this.targetAnchor.translate(e, t), this.sourceMarkerPoint.translate(e, t), this.targetMarkerPoint.translate(e, t);
  }
  updateLabelPositions() {
    if (this.labelContainer == null)
      return this;
    if (!this.path)
      return this;
    const t = this.cell, i = t.getLabels();
    if (i.length === 0)
      return this;
    const s = t.getDefaultLabel(), r = this.normalizeLabelPosition(s.position);
    for (let o = 0, l = i.length; o < l; o += 1) {
      const a = i[o], c = this.labelCache[o];
      if (!c)
        continue;
      const u = this.normalizeLabelPosition(a.position), h = Ft({}, r, u), f = this.getLabelTransformationMatrix(h);
      c.setAttribute("transform", zc(f));
    }
    return this;
  }
  updateTerminalProperties(e) {
    const t = this.cell, i = this.graph, s = t[e], r = s && s.cell, o = `${e}View`;
    if (!r)
      return this[o] = null, this.updateTerminalMagnet(e), !0;
    const l = i.getCellById(r);
    if (!l)
      throw new Error(`Edge's ${e} node with id "${r}" not exists`);
    const a = l.findView(i);
    return a ? (this[o] = a, this.updateTerminalMagnet(e), !0) : !1;
  }
  updateTerminalMagnet(e) {
    const t = `${e}Magnet`, i = this.getTerminalView(e);
    if (i) {
      let s = i.getMagnetFromEdgeTerminal(this.cell[e]);
      s === i.container && (s = null), this[t] = s;
    } else
      this[t] = null;
  }
  getLabelPositionAngle(e) {
    const t = this.cell.getLabelAt(e);
    return t && t.position && typeof t.position == "object" && t.position.angle || 0;
  }
  getLabelPositionArgs(e) {
    const t = this.cell.getLabelAt(e);
    if (t && t.position && typeof t.position == "object")
      return t.position.options;
  }
  getDefaultLabelPositionArgs() {
    const e = this.cell.getDefaultLabel();
    if (e && e.position && typeof e.position == "object")
      return e.position.options;
  }
  mergeLabelPositionArgs(e, t) {
    return e === null ? null : e === void 0 ? t === null ? null : t : Ft({}, t, e);
  }
  // #endregion
  getConnection() {
    return this.path != null ? this.path.clone() : null;
  }
  getConnectionPathData() {
    if (this.path == null)
      return "";
    const e = this.cache.pathCache;
    return cf(e, "data") || (e.data = this.path.serialize()), e.data || "";
  }
  getConnectionSubdivisions() {
    if (this.path == null)
      return null;
    const e = this.cache.pathCache;
    return cf(e, "segmentSubdivisions") || (e.segmentSubdivisions = this.path.getSegmentSubdivisions()), e.segmentSubdivisions;
  }
  getConnectionLength() {
    if (this.path == null)
      return 0;
    const e = this.cache.pathCache;
    return cf(e, "length") || (e.length = this.path.length({
      segmentSubdivisions: this.getConnectionSubdivisions()
    })), e.length;
  }
  getPointAtLength(e) {
    return this.path == null ? null : this.path.pointAtLength(e, {
      segmentSubdivisions: this.getConnectionSubdivisions()
    });
  }
  getPointAtRatio(e) {
    return this.path == null ? null : (Fr(e) && (e = parseFloat(e) / 100), this.path.pointAt(e, {
      segmentSubdivisions: this.getConnectionSubdivisions()
    }));
  }
  getTangentAtLength(e) {
    return this.path == null ? null : this.path.tangentAtLength(e, {
      segmentSubdivisions: this.getConnectionSubdivisions()
    });
  }
  getTangentAtRatio(e) {
    return this.path == null ? null : this.path.tangentAt(e, {
      segmentSubdivisions: this.getConnectionSubdivisions()
    });
  }
  getClosestPoint(e) {
    return this.path == null ? null : this.path.closestPoint(e, {
      segmentSubdivisions: this.getConnectionSubdivisions()
    });
  }
  getClosestPointLength(e) {
    return this.path == null ? null : this.path.closestPointLength(e, {
      segmentSubdivisions: this.getConnectionSubdivisions()
    });
  }
  getClosestPointRatio(e) {
    return this.path == null ? null : this.path.closestPointNormalizedLength(e, {
      segmentSubdivisions: this.getConnectionSubdivisions()
    });
  }
  getLabelPosition(e, t, i, s) {
    const r = { distance: 0 };
    let o = 0, l;
    typeof i == "number" ? (o = i, l = s) : l = i, l != null && (r.options = l);
    const a = l && l.absoluteOffset, c = !(l && l.absoluteDistance), u = l && l.absoluteDistance && l.reverseDistance, h = this.path, f = {
      segmentSubdivisions: this.getConnectionSubdivisions()
    }, d = new I(e, t), p = h.closestPointT(d, f), g = this.getConnectionLength() || 0;
    let m = h.lengthAtT(p, f);
    c && (m = g > 0 ? m / g : 0), u && (m = -1 * (g - m) || 1), r.distance = m;
    let b;
    a || (b = h.tangentAtT(p));
    let y;
    if (b)
      y = b.pointOffset(d);
    else {
      const v = h.pointAtT(p), O = d.diff(v);
      y = { x: O.x, y: O.y };
    }
    return r.offset = y, r.angle = o, r;
  }
  normalizeLabelPosition(e) {
    return typeof e == "number" ? { distance: e } : e;
  }
  getLabelTransformationMatrix(e) {
    const t = this.normalizeLabelPosition(e), i = t.options || {}, s = t.angle || 0, r = t.distance, o = r > 0 && r <= 1;
    let l = 0;
    const a = { x: 0, y: 0 }, c = t.offset;
    c && (typeof c == "number" ? l = c : (c.x != null && (a.x = c.x), c.y != null && (a.y = c.y)));
    const u = a.x !== 0 || a.y !== 0 || l === 0, h = i.keepGradient, f = i.ensureLegibility, d = this.path, p = { segmentSubdivisions: this.getConnectionSubdivisions() }, g = o ? r * this.getConnectionLength() : r, m = d.tangentAtLength(g, p);
    let b, y = s;
    if (m) {
      if (u)
        b = m.start, b.translate(a);
      else {
        const v = m.clone();
        v.rotate(-90, m.start), v.setLength(l), b = v.end;
      }
      h && (y = m.angle() + s, f && (y = st.normalize((y + 90) % 180 - 90)));
    } else
      b = d.start, u && b.translate(a);
    return kn().translate(b.x, b.y).rotate(y);
  }
  getVertexIndex(e, t) {
    const s = this.cell.getVertices(), r = this.getClosestPointLength(new I(e, t));
    let o = 0;
    if (r != null)
      for (const l = s.length; o < l; o += 1) {
        const a = s[o], c = this.getClosestPointLength(a);
        if (c != null && r < c)
          break;
      }
    return o;
  }
  getEventArgs(e, t, i) {
    const s = this, r = s.cell, o = r;
    return t == null || i == null ? { e, view: s, edge: r, cell: o } : { e, x: t, y: i, view: s, edge: r, cell: o };
  }
  notifyUnhandledMouseDown(e, t, i) {
    this.notify("edge:unhandled:mousedown", {
      e,
      x: t,
      y: i,
      view: this,
      cell: this.cell,
      edge: this.cell
    });
  }
  notifyMouseDown(e, t, i) {
    super.onMouseDown(e, t, i), this.notify("edge:mousedown", this.getEventArgs(e, t, i));
  }
  notifyMouseMove(e, t, i) {
    super.onMouseMove(e, t, i), this.notify("edge:mousemove", this.getEventArgs(e, t, i));
  }
  notifyMouseUp(e, t, i) {
    super.onMouseUp(e, t, i), this.notify("edge:mouseup", this.getEventArgs(e, t, i));
  }
  onClick(e, t, i) {
    super.onClick(e, t, i), this.notify("edge:click", this.getEventArgs(e, t, i));
  }
  onDblClick(e, t, i) {
    super.onDblClick(e, t, i), this.notify("edge:dblclick", this.getEventArgs(e, t, i));
  }
  onContextMenu(e, t, i) {
    super.onContextMenu(e, t, i), this.notify("edge:contextmenu", this.getEventArgs(e, t, i));
  }
  onMouseDown(e, t, i) {
    this.notifyMouseDown(e, t, i), this.startEdgeDragging(e, t, i);
  }
  onMouseMove(e, t, i) {
    const s = this.getEventData(e);
    switch (s.action) {
      case "drag-label": {
        this.dragLabel(e, t, i);
        break;
      }
      case "drag-arrowhead": {
        this.dragArrowhead(e, t, i);
        break;
      }
      case "drag-edge": {
        this.dragEdge(e, t, i);
        break;
      }
    }
    return this.notifyMouseMove(e, t, i), s;
  }
  onMouseUp(e, t, i) {
    const s = this.getEventData(e);
    switch (s.action) {
      case "drag-label": {
        this.stopLabelDragging(e, t, i);
        break;
      }
      case "drag-arrowhead": {
        this.stopArrowheadDragging(e, t, i);
        break;
      }
      case "drag-edge": {
        this.stopEdgeDragging(e, t, i);
        break;
      }
    }
    return this.notifyMouseUp(e, t, i), this.checkMouseleave(e), s;
  }
  onMouseOver(e) {
    super.onMouseOver(e), this.notify("edge:mouseover", this.getEventArgs(e));
  }
  onMouseOut(e) {
    super.onMouseOut(e), this.notify("edge:mouseout", this.getEventArgs(e));
  }
  onMouseEnter(e) {
    super.onMouseEnter(e), this.notify("edge:mouseenter", this.getEventArgs(e));
  }
  onMouseLeave(e) {
    super.onMouseLeave(e), this.notify("edge:mouseleave", this.getEventArgs(e));
  }
  onMouseWheel(e, t, i, s) {
    super.onMouseWheel(e, t, i, s), this.notify("edge:mousewheel", Object.assign({ delta: s }, this.getEventArgs(e, t, i)));
  }
  onCustomEvent(e, t, i, s) {
    if (A_(e.target, "edge-tool", this.container)) {
      if (e.stopPropagation(), this.can("useEdgeTools")) {
        if (t === "edge:remove") {
          this.cell.remove({ ui: !0 });
          return;
        }
        this.notify("edge:customevent", Object.assign({ name: t }, this.getEventArgs(e, i, s)));
      }
      this.notifyMouseDown(e, i, s);
    } else
      this.notify("edge:customevent", Object.assign({ name: t }, this.getEventArgs(e, i, s))), super.onCustomEvent(e, t, i, s);
  }
  onLabelMouseDown(e, t, i) {
    this.notifyMouseDown(e, t, i), this.startLabelDragging(e, t, i), this.getEventData(e).stopPropagation && e.stopPropagation();
  }
  // #region drag edge
  startEdgeDragging(e, t, i) {
    if (!this.can("edgeMovable")) {
      this.notifyUnhandledMouseDown(e, t, i);
      return;
    }
    this.setEventData(e, {
      x: t,
      y: i,
      moving: !1,
      action: "drag-edge"
    });
  }
  dragEdge(e, t, i) {
    const s = this.getEventData(e);
    s.moving || (s.moving = !0, this.addClass("edge-moving"), this.notify("edge:move", {
      e,
      x: t,
      y: i,
      view: this,
      cell: this.cell,
      edge: this.cell
    })), this.cell.translate(t - s.x, i - s.y, { ui: !0 }), this.setEventData(e, { x: t, y: i }), this.notify("edge:moving", {
      e,
      x: t,
      y: i,
      view: this,
      cell: this.cell,
      edge: this.cell
    });
  }
  stopEdgeDragging(e, t, i) {
    const s = this.getEventData(e);
    s.moving && (this.removeClass("edge-moving"), this.notify("edge:moved", {
      e,
      x: t,
      y: i,
      view: this,
      cell: this.cell,
      edge: this.cell
    })), s.moving = !1;
  }
  // #endregion
  // #region drag arrowhead
  prepareArrowheadDragging(e, t) {
    const i = this.getTerminalMagnet(e), s = {
      action: "drag-arrowhead",
      x: t.x,
      y: t.y,
      isNewEdge: t.isNewEdge === !0,
      terminalType: e,
      initialMagnet: i,
      initialTerminal: zu(this.cell[e]),
      fallbackAction: t.fallbackAction || "revert",
      getValidateConnectionArgs: this.createValidateConnectionArgs(e),
      options: t.options
    };
    return this.beforeArrowheadDragging(s), s;
  }
  createValidateConnectionArgs(e) {
    const t = [];
    t[4] = e, t[5] = this;
    let i, s = 0, r = 0;
    e === "source" ? (s = 2, i = "target") : (r = 2, i = "source");
    const o = this.cell[i], l = o.cell;
    if (l) {
      let a;
      const c = t[s] = this.graph.findViewByCell(l);
      c && (a = c.getMagnetFromEdgeTerminal(o), a === c.container && (a = void 0)), t[s + 1] = a;
    }
    return (a, c) => (t[r] = a, t[r + 1] = a.container === c ? void 0 : c, t);
  }
  beforeArrowheadDragging(e) {
    e.zIndex = this.cell.zIndex, this.cell.toFront();
    const t = this.container.style;
    e.pointerEvents = t.pointerEvents, t.pointerEvents = "none", this.graph.options.connecting.highlight && this.highlightAvailableMagnets(e);
  }
  afterArrowheadDragging(e) {
    e.zIndex != null && (this.cell.setZIndex(e.zIndex, { ui: !0 }), e.zIndex = null);
    const t = this.container;
    t.style.pointerEvents = e.pointerEvents || "", this.graph.options.connecting.highlight && this.unhighlightAvailableMagnets(e);
  }
  validateConnection(e, t, i, s, r, o, l) {
    const a = this.graph.options.connecting, c = a.allowLoop, u = a.allowNode, h = a.allowEdge, f = a.allowPort, d = a.allowMulti, p = a.validateConnection, g = o ? o.cell : null, m = r === "target" ? i : e, b = r === "target" ? s : t;
    let y = !0;
    const v = (O) => {
      const x = r === "source" ? l ? l.port : null : g ? g.getSourcePortId() : null, S = r === "target" ? l ? l.port : null : g ? g.getTargetPortId() : null;
      return Ee(O, this.graph, {
        edge: g,
        edgeView: o,
        sourceView: e,
        targetView: i,
        sourcePort: x,
        targetPort: S,
        sourceMagnet: t,
        targetMagnet: s,
        sourceCell: e ? e.cell : null,
        targetCell: i ? i.cell : null,
        type: r
      });
    };
    if (c != null && (typeof c == "boolean" ? !c && e === i && (y = !1) : y = v(c)), y && f != null && (typeof f == "boolean" ? !f && b && (y = !1) : y = v(f)), y && h != null && (typeof h == "boolean" ? !h && Vr.isEdgeView(m) && (y = !1) : y = v(h)), y && u != null && b == null && (typeof u == "boolean" ? !u && zi.isNodeView(m) && (y = !1) : y = v(u)), y && d != null && o) {
      const O = o.cell, x = r === "source" ? l : O.getSource(), S = r === "target" ? l : O.getTarget(), C = l ? this.graph.getCellById(l.cell) : null;
      if (x && S && x.cell && S.cell && C)
        if (typeof d == "function")
          y = v(d);
        else {
          const k = this.graph.model.getConnectedEdges(C, {
            outgoing: r === "source",
            incoming: r === "target"
          });
          k.length && (d === "withPort" ? k.some(($) => {
            const T = $.getSource(), M = $.getTarget();
            return T && M && T.cell === x.cell && M.cell === S.cell && T.port != null && T.port === x.port && M.port != null && M.port === S.port;
          }) && (y = !1) : d || k.some(($) => {
            const T = $.getSource(), M = $.getTarget();
            return T && M && T.cell === x.cell && M.cell === S.cell;
          }) && (y = !1));
        }
    }
    return y && p != null && (y = v(p)), y;
  }
  allowConnectToBlank(e) {
    const t = this.graph, s = t.options.connecting.allowBlank;
    if (typeof s != "function")
      return !!s;
    const r = t.findViewByCell(e), o = e.getSourceCell(), l = e.getTargetCell(), a = t.findViewByCell(o), c = t.findViewByCell(l);
    return Ee(s, t, {
      edge: e,
      edgeView: r,
      sourceCell: o,
      targetCell: l,
      sourceView: a,
      targetView: c,
      sourcePort: e.getSourcePortId(),
      targetPort: e.getTargetPortId(),
      sourceMagnet: r.sourceMagnet,
      targetMagnet: r.targetMagnet
    });
  }
  validateEdge(e, t, i) {
    const s = this.graph;
    if (!this.allowConnectToBlank(e)) {
      const o = e.getSourceCellId(), l = e.getTargetCellId();
      if (!(o && l))
        return !1;
    }
    const r = s.options.connecting.validateEdge;
    return r ? Ee(r, s, {
      edge: e,
      type: t,
      previous: i
    }) : !0;
  }
  arrowheadDragging(e, t, i, s) {
    s.x = t, s.y = i, s.currentTarget !== e && (s.currentMagnet && s.currentView && s.currentView.unhighlight(s.currentMagnet, {
      type: "magnetAdsorbed"
    }), s.currentView = this.graph.findViewByElem(e), s.currentView ? (s.currentMagnet = s.currentView.findMagnet(e), s.currentMagnet && this.validateConnection(...s.getValidateConnectionArgs(s.currentView, s.currentMagnet), s.currentView.getEdgeTerminal(s.currentMagnet, t, i, this.cell, s.terminalType)) ? s.currentView.highlight(s.currentMagnet, {
      type: "magnetAdsorbed"
    }) : s.currentMagnet = null) : s.currentMagnet = null), s.currentTarget = e, this.cell.prop(s.terminalType, { x: t, y: i }, Object.assign(Object.assign({}, s.options), { ui: !0 }));
  }
  arrowheadDragged(e, t, i) {
    const s = e.currentView, r = e.currentMagnet;
    if (!r || !s)
      return;
    s.unhighlight(r, { type: "magnetAdsorbed" });
    const o = e.terminalType, l = s.getEdgeTerminal(r, t, i, this.cell, o);
    this.cell.setTerminal(o, l, { ui: !0 });
  }
  snapArrowhead(e, t, i) {
    const s = this.graph, { snap: r, allowEdge: o } = s.options.connecting, l = typeof r == "object" && r.radius || 50, a = typeof r == "object" && r.anchor || "center", c = s.renderer.findViewsInArea({
      x: e - l,
      y: t - l,
      width: 2 * l,
      height: 2 * l
    }, { nodeOnly: !0 });
    if (o) {
      const O = s.renderer.findEdgeViewsFromPoint({ x: e, y: t }, l).filter((x) => x !== this);
      c.push(...O);
    }
    const u = i.closestView || null, h = i.closestMagnet || null;
    i.closestView = null, i.closestMagnet = null;
    let f, d = Number.MAX_SAFE_INTEGER;
    const p = new I(e, t);
    c.forEach((O) => {
      if (O.container.getAttribute("magnet") !== "false") {
        if (O.isNodeView())
          f = a === "center" ? O.cell.getBBox().getCenter().distance(p) : O.cell.getBBox().getNearestPointToPoint(p).distance(p);
        else if (O.isEdgeView()) {
          const x = O.getClosestPoint(p);
          x ? f = x.distance(p) : f = Number.MAX_SAFE_INTEGER;
        }
        f < l && f < d && (h === O.container || this.validateConnection(...i.getValidateConnectionArgs(O, null), O.getEdgeTerminal(O.container, e, t, this.cell, i.terminalType))) && (d = f, i.closestView = O, i.closestMagnet = O.container);
      }
      O.container.querySelectorAll("[magnet]").forEach((x) => {
        if (x.getAttribute("magnet") !== "false") {
          const S = O.getBBoxOfElement(x);
          f = p.distance(S.getCenter()), f < l && f < d && (h === x || this.validateConnection(...i.getValidateConnectionArgs(O, x), O.getEdgeTerminal(x, e, t, this.cell, i.terminalType))) && (d = f, i.closestView = O, i.closestMagnet = x);
        }
      });
    });
    let g;
    const m = i.terminalType, b = i.closestView, y = i.closestMagnet, v = h !== y;
    if (u && v && u.unhighlight(h, {
      type: "magnetAdsorbed"
    }), b) {
      if (!v)
        return;
      b.highlight(y, {
        type: "magnetAdsorbed"
      }), g = b.getEdgeTerminal(y, e, t, this.cell, m);
    } else
      g = { x: e, y: t };
    this.cell.setTerminal(m, g, {}, Object.assign(Object.assign({}, i.options), { ui: !0 }));
  }
  snapArrowheadEnd(e) {
    const t = e.closestView, i = e.closestMagnet;
    t && i && (t.unhighlight(i, {
      type: "magnetAdsorbed"
    }), e.currentMagnet = t.findMagnet(i)), e.closestView = null, e.closestMagnet = null;
  }
  finishEmbedding(e) {
    this.graph.options.embedding.enabled && this.cell.updateParent() && (e.zIndex = null);
  }
  fallbackConnection(e) {
    switch (e.fallbackAction) {
      case "remove":
        this.cell.remove({ ui: !0 });
        break;
      case "revert":
      default:
        this.cell.prop(e.terminalType, e.initialTerminal, {
          ui: !0
        });
        break;
    }
  }
  notifyConnectionEvent(e, t) {
    const i = e.terminalType, s = e.initialTerminal, r = this.cell[i];
    if (r && !qt.equalTerminals(s, r)) {
      const l = this.graph, a = s, c = a.cell ? l.getCellById(a.cell) : null, u = a.port, h = c ? l.findViewByCell(c) : null, f = c || e.isNewEdge ? null : I.create(s).toJSON(), d = r, p = d.cell ? l.getCellById(d.cell) : null, g = d.port, m = p ? l.findViewByCell(p) : null, b = p ? null : I.create(r).toJSON();
      this.notify("edge:connected", {
        e: t,
        previousCell: c,
        previousPort: u,
        previousView: h,
        previousPoint: f,
        currentCell: p,
        currentView: m,
        currentPort: g,
        currentPoint: b,
        previousMagnet: e.initialMagnet,
        currentMagnet: e.currentMagnet,
        edge: this.cell,
        view: this,
        type: i,
        isNew: e.isNewEdge
      });
    }
  }
  highlightAvailableMagnets(e) {
    const t = this.graph, i = t.model.getCells();
    e.marked = {};
    for (let s = 0, r = i.length; s < r; s += 1) {
      const o = t.findViewByCell(i[s]);
      if (!o || o.cell.id === this.cell.id)
        continue;
      const l = Array.prototype.slice.call(o.container.querySelectorAll("[magnet]"));
      o.container.getAttribute("magnet") !== "false" && l.push(o.container);
      const a = l.filter((c) => this.validateConnection(...e.getValidateConnectionArgs(o, c), o.getEdgeTerminal(c, e.x, e.y, this.cell, e.terminalType)));
      if (a.length > 0) {
        for (let c = 0, u = a.length; c < u; c += 1)
          o.highlight(a[c], { type: "magnetAvailable" });
        o.highlight(null, { type: "nodeAvailable" }), e.marked[o.cell.id] = a;
      }
    }
  }
  unhighlightAvailableMagnets(e) {
    const t = e.marked || {};
    Object.keys(t).forEach((i) => {
      const s = this.graph.findViewByCell(i);
      s && (t[i].forEach((o) => {
        s.unhighlight(o, { type: "magnetAvailable" });
      }), s.unhighlight(null, { type: "nodeAvailable" }));
    }), e.marked = null;
  }
  startArrowheadDragging(e, t, i) {
    if (!this.can("arrowheadMovable")) {
      this.notifyUnhandledMouseDown(e, t, i);
      return;
    }
    const r = e.target.getAttribute("data-terminal"), o = this.prepareArrowheadDragging(r, { x: t, y: i });
    this.setEventData(e, o);
  }
  dragArrowhead(e, t, i) {
    const s = this.getEventData(e);
    this.graph.options.connecting.snap ? this.snapArrowhead(t, i, s) : this.arrowheadDragging(this.getEventTarget(e), t, i, s);
  }
  stopArrowheadDragging(e, t, i) {
    const s = this.graph, r = this.getEventData(e);
    s.options.connecting.snap ? this.snapArrowheadEnd(r) : this.arrowheadDragged(r, t, i), this.validateEdge(this.cell, r.terminalType, r.initialTerminal) ? (this.finishEmbedding(r), this.notifyConnectionEvent(r, e)) : this.fallbackConnection(r), this.afterArrowheadDragging(r);
  }
  // #endregion
  // #region drag lable
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  startLabelDragging(e, t, i) {
    if (this.can("edgeLabelMovable")) {
      const s = e.currentTarget, r = parseInt(s.getAttribute("data-index"), 10), o = this.getLabelPositionAngle(r), l = this.getLabelPositionArgs(r), a = this.getDefaultLabelPositionArgs(), c = this.mergeLabelPositionArgs(l, a);
      this.setEventData(e, {
        index: r,
        positionAngle: o,
        positionArgs: c,
        stopPropagation: !0,
        action: "drag-label"
      });
    } else
      this.setEventData(e, { stopPropagation: !0 });
    this.graph.view.delegateDragEvents(e, this);
  }
  dragLabel(e, t, i) {
    const s = this.getEventData(e), r = this.cell.getLabelAt(s.index), o = Ft({}, r, {
      position: this.getLabelPosition(t, i, s.positionAngle, s.positionArgs)
    });
    this.cell.setLabelAt(s.index, o);
  }
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  stopLabelDragging(e, t, i) {
  }
}
(function(n) {
  n.toStringTag = `X6.${n.name}`;
  function e(t) {
    if (t == null)
      return !1;
    if (t instanceof n)
      return !0;
    const i = t[Symbol.toStringTag], s = t;
    return (i == null || i === n.toStringTag) && typeof s.isNodeView == "function" && typeof s.isEdgeView == "function" && typeof s.confirmUpdate == "function" && typeof s.update == "function" && typeof s.getConnection == "function";
  }
  n.isEdgeView = e;
})(Vr || (Vr = {}));
Vr.config({
  isSvgElement: !0,
  priority: 1,
  bootstrap: ["render", "source", "target"],
  actions: {
    view: ["render"],
    markup: ["render"],
    attrs: ["update"],
    source: ["source", "update"],
    target: ["target", "update"],
    router: ["update"],
    connector: ["update"],
    labels: ["labels"],
    defaultLabel: ["labels"],
    tools: ["tools"],
    vertices: ["vertices", "update"]
  }
});
Vr.registry.register("edge", Vr, !0);
var $8e = function(n, e, t, i) {
  var s = arguments.length, r = s < 3 ? e : i === null ? i = Object.getOwnPropertyDescriptor(e, t) : i, o;
  if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
    r = Reflect.decorate(n, e, t, i);
  else
    for (var l = n.length - 1; l >= 0; l--)
      (o = n[l]) && (r = (s < 3 ? o(r) : s > 3 ? o(e, t, r) : o(e, t)) || r);
  return s > 3 && r && Object.defineProperty(e, t, r), r;
};
class mr extends dt {
  /** Graph's `this.container` is from outer, should not dispose */
  get disposeContainer() {
    return !1;
  }
  get options() {
    return this.graph.options;
  }
  constructor(e) {
    super(), this.graph = e;
    const { selectors: t, fragment: i } = kt.parseJSONMarkup(mr.markup);
    this.background = t.background, this.grid = t.grid, this.svg = t.svg, this.defs = t.defs, this.viewport = t.viewport, this.primer = t.primer, this.stage = t.stage, this.decorator = t.decorator, this.overlay = t.overlay, this.container = this.options.container, this.restore = mr.snapshoot(this.container), Me(this.container, this.prefixClassName("graph")), Xo(this.container, i), this.delegateEvents();
  }
  delegateEvents() {
    const e = this.constructor;
    return super.delegateEvents(e.events), this;
  }
  /**
   * Guard the specified event. If the event is not interesting, it
   * returns `true`, otherwise returns `false`.
   */
  guard(e, t) {
    return e.type === "mousedown" && e.button === 2 || this.options.guard && this.options.guard(e, t) ? !0 : e.data && e.data.guarded !== void 0 ? e.data.guarded : !(t && t.cell && He.isCell(t.cell) || this.svg === e.target || this.container === e.target || this.svg.contains(e.target));
  }
  findView(e) {
    return this.graph.findViewByElem(e);
  }
  onDblClick(e) {
    this.options.preventDefaultDblClick && e.preventDefault();
    const t = this.normalizeEvent(e), i = this.findView(t.target);
    if (this.guard(t, i))
      return;
    const s = this.graph.snapToGrid(t.clientX, t.clientY);
    i ? i.onDblClick(t, s.x, s.y) : this.graph.trigger("blank:dblclick", {
      e: t,
      x: s.x,
      y: s.y
    });
  }
  onClick(e) {
    if (this.getMouseMovedCount(e) <= this.options.clickThreshold) {
      const t = this.normalizeEvent(e), i = this.findView(t.target);
      if (this.guard(t, i))
        return;
      const s = this.graph.snapToGrid(t.clientX, t.clientY);
      i ? i.onClick(t, s.x, s.y) : this.graph.trigger("blank:click", {
        e: t,
        x: s.x,
        y: s.y
      });
    }
  }
  isPreventDefaultContextMenu(e) {
    let t = this.options.preventDefaultContextMenu;
    return typeof t == "function" && (t = Ee(t, this.graph, { view: e })), t;
  }
  onContextMenu(e) {
    const t = this.normalizeEvent(e), i = this.findView(t.target);
    if (this.isPreventDefaultContextMenu(i) && e.preventDefault(), this.guard(t, i))
      return;
    const s = this.graph.snapToGrid(t.clientX, t.clientY);
    i ? i.onContextMenu(t, s.x, s.y) : this.graph.trigger("blank:contextmenu", {
      e: t,
      x: s.x,
      y: s.y
    });
  }
  delegateDragEvents(e, t) {
    e.data == null && (e.data = {}), this.setEventData(e, {
      currentView: t || null,
      mouseMovedCount: 0,
      startPosition: {
        x: e.clientX,
        y: e.clientY
      }
    });
    const i = this.constructor;
    this.delegateDocumentEvents(i.documentEvents, e.data), this.undelegateEvents();
  }
  getMouseMovedCount(e) {
    return this.getEventData(e).mouseMovedCount || 0;
  }
  onMouseDown(e) {
    const t = this.normalizeEvent(e), i = this.findView(t.target);
    if (this.guard(t, i))
      return;
    this.options.preventDefaultMouseDown && e.preventDefault();
    const s = this.graph.snapToGrid(t.clientX, t.clientY);
    i ? i.onMouseDown(t, s.x, s.y) : (this.options.preventDefaultBlankAction && ["touchstart"].includes(t.type) && e.preventDefault(), this.graph.trigger("blank:mousedown", {
      e: t,
      x: s.x,
      y: s.y
    })), this.delegateDragEvents(t, i);
  }
  onMouseMove(e) {
    const t = this.getEventData(e), i = t.startPosition;
    if (i && i.x === e.clientX && i.y === e.clientY || (t.mouseMovedCount == null && (t.mouseMovedCount = 0), t.mouseMovedCount += 1, t.mouseMovedCount <= this.options.moveThreshold))
      return;
    const r = this.normalizeEvent(e), o = this.graph.snapToGrid(r.clientX, r.clientY), l = t.currentView;
    l ? l.onMouseMove(r, o.x, o.y) : this.graph.trigger("blank:mousemove", {
      e: r,
      x: o.x,
      y: o.y
    }), this.setEventData(r, t);
  }
  onMouseUp(e) {
    this.undelegateDocumentEvents();
    const t = this.normalizeEvent(e), i = this.graph.snapToGrid(t.clientX, t.clientY), r = this.getEventData(e).currentView;
    if (r ? r.onMouseUp(t, i.x, i.y) : this.graph.trigger("blank:mouseup", {
      e: t,
      x: i.x,
      y: i.y
    }), !e.isPropagationStopped()) {
      const o = new cr(e, {
        type: "click",
        data: e.data
      });
      this.onClick(o);
    }
    e.stopImmediatePropagation(), this.delegateEvents();
  }
  onMouseOver(e) {
    const t = this.normalizeEvent(e), i = this.findView(t.target);
    if (!this.guard(t, i))
      if (i)
        i.onMouseOver(t);
      else {
        if (this.container === t.target)
          return;
        this.graph.trigger("blank:mouseover", { e: t });
      }
  }
  onMouseOut(e) {
    const t = this.normalizeEvent(e), i = this.findView(t.target);
    if (!this.guard(t, i))
      if (i)
        i.onMouseOut(t);
      else {
        if (this.container === t.target)
          return;
        this.graph.trigger("blank:mouseout", { e: t });
      }
  }
  onMouseEnter(e) {
    const t = this.normalizeEvent(e), i = this.findView(t.target);
    if (this.guard(t, i))
      return;
    const s = this.graph.findViewByElem(t.relatedTarget);
    if (i) {
      if (s === i)
        return;
      i.onMouseEnter(t);
    } else {
      if (s)
        return;
      this.graph.trigger("graph:mouseenter", { e: t });
    }
  }
  onMouseLeave(e) {
    const t = this.normalizeEvent(e), i = this.findView(t.target);
    if (this.guard(t, i))
      return;
    const s = this.graph.findViewByElem(t.relatedTarget);
    if (i) {
      if (s === i)
        return;
      i.onMouseLeave(t);
    } else {
      if (s)
        return;
      this.graph.trigger("graph:mouseleave", { e: t });
    }
  }
  onMouseWheel(e) {
    const t = this.normalizeEvent(e), i = this.findView(t.target);
    if (this.guard(t, i))
      return;
    const s = t.originalEvent, r = this.graph.snapToGrid(s.clientX, s.clientY), o = Math.max(-1, Math.min(1, s.wheelDelta || -s.detail));
    i ? i.onMouseWheel(t, r.x, r.y, o) : this.graph.trigger("blank:mousewheel", {
      e: t,
      delta: o,
      x: r.x,
      y: r.y
    });
  }
  onCustomEvent(e) {
    const t = e.currentTarget, i = t.getAttribute("event") || t.getAttribute("data-event");
    if (i) {
      const s = this.findView(t);
      if (s) {
        const r = this.normalizeEvent(e);
        if (this.guard(r, s))
          return;
        const o = this.graph.snapToGrid(r.clientX, r.clientY);
        s.onCustomEvent(r, i, o.x, o.y);
      }
    }
  }
  handleMagnetEvent(e, t) {
    const i = e.currentTarget, s = i.getAttribute("magnet");
    if (s && s.toLowerCase() !== "false") {
      const r = this.findView(i);
      if (r) {
        const o = this.normalizeEvent(e);
        if (this.guard(o, r))
          return;
        const l = this.graph.snapToGrid(o.clientX, o.clientY);
        Ee(t, this.graph, r, o, i, l.x, l.y);
      }
    }
  }
  onMagnetMouseDown(e) {
    this.handleMagnetEvent(e, (t, i, s, r, o) => {
      t.onMagnetMouseDown(i, s, r, o);
    });
  }
  onMagnetDblClick(e) {
    this.handleMagnetEvent(e, (t, i, s, r, o) => {
      t.onMagnetDblClick(i, s, r, o);
    });
  }
  onMagnetContextMenu(e) {
    const t = this.findView(e.target);
    this.isPreventDefaultContextMenu(t) && e.preventDefault(), this.handleMagnetEvent(e, (i, s, r, o, l) => {
      i.onMagnetContextMenu(s, r, o, l);
    });
  }
  onLabelMouseDown(e) {
    const t = e.currentTarget, i = this.findView(t);
    if (i) {
      const s = this.normalizeEvent(e);
      if (this.guard(s, i))
        return;
      const r = this.graph.snapToGrid(s.clientX, s.clientY);
      i.onLabelMouseDown(s, r.x, r.y);
    }
  }
  onImageDragStart() {
    return !1;
  }
  dispose() {
    this.undelegateEvents(), this.undelegateDocumentEvents(), this.restore(), this.restore = () => {
    };
  }
}
$8e([
  dt.dispose()
], mr.prototype, "dispose", null);
(function(n) {
  const e = `${rs.prefixCls}-graph`;
  n.markup = [
    {
      ns: wn.xhtml,
      tagName: "div",
      selector: "background",
      className: `${e}-background`
    },
    {
      ns: wn.xhtml,
      tagName: "div",
      selector: "grid",
      className: `${e}-grid`
    },
    {
      ns: wn.svg,
      tagName: "svg",
      selector: "svg",
      className: `${e}-svg`,
      attrs: {
        width: "100%",
        height: "100%",
        "xmlns:xlink": wn.xlink
      },
      children: [
        {
          tagName: "defs",
          selector: "defs"
        },
        {
          tagName: "g",
          selector: "viewport",
          className: `${e}-svg-viewport`,
          children: [
            {
              tagName: "g",
              selector: "primer",
              className: `${e}-svg-primer`
            },
            {
              tagName: "g",
              selector: "stage",
              className: `${e}-svg-stage`
            },
            {
              tagName: "g",
              selector: "decorator",
              className: `${e}-svg-decorator`
            },
            {
              tagName: "g",
              selector: "overlay",
              className: `${e}-svg-overlay`
            }
          ]
        }
      ]
    }
  ];
  function t(i) {
    const s = i.cloneNode();
    return i.childNodes.forEach((r) => s.appendChild(r)), () => {
      for (nf(i); i.attributes.length > 0; )
        i.removeAttribute(i.attributes[0].name);
      for (let r = 0, o = s.attributes.length; r < o; r += 1) {
        const l = s.attributes[r];
        i.setAttribute(l.name, l.value);
      }
      s.childNodes.forEach((r) => i.appendChild(r));
    };
  }
  n.snapshoot = t;
})(mr || (mr = {}));
(function(n) {
  const e = rs.prefixCls;
  n.events = {
    dblclick: "onDblClick",
    contextmenu: "onContextMenu",
    touchstart: "onMouseDown",
    mousedown: "onMouseDown",
    mouseover: "onMouseOver",
    mouseout: "onMouseOut",
    mouseenter: "onMouseEnter",
    mouseleave: "onMouseLeave",
    mousewheel: "onMouseWheel",
    DOMMouseScroll: "onMouseWheel",
    [`mouseenter  .${e}-cell`]: "onMouseEnter",
    [`mouseleave  .${e}-cell`]: "onMouseLeave",
    [`mouseenter  .${e}-cell-tools`]: "onMouseEnter",
    [`mouseleave  .${e}-cell-tools`]: "onMouseLeave",
    [`mousedown   .${e}-cell [event]`]: "onCustomEvent",
    [`touchstart  .${e}-cell [event]`]: "onCustomEvent",
    [`mousedown   .${e}-cell [data-event]`]: "onCustomEvent",
    [`touchstart  .${e}-cell [data-event]`]: "onCustomEvent",
    [`dblclick    .${e}-cell [magnet]`]: "onMagnetDblClick",
    [`contextmenu .${e}-cell [magnet]`]: "onMagnetContextMenu",
    [`mousedown   .${e}-cell [magnet]`]: "onMagnetMouseDown",
    [`touchstart  .${e}-cell [magnet]`]: "onMagnetMouseDown",
    [`dblclick    .${e}-cell [data-magnet]`]: "onMagnetDblClick",
    [`contextmenu .${e}-cell [data-magnet]`]: "onMagnetContextMenu",
    [`mousedown   .${e}-cell [data-magnet]`]: "onMagnetMouseDown",
    [`touchstart  .${e}-cell [data-magnet]`]: "onMagnetMouseDown",
    [`dragstart   .${e}-cell image`]: "onImageDragStart",
    [`mousedown   .${e}-edge .${e}-edge-label`]: "onLabelMouseDown",
    [`touchstart  .${e}-edge .${e}-edge-label`]: "onLabelMouseDown"
  }, n.documentEvents = {
    mousemove: "onMouseMove",
    touchmove: "onMouseMove",
    mouseup: "onMouseUp",
    touchend: "onMouseUp",
    touchcancel: "onMouseUp"
  };
})(mr || (mr = {}));
const T8e = `.x6-graph {
  position: relative;
  overflow: hidden;
  outline: none;
  touch-action: none;
}
.x6-graph-background,
.x6-graph-grid,
.x6-graph-svg {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
}
.x6-graph-background-stage,
.x6-graph-grid-stage,
.x6-graph-svg-stage {
  user-select: none;
}
.x6-graph.x6-graph-pannable {
  cursor: grab;
  cursor: -moz-grab;
  cursor: -webkit-grab;
}
.x6-graph.x6-graph-panning {
  cursor: grabbing;
  cursor: -moz-grabbing;
  cursor: -webkit-grabbing;
  user-select: none;
}
.x6-node {
  cursor: move;
  /* stylelint-disable-next-line */
}
.x6-node.x6-node-immovable {
  cursor: default;
}
.x6-node * {
  -webkit-user-drag: none;
}
.x6-node .scalable * {
  vector-effect: non-scaling-stroke;
}
.x6-node [magnet='true'] {
  cursor: crosshair;
  transition: opacity 0.3s;
}
.x6-node [magnet='true']:hover {
  opacity: 0.7;
}
.x6-node foreignObject {
  display: block;
  overflow: visible;
  background-color: transparent;
}
.x6-node foreignObject > body {
  position: static;
  width: 100%;
  height: 100%;
  margin: 0;
  padding: 0;
  overflow: visible;
  background-color: transparent;
}
.x6-edge .source-marker,
.x6-edge .target-marker {
  vector-effect: non-scaling-stroke;
}
.x6-edge .connection {
  stroke-linejoin: round;
  fill: none;
}
.x6-edge .connection-wrap {
  cursor: move;
  opacity: 0;
  fill: none;
  stroke: #000;
  stroke-width: 15;
  stroke-linecap: round;
  stroke-linejoin: round;
}
.x6-edge .connection-wrap:hover {
  opacity: 0.4;
  stroke-opacity: 0.4;
}
.x6-edge .vertices {
  cursor: move;
  opacity: 0;
}
.x6-edge .vertices .vertex {
  fill: #1abc9c;
}
.x6-edge .vertices .vertex :hover {
  fill: #34495e;
  stroke: none;
}
.x6-edge .vertices .vertex-remove {
  cursor: pointer;
  fill: #fff;
}
.x6-edge .vertices .vertex-remove-area {
  cursor: pointer;
  opacity: 0.1;
}
.x6-edge .vertices .vertex-group:hover .vertex-remove-area {
  opacity: 1;
}
.x6-edge .arrowheads {
  cursor: move;
  opacity: 0;
}
.x6-edge .arrowheads .arrowhead {
  fill: #1abc9c;
}
.x6-edge .arrowheads .arrowhead :hover {
  fill: #f39c12;
  stroke: none;
}
.x6-edge .tools {
  cursor: pointer;
  opacity: 0;
}
.x6-edge .tools .tool-options {
  display: none;
}
.x6-edge .tools .tool-remove circle {
  fill: #f00;
}
.x6-edge .tools .tool-remove path {
  fill: #fff;
}
.x6-edge:hover .vertices,
.x6-edge:hover .arrowheads,
.x6-edge:hover .tools {
  opacity: 1;
}
.x6-highlight-opacity {
  opacity: 0.3;
}
.x6-cell-tool-editor {
  position: relative;
  display: inline-block;
  min-height: 1em;
  margin: 0;
  padding: 0;
  line-height: 1;
  white-space: normal;
  text-align: center;
  vertical-align: top;
  overflow-wrap: normal;
  outline: none;
  transform-origin: 0 0;
  -webkit-user-drag: none;
}
.x6-edge-tool-editor {
  border: 1px solid #275fc5;
  border-radius: 2px;
}
`;
class An extends Zr {
  get options() {
    return this.graph.options;
  }
  get model() {
    return this.graph.model;
  }
  get view() {
    return this.graph.view;
  }
  constructor(e) {
    super(), this.graph = e, this.init();
  }
  init() {
  }
}
var _8e = function(n, e, t, i) {
  var s = arguments.length, r = s < 3 ? e : i === null ? i = Object.getOwnPropertyDescriptor(e, t) : i, o;
  if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
    r = Reflect.decorate(n, e, t, i);
  else
    for (var l = n.length - 1; l >= 0; l--)
      (o = n[l]) && (r = (s < 3 ? o(r) : s > 3 ? o(e, t, r) : o(e, t)) || r);
  return s > 3 && r && Object.defineProperty(e, t, r), r;
};
class nv extends An {
  init() {
    Pg("core", T8e);
  }
  dispose() {
    Ag("core");
  }
}
_8e([
  nv.dispose()
], nv.prototype, "dispose", null);
var M8e = function(n, e) {
  var t = {};
  for (var i in n)
    Object.prototype.hasOwnProperty.call(n, i) && e.indexOf(i) < 0 && (t[i] = n[i]);
  if (n != null && typeof Object.getOwnPropertySymbols == "function")
    for (var s = 0, i = Object.getOwnPropertySymbols(n); s < i.length; s++)
      e.indexOf(i[s]) < 0 && Object.prototype.propertyIsEnumerable.call(n, i[s]) && (t[i[s]] = n[i[s]]);
  return t;
}, Sh;
(function(n) {
  function e(t) {
    const { grid: i, panning: s, mousewheel: r, embedding: o } = t, l = M8e(
      t,
      ["grid", "panning", "mousewheel", "embedding"]
    ), a = t.container;
    if (a != null)
      l.width == null && (l.width = a.clientWidth), l.height == null && (l.height = a.clientHeight);
    else
      throw new Error("Ensure the container of the graph is specified and valid");
    const c = Ft({}, n.defaults, l), u = { size: 10, visible: !1 };
    return typeof i == "number" ? c.grid = { size: i, visible: !1 } : typeof i == "boolean" ? c.grid = Object.assign(Object.assign({}, u), { visible: i }) : c.grid = Object.assign(Object.assign({}, u), i), [
      "panning",
      "mousewheel",
      "embedding"
    ].forEach((f) => {
      const d = t[f];
      typeof d == "boolean" ? c[f].enabled = d : c[f] = Object.assign(Object.assign({}, c[f]), d);
    }), c;
  }
  n.get = e;
})(Sh || (Sh = {}));
(function(n) {
  n.defaults = {
    x: 0,
    y: 0,
    scaling: {
      min: 0.01,
      max: 16
    },
    grid: {
      size: 10,
      visible: !1
    },
    background: !1,
    panning: {
      enabled: !1,
      eventTypes: ["leftMouseDown"]
    },
    mousewheel: {
      enabled: !1,
      factor: 1.2,
      zoomAtMousePosition: !0
    },
    highlighting: {
      default: {
        name: "stroke",
        args: {
          padding: 3
        }
      },
      nodeAvailable: {
        name: "className",
        args: {
          className: rs.prefix("available-node")
        }
      },
      magnetAvailable: {
        name: "className",
        args: {
          className: rs.prefix("available-magnet")
        }
      }
    },
    connecting: {
      snap: !1,
      allowLoop: !0,
      allowNode: !0,
      allowEdge: !1,
      allowPort: !0,
      allowBlank: !0,
      allowMulti: !0,
      highlight: !1,
      anchor: "center",
      edgeAnchor: "ratio",
      connectionPoint: "boundary",
      router: "normal",
      connector: "normal",
      validateConnection({ type: e, sourceView: t, targetView: i }) {
        return (e === "target" ? i : t) != null;
      },
      createEdge() {
        return new C8e();
      }
    },
    translating: {
      restrict: !1
    },
    embedding: {
      enabled: !1,
      findParent: "bbox",
      frontOnly: !0,
      validate: () => !0
    },
    moveThreshold: 0,
    clickThreshold: 0,
    magnetThreshold: 0,
    preventDefaultDblClick: !0,
    preventDefaultMouseDown: !1,
    preventDefaultContextMenu: !0,
    preventDefaultBlankAction: !0,
    interacting: {
      edgeLabelMovable: !1
    },
    async: !0,
    virtual: !1,
    guard: () => !1
  };
})(Sh || (Sh = {}));
var R8e = function(n, e, t, i) {
  var s = arguments.length, r = s < 3 ? e : i === null ? i = Object.getOwnPropertyDescriptor(e, t) : i, o;
  if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
    r = Reflect.decorate(n, e, t, i);
  else
    for (var l = n.length - 1; l >= 0; l--)
      (o = n[l]) && (r = (s < 3 ? o(r) : s > 3 ? o(e, t, r) : o(e, t)) || r);
  return s > 3 && r && Object.defineProperty(e, t, r), r;
}, D8e = function(n, e) {
  var t = {};
  for (var i in n)
    Object.prototype.hasOwnProperty.call(n, i) && e.indexOf(i) < 0 && (t[i] = n[i]);
  if (n != null && typeof Object.getOwnPropertySymbols == "function")
    for (var s = 0, i = Object.getOwnPropertySymbols(n); s < i.length; s++)
      e.indexOf(i[s]) < 0 && Object.prototype.propertyIsEnumerable.call(n, i[s]) && (t[i[s]] = n[i[s]]);
  return t;
};
class aO extends An {
  get elem() {
    return this.view.grid;
  }
  get grid() {
    return this.options.grid;
  }
  init() {
    this.startListening(), this.draw(this.grid);
  }
  startListening() {
    this.graph.on("scale", this.update, this), this.graph.on("translate", this.update, this);
  }
  stopListening() {
    this.graph.off("scale", this.update, this), this.graph.off("translate", this.update, this);
  }
  setVisible(e) {
    this.grid.visible !== e && (this.grid.visible = e, this.update());
  }
  getGridSize() {
    return this.grid.size;
  }
  setGridSize(e) {
    this.grid.size = Math.max(e, 1), this.update();
  }
  show() {
    this.setVisible(!0), this.update();
  }
  hide() {
    this.setVisible(!1), this.update();
  }
  clear() {
    this.elem.style.backgroundImage = "";
  }
  draw(e) {
    this.clear(), this.instance = null, Object.assign(this.grid, e), this.patterns = this.resolveGrid(e), this.update();
  }
  update(e = {}) {
    const t = this.grid.size;
    if (t <= 1 || !this.grid.visible)
      return this.clear();
    const i = this.graph.matrix(), s = this.getInstance(), r = Array.isArray(e) ? e : [e];
    this.patterns.forEach((a, c) => {
      const u = `pattern_${c}`, h = i.a || 1, f = i.d || 1, { update: d, markup: p } = a, g = D8e(a, ["update", "markup"]), m = Object.assign(Object.assign(Object.assign({}, g), r[c]), {
        sx: h,
        sy: f,
        ox: i.e || 0,
        oy: i.f || 0,
        width: t * h,
        height: t * f
      });
      s.has(u) || s.add(u, Ie.create("pattern", { id: u, patternUnits: "userSpaceOnUse" }, Ie.createVectors(p)).node);
      const b = s.get(u);
      typeof d == "function" && d(b.childNodes[0], m);
      let y = m.ox % m.width;
      y < 0 && (y += m.width);
      let v = m.oy % m.height;
      v < 0 && (v += m.height), nt(b, {
        x: y,
        y: v,
        width: m.width,
        height: m.height
      });
    });
    const o = new XMLSerializer().serializeToString(s.root), l = `url(data:image/svg+xml;base64,${btoa(o)})`;
    this.elem.style.backgroundImage = l;
  }
  getInstance() {
    return this.instance || (this.instance = new xo()), this.instance;
  }
  resolveGrid(e) {
    if (!e)
      return [];
    const t = e.type;
    if (t == null)
      return [
        Object.assign(Object.assign({}, xo.presets.dot), e.args)
      ];
    const i = xo.registry.get(t);
    if (i) {
      let s = e.args || [];
      return Array.isArray(s) || (s = [s]), Array.isArray(i) ? i.map((r, o) => Object.assign(Object.assign({}, r), s[o])) : [Object.assign(Object.assign({}, i), s[0])];
    }
    return xo.registry.onNotFound(t);
  }
  dispose() {
    this.stopListening(), this.clear();
  }
}
R8e([
  An.dispose()
], aO.prototype, "dispose", null);
class IM extends An {
  get container() {
    return this.graph.view.container;
  }
  get viewport() {
    return this.graph.view.viewport;
  }
  get stage() {
    return this.graph.view.stage;
  }
  init() {
    this.resize();
  }
  /**
   * Returns the current transformation matrix of the graph.
   */
  getMatrix() {
    const e = this.viewport.getAttribute("transform");
    return e !== this.viewportTransformString && (this.viewportMatrix = this.viewport.getCTM(), this.viewportTransformString = e), kn(this.viewportMatrix);
  }
  /**
   * Sets new transformation with the given `matrix`
   */
  setMatrix(e) {
    const t = kn(e), i = zc(t);
    this.viewport.setAttribute("transform", i), this.viewportMatrix = t, this.viewportTransformString = i;
  }
  resize(e, t) {
    let i = e === void 0 ? this.options.width : e, s = t === void 0 ? this.options.height : t;
    this.options.width = i, this.options.height = s, typeof i == "number" && (i = Math.round(i)), typeof s == "number" && (s = Math.round(s)), this.container.style.width = i == null ? "" : `${i}px`, this.container.style.height = s == null ? "" : `${s}px`;
    const r = this.getComputedSize();
    return this.graph.trigger("resize", Object.assign({}, r)), this;
  }
  getComputedSize() {
    let e = this.options.width, t = this.options.height;
    return KO(e) || (e = this.container.clientWidth), KO(t) || (t = this.container.clientHeight), { width: e, height: t };
  }
  getScale() {
    return TBe(this.getMatrix());
  }
  scale(e, t = e, i = 0, s = 0) {
    if (e = this.clampScale(e), t = this.clampScale(t), i || s) {
      const o = this.getTranslation(), l = o.tx - i * (e - 1), a = o.ty - s * (t - 1);
      (l !== o.tx || a !== o.ty) && this.translate(l, a);
    }
    const r = this.getMatrix();
    return r.a = e, r.d = t, this.setMatrix(r), this.graph.trigger("scale", { sx: e, sy: t, ox: i, oy: s }), this;
  }
  clampScale(e) {
    const t = this.graph.options.scaling;
    return di(e, t.min || 0.01, t.max || 16);
  }
  getZoom() {
    return this.getScale().sx;
  }
  zoom(e, t) {
    t = t || {};
    let i = e, s = e;
    const r = this.getScale(), o = this.getComputedSize();
    let l = o.width / 2, a = o.height / 2;
    if (t.absolute || (i += r.sx, s += r.sy), t.scaleGrid && (i = Math.round(i / t.scaleGrid) * t.scaleGrid, s = Math.round(s / t.scaleGrid) * t.scaleGrid), t.maxScale && (i = Math.min(t.maxScale, i), s = Math.min(t.maxScale, s)), t.minScale && (i = Math.max(t.minScale, i), s = Math.max(t.minScale, s)), t.center && (l = t.center.x, a = t.center.y), i = this.clampScale(i), s = this.clampScale(s), l || a) {
      const c = this.getTranslation(), u = l - (l - c.tx) * (i / r.sx), h = a - (a - c.ty) * (s / r.sy);
      (u !== c.tx || h !== c.ty) && this.translate(u, h);
    }
    return this.scale(i, s), this;
  }
  getRotation() {
    return _Be(this.getMatrix());
  }
  rotate(e, t, i) {
    if (t == null || i == null) {
      const r = yt.getBBox(this.stage);
      t = r.width / 2, i = r.height / 2;
    }
    const s = this.getMatrix().translate(t, i).rotate(e).translate(-t, -i);
    return this.setMatrix(s), this;
  }
  getTranslation() {
    return MBe(this.getMatrix());
  }
  translate(e, t) {
    const i = this.getMatrix();
    i.e = e || 0, i.f = t || 0, this.setMatrix(i);
    const s = this.getTranslation();
    return this.options.x = s.tx, this.options.y = s.ty, this.graph.trigger("translate", Object.assign({}, s)), this;
  }
  setOrigin(e, t) {
    return this.translate(e || 0, t || 0);
  }
  fitToContent(e, t, i, s) {
    if (typeof e == "object") {
      const v = e;
      e = v.gridWidth || 1, t = v.gridHeight || 1, i = v.padding || 0, s = v;
    } else
      e = e || 1, t = t || 1, i = i || 0, s == null && (s = {});
    const r = Fl(i), o = s.border || 0, l = s.contentArea ? ue.create(s.contentArea) : this.getContentArea(s);
    o > 0 && l.inflate(o);
    const a = this.getScale(), c = this.getTranslation(), u = a.sx, h = a.sy;
    l.x *= u, l.y *= h, l.width *= u, l.height *= h;
    let f = Math.max(Math.ceil((l.width + l.x) / e), 1) * e, d = Math.max(Math.ceil((l.height + l.y) / t), 1) * t, p = 0, g = 0;
    (s.allowNewOrigin === "negative" && l.x < 0 || s.allowNewOrigin === "positive" && l.x >= 0 || s.allowNewOrigin === "any") && (p = Math.ceil(-l.x / e) * e, p += r.left, f += p), (s.allowNewOrigin === "negative" && l.y < 0 || s.allowNewOrigin === "positive" && l.y >= 0 || s.allowNewOrigin === "any") && (g = Math.ceil(-l.y / t) * t, g += r.top, d += g), f += r.right, d += r.bottom, f = Math.max(f, s.minWidth || 0), d = Math.max(d, s.minHeight || 0), f = Math.min(f, s.maxWidth || Number.MAX_SAFE_INTEGER), d = Math.min(d, s.maxHeight || Number.MAX_SAFE_INTEGER);
    const m = this.getComputedSize(), b = f !== m.width || d !== m.height;
    return (p !== c.tx || g !== c.ty) && this.translate(p, g), b && this.resize(f, d), new ue(-p / u, -g / h, f / u, d / h);
  }
  scaleContentToFit(e = {}) {
    this.scaleContentToFitImpl(e);
  }
  scaleContentToFitImpl(e = {}, t = !0) {
    let i, s;
    if (e.contentArea) {
      const b = e.contentArea;
      i = this.graph.localToGraph(b), s = I.create(b);
    } else
      i = this.getContentBBox(e), s = this.graph.graphToLocal(i);
    if (!i.width || !i.height)
      return;
    const r = Fl(e.padding), o = e.minScale || 0, l = e.maxScale || Number.MAX_SAFE_INTEGER, a = e.minScaleX || o, c = e.maxScaleX || l, u = e.minScaleY || o, h = e.maxScaleY || l;
    let f;
    if (e.viewportArea)
      f = e.viewportArea;
    else {
      const b = this.getComputedSize(), y = this.getTranslation();
      f = {
        x: y.tx,
        y: y.ty,
        width: b.width,
        height: b.height
      };
    }
    f = ue.create(f).moveAndExpand({
      x: r.left,
      y: r.top,
      width: -r.left - r.right,
      height: -r.top - r.bottom
    });
    const d = this.getScale();
    let p = f.width / i.width * d.sx, g = f.height / i.height * d.sy;
    e.preserveAspectRatio !== !1 && (p = g = Math.min(p, g));
    const m = e.scaleGrid;
    if (m && (p = m * Math.floor(p / m), g = m * Math.floor(g / m)), p = di(p, a, c), g = di(g, u, h), this.scale(p, g), t) {
      const b = this.options, y = f.x - s.x * p - b.x, v = f.y - s.y * g - b.y;
      this.translate(y, v);
    }
  }
  getContentArea(e = {}) {
    return e.useCellGeometry !== !1 ? this.model.getAllCellsBBox() || new ue() : yt.getBBox(this.stage);
  }
  getContentBBox(e = {}) {
    return this.graph.localToGraph(this.getContentArea(e));
  }
  getGraphArea() {
    const e = ue.fromSize(this.getComputedSize());
    return this.graph.graphToLocal(e);
  }
  zoomToRect(e, t = {}) {
    const i = ue.create(e), s = this.graph;
    t.contentArea = i, t.viewportArea == null && (t.viewportArea = {
      x: s.options.x,
      y: s.options.y,
      width: this.options.width,
      height: this.options.height
    }), this.scaleContentToFitImpl(t, !1);
    const r = i.getCenter();
    return this.centerPoint(r.x, r.y), this;
  }
  zoomToFit(e = {}) {
    return this.zoomToRect(this.getContentArea(e), e);
  }
  centerPoint(e, t) {
    const i = this.getComputedSize(), s = this.getScale(), r = this.getTranslation(), o = i.width / 2, l = i.height / 2;
    e = typeof e == "number" ? e : o, t = typeof t == "number" ? t : l, e = o - e * s.sx, t = l - t * s.sy, (r.tx !== e || r.ty !== t) && this.translate(e, t);
  }
  centerContent(e) {
    const i = this.graph.getContentArea(e).getCenter();
    this.centerPoint(i.x, i.y);
  }
  centerCell(e) {
    return this.positionCell(e, "center");
  }
  positionPoint(e, t, i) {
    const s = this.getComputedSize();
    t = ks(t, Math.max(0, s.width)), t < 0 && (t = s.width + t), i = ks(i, Math.max(0, s.height)), i < 0 && (i = s.height + i);
    const r = this.getTranslation(), o = this.getScale(), l = t - e.x * o.sx, a = i - e.y * o.sy;
    (r.tx !== l || r.ty !== a) && this.translate(l, a);
  }
  positionRect(e, t) {
    const i = ue.create(e);
    switch (t) {
      case "center":
        return this.positionPoint(i.getCenter(), "50%", "50%");
      case "top":
        return this.positionPoint(i.getTopCenter(), "50%", 0);
      case "top-right":
        return this.positionPoint(i.getTopRight(), "100%", 0);
      case "right":
        return this.positionPoint(i.getRightMiddle(), "100%", "50%");
      case "bottom-right":
        return this.positionPoint(i.getBottomRight(), "100%", "100%");
      case "bottom":
        return this.positionPoint(i.getBottomCenter(), "50%", "100%");
      case "bottom-left":
        return this.positionPoint(i.getBottomLeft(), 0, "100%");
      case "left":
        return this.positionPoint(i.getLeftMiddle(), 0, "50%");
      case "top-left":
        return this.positionPoint(i.getTopLeft(), 0, 0);
      default:
        return this;
    }
  }
  positionCell(e, t) {
    const i = e.getBBox();
    return this.positionRect(i, t);
  }
  positionContent(e, t) {
    const i = this.graph.getContentArea(t);
    return this.positionRect(i, e);
  }
}
var L8e = function(n, e, t, i) {
  var s = arguments.length, r = s < 3 ? e : i === null ? i = Object.getOwnPropertyDescriptor(e, t) : i, o;
  if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
    r = Reflect.decorate(n, e, t, i);
  else
    for (var l = n.length - 1; l >= 0; l--)
      (o = n[l]) && (r = (s < 3 ? o(r) : s > 3 ? o(e, t, r) : o(e, t)) || r);
  return s > 3 && r && Object.defineProperty(e, t, r), r;
};
class cO extends An {
  get elem() {
    return this.view.background;
  }
  init() {
    this.startListening(), this.options.background && this.draw(this.options.background);
  }
  startListening() {
    this.graph.on("scale", this.update, this), this.graph.on("translate", this.update, this);
  }
  stopListening() {
    this.graph.off("scale", this.update, this), this.graph.off("translate", this.update, this);
  }
  updateBackgroundImage(e = {}) {
    let t = e.size || "auto auto", i = e.position || "center";
    const s = this.graph.transform.getScale(), r = this.graph.translate();
    if (typeof i == "object") {
      const o = r.tx + s.sx * (i.x || 0), l = r.ty + s.sy * (i.y || 0);
      i = `${o}px ${l}px`;
    }
    typeof t == "object" && (t = ue.fromSize(t).scale(s.sx, s.sy), t = `${t.width}px ${t.height}px`), this.elem.style.backgroundSize = t, this.elem.style.backgroundPosition = i;
  }
  drawBackgroundImage(e, t = {}) {
    if (!(e instanceof HTMLImageElement)) {
      this.elem.style.backgroundImage = "";
      return;
    }
    const i = this.optionsCache;
    if (i && i.image !== t.image)
      return;
    let s;
    const r = t.opacity, o = t.size;
    let l = t.repeat || "no-repeat";
    const a = vh.registry.get(l);
    if (typeof a == "function") {
      const u = t.quality || 1;
      e.width *= u, e.height *= u;
      const h = a(e, t);
      if (!(h instanceof HTMLCanvasElement))
        throw new Error("Background pattern must return an HTML Canvas instance");
      s = h.toDataURL("image/png"), t.repeat && l !== t.repeat ? l = t.repeat : l = "repeat", typeof o == "object" ? (o.width *= h.width / e.width, o.height *= h.height / e.height) : o === void 0 && (t.size = {
        width: h.width / u,
        height: h.height / u
      });
    } else
      s = e.src, o === void 0 && (t.size = {
        width: e.width,
        height: e.height
      });
    i != null && typeof t.size == "object" && t.image === i.image && t.repeat === i.repeat && t.quality === i.quality && (i.size = zu(t.size));
    const c = this.elem.style;
    c.backgroundImage = `url(${s})`, c.backgroundRepeat = l, c.opacity = r == null || r >= 1 ? "" : `${r}`, this.updateBackgroundImage(t);
  }
  updateBackgroundColor(e) {
    this.elem.style.backgroundColor = e || "";
  }
  updateBackgroundOptions(e) {
    this.graph.options.background = e;
  }
  update() {
    this.optionsCache && this.updateBackgroundImage(this.optionsCache);
  }
  draw(e) {
    const t = e || {};
    if (this.updateBackgroundOptions(e), this.updateBackgroundColor(t.color), t.image) {
      this.optionsCache = zu(t);
      const i = document.createElement("img");
      i.onload = () => this.drawBackgroundImage(i, e), i.setAttribute("crossorigin", "anonymous"), i.src = t.image;
    } else
      this.drawBackgroundImage(null), this.optionsCache = null;
  }
  clear() {
    this.draw();
  }
  dispose() {
    this.clear(), this.stopListening();
  }
}
L8e([
  An.dispose()
], cO.prototype, "dispose", null);
var N8e = function(n, e, t, i) {
  var s = arguments.length, r = s < 3 ? e : i === null ? i = Object.getOwnPropertyDescriptor(e, t) : i, o;
  if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
    r = Reflect.decorate(n, e, t, i);
  else
    for (var l = n.length - 1; l >= 0; l--)
      (o = n[l]) && (r = (s < 3 ? o(r) : s > 3 ? o(e, t, r) : o(e, t)) || r);
  return s > 3 && r && Object.defineProperty(e, t, r), r;
};
class uO extends An {
  get widgetOptions() {
    return this.options.panning;
  }
  get pannable() {
    return this.widgetOptions && this.widgetOptions.enabled === !0;
  }
  init() {
    this.onRightMouseDown = this.onRightMouseDown.bind(this), this.onSpaceKeyDown = this.onSpaceKeyDown.bind(this), this.onSpaceKeyUp = this.onSpaceKeyUp.bind(this), this.startListening(), this.updateClassName();
  }
  startListening() {
    this.graph.on("blank:mousedown", this.onMouseDown, this), this.graph.on("node:unhandled:mousedown", this.onMouseDown, this), this.graph.on("edge:unhandled:mousedown", this.onMouseDown, this), _n.on(this.graph.container, "mousedown", this.onRightMouseDown), _n.on(document.body, {
      keydown: this.onSpaceKeyDown,
      keyup: this.onSpaceKeyUp
    }), this.mousewheelHandle = new z_(this.graph.container, this.onMouseWheel.bind(this), this.allowMouseWheel.bind(this)), this.mousewheelHandle.enable();
  }
  stopListening() {
    this.graph.off("blank:mousedown", this.onMouseDown, this), this.graph.off("node:unhandled:mousedown", this.onMouseDown, this), this.graph.off("edge:unhandled:mousedown", this.onMouseDown, this), _n.off(this.graph.container, "mousedown", this.onRightMouseDown), _n.off(document.body, {
      keydown: this.onSpaceKeyDown,
      keyup: this.onSpaceKeyUp
    }), this.mousewheelHandle && this.mousewheelHandle.disable();
  }
  allowPanning(e, t) {
    return e.spaceKey = this.isSpaceKeyPressed, this.pannable && No.isMatch(e, this.widgetOptions.modifiers, t);
  }
  startPanning(e) {
    const t = this.view.normalizeEvent(e);
    this.clientX = t.clientX, this.clientY = t.clientY, this.panning = !0, this.updateClassName(), _n.on(document.body, {
      "mousemove.panning touchmove.panning": this.pan.bind(this),
      "mouseup.panning touchend.panning": this.stopPanning.bind(this),
      "mouseleave.panning": this.stopPanning.bind(this)
    }), _n.on(window, "mouseup.panning", this.stopPanning.bind(this));
  }
  pan(e) {
    const t = this.view.normalizeEvent(e), i = t.clientX - this.clientX, s = t.clientY - this.clientY;
    this.clientX = t.clientX, this.clientY = t.clientY, this.graph.translateBy(i, s);
  }
  // eslint-disable-next-line
  stopPanning(e) {
    this.panning = !1, this.updateClassName(), _n.off(document.body, ".panning"), _n.off(window, ".panning");
  }
  updateClassName() {
    const e = this.view.container, t = this.view.prefixClassName("graph-panning"), i = this.view.prefixClassName("graph-pannable");
    this.pannable ? this.panning ? (Me(e, t), nn(e, i)) : (nn(e, t), Me(e, i)) : (nn(e, t), nn(e, i));
  }
  onMouseDown({ e }) {
    if (!this.allowBlankMouseDown(e))
      return;
    const t = this.graph.getPlugin("selection"), i = t && t.allowRubberband(e, !0);
    (this.allowPanning(e, !0) || this.allowPanning(e) && !i) && this.startPanning(e);
  }
  onRightMouseDown(e) {
    const t = this.widgetOptions.eventTypes;
    t != null && t.includes("rightMouseDown") && e.button === 2 && this.allowPanning(e, !0) && this.startPanning(e);
  }
  onMouseWheel(e, t, i) {
    this.graph.translateBy(-t, -i);
  }
  onSpaceKeyDown(e) {
    e.which === 32 && (this.isSpaceKeyPressed = !0);
  }
  onSpaceKeyUp(e) {
    e.which === 32 && (this.isSpaceKeyPressed = !1);
  }
  allowBlankMouseDown(e) {
    const t = this.widgetOptions.eventTypes;
    return (t == null ? void 0 : t.includes("leftMouseDown")) && e.button === 0 || (t == null ? void 0 : t.includes("mouseWheelDown")) && e.button === 1;
  }
  allowMouseWheel(e) {
    var t;
    return this.pannable && !e.ctrlKey && ((t = this.widgetOptions.eventTypes) === null || t === void 0 ? void 0 : t.includes("mouseWheel"));
  }
  autoPanning(e, t) {
    const s = this.graph.getGraphArea();
    let r = 0, o = 0;
    e <= s.left + 10 && (r = -10), t <= s.top + 10 && (o = -10), e >= s.right - 10 && (r = 10), t >= s.bottom - 10 && (o = 10), (r !== 0 || o !== 0) && this.graph.translateBy(-r, -o);
  }
  enablePanning() {
    this.pannable || (this.widgetOptions.enabled = !0, this.updateClassName());
  }
  disablePanning() {
    this.pannable && (this.widgetOptions.enabled = !1, this.updateClassName());
  }
  dispose() {
    this.stopListening();
  }
}
N8e([
  An.dispose()
], uO.prototype, "dispose", null);
var I8e = function(n, e, t, i) {
  var s = arguments.length, r = s < 3 ? e : i === null ? i = Object.getOwnPropertyDescriptor(e, t) : i, o;
  if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
    r = Reflect.decorate(n, e, t, i);
  else
    for (var l = n.length - 1; l >= 0; l--)
      (o = n[l]) && (r = (s < 3 ? o(r) : s > 3 ? o(e, t, r) : o(e, t)) || r);
  return s > 3 && r && Object.defineProperty(e, t, r), r;
};
class hO extends An {
  constructor() {
    super(...arguments), this.cumulatedFactor = 1;
  }
  get widgetOptions() {
    return this.options.mousewheel;
  }
  init() {
    this.container = this.graph.container, this.target = this.widgetOptions.global ? document : this.container, this.mousewheelHandle = new z_(this.target, this.onMouseWheel.bind(this), this.allowMouseWheel.bind(this)), this.widgetOptions.enabled && this.enable(!0);
  }
  get disabled() {
    return this.widgetOptions.enabled !== !0;
  }
  enable(e) {
    (this.disabled || e) && (this.widgetOptions.enabled = !0, this.mousewheelHandle.enable());
  }
  disable() {
    this.disabled || (this.widgetOptions.enabled = !1, this.mousewheelHandle.disable());
  }
  allowMouseWheel(e) {
    const t = this.widgetOptions.guard;
    return (t == null || t(e)) && No.isMatch(e, this.widgetOptions.modifiers);
  }
  onMouseWheel(e) {
    const t = this.widgetOptions.guard;
    if ((t == null || t(e)) && No.isMatch(e, this.widgetOptions.modifiers)) {
      const i = this.widgetOptions.factor || 1.2;
      this.currentScale == null && (this.startPos = { x: e.clientX, y: e.clientY }, this.currentScale = this.graph.transform.getScale().sx), e.deltaY < 0 ? this.currentScale < 0.15 ? this.cumulatedFactor = (this.currentScale + 0.01) / this.currentScale : (this.cumulatedFactor = Math.round(this.currentScale * i * 20) / 20 / this.currentScale, this.cumulatedFactor === 1 && (this.cumulatedFactor = 1.05)) : this.currentScale <= 0.15 ? this.cumulatedFactor = (this.currentScale - 0.01) / this.currentScale : (this.cumulatedFactor = Math.round(this.currentScale * (1 / i) * 20) / 20 / this.currentScale, this.cumulatedFactor === 1 && (this.cumulatedFactor = 0.95)), this.cumulatedFactor = Math.max(0.01, Math.min(this.currentScale * this.cumulatedFactor, 160) / this.currentScale);
      const r = this.currentScale;
      let o = this.graph.transform.clampScale(r * this.cumulatedFactor);
      const l = this.widgetOptions.minScale || Number.MIN_SAFE_INTEGER, a = this.widgetOptions.maxScale || Number.MAX_SAFE_INTEGER;
      if (o = di(o, l, a), o !== r)
        if (this.widgetOptions.zoomAtMousePosition) {
          const u = !!this.graph.getPlugin("scroller") ? this.graph.clientToLocal(this.startPos) : this.graph.clientToGraph(this.startPos);
          this.graph.zoom(o, {
            absolute: !0,
            center: u.clone()
          });
        } else
          this.graph.zoom(o, { absolute: !0 });
      this.currentScale = null, this.cumulatedFactor = 1;
    }
  }
  dispose() {
    this.disable();
  }
}
I8e([
  Zr.dispose()
], hO.prototype, "dispose", null);
var Q8e = function(n, e, t, i) {
  var s = arguments.length, r = s < 3 ? e : i === null ? i = Object.getOwnPropertyDescriptor(e, t) : i, o;
  if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
    r = Reflect.decorate(n, e, t, i);
  else
    for (var l = n.length - 1; l >= 0; l--)
      (o = n[l]) && (r = (s < 3 ? o(r) : s > 3 ? o(e, t, r) : o(e, t)) || r);
  return s > 3 && r && Object.defineProperty(e, t, r), r;
};
class QM extends An {
  init() {
    this.resetRenderArea = D5(this.resetRenderArea, 200, {
      leading: !0
    }), this.resetRenderArea(), this.startListening();
  }
  startListening() {
    this.graph.on("translate", this.resetRenderArea, this), this.graph.on("scale", this.resetRenderArea, this), this.graph.on("resize", this.resetRenderArea, this);
  }
  stopListening() {
    this.graph.off("translate", this.resetRenderArea, this), this.graph.off("scale", this.resetRenderArea, this), this.graph.off("resize", this.resetRenderArea, this);
  }
  enableVirtualRender() {
    this.options.virtual = !0, this.resetRenderArea();
  }
  disableVirtualRender() {
    this.options.virtual = !1, this.graph.renderer.setRenderArea(void 0);
  }
  resetRenderArea() {
    if (this.options.virtual) {
      const e = this.graph.getGraphArea();
      this.graph.renderer.setRenderArea(e);
    }
  }
  dispose() {
    this.stopListening();
  }
}
Q8e([
  An.dispose()
], QM.prototype, "dispose", null);
class B8e {
  constructor() {
    this.isFlushing = !1, this.isFlushPending = !1, this.scheduleId = 0, this.queue = [], this.frameInterval = 33, this.initialTime = Date.now();
  }
  queueJob(e) {
    if (e.priority & $r.PRIOR)
      e.cb();
    else {
      const t = this.findInsertionIndex(e);
      t >= 0 && this.queue.splice(t, 0, e);
    }
  }
  queueFlush() {
    !this.isFlushing && !this.isFlushPending && (this.isFlushPending = !0, this.scheduleJob());
  }
  queueFlushSync() {
    !this.isFlushing && !this.isFlushPending && (this.isFlushPending = !0, this.flushJobsSync());
  }
  clearJobs() {
    this.queue.length = 0, this.isFlushing = !1, this.isFlushPending = !1, this.cancelScheduleJob();
  }
  flushJobs() {
    this.isFlushPending = !1, this.isFlushing = !0;
    const e = this.getCurrentTime();
    let t;
    for (; (t = this.queue.shift()) && (t.cb(), !(this.getCurrentTime() - e >= this.frameInterval)); )
      ;
    this.isFlushing = !1, this.queue.length && this.queueFlush();
  }
  flushJobsSync() {
    this.isFlushPending = !1, this.isFlushing = !0;
    let e;
    for (; e = this.queue.shift(); )
      try {
        e.cb();
      } catch (t) {
        console.log(t);
      }
    this.isFlushing = !1;
  }
  findInsertionIndex(e) {
    let t = 0, i = this.queue.length, s = i - 1;
    const r = e.priority;
    for (; t <= s; ) {
      const o = (s - t >> 1) + t;
      r <= this.queue[o].priority ? t = o + 1 : (i = o, s = o - 1);
    }
    return i;
  }
  scheduleJob() {
    "requestIdleCallback" in window ? (this.scheduleId && this.cancelScheduleJob(), this.scheduleId = window.requestIdleCallback(this.flushJobs.bind(this), {
      timeout: 100
    })) : (this.scheduleId && this.cancelScheduleJob(), this.scheduleId = window.setTimeout(this.flushJobs.bind(this)));
  }
  cancelScheduleJob() {
    "cancelIdleCallback" in window ? (this.scheduleId && window.cancelIdleCallback(this.scheduleId), this.scheduleId = 0) : (this.scheduleId && clearTimeout(this.scheduleId), this.scheduleId = 0);
  }
  getCurrentTime() {
    return typeof performance == "object" && typeof performance.now == "function" ? performance.now() : Date.now() - this.initialTime;
  }
}
var $r;
(function(n) {
  n[n.Update = 2] = "Update", n[n.RenderEdge = 4] = "RenderEdge", n[n.RenderNode = 8] = "RenderNode", n[n.PRIOR = 1048576] = "PRIOR";
})($r || ($r = {}));
var j8e = function(n, e, t, i) {
  var s = arguments.length, r = s < 3 ? e : i === null ? i = Object.getOwnPropertyDescriptor(e, t) : i, o;
  if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
    r = Reflect.decorate(n, e, t, i);
  else
    for (var l = n.length - 1; l >= 0; l--)
      (o = n[l]) && (r = (s < 3 ? o(r) : s > 3 ? o(e, t, r) : o(e, t)) || r);
  return s > 3 && r && Object.defineProperty(e, t, r), r;
};
class un extends Zr {
  get model() {
    return this.graph.model;
  }
  get container() {
    return this.graph.view.stage;
  }
  constructor(e) {
    super(), this.views = {}, this.willRemoveViews = {}, this.queue = new B8e(), this.graph = e, this.init();
  }
  init() {
    this.startListening(), this.renderViews(this.model.getCells());
  }
  startListening() {
    this.model.on("reseted", this.onModelReseted, this), this.model.on("cell:added", this.onCellAdded, this), this.model.on("cell:removed", this.onCellRemoved, this), this.model.on("cell:change:zIndex", this.onCellZIndexChanged, this), this.model.on("cell:change:visible", this.onCellVisibleChanged, this);
  }
  stopListening() {
    this.model.off("reseted", this.onModelReseted, this), this.model.off("cell:added", this.onCellAdded, this), this.model.off("cell:removed", this.onCellRemoved, this), this.model.off("cell:change:zIndex", this.onCellZIndexChanged, this), this.model.off("cell:change:visible", this.onCellVisibleChanged, this);
  }
  onModelReseted({ options: e }) {
    this.queue.clearJobs(), this.removeZPivots(), this.resetViews();
    const t = this.model.getCells();
    this.renderViews(t, Object.assign(Object.assign({}, e), { queue: t.map((i) => i.id) }));
  }
  onCellAdded({ cell: e, options: t }) {
    this.renderViews([e], t);
  }
  onCellRemoved({ cell: e }) {
    this.removeViews([e]);
  }
  onCellZIndexChanged({ cell: e, options: t }) {
    const i = this.views[e.id];
    i && this.requestViewUpdate(i.view, un.FLAG_INSERT, t, $r.Update, !0);
  }
  onCellVisibleChanged({ cell: e, current: t }) {
    this.toggleVisible(e, !!t);
  }
  requestViewUpdate(e, t, i = {}, s = $r.Update, r = !0) {
    const o = e.cell.id, l = this.views[o];
    if (!l)
      return;
    l.flag = t, l.options = i, (e.hasAction(t, ["translate", "resize", "rotate"]) || i.async === !1) && (s = $r.PRIOR, r = !1), this.queue.queueJob({
      id: o,
      priority: s,
      cb: () => {
        this.renderViewInArea(e, t, i);
        const u = i.queue;
        if (u) {
          const h = u.indexOf(e.cell.id);
          h >= 0 && u.splice(h, 1), u.length === 0 && this.graph.trigger("render:done");
        }
      }
    }), this.getEffectedEdges(e).forEach((u) => {
      this.requestViewUpdate(u.view, u.flag, i, s, !1);
    }), r && this.flush();
  }
  setRenderArea(e) {
    this.renderArea = e, this.flushWaitingViews();
  }
  isViewMounted(e) {
    if (e == null)
      return !1;
    const t = this.views[e.cell.id];
    return t ? t.state === un.ViewState.MOUNTED : !1;
  }
  renderViews(e, t = {}) {
    e.sort((i, s) => i.isNode() && s.isEdge() ? -1 : 0), e.forEach((i) => {
      const s = i.id, r = this.views;
      let o = 0, l = r[s];
      if (l)
        o = un.FLAG_INSERT;
      else {
        const a = this.createCellView(i);
        a && (a.graph = this.graph, o = un.FLAG_INSERT | a.getBootstrapFlag(), l = {
          view: a,
          flag: o,
          options: t,
          state: un.ViewState.CREATED
        }, this.views[s] = l);
      }
      l && this.requestViewUpdate(l.view, o, t, this.getRenderPriority(l.view), !1);
    }), this.flush();
  }
  renderViewInArea(e, t, i = {}) {
    const s = e.cell, r = s.id, o = this.views[r];
    if (!o)
      return;
    let l = 0;
    this.isUpdatable(e) ? (l = this.updateView(e, t, i), o.flag = l) : o.state === un.ViewState.MOUNTED ? (l = this.updateView(e, t, i), o.flag = l) : o.state = un.ViewState.WAITING, l && s.isEdge() && !(l & e.getFlag(["source", "target"])) && this.queue.queueJob({
      id: r,
      priority: $r.RenderEdge,
      cb: () => {
        this.updateView(e, t, i);
      }
    });
  }
  removeViews(e) {
    e.forEach((t) => {
      const i = t.id, s = this.views[i];
      s && (this.willRemoveViews[i] = s, delete this.views[i], this.queue.queueJob({
        id: i,
        priority: this.getRenderPriority(s.view),
        cb: () => {
          this.removeView(s.view);
        }
      }));
    }), this.flush();
  }
  flush() {
    this.graph.options.async ? this.queue.queueFlush() : this.queue.queueFlushSync();
  }
  flushWaitingViews() {
    Object.values(this.views).forEach((e) => {
      if (e && e.state === un.ViewState.WAITING) {
        const { view: t, flag: i, options: s } = e;
        this.requestViewUpdate(t, i, s, this.getRenderPriority(t), !1);
      }
    }), this.flush();
  }
  updateView(e, t, i = {}) {
    if (e == null)
      return 0;
    if (Gt.isCellView(e)) {
      if (t & un.FLAG_REMOVE)
        return this.removeView(e.cell), 0;
      t & un.FLAG_INSERT && (this.insertView(e), t ^= un.FLAG_INSERT);
    }
    return t ? e.confirmUpdate(t, i) : 0;
  }
  insertView(e) {
    const t = this.views[e.cell.id];
    if (t) {
      const i = e.cell.getZIndex(), s = this.addZPivot(i);
      this.container.insertBefore(e.container, s), e.cell.isVisible() || this.toggleVisible(e.cell, !1), t.state = un.ViewState.MOUNTED, this.graph.trigger("view:mounted", { view: e });
    }
  }
  resetViews() {
    this.willRemoveViews = Object.assign(Object.assign({}, this.views), this.willRemoveViews), Object.values(this.willRemoveViews).forEach((e) => {
      e && this.removeView(e.view);
    }), this.views = {}, this.willRemoveViews = {};
  }
  removeView(e) {
    const t = e.cell, i = this.willRemoveViews[t.id];
    i && e && (i.view.remove(), delete this.willRemoveViews[t.id], this.graph.trigger("view:unmounted", { view: e }));
  }
  toggleVisible(e, t) {
    const i = this.model.getConnectedEdges(e);
    for (let r = 0, o = i.length; r < o; r += 1) {
      const l = i[r];
      if (t) {
        const a = l.getSourceCell(), c = l.getTargetCell();
        if (a && !a.isVisible() || c && !c.isVisible())
          continue;
        this.toggleVisible(l, !0);
      } else
        this.toggleVisible(l, !1);
    }
    const s = this.views[e.id];
    s && fn(s.view.container, {
      display: t ? "unset" : "none"
    });
  }
  addZPivot(e = 0) {
    this.zPivots == null && (this.zPivots = {});
    const t = this.zPivots;
    let i = t[e];
    if (i)
      return i;
    i = t[e] = document.createComment(`z-index:${e + 1}`);
    let s = -1 / 0;
    for (const o in t) {
      const l = +o;
      l < e && l > s && (s = l, e - 1);
    }
    const r = this.container;
    if (s !== -1 / 0) {
      const o = t[s];
      r.insertBefore(i, o.nextSibling);
    } else
      r.insertBefore(i, r.firstChild);
    return i;
  }
  removeZPivots() {
    this.zPivots && Object.values(this.zPivots).forEach((e) => {
      e && e.parentNode && e.parentNode.removeChild(e);
    }), this.zPivots = {};
  }
  createCellView(e) {
    const t = { graph: this.graph }, i = this.graph.options.createCellView;
    if (i) {
      const r = Ee(i, this.graph, e);
      if (r)
        return new r(e, t);
      if (r === null)
        return null;
    }
    const s = e.view;
    if (s != null && typeof s == "string") {
      const r = Gt.registry.get(s);
      return r ? new r(e, t) : Gt.registry.onNotFound(s);
    }
    return e.isNode() ? new zi(e, t) : e.isEdge() ? new Vr(e, t) : null;
  }
  getEffectedEdges(e) {
    const t = [], i = e.cell, s = this.model.getConnectedEdges(i);
    for (let r = 0, o = s.length; r < o; r += 1) {
      const l = s[r], a = this.views[l.id];
      if (!a)
        continue;
      const c = a.view;
      if (!this.isViewMounted(c))
        continue;
      const u = ["update"];
      l.getTargetCell() === i && u.push("target"), l.getSourceCell() === i && u.push("source"), t.push({
        id: l.id,
        view: c,
        flag: c.getFlag(u)
      });
    }
    return t;
  }
  isUpdatable(e) {
    if (e.isNodeView())
      return this.renderArea ? this.renderArea.isIntersectWithRect(e.cell.getBBox()) : !0;
    if (e.isEdgeView()) {
      const t = e.cell, i = t.getSourceCell(), s = t.getTargetCell();
      if (this.renderArea && i && s)
        return this.renderArea.isIntersectWithRect(i.getBBox()) || this.renderArea.isIntersectWithRect(s.getBBox());
    }
    return !0;
  }
  getRenderPriority(e) {
    return e.cell.isNode() ? $r.RenderNode : $r.RenderEdge;
  }
  dispose() {
    this.stopListening(), Object.keys(this.views).forEach((e) => {
      this.views[e].view.dispose();
    }), this.views = {};
  }
}
j8e([
  Zr.dispose()
], un.prototype, "dispose", null);
(function(n) {
  n.FLAG_INSERT = 1 << 30, n.FLAG_REMOVE = 1 << 29, n.FLAG_RENDER = (1 << 26) - 1;
})(un || (un = {}));
(function(n) {
  (function(e) {
    e[e.CREATED = 0] = "CREATED", e[e.MOUNTED = 1] = "MOUNTED", e[e.WAITING = 2] = "WAITING";
  })(n.ViewState || (n.ViewState = {}));
})(un || (un = {}));
var z8e = function(n, e, t, i) {
  var s = arguments.length, r = s < 3 ? e : i === null ? i = Object.getOwnPropertyDescriptor(e, t) : i, o;
  if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
    r = Reflect.decorate(n, e, t, i);
  else
    for (var l = n.length - 1; l >= 0; l--)
      (o = n[l]) && (r = (s < 3 ? o(r) : s > 3 ? o(e, t, r) : o(e, t)) || r);
  return s > 3 && r && Object.defineProperty(e, t, r), r;
};
class fO extends An {
  constructor() {
    super(...arguments), this.schedule = new un(this.graph);
  }
  requestViewUpdate(e, t, i = {}) {
    this.schedule.requestViewUpdate(e, t, i);
  }
  isViewMounted(e) {
    return this.schedule.isViewMounted(e);
  }
  setRenderArea(e) {
    this.schedule.setRenderArea(e);
  }
  findViewByElem(e) {
    if (e == null)
      return null;
    const t = this.options.container, i = typeof e == "string" ? t.querySelector(e) : e instanceof Element ? e : e[0];
    if (i) {
      const s = this.graph.view.findAttr("data-cell-id", i);
      if (s) {
        const r = this.schedule.views;
        if (r[s])
          return r[s].view;
      }
    }
    return null;
  }
  findViewByCell(e) {
    if (e == null)
      return null;
    const t = He.isCell(e) ? e.id : e, i = this.schedule.views;
    return i[t] ? i[t].view : null;
  }
  findViewsFromPoint(e) {
    const t = { x: e.x, y: e.y };
    return this.model.getCells().map((i) => this.findViewByCell(i)).filter((i) => i != null ? yt.getBBox(i.container, {
      target: this.view.stage
    }).containsPoint(t) : !1);
  }
  findEdgeViewsFromPoint(e, t = 5) {
    return this.model.getEdges().map((i) => this.findViewByCell(i)).filter((i) => {
      if (i != null) {
        const s = i.getClosestPoint(e);
        if (s)
          return s.distance(e) <= t;
      }
      return !1;
    });
  }
  findViewsInArea(e, t = {}) {
    const i = ue.create(e);
    return this.model.getCells().map((s) => this.findViewByCell(s)).filter((s) => {
      if (s) {
        if (t.nodeOnly && !s.isNodeView())
          return !1;
        const r = yt.getBBox(s.container, {
          target: this.view.stage
        });
        return r.width === 0 ? r.inflate(1, 0) : r.height === 0 && r.inflate(0, 1), t.strict ? i.containsRect(r) : i.isIntersectWithRect(r);
      }
      return !1;
    });
  }
  dispose() {
    this.schedule.dispose();
  }
}
z8e([
  An.dispose()
], fO.prototype, "dispose", null);
var NC = function(n, e) {
  var t = {};
  for (var i in n)
    Object.prototype.hasOwnProperty.call(n, i) && e.indexOf(i) < 0 && (t[i] = n[i]);
  if (n != null && typeof Object.getOwnPropertySymbols == "function")
    for (var s = 0, i = Object.getOwnPropertySymbols(n); s < i.length; s++)
      e.indexOf(i[s]) < 0 && Object.prototype.propertyIsEnumerable.call(n, i[s]) && (t[i[s]] = n[i[s]]);
  return t;
};
class BM extends An {
  get cid() {
    return this.graph.view.cid;
  }
  get svg() {
    return this.view.svg;
  }
  get defs() {
    return this.view.defs;
  }
  isDefined(e) {
    return this.svg.getElementById(e) != null;
  }
  filter(e) {
    let t = e.id;
    const i = e.name;
    if (t || (t = `filter-${i}-${this.cid}-${Xm(JSON.stringify(e))}`), !this.isDefined(t)) {
      const s = ac.registry.get(i);
      if (s == null)
        return ac.registry.onNotFound(i);
      const r = s(e.args || {}), o = Object.assign(Object.assign({ x: -1, y: -1, width: 3, height: 3, filterUnits: "objectBoundingBox" }, e.attrs), { id: t });
      Ie.create(kt.sanitize(r), o).appendTo(this.defs);
    }
    return t;
  }
  gradient(e) {
    let t = e.id;
    const i = e.type;
    if (t || (t = `gradient-${i}-${this.cid}-${Xm(JSON.stringify(e))}`), !this.isDefined(t)) {
      const r = e.stops.map((a) => {
        const c = a.opacity != null && Number.isFinite(a.opacity) ? a.opacity : 1;
        return `<stop offset="${a.offset}" stop-color="${a.color}" stop-opacity="${c}"/>`;
      }), o = `<${i}>${r.join("")}</${i}>`, l = Object.assign({ id: t }, e.attrs);
      Ie.create(o, l).appendTo(this.defs);
    }
    return t;
  }
  marker(e) {
    const { id: t, refX: i, refY: s, markerUnits: r, markerOrient: o, tagName: l, children: a } = e, c = NC(e, ["id", "refX", "refY", "markerUnits", "markerOrient", "tagName", "children"]);
    let u = t;
    if (u || (u = `marker-${this.cid}-${Xm(JSON.stringify(e))}`), !this.isDefined(u)) {
      l !== "path" && delete c.d;
      const h = Ie.create("marker", {
        refX: i,
        refY: s,
        id: u,
        overflow: "visible",
        orient: o ?? "auto",
        markerUnits: r || "userSpaceOnUse"
      }, a ? a.map((f) => {
        var { tagName: d } = f, p = NC(f, ["tagName"]);
        return Ie.create(`${d}` || "path", ph(Object.assign(Object.assign({}, c), p)));
      }) : [Ie.create(l || "path", ph(c))]);
      this.defs.appendChild(h.node);
    }
    return u;
  }
  remove(e) {
    const t = this.svg.getElementById(e);
    t && t.parentNode && t.parentNode.removeChild(t);
  }
}
class jM extends An {
  getClientMatrix() {
    return kn(this.view.stage.getScreenCTM());
  }
  /**
   * Returns coordinates of the graph viewport, relative to the window.
   */
  getClientOffset() {
    const e = this.view.svg.getBoundingClientRect();
    return new I(e.left, e.top);
  }
  /**
   * Returns coordinates of the graph viewport, relative to the document.
   */
  getPageOffset() {
    return this.getClientOffset().translate(window.scrollX, window.scrollY);
  }
  snapToGrid(e, t) {
    return (typeof e == "number" ? this.clientToLocalPoint(e, t) : this.clientToLocalPoint(e.x, e.y)).snapToGrid(this.graph.getGridSize());
  }
  localToGraphPoint(e, t) {
    const i = I.create(e, t);
    return yt.transformPoint(i, this.graph.matrix());
  }
  localToClientPoint(e, t) {
    const i = I.create(e, t);
    return yt.transformPoint(i, this.getClientMatrix());
  }
  localToPagePoint(e, t) {
    return (typeof e == "number" ? this.localToGraphPoint(e, t) : this.localToGraphPoint(e)).translate(this.getPageOffset());
  }
  localToGraphRect(e, t, i, s) {
    const r = ue.create(e, t, i, s);
    return yt.transformRectangle(r, this.graph.matrix());
  }
  localToClientRect(e, t, i, s) {
    const r = ue.create(e, t, i, s);
    return yt.transformRectangle(r, this.getClientMatrix());
  }
  localToPageRect(e, t, i, s) {
    return (typeof e == "number" ? this.localToGraphRect(e, t, i, s) : this.localToGraphRect(e)).translate(this.getPageOffset());
  }
  graphToLocalPoint(e, t) {
    const i = I.create(e, t);
    return yt.transformPoint(i, this.graph.matrix().inverse());
  }
  clientToLocalPoint(e, t) {
    const i = I.create(e, t);
    return yt.transformPoint(i, this.getClientMatrix().inverse());
  }
  clientToGraphPoint(e, t) {
    const i = I.create(e, t);
    return yt.transformPoint(i, this.graph.matrix().multiply(this.getClientMatrix().inverse()));
  }
  pageToLocalPoint(e, t) {
    const s = I.create(e, t).diff(this.getPageOffset());
    return this.graphToLocalPoint(s);
  }
  graphToLocalRect(e, t, i, s) {
    const r = ue.create(e, t, i, s);
    return yt.transformRectangle(r, this.graph.matrix().inverse());
  }
  clientToLocalRect(e, t, i, s) {
    const r = ue.create(e, t, i, s);
    return yt.transformRectangle(r, this.getClientMatrix().inverse());
  }
  clientToGraphRect(e, t, i, s) {
    const r = ue.create(e, t, i, s);
    return yt.transformRectangle(r, this.graph.matrix().multiply(this.getClientMatrix().inverse()));
  }
  pageToLocalRect(e, t, i, s) {
    const r = ue.create(e, t, i, s), o = this.getPageOffset();
    return r.x -= o.x, r.y -= o.y, this.graphToLocalRect(r);
  }
}
var Z8e = function(n, e, t, i) {
  var s = arguments.length, r = s < 3 ? e : i === null ? i = Object.getOwnPropertyDescriptor(e, t) : i, o;
  if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
    r = Reflect.decorate(n, e, t, i);
  else
    for (var l = n.length - 1; l >= 0; l--)
      (o = n[l]) && (r = (s < 3 ? o(r) : s > 3 ? o(e, t, r) : o(e, t)) || r);
  return s > 3 && r && Object.defineProperty(e, t, r), r;
};
class Ap extends An {
  constructor() {
    super(...arguments), this.highlights = {};
  }
  init() {
    this.startListening();
  }
  startListening() {
    this.graph.on("cell:highlight", this.onCellHighlight, this), this.graph.on("cell:unhighlight", this.onCellUnhighlight, this);
  }
  stopListening() {
    this.graph.off("cell:highlight", this.onCellHighlight, this), this.graph.off("cell:unhighlight", this.onCellUnhighlight, this);
  }
  onCellHighlight({ view: e, magnet: t, options: i = {} }) {
    const s = this.resolveHighlighter(i);
    if (!s)
      return;
    const r = this.getHighlighterId(t, s);
    if (!this.highlights[r]) {
      const o = s.highlighter;
      o.highlight(e, t, Object.assign({}, s.args)), this.highlights[r] = {
        cellView: e,
        magnet: t,
        highlighter: o,
        args: s.args
      };
    }
  }
  onCellUnhighlight({ magnet: e, options: t = {} }) {
    const i = this.resolveHighlighter(t);
    if (!i)
      return;
    const s = this.getHighlighterId(e, i);
    this.unhighlight(s);
  }
  resolveHighlighter(e) {
    const t = this.options;
    let i = e.highlighter;
    if (i == null) {
      const l = e.type;
      i = l && t.highlighting[l] || t.highlighting.default;
    }
    if (i == null)
      return null;
    const s = typeof i == "string" ? {
      name: i
    } : i, r = s.name, o = Nr.registry.get(r);
    return o == null ? Nr.registry.onNotFound(r) : (Nr.check(r, o), {
      name: r,
      highlighter: o,
      args: s.args || {}
    });
  }
  getHighlighterId(e, t) {
    return Ky(e), t.name + e.id + JSON.stringify(t.args);
  }
  unhighlight(e) {
    const t = this.highlights[e];
    t && (t.highlighter.unhighlight(t.cellView, t.magnet, t.args), delete this.highlights[e]);
  }
  dispose() {
    Object.keys(this.highlights).forEach((e) => this.unhighlight(e)), this.stopListening();
  }
}
Z8e([
  Ap.dispose()
], Ap.prototype, "dispose", null);
var F8e = function(n, e, t, i) {
  var s = arguments.length, r = s < 3 ? e : i === null ? i = Object.getOwnPropertyDescriptor(e, t) : i, o;
  if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
    r = Reflect.decorate(n, e, t, i);
  else
    for (var l = n.length - 1; l >= 0; l--)
      (o = n[l]) && (r = (s < 3 ? o(r) : s > 3 ? o(e, t, r) : o(e, t)) || r);
  return s > 3 && r && Object.defineProperty(e, t, r), r;
};
class zM extends An {
  getScroller() {
    const e = this.graph.getPlugin("scroller");
    return e && e.options.enabled ? e : null;
  }
  getContainer() {
    const e = this.getScroller();
    return e ? e.container.parentElement : this.graph.container.parentElement;
  }
  getSensorTarget() {
    const e = this.options.autoResize;
    if (e)
      return typeof e == "boolean" ? this.getContainer() : e;
  }
  init() {
    if (this.options.autoResize) {
      const t = this.getSensorTarget();
      t && vp.bind(t, () => {
        const i = t.offsetWidth, s = t.offsetHeight;
        this.resize(i, s);
      });
    }
  }
  resize(e, t) {
    const i = this.getScroller();
    i ? i.resize(e, t) : this.graph.transform.resize(e, t);
  }
  dispose() {
    vp.clear(this.graph.container);
  }
}
F8e([
  An.dispose()
], zM.prototype, "dispose", null);
var V8e = function(n, e, t, i) {
  var s = arguments.length, r = s < 3 ? e : i === null ? i = Object.getOwnPropertyDescriptor(e, t) : i, o;
  if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
    r = Reflect.decorate(n, e, t, i);
  else
    for (var l = n.length - 1; l >= 0; l--)
      (o = n[l]) && (r = (s < 3 ? o(r) : s > 3 ? o(e, t, r) : o(e, t)) || r);
  return s > 3 && r && Object.defineProperty(e, t, r), r;
};
class ge extends Qt {
  get container() {
    return this.options.container;
  }
  get [Symbol.toStringTag]() {
    return ge.toStringTag;
  }
  constructor(e) {
    super(), this.installedPlugins = /* @__PURE__ */ new Set(), this.options = Sh.get(e), this.css = new nv(this), this.view = new mr(this), this.defs = new BM(this), this.coord = new jM(this), this.transform = new IM(this), this.highlight = new Ap(this), this.grid = new aO(this), this.background = new cO(this), this.options.model ? this.model = this.options.model : (this.model = new wi(), this.model.graph = this), this.renderer = new fO(this), this.panning = new uO(this), this.mousewheel = new hO(this), this.virtualRender = new QM(this), this.size = new zM(this);
  }
  // #region model
  isNode(e) {
    return e.isNode();
  }
  isEdge(e) {
    return e.isEdge();
  }
  resetCells(e, t = {}) {
    return this.model.resetCells(e, t), this;
  }
  clearCells(e = {}) {
    return this.model.clear(e), this;
  }
  toJSON(e = {}) {
    return this.model.toJSON(e);
  }
  parseJSON(e) {
    return this.model.parseJSON(e);
  }
  fromJSON(e, t = {}) {
    return this.model.fromJSON(e, t), this;
  }
  getCellById(e) {
    return this.model.getCell(e);
  }
  addNode(e, t = {}) {
    return this.model.addNode(e, t);
  }
  addNodes(e, t = {}) {
    return this.addCell(e.map((i) => Kt.isNode(i) ? i : this.createNode(i)), t);
  }
  createNode(e) {
    return this.model.createNode(e);
  }
  removeNode(e, t = {}) {
    return this.model.removeCell(e, t);
  }
  addEdge(e, t = {}) {
    return this.model.addEdge(e, t);
  }
  addEdges(e, t = {}) {
    return this.addCell(e.map((i) => qt.isEdge(i) ? i : this.createEdge(i)), t);
  }
  removeEdge(e, t = {}) {
    return this.model.removeCell(e, t);
  }
  createEdge(e) {
    return this.model.createEdge(e);
  }
  addCell(e, t = {}) {
    return this.model.addCell(e, t), this;
  }
  removeCell(e, t = {}) {
    return this.model.removeCell(e, t);
  }
  removeCells(e, t = {}) {
    return this.model.removeCells(e, t);
  }
  removeConnectedEdges(e, t = {}) {
    return this.model.removeConnectedEdges(e, t);
  }
  disconnectConnectedEdges(e, t = {}) {
    return this.model.disconnectConnectedEdges(e, t), this;
  }
  hasCell(e) {
    return this.model.has(e);
  }
  getCells() {
    return this.model.getCells();
  }
  getCellCount() {
    return this.model.total();
  }
  /**
   * Returns all the nodes in the graph.
   */
  getNodes() {
    return this.model.getNodes();
  }
  /**
   * Returns all the edges in the graph.
   */
  getEdges() {
    return this.model.getEdges();
  }
  /**
   * Returns all outgoing edges for the node.
   */
  getOutgoingEdges(e) {
    return this.model.getOutgoingEdges(e);
  }
  /**
   * Returns all incoming edges for the node.
   */
  getIncomingEdges(e) {
    return this.model.getIncomingEdges(e);
  }
  /**
   * Returns edges connected with cell.
   */
  getConnectedEdges(e, t = {}) {
    return this.model.getConnectedEdges(e, t);
  }
  /**
   * Returns an array of all the roots of the graph.
   */
  getRootNodes() {
    return this.model.getRoots();
  }
  /**
   * Returns an array of all the leafs of the graph.
   */
  getLeafNodes() {
    return this.model.getLeafs();
  }
  /**
   * Returns `true` if the node is a root node, i.e.
   * there is no  edges coming to the node.
   */
  isRootNode(e) {
    return this.model.isRoot(e);
  }
  /**
   * Returns `true` if the node is a leaf node, i.e.
   * there is no edges going out from the node.
   */
  isLeafNode(e) {
    return this.model.isLeaf(e);
  }
  /**
   * Returns all the neighbors of node in the graph. Neighbors are all
   * the nodes connected to node via either incoming or outgoing edge.
   */
  getNeighbors(e, t = {}) {
    return this.model.getNeighbors(e, t);
  }
  /**
   * Returns `true` if `cell2` is a neighbor of `cell1`.
   */
  isNeighbor(e, t, i = {}) {
    return this.model.isNeighbor(e, t, i);
  }
  getSuccessors(e, t = {}) {
    return this.model.getSuccessors(e, t);
  }
  /**
   * Returns `true` if `cell2` is a successor of `cell1`.
   */
  isSuccessor(e, t, i = {}) {
    return this.model.isSuccessor(e, t, i);
  }
  getPredecessors(e, t = {}) {
    return this.model.getPredecessors(e, t);
  }
  /**
   * Returns `true` if `cell2` is a predecessor of `cell1`.
   */
  isPredecessor(e, t, i = {}) {
    return this.model.isPredecessor(e, t, i);
  }
  getCommonAncestor(...e) {
    return this.model.getCommonAncestor(...e);
  }
  /**
   * Returns an array of cells that result from finding nodes/edges that
   * are connected to any of the cells in the cells array. This function
   * loops over cells and if the current cell is a edge, it collects its
   * source/target nodes; if it is an node, it collects its incoming and
   * outgoing edges if both the edge terminal (source/target) are in the
   * cells array.
   */
  getSubGraph(e, t = {}) {
    return this.model.getSubGraph(e, t);
  }
  /**
   * Clones the whole subgraph (including all the connected links whose
   * source/target is in the subgraph). If `options.deep` is `true`, also
   * take into account all the embedded cells of all the subgraph cells.
   *
   * Returns a map of the form: { [original cell ID]: [clone] }.
   */
  cloneSubGraph(e, t = {}) {
    return this.model.cloneSubGraph(e, t);
  }
  cloneCells(e) {
    return this.model.cloneCells(e);
  }
  getNodesFromPoint(e, t) {
    return this.model.getNodesFromPoint(e, t);
  }
  getNodesInArea(e, t, i, s, r) {
    return this.model.getNodesInArea(e, t, i, s, r);
  }
  getNodesUnderNode(e, t = {}) {
    return this.model.getNodesUnderNode(e, t);
  }
  searchCell(e, t, i = {}) {
    return this.model.search(e, t, i), this;
  }
  /** *
   * Returns an array of IDs of nodes on the shortest
   * path between source and target.
   */
  getShortestPath(e, t, i = {}) {
    return this.model.getShortestPath(e, t, i);
  }
  /**
   * Returns the bounding box that surrounds all cells in the graph.
   */
  getAllCellsBBox() {
    return this.model.getAllCellsBBox();
  }
  /**
   * Returns the bounding box that surrounds all the given cells.
   */
  getCellsBBox(e, t = {}) {
    return this.model.getCellsBBox(e, t);
  }
  startBatch(e, t = {}) {
    this.model.startBatch(e, t);
  }
  stopBatch(e, t = {}) {
    this.model.stopBatch(e, t);
  }
  batchUpdate(e, t, i) {
    const s = typeof e == "string" ? e : "update", r = typeof e == "string" ? t : e, o = typeof t == "function" ? i : t;
    this.startBatch(s, o);
    const l = r();
    return this.stopBatch(s, o), l;
  }
  updateCellId(e, t) {
    return this.model.updateCellId(e, t);
  }
  // #endregion
  // #region view
  findView(e) {
    return He.isCell(e) ? this.findViewByCell(e) : this.findViewByElem(e);
  }
  findViews(e) {
    return ue.isRectangleLike(e) ? this.findViewsInArea(e) : I.isPointLike(e) ? this.findViewsFromPoint(e) : [];
  }
  findViewByCell(e) {
    return this.renderer.findViewByCell(e);
  }
  findViewByElem(e) {
    return this.renderer.findViewByElem(e);
  }
  findViewsFromPoint(e, t) {
    const i = typeof e == "number" ? { x: e, y: t } : e;
    return this.renderer.findViewsFromPoint(i);
  }
  findViewsInArea(e, t, i, s, r) {
    const o = typeof e == "number" ? {
      x: e,
      y: t,
      width: i,
      height: s
    } : e, l = typeof e == "number" ? r : t;
    return this.renderer.findViewsInArea(o, l);
  }
  matrix(e) {
    return typeof e > "u" ? this.transform.getMatrix() : (this.transform.setMatrix(e), this);
  }
  resize(e, t) {
    const i = this.getPlugin("scroller");
    return i ? i.resize(e, t) : this.transform.resize(e, t), this;
  }
  scale(e, t = e, i = 0, s = 0) {
    return typeof e > "u" ? this.transform.getScale() : (this.transform.scale(e, t, i, s), this);
  }
  zoom(e, t) {
    const i = this.getPlugin("scroller");
    if (i) {
      if (typeof e > "u")
        return i.zoom();
      i.zoom(e, t);
    } else {
      if (typeof e > "u")
        return this.transform.getZoom();
      this.transform.zoom(e, t);
    }
    return this;
  }
  zoomTo(e, t = {}) {
    const i = this.getPlugin("scroller");
    return i ? i.zoom(e, Object.assign(Object.assign({}, t), { absolute: !0 })) : this.transform.zoom(e, Object.assign(Object.assign({}, t), { absolute: !0 })), this;
  }
  zoomToRect(e, t = {}) {
    const i = this.getPlugin("scroller");
    return i ? i.zoomToRect(e, t) : this.transform.zoomToRect(e, t), this;
  }
  zoomToFit(e = {}) {
    const t = this.getPlugin("scroller");
    return t ? t.zoomToFit(e) : this.transform.zoomToFit(e), this;
  }
  rotate(e, t, i) {
    return typeof e > "u" ? this.transform.getRotation() : (this.transform.rotate(e, t, i), this);
  }
  translate(e, t) {
    return typeof e > "u" ? this.transform.getTranslation() : (this.transform.translate(e, t), this);
  }
  translateBy(e, t) {
    const i = this.translate(), s = i.tx + e, r = i.ty + t;
    return this.translate(s, r);
  }
  getGraphArea() {
    return this.transform.getGraphArea();
  }
  getContentArea(e = {}) {
    return this.transform.getContentArea(e);
  }
  getContentBBox(e = {}) {
    return this.transform.getContentBBox(e);
  }
  fitToContent(e, t, i, s) {
    return this.transform.fitToContent(e, t, i, s);
  }
  scaleContentToFit(e = {}) {
    return this.transform.scaleContentToFit(e), this;
  }
  /**
   * Position the center of graph to the center of the viewport.
   */
  center(e) {
    return this.centerPoint(e);
  }
  centerPoint(e, t, i) {
    const s = this.getPlugin("scroller");
    return s ? s.centerPoint(e, t, i) : this.transform.centerPoint(e, t), this;
  }
  centerContent(e) {
    const t = this.getPlugin("scroller");
    return t ? t.centerContent(e) : this.transform.centerContent(e), this;
  }
  centerCell(e, t) {
    const i = this.getPlugin("scroller");
    return i ? i.centerCell(e, t) : this.transform.centerCell(e), this;
  }
  positionPoint(e, t, i, s = {}) {
    const r = this.getPlugin("scroller");
    return r ? r.positionPoint(e, t, i, s) : this.transform.positionPoint(e, t, i), this;
  }
  positionRect(e, t, i) {
    const s = this.getPlugin("scroller");
    return s ? s.positionRect(e, t, i) : this.transform.positionRect(e, t), this;
  }
  positionCell(e, t, i) {
    const s = this.getPlugin("scroller");
    return s ? s.positionCell(e, t, i) : this.transform.positionCell(e, t), this;
  }
  positionContent(e, t) {
    const i = this.getPlugin("scroller");
    return i ? i.positionContent(e, t) : this.transform.positionContent(e, t), this;
  }
  snapToGrid(e, t) {
    return this.coord.snapToGrid(e, t);
  }
  pageToLocal(e, t, i, s) {
    return ue.isRectangleLike(e) ? this.coord.pageToLocalRect(e) : typeof e == "number" && typeof t == "number" && typeof i == "number" && typeof s == "number" ? this.coord.pageToLocalRect(e, t, i, s) : this.coord.pageToLocalPoint(e, t);
  }
  localToPage(e, t, i, s) {
    return ue.isRectangleLike(e) ? this.coord.localToPageRect(e) : typeof e == "number" && typeof t == "number" && typeof i == "number" && typeof s == "number" ? this.coord.localToPageRect(e, t, i, s) : this.coord.localToPagePoint(e, t);
  }
  clientToLocal(e, t, i, s) {
    return ue.isRectangleLike(e) ? this.coord.clientToLocalRect(e) : typeof e == "number" && typeof t == "number" && typeof i == "number" && typeof s == "number" ? this.coord.clientToLocalRect(e, t, i, s) : this.coord.clientToLocalPoint(e, t);
  }
  localToClient(e, t, i, s) {
    return ue.isRectangleLike(e) ? this.coord.localToClientRect(e) : typeof e == "number" && typeof t == "number" && typeof i == "number" && typeof s == "number" ? this.coord.localToClientRect(e, t, i, s) : this.coord.localToClientPoint(e, t);
  }
  localToGraph(e, t, i, s) {
    return ue.isRectangleLike(e) ? this.coord.localToGraphRect(e) : typeof e == "number" && typeof t == "number" && typeof i == "number" && typeof s == "number" ? this.coord.localToGraphRect(e, t, i, s) : this.coord.localToGraphPoint(e, t);
  }
  graphToLocal(e, t, i, s) {
    return ue.isRectangleLike(e) ? this.coord.graphToLocalRect(e) : typeof e == "number" && typeof t == "number" && typeof i == "number" && typeof s == "number" ? this.coord.graphToLocalRect(e, t, i, s) : this.coord.graphToLocalPoint(e, t);
  }
  clientToGraph(e, t, i, s) {
    return ue.isRectangleLike(e) ? this.coord.clientToGraphRect(e) : typeof e == "number" && typeof t == "number" && typeof i == "number" && typeof s == "number" ? this.coord.clientToGraphRect(e, t, i, s) : this.coord.clientToGraphPoint(e, t);
  }
  // #endregion
  // #region defs
  defineFilter(e) {
    return this.defs.filter(e);
  }
  defineGradient(e) {
    return this.defs.gradient(e);
  }
  defineMarker(e) {
    return this.defs.marker(e);
  }
  // #endregion
  // #region grid
  getGridSize() {
    return this.grid.getGridSize();
  }
  setGridSize(e) {
    return this.grid.setGridSize(e), this;
  }
  showGrid() {
    return this.grid.show(), this;
  }
  hideGrid() {
    return this.grid.hide(), this;
  }
  clearGrid() {
    return this.grid.clear(), this;
  }
  drawGrid(e) {
    return this.grid.draw(e), this;
  }
  // #endregion
  // #region background
  updateBackground() {
    return this.background.update(), this;
  }
  drawBackground(e, t) {
    const i = this.getPlugin("scroller");
    return i != null && (this.options.background == null || !t) ? i.drawBackground(e, t) : this.background.draw(e), this;
  }
  clearBackground(e) {
    const t = this.getPlugin("scroller");
    return t != null && (this.options.background == null || !e) ? t.clearBackground(e) : this.background.clear(), this;
  }
  // #endregion
  // #region virtual-render
  enableVirtualRender() {
    return this.virtualRender.enableVirtualRender(), this;
  }
  disableVirtualRender() {
    return this.virtualRender.disableVirtualRender(), this;
  }
  // #endregion
  // #region mousewheel
  isMouseWheelEnabled() {
    return !this.mousewheel.disabled;
  }
  enableMouseWheel() {
    return this.mousewheel.enable(), this;
  }
  disableMouseWheel() {
    return this.mousewheel.disable(), this;
  }
  toggleMouseWheel(e) {
    return e == null ? this.isMouseWheelEnabled() ? this.disableMouseWheel() : this.enableMouseWheel() : e ? this.enableMouseWheel() : this.disableMouseWheel(), this;
  }
  // #endregion
  // #region panning
  isPannable() {
    const e = this.getPlugin("scroller");
    return e ? e.isPannable() : this.panning.pannable;
  }
  enablePanning() {
    const e = this.getPlugin("scroller");
    return e ? e.enablePanning() : this.panning.enablePanning(), this;
  }
  disablePanning() {
    const e = this.getPlugin("scroller");
    return e ? e.disablePanning() : this.panning.disablePanning(), this;
  }
  togglePanning(e) {
    return e == null ? this.isPannable() ? this.disablePanning() : this.enablePanning() : e !== this.isPannable() && (e ? this.enablePanning() : this.disablePanning()), this;
  }
  // #endregion
  // #region plugin
  use(e, ...t) {
    return this.installedPlugins.has(e) || (this.installedPlugins.add(e), e.init(this, ...t)), this;
  }
  getPlugin(e) {
    return Array.from(this.installedPlugins).find((t) => t.name === e);
  }
  getPlugins(e) {
    return Array.from(this.installedPlugins).filter((t) => e.includes(t.name));
  }
  enablePlugins(e) {
    let t = e;
    Array.isArray(t) || (t = [t]);
    const i = this.getPlugins(t);
    return i == null || i.forEach((s) => {
      var r;
      (r = s == null ? void 0 : s.enable) === null || r === void 0 || r.call(s);
    }), this;
  }
  disablePlugins(e) {
    let t = e;
    Array.isArray(t) || (t = [t]);
    const i = this.getPlugins(t);
    return i == null || i.forEach((s) => {
      var r;
      (r = s == null ? void 0 : s.disable) === null || r === void 0 || r.call(s);
    }), this;
  }
  isPluginEnabled(e) {
    var t;
    const i = this.getPlugin(e);
    return (t = i == null ? void 0 : i.isEnabled) === null || t === void 0 ? void 0 : t.call(i);
  }
  disposePlugins(e) {
    let t = e;
    Array.isArray(t) || (t = [t]);
    const i = this.getPlugins(t);
    return i == null || i.forEach((s) => {
      s.dispose(), this.installedPlugins.delete(s);
    }), this;
  }
  // #endregion
  // #region dispose
  dispose(e = !0) {
    e && this.model.dispose(), this.css.dispose(), this.defs.dispose(), this.grid.dispose(), this.coord.dispose(), this.transform.dispose(), this.highlight.dispose(), this.background.dispose(), this.mousewheel.dispose(), this.panning.dispose(), this.view.dispose(), this.renderer.dispose(), this.installedPlugins.forEach((t) => {
      t.dispose();
    });
  }
}
V8e([
  Qt.dispose()
], ge.prototype, "dispose", null);
(function(n) {
  n.View = mr, n.Renderer = fO, n.MouseWheel = hO, n.DefsManager = BM, n.GridManager = aO, n.CoordManager = jM, n.TransformManager = IM, n.HighlightManager = Ap, n.BackgroundManager = cO, n.PanningManager = uO;
})(ge || (ge = {}));
(function(n) {
  n.toStringTag = `X6.${n.name}`;
  function e(t) {
    if (t == null)
      return !1;
    if (t instanceof n)
      return !0;
    const i = t[Symbol.toStringTag];
    return i == null || i === n.toStringTag;
  }
  n.isGraph = e;
})(ge || (ge = {}));
(function(n) {
  function e(t, i) {
    const s = t instanceof HTMLElement ? new n({ container: t }) : new n(t);
    return i != null && s.fromJSON(i), s;
  }
  n.render = e;
})(ge || (ge = {}));
(function(n) {
  n.registerNode = Kt.registry.register, n.registerEdge = qt.registry.register, n.registerView = Gt.registry.register, n.registerAttr = gr.registry.register, n.registerGrid = xo.registry.register, n.registerFilter = ac.registry.register, n.registerNodeTool = hc.registry.register, n.registerEdgeTool = fc.registry.register, n.registerBackground = vh.registry.register, n.registerHighlighter = Nr.registry.register, n.registerPortLayout = El.registry.register, n.registerPortLabelLayout = cc.registry.register, n.registerMarker = Qo.registry.register, n.registerRouter = So.registry.register, n.registerConnector = $l.registry.register, n.registerAnchor = dc.registry.register, n.registerEdgeAnchor = pc.registry.register, n.registerConnectionPoint = gc.registry.register;
})(ge || (ge = {}));
(function(n) {
  n.unregisterNode = Kt.registry.unregister, n.unregisterEdge = qt.registry.unregister, n.unregisterView = Gt.registry.unregister, n.unregisterAttr = gr.registry.unregister, n.unregisterGrid = xo.registry.unregister, n.unregisterFilter = ac.registry.unregister, n.unregisterNodeTool = hc.registry.unregister, n.unregisterEdgeTool = fc.registry.unregister, n.unregisterBackground = vh.registry.unregister, n.unregisterHighlighter = Nr.registry.unregister, n.unregisterPortLayout = El.registry.unregister, n.unregisterPortLabelLayout = cc.registry.unregister, n.unregisterMarker = Qo.registry.unregister, n.unregisterRouter = So.registry.unregister, n.unregisterConnector = $l.registry.unregister, n.unregisterAnchor = dc.registry.unregister, n.unregisterEdgeAnchor = pc.registry.unregister, n.unregisterConnectionPoint = gc.registry.unregister;
})(ge || (ge = {}));
var q8e = function(n, e, t, i) {
  var s = arguments.length, r = s < 3 ? e : i === null ? i = Object.getOwnPropertyDescriptor(e, t) : i, o;
  if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
    r = Reflect.decorate(n, e, t, i);
  else
    for (var l = n.length - 1; l >= 0; l--)
      (o = n[l]) && (r = (s < 3 ? o(r) : s > 3 ? o(e, t, r) : o(e, t)) || r);
  return s > 3 && r && Object.defineProperty(e, t, r), r;
}, W8e = function(n, e) {
  var t = {};
  for (var i in n)
    Object.prototype.hasOwnProperty.call(n, i) && e.indexOf(i) < 0 && (t[i] = n[i]);
  if (n != null && typeof Object.getOwnPropertySymbols == "function")
    for (var s = 0, i = Object.getOwnPropertySymbols(n); s < i.length; s++)
      e.indexOf(i[s]) < 0 && Object.prototype.propertyIsEnumerable.call(n, i[s]) && (t[i[s]] = n[i[s]]);
  return t;
};
class vc extends Kt {
}
(function(n) {
  class e extends zi {
    init() {
      super.init(), this.cell.on("change:*", this.onCellChangeAny, this);
    }
    onCellChangeAny({ key: i }) {
      const s = n.shapeMaps[this.cell.shape];
      if (s) {
        const { effect: r } = s;
        (!r || r.includes(i)) && this.renderHTMLComponent();
      }
    }
    confirmUpdate(i) {
      const s = super.confirmUpdate(i);
      return this.handleAction(s, e.action, () => this.renderHTMLComponent());
    }
    renderHTMLComponent() {
      const i = this.selectors && this.selectors.foContent;
      if (i) {
        nf(i);
        const s = n.shapeMaps[this.cell.shape];
        if (!s)
          return;
        let { html: r } = s;
        typeof r == "function" && (r = r(this.cell)), r && (typeof r == "string" ? i.innerHTML = r : Xo(i, r));
      }
    }
    dispose() {
      this.cell.off("change:*", this.onCellChangeAny, this);
    }
  }
  q8e([
    e.dispose()
  ], e.prototype, "dispose", null), n.View = e, function(t) {
    t.action = "html", t.config({
      bootstrap: [t.action],
      actions: {
        html: t.action
      }
    }), zi.registry.register("html-view", t, !0);
  }(e = n.View || (n.View = {}));
})(vc || (vc = {}));
(function(n) {
  n.config({
    view: "html-view",
    markup: [
      {
        tagName: "rect",
        selector: "body"
      },
      Object.assign({}, kt.getForeignObjectMarkup()),
      {
        tagName: "text",
        selector: "label"
      }
    ],
    attrs: {
      body: {
        fill: "none",
        stroke: "none",
        refWidth: "100%",
        refHeight: "100%"
      },
      fo: {
        refWidth: "100%",
        refHeight: "100%"
      }
    }
  }), Kt.registry.register("html", n, !0);
})(vc || (vc = {}));
(function(n) {
  n.shapeMaps = {};
  function e(t) {
    const { shape: i, html: s, effect: r, inherit: o } = t, l = W8e(t, ["shape", "html", "effect", "inherit"]);
    if (!i)
      throw new Error("should specify shape in config");
    n.shapeMaps[i] = {
      html: s,
      effect: r
    }, ge.registerNode(i, Object.assign({ inherit: o || "html" }, l), !0);
  }
  n.register = e;
})(vc || (vc = {}));
class IC extends Kt {
}
(function(n) {
  function e(t) {
    const i = [], s = kt.getForeignObjectMarkup();
    return t ? i.push({
      tagName: t,
      selector: "body"
    }, s) : i.push(s), i;
  }
  n.config({
    view: "vue-shape-view",
    markup: e(),
    attrs: {
      body: {
        fill: "none",
        stroke: "none",
        refWidth: "100%",
        refHeight: "100%"
      },
      fo: {
        refWidth: "100%",
        refHeight: "100%"
      }
    },
    propHooks(t) {
      if (t.markup == null) {
        const i = t.primer;
        if (i) {
          t.markup = e(i);
          let s = {};
          switch (i) {
            case "circle":
              s = {
                refCx: "50%",
                refCy: "50%",
                refR: "50%"
              };
              break;
            case "ellipse":
              s = {
                refCx: "50%",
                refCy: "50%",
                refRx: "50%",
                refRy: "50%"
              };
              break;
          }
          t.attrs = Ft({}, {
            body: Object.assign({ refWidth: null, refHeight: null }, s)
          }, t.attrs || {});
        }
      }
      return t;
    }
  }), Kt.registry.register("vue-shape", n, !0);
})(IC || (IC = {}));
var X8e = function(n, e) {
  var t = {};
  for (var i in n)
    Object.prototype.hasOwnProperty.call(n, i) && e.indexOf(i) < 0 && (t[i] = n[i]);
  if (n != null && typeof Object.getOwnPropertySymbols == "function")
    for (var s = 0, i = Object.getOwnPropertySymbols(n); s < i.length; s++)
      e.indexOf(i[s]) < 0 && Object.prototype.propertyIsEnumerable.call(n, i[s]) && (t[i[s]] = n[i[s]]);
  return t;
};
const ZM = {};
function bFe(n) {
  const { shape: e, component: t, inherit: i } = n, s = X8e(n, ["shape", "component", "inherit"]);
  if (!e)
    throw new Error("should specify shape in config");
  ZM[e] = {
    component: t
  }, ge.registerNode(e, Object.assign({ inherit: i || "vue-shape" }, s), !0);
}
let Lg = !1;
const Ep = Hn({});
function Y8e(n, e, t, i, s) {
  Lg && (Ep[n] = hR(Z({
    render: () => _e(_p, { to: t }, [_e(e, { node: i, graph: s })]),
    provide: () => ({
      getNode: () => i,
      getGraph: () => s
    })
  })));
}
function H8e(n) {
  Lg && delete Ep[n];
}
function QC() {
  return Lg;
}
function vFe() {
  return Lg = !0, Z({
    setup() {
      return () => _e(sn, {}, Object.keys(Ep).map((n) => _e(Ep[n])));
    }
  });
}
class $p extends zi {
  getComponentContainer() {
    return this.selectors && this.selectors.foContent;
  }
  confirmUpdate(e) {
    const t = super.confirmUpdate(e);
    return this.handleAction(t, $p.action, () => {
      this.renderVueComponent();
    });
  }
  targetId() {
    return `${this.graph.view.cid}:${this.cell.id}`;
  }
  renderVueComponent() {
    this.unmountVueComponent();
    const e = this.getComponentContainer(), t = this.cell, i = this.graph;
    if (e) {
      const { component: s } = ZM[t.shape];
      s && (QC() ? Y8e(this.targetId(), s, e, t, i) : (this.vm = fR({
        render() {
          return _e(s, { node: t, graph: i });
        },
        provide() {
          return {
            getNode: () => t,
            getGraph: () => i
          };
        }
      }), this.vm.mount(e)));
    }
  }
  unmountVueComponent() {
    const e = this.getComponentContainer();
    return this.vm && (this.vm.unmount(), this.vm = null), e && (e.innerHTML = ""), e;
  }
  onMouseDown(e, t, i) {
    const s = e.target;
    if (s.tagName.toLowerCase() === "input") {
      const o = s.getAttribute("type");
      if (o == null || [
        "text",
        "password",
        "number",
        "email",
        "search",
        "tel",
        "url"
      ].includes(o))
        return;
    }
    super.onMouseDown(e, t, i);
  }
  unmount() {
    return QC() && H8e(this.targetId()), this.unmountVueComponent(), super.unmount(), this;
  }
}
(function(n) {
  n.action = "vue", n.config({
    bootstrap: [n.action],
    actions: {
      component: n.action
    }
  }), zi.registry.register("vue-shape-view", n, !0);
})($p || ($p = {}));
const G8e = `.x6-widget-dnd {
  position: absolute;
  top: -10000px;
  left: -10000px;
  z-index: 999999;
  display: none;
  cursor: move;
  opacity: 0.7;
  pointer-events: 'cursor';
}
.x6-widget-dnd.dragging {
  display: inline-block;
}
.x6-widget-dnd.dragging * {
  pointer-events: none !important;
}
.x6-widget-dnd .x6-graph {
  background: transparent;
  box-shadow: none;
}
`;
var U8e = function(n, e, t, i) {
  var s = arguments.length, r = s < 3 ? e : i === null ? i = Object.getOwnPropertyDescriptor(e, t) : i, o;
  if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
    r = Reflect.decorate(n, e, t, i);
  else
    for (var l = n.length - 1; l >= 0; l--)
      (o = n[l]) && (r = (s < 3 ? o(r) : s > 3 ? o(e, t, r) : o(e, t)) || r);
  return s > 3 && r && Object.defineProperty(e, t, r), r;
};
class yc extends dt {
  get targetScroller() {
    return this.options.target.getPlugin("scroller");
  }
  get targetGraph() {
    return this.options.target;
  }
  get targetModel() {
    return this.targetGraph.model;
  }
  get snapline() {
    return this.options.target.getPlugin("snapline");
  }
  constructor(e) {
    super(), this.name = "dnd", this.options = Object.assign(Object.assign({}, yc.defaults), e), this.init();
  }
  init() {
    Pg(this.name, G8e), this.container = document.createElement("div"), Me(this.container, this.prefixClassName("widget-dnd")), this.draggingGraph = new ge(Object.assign(Object.assign({}, this.options.delegateGraphOptions), { container: document.createElement("div"), width: 1, height: 1, async: !1 })), Xo(this.container, this.draggingGraph.container);
  }
  start(e, t) {
    const i = t;
    i.preventDefault(), this.targetModel.startBatch("dnd"), Me(this.container, "dragging"), Tu(this.container, this.options.draggingContainer || document.body), this.sourceNode = e, this.prepareDragging(e, i.clientX, i.clientY);
    const s = this.updateNodePosition(i.clientX, i.clientY);
    this.isSnaplineEnabled() && (this.snapline.captureCursorOffset({
      e: i,
      node: e,
      cell: e,
      view: this.draggingView,
      x: s.x,
      y: s.y
    }), this.draggingNode.on("change:position", this.snap, this)), this.delegateDocumentEvents(yc.documentEvents, i.data);
  }
  isSnaplineEnabled() {
    return this.snapline && this.snapline.isEnabled();
  }
  prepareDragging(e, t, i) {
    const s = this.draggingGraph, r = s.model, o = this.options.getDragNode(e, {
      sourceNode: e,
      draggingGraph: s,
      targetGraph: this.targetGraph
    });
    o.position(0, 0);
    let l = 5;
    if (this.isSnaplineEnabled() && (l += this.snapline.options.tolerance || 0), this.isSnaplineEnabled() || this.options.scaled) {
      const u = this.targetGraph.transform.getScale();
      s.scale(u.sx, u.sy), l *= Math.max(u.sx, u.sy);
    } else
      s.scale(1, 1);
    this.clearDragging(), r.resetCells([o]);
    const a = s.findViewByCell(o);
    a.undelegateEvents(), a.cell.off("changed"), s.fitToContent({
      padding: l,
      allowNewOrigin: "any",
      useCellGeometry: !1
    });
    const c = a.getBBox();
    this.geometryBBox = a.getBBox({ useCellGeometry: !0 }), this.delta = this.geometryBBox.getTopLeft().diff(c.getTopLeft()), this.draggingNode = o, this.draggingView = a, this.draggingBBox = o.getBBox(), this.padding = l, this.originOffset = this.updateGraphPosition(t, i);
  }
  updateGraphPosition(e, t) {
    const i = document.body.scrollTop || document.documentElement.scrollTop, s = document.body.scrollLeft || document.documentElement.scrollLeft, r = this.delta, o = this.geometryBBox, l = this.padding || 5, a = {
      left: e - r.x - o.width / 2 - l + s,
      top: t - r.y - o.height / 2 - l + i
    };
    return this.draggingGraph && fn(this.container, {
      left: `${a.left}px`,
      top: `${a.top}px`
    }), a;
  }
  updateNodePosition(e, t) {
    const i = this.targetGraph.clientToLocal(e, t), s = this.draggingBBox;
    return i.x -= s.width / 2, i.y -= s.height / 2, this.draggingNode.position(i.x, i.y), i;
  }
  snap({ cell: e, current: t, options: i }) {
    const s = e;
    if (i.snapped) {
      const r = this.draggingBBox;
      s.position(r.x + i.tx, r.y + i.ty, { silent: !0 }), this.draggingView.translate(), s.position(t.x, t.y, { silent: !0 }), this.snapOffset = {
        x: i.tx,
        y: i.ty
      };
    } else
      this.snapOffset = null;
  }
  onDragging(e) {
    const t = this.draggingView;
    if (t) {
      e.preventDefault();
      const i = this.normalizeEvent(e), s = i.clientX, r = i.clientY;
      this.updateGraphPosition(s, r);
      const o = this.updateNodePosition(s, r), l = this.targetGraph.options.embedding.enabled, a = (l || this.isSnaplineEnabled()) && this.isInsideValidArea({
        x: s,
        y: r
      });
      if (l) {
        t.setEventData(i, {
          graph: this.targetGraph,
          candidateEmbedView: this.candidateEmbedView
        });
        const c = t.getEventData(i);
        a ? t.processEmbedding(i, c) : t.clearEmbedding(c), this.candidateEmbedView = c.candidateEmbedView;
      }
      this.isSnaplineEnabled() && (a ? this.snapline.snapOnMoving({
        e: i,
        view: t,
        x: o.x,
        y: o.y
      }) : this.snapline.hide());
    }
  }
  onDragEnd(e) {
    const t = this.draggingNode;
    if (t) {
      const i = this.normalizeEvent(e), s = this.draggingView, r = this.draggingBBox, o = this.snapOffset;
      let l = r.x, a = r.y;
      o && (l += o.x, a += o.y), t.position(l, a, { silent: !0 });
      const c = this.drop(t, { x: i.clientX, y: i.clientY }), u = (h) => {
        h ? (this.onDropped(t), this.targetGraph.options.embedding.enabled && s && (s.setEventData(i, {
          cell: h,
          graph: this.targetGraph,
          candidateEmbedView: this.candidateEmbedView
        }), s.finalizeEmbedding(i, s.getEventData(i)))) : this.onDropInvalid(), this.candidateEmbedView = null, this.targetModel.stopBatch("dnd");
      };
      Vb(c) ? (this.undelegateDocumentEvents(), c.then(u)) : u(c);
    }
  }
  clearDragging() {
    this.draggingNode && (this.sourceNode = null, this.draggingNode.remove(), this.draggingNode = null, this.draggingView = null, this.delta = null, this.padding = null, this.snapOffset = null, this.originOffset = null, this.undelegateDocumentEvents());
  }
  onDropped(e) {
    this.draggingNode === e && (this.clearDragging(), nn(this.container, "dragging"), ar(this.container));
  }
  onDropInvalid() {
    const e = this.draggingNode;
    e && this.onDropped(e);
  }
  isInsideValidArea(e) {
    let t, i = null;
    const s = this.targetGraph, r = this.targetScroller;
    this.options.dndContainer && (i = this.getDropArea(this.options.dndContainer));
    const o = i && i.containsPoint(e);
    if (r)
      if (r.options.autoResize)
        t = this.getDropArea(r.container);
      else {
        const l = this.getDropArea(r.container);
        t = this.getDropArea(s.container).intersectsWithRect(l);
      }
    else
      t = this.getDropArea(s.container);
    return !o && t && t.containsPoint(e);
  }
  getDropArea(e) {
    const t = Gb(e), i = document.body.scrollTop || document.documentElement.scrollTop, s = document.body.scrollLeft || document.documentElement.scrollLeft;
    return ue.create({
      x: t.left + parseInt(fn(e, "border-left-width"), 10) - s,
      y: t.top + parseInt(fn(e, "border-top-width"), 10) - i,
      width: e.clientWidth,
      height: e.clientHeight
    });
  }
  drop(e, t) {
    if (this.isInsideValidArea(t)) {
      const i = this.targetGraph, s = i.model, r = i.clientToLocal(t), o = this.sourceNode, l = this.options.getDropNode(e, {
        sourceNode: o,
        draggingNode: e,
        targetGraph: this.targetGraph,
        draggingGraph: this.draggingGraph
      }), a = l.getBBox();
      r.x += a.x - a.width / 2, r.y += a.y - a.height / 2;
      const c = this.snapOffset ? 1 : i.getGridSize();
      l.position(ct.snapToGrid(r.x, c), ct.snapToGrid(r.y, c)), l.removeZIndex();
      const u = this.options.validateNode, h = u ? u(l, {
        sourceNode: o,
        draggingNode: e,
        droppingNode: l,
        targetGraph: i,
        draggingGraph: this.draggingGraph
      }) : !0;
      return typeof h == "boolean" ? h ? (s.addCell(l, { stencil: this.cid }), l) : null : j4e(h).then((f) => f ? (s.addCell(l, { stencil: this.cid }), l) : null);
    }
    return null;
  }
  onRemove() {
    this.draggingGraph && (this.draggingGraph.view.remove(), this.draggingGraph.dispose());
  }
  dispose() {
    this.remove(), Ag(this.name);
  }
}
U8e([
  dt.dispose()
], yc.prototype, "dispose", null);
(function(n) {
  n.defaults = {
    // animation: false,
    getDragNode: (e) => e.clone(),
    getDropNode: (e) => e.clone()
  }, n.documentEvents = {
    mousemove: "onDragging",
    touchmove: "onDragging",
    mouseup: "onDragEnd",
    touchend: "onDragEnd",
    touchcancel: "onDragEnd"
  };
})(yc || (yc = {}));
var K8e = function(n, e, t, i) {
  var s = arguments.length, r = s < 3 ? e : i === null ? i = Object.getOwnPropertyDescriptor(e, t) : i, o;
  if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
    r = Reflect.decorate(n, e, t, i);
  else
    for (var l = n.length - 1; l >= 0; l--)
      (o = n[l]) && (r = (s < 3 ? o(r) : s > 3 ? o(e, t, r) : o(e, t)) || r);
  return s > 3 && r && Object.defineProperty(e, t, r), r;
};
class FM extends dt {
  get model() {
    return this.graph.model;
  }
  get view() {
    return this.graph.renderer.findViewByCell(this.node);
  }
  get containerClassName() {
    return this.prefixClassName("widget-transform");
  }
  get resizeClassName() {
    return `${this.containerClassName}-resize`;
  }
  get rotateClassName() {
    return `${this.containerClassName}-rotate`;
  }
  constructor(e, t, i) {
    super(), this.node = t, this.graph = i, this.options = Object.assign(Object.assign({}, ln.defaultOptions), e), this.render(), this.startListening();
  }
  startListening() {
    this.delegateEvents({
      [`mousedown .${this.resizeClassName}`]: "startResizing",
      [`touchstart .${this.resizeClassName}`]: "startResizing",
      [`mousedown .${this.rotateClassName}`]: "startRotating",
      [`touchstart .${this.rotateClassName}`]: "startRotating"
    }), this.model.on("*", this.update, this), this.graph.on("scale", this.update, this), this.graph.on("translate", this.update, this), this.node.on("removed", this.remove, this), this.model.on("reseted", this.remove, this), this.view.on("cell:knob:mousedown", this.onKnobMouseDown, this), this.view.on("cell:knob:mouseup", this.onKnobMouseUp, this);
  }
  stopListening() {
    this.undelegateEvents(), this.model.off("*", this.update, this), this.graph.off("scale", this.update, this), this.graph.off("translate", this.update, this), this.node.off("removed", this.remove, this), this.model.off("reseted", this.remove, this), this.view.off("cell:knob:mousedown", this.onKnobMouseDown, this), this.view.off("cell:knob:mouseup", this.onKnobMouseUp, this);
  }
  renderHandles() {
    this.container = document.createElement("div");
    const e = document.createElement("div");
    nt(e, "draggable", "false");
    const t = e.cloneNode(!0);
    Me(t, this.rotateClassName);
    const i = ln.POSITIONS.map((s) => {
      const r = e.cloneNode(!0);
      return Me(r, this.resizeClassName), nt(r, "data-position", s), r;
    });
    this.empty(), Xo(this.container, [...i, t]);
  }
  render() {
    return this.renderHandles(), this.view && this.view.addClass(ln.NODE_CLS), Me(this.container, this.containerClassName), $u(this.container, "no-orth-resize", this.options.preserveAspectRatio || !this.options.orthogonalResizing), $u(this.container, "no-resize", !this.options.resizable), $u(this.container, "no-rotate", !this.options.rotatable), this.options.className && Me(this.container, this.options.className), this.graph.container.appendChild(this.container), this.update();
  }
  update() {
    const e = this.graph.matrix(), t = this.node.getBBox();
    t.x *= e.a, t.x += e.e, t.y *= e.d, t.y += e.f, t.width *= e.a, t.height *= e.d;
    const i = st.normalize(this.node.getAngle()), s = i !== 0 ? `rotate(${i}deg)` : "";
    return fn(this.container, {
      transform: s,
      width: t.width,
      height: t.height,
      left: t.x,
      top: t.y
    }), this.updateResizerDirections(), this;
  }
  remove() {
    return this.view && this.view.removeClass(ln.NODE_CLS), super.remove();
  }
  onKnobMouseDown() {
    this.startHandle();
  }
  onKnobMouseUp() {
    this.stopHandle();
  }
  updateResizerDirections() {
    const e = st.normalize(this.node.getAngle()), t = Math.floor(e * (ln.DIRECTIONS.length / 360));
    if (t !== this.prevShift) {
      const i = ln.DIRECTIONS.slice(t).concat(ln.DIRECTIONS.slice(0, t)), s = (o) => `${this.containerClassName}-cursor-${o}`;
      this.container.querySelectorAll(`.${this.resizeClassName}`).forEach((o, l) => {
        nn(o, ln.DIRECTIONS.map((a) => s(a)).join(" ")), Me(o, s(i[l]));
      }), this.prevShift = t;
    }
  }
  getTrueDirection(e) {
    const t = st.normalize(this.node.getAngle());
    let i = ln.POSITIONS.indexOf(e);
    return i += Math.floor(t * (ln.POSITIONS.length / 360)), i %= ln.POSITIONS.length, ln.POSITIONS[i];
  }
  toValidResizeDirection(e) {
    return {
      top: "top-left",
      bottom: "bottom-right",
      left: "bottom-left",
      right: "top-right"
    }[e] || e;
  }
  startResizing(e) {
    e.stopPropagation(), this.model.startBatch("resize", { cid: this.cid });
    const t = nt(e.target, "data-position");
    this.prepareResizing(e, t), this.startAction(e);
  }
  prepareResizing(e, t) {
    const i = this.getTrueDirection(t);
    let s = 0, r = 0;
    t.split("-").forEach((c) => {
      s = { left: -1, right: 1 }[c] || s, r = { top: -1, bottom: 1 }[c] || r;
    });
    const o = this.toValidResizeDirection(t), l = {
      "top-right": "bottomLeft",
      "top-left": "bottomRight",
      "bottom-left": "topRight",
      "bottom-right": "topLeft"
    }[o], a = st.normalize(this.node.getAngle());
    this.setEventData(e, {
      selector: l,
      direction: o,
      trueDirection: i,
      relativeDirection: t,
      angle: a,
      resizeX: s,
      resizeY: r,
      action: "resizing"
    });
  }
  startRotating(e) {
    e.stopPropagation(), this.model.startBatch("rotate", { cid: this.cid });
    const t = this.node.getBBox().getCenter(), i = this.normalizeEvent(e), s = this.graph.snapToGrid(i.clientX, i.clientY);
    this.setEventData(e, {
      center: t,
      action: "rotating",
      angle: st.normalize(this.node.getAngle()),
      start: I.create(s).theta(t)
    }), this.startAction(e);
  }
  onMouseMove(e) {
    const t = this.graph.findViewByCell(this.node);
    let i = this.getEventData(e);
    if (i.action) {
      const s = this.normalizeEvent(e);
      let r = s.clientX, o = s.clientY;
      const l = this.graph.getPlugin("scroller"), a = this.options.restrictedResizing;
      if (a === !0 || typeof a == "number") {
        const d = a === !0 ? 0 : a, p = l ? Math.max(d, 8) : d, g = this.graph.container.getBoundingClientRect();
        r = di(r, g.left + p, g.right - p), o = di(o, g.top + p, g.bottom - p);
      } else
        this.options.autoScrollOnResizing && l && l.autoScroll(r, o);
      const c = this.graph.snapToGrid(r, o), u = this.graph.getGridSize(), h = this.node, f = this.options;
      if (i.action === "resizing") {
        i = i, i.resized || (t && (t.addClass("node-resizing"), this.notify("node:resize", e, t)), i.resized = !0);
        const d = h.getBBox(), p = I.create(c).rotate(i.angle, d.getCenter()).diff(d[i.selector]);
        let g = i.resizeX ? p.x * i.resizeX : d.width, m = i.resizeY ? p.y * i.resizeY : d.height;
        const b = g, y = m;
        if (g = ct.snapToGrid(g, u), m = ct.snapToGrid(m, u), g = Math.max(g, f.minWidth || u), m = Math.max(m, f.minHeight || u), g = Math.min(g, f.maxWidth || 1 / 0), m = Math.min(m, f.maxHeight || 1 / 0), f.preserveAspectRatio) {
          const O = d.width * m / d.height, x = d.height * g / d.width;
          g < O ? m = x : g = O;
        }
        const v = i.relativeDirection;
        if (f.allowReverse && (b <= -g || y <= -m)) {
          let O;
          v === "left" ? b <= -g && (O = "right") : v === "right" ? b <= -g && (O = "left") : v === "top" ? y <= -m && (O = "bottom") : v === "bottom" ? y <= -m && (O = "top") : v === "top-left" ? b <= -g && y <= -m ? O = "bottom-right" : b <= -g ? O = "top-right" : y <= -m && (O = "bottom-left") : v === "top-right" ? b <= -g && y <= -m ? O = "bottom-left" : b <= -g ? O = "top-left" : y <= -m && (O = "bottom-right") : v === "bottom-left" ? b <= -g && y <= -m ? O = "top-right" : b <= -g ? O = "bottom-right" : y <= -m && (O = "top-left") : v === "bottom-right" && (b <= -g && y <= -m ? O = "top-left" : b <= -g ? O = "bottom-left" : y <= -m && (O = "top-right"));
          const x = O;
          this.stopHandle();
          const S = this.container.querySelector(`.${this.resizeClassName}[data-position="${x}"]`);
          this.startHandle(S), this.prepareResizing(e, x), this.onMouseMove(e);
        }
        if (d.width !== g || d.height !== m) {
          const O = {
            ui: !0,
            direction: i.direction,
            relativeDirection: i.relativeDirection,
            trueDirection: i.trueDirection,
            minWidth: f.minWidth,
            minHeight: f.minHeight,
            maxWidth: f.maxWidth,
            maxHeight: f.maxHeight,
            preserveAspectRatio: f.preserveAspectRatio === !0
          };
          h.resize(g, m, O), this.notify("node:resizing", e, t);
        }
      } else if (i.action === "rotating") {
        i = i, i.rotated || (t && (t.addClass("node-rotating"), this.notify("node:rotate", e, t)), i.rotated = !0);
        const d = h.getAngle(), p = i.start - I.create(c).theta(i.center);
        let g = i.angle + p;
        f.rotateGrid && (g = ct.snapToGrid(g, f.rotateGrid)), g = st.normalize(g), d !== g && (h.rotate(g, { absolute: !0 }), this.notify("node:rotating", e, t));
      }
    }
  }
  onMouseUp(e) {
    const t = this.getEventData(e);
    t.action && (this.stopAction(e), this.model.stopBatch(t.action === "resizing" ? "resize" : "rotate", {
      cid: this.cid
    }));
  }
  startHandle(e) {
    if (this.handle = e || null, Me(this.container, `${this.containerClassName}-active`), e) {
      Me(e, `${this.containerClassName}-active-handle`);
      const t = e.getAttribute("data-position");
      if (t) {
        const i = ln.DIRECTIONS[ln.POSITIONS.indexOf(t)];
        Me(this.container, `${this.containerClassName}-cursor-${i}`);
      }
    }
  }
  stopHandle() {
    if (nn(this.container, `${this.containerClassName}-active`), this.handle) {
      nn(this.handle, `${this.containerClassName}-active-handle`);
      const e = this.handle.getAttribute("data-position");
      if (e) {
        const t = ln.DIRECTIONS[ln.POSITIONS.indexOf(e)];
        nn(this.container, `${this.containerClassName}-cursor-${t}`);
      }
      this.handle = null;
    }
  }
  startAction(e) {
    this.startHandle(e.target), this.graph.view.undelegateEvents(), this.delegateDocumentEvents(ln.documentEvents, e.data);
  }
  stopAction(e) {
    this.stopHandle(), this.undelegateDocumentEvents(), this.graph.view.delegateEvents();
    const t = this.graph.findViewByCell(this.node), i = this.getEventData(e);
    t && (t.removeClass(`node-${i.action}`), i.action === "resizing" && i.resized ? this.notify("node:resized", e, t) : i.action === "rotating" && i.rotated && this.notify("node:rotated", e, t));
  }
  notify(e, t, i, s = {}) {
    if (i) {
      const r = i.graph, o = r.view.normalizeEvent(t), l = r.snapToGrid(o.clientX, o.clientY);
      this.trigger(e, Object.assign({
        e: o,
        view: i,
        node: i.cell,
        cell: i.cell,
        x: l.x,
        y: l.y
      }, s));
    }
  }
  dispose() {
    this.stopListening(), this.remove(), this.off();
  }
}
K8e([
  dt.dispose()
], FM.prototype, "dispose", null);
var ln;
(function(n) {
  n.NODE_CLS = "has-widget-transform", n.DIRECTIONS = ["nw", "n", "ne", "e", "se", "s", "sw", "w"], n.POSITIONS = [
    "top-left",
    "top",
    "top-right",
    "right",
    "bottom-right",
    "bottom",
    "bottom-left",
    "left"
  ], n.documentEvents = {
    mousemove: "onMouseMove",
    touchmove: "onMouseMove",
    mouseup: "onMouseUp",
    touchend: "onMouseUp"
  }, n.defaultOptions = {
    minWidth: 0,
    minHeight: 0,
    maxWidth: 1 / 0,
    maxHeight: 1 / 0,
    rotateGrid: 15,
    rotatable: !0,
    preserveAspectRatio: !1,
    orthogonalResizing: !0,
    restrictedResizing: !1,
    autoScrollOnResizing: !0,
    allowReverse: !0
  };
})(ln || (ln = {}));
const J8e = `.x6-widget-transform {
  position: absolute;
  box-sizing: content-box !important;
  margin: -5px 0 0 -5px;
  padding: 4px;
  border: 1px dashed #000;
  border-radius: 5px;
  user-select: none;
  pointer-events: none;
}
.x6-widget-transform > div {
  position: absolute;
  box-sizing: border-box;
  background-color: #fff;
  border: 1px solid #000;
  transition: background-color 0.2s;
  pointer-events: auto;
  -webkit-user-drag: none;
  user-drag: none;
  /* stylelint-disable-line */
}
.x6-widget-transform > div:hover {
  background-color: #d3d3d3;
}
.x6-widget-transform-cursor-n {
  cursor: n-resize;
}
.x6-widget-transform-cursor-s {
  cursor: s-resize;
}
.x6-widget-transform-cursor-e {
  cursor: e-resize;
}
.x6-widget-transform-cursor-w {
  cursor: w-resize;
}
.x6-widget-transform-cursor-ne {
  cursor: ne-resize;
}
.x6-widget-transform-cursor-nw {
  cursor: nw-resize;
}
.x6-widget-transform-cursor-se {
  cursor: se-resize;
}
.x6-widget-transform-cursor-sw {
  cursor: sw-resize;
}
.x6-widget-transform-resize {
  width: 10px;
  height: 10px;
  border-radius: 6px;
}
.x6-widget-transform-resize[data-position='top-left'] {
  top: -5px;
  left: -5px;
}
.x6-widget-transform-resize[data-position='top-right'] {
  top: -5px;
  right: -5px;
}
.x6-widget-transform-resize[data-position='bottom-left'] {
  bottom: -5px;
  left: -5px;
}
.x6-widget-transform-resize[data-position='bottom-right'] {
  right: -5px;
  bottom: -5px;
}
.x6-widget-transform-resize[data-position='top'] {
  top: -5px;
  left: 50%;
  margin-left: -5px;
}
.x6-widget-transform-resize[data-position='bottom'] {
  bottom: -5px;
  left: 50%;
  margin-left: -5px;
}
.x6-widget-transform-resize[data-position='left'] {
  top: 50%;
  left: -5px;
  margin-top: -5px;
}
.x6-widget-transform-resize[data-position='right'] {
  top: 50%;
  right: -5px;
  margin-top: -5px;
}
.x6-widget-transform.prevent-aspect-ratio .x6-widget-transform-resize[data-position='top'],
.x6-widget-transform.prevent-aspect-ratio .x6-widget-transform-resize[data-position='bottom'],
.x6-widget-transform.prevent-aspect-ratio .x6-widget-transform-resize[data-position='left'],
.x6-widget-transform.prevent-aspect-ratio .x6-widget-transform-resize[data-position='right'] {
  display: none;
}
.x6-widget-transform.no-orth-resize .x6-widget-transform-resize[data-position='bottom'],
.x6-widget-transform.no-orth-resize .x6-widget-transform-resize[data-position='left'],
.x6-widget-transform.no-orth-resize .x6-widget-transform-resize[data-position='right'],
.x6-widget-transform.no-orth-resize .x6-widget-transform-resize[data-position='top'] {
  display: none;
}
.x6-widget-transform.no-resize .x6-widget-transform-resize {
  display: none;
}
.x6-widget-transform-rotate {
  top: -20px;
  left: -20px;
  width: 12px;
  height: 12px;
  border-radius: 6px;
  cursor: crosshair;
}
.x6-widget-transform.no-rotate .x6-widget-transform-rotate {
  display: none;
}
.x6-widget-transform-active {
  border-color: transparent;
  pointer-events: all;
}
.x6-widget-transform-active > div {
  display: none;
}
.x6-widget-transform-active > .x6-widget-transform-active-handle {
  display: block;
  background-color: #808080;
}
`;
ge.prototype.createTransformWidget = function(n) {
  const e = this.getPlugin("transform");
  return e && e.createWidget(n), this;
};
ge.prototype.clearTransformWidgets = function() {
  const n = this.getPlugin("transform");
  return n && n.clearWidgets(), this;
};
var eZe = function(n, e, t, i) {
  var s = arguments.length, r = s < 3 ? e : i === null ? i = Object.getOwnPropertyDescriptor(e, t) : i, o;
  if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
    r = Reflect.decorate(n, e, t, i);
  else
    for (var l = n.length - 1; l >= 0; l--)
      (o = n[l]) && (r = (s < 3 ? o(r) : s > 3 ? o(e, t, r) : o(e, t)) || r);
  return s > 3 && r && Object.defineProperty(e, t, r), r;
};
class Oc extends Qt {
  constructor(e = {}) {
    super(), this.name = "transform", this.widgets = /* @__PURE__ */ new Map(), this.disabled = !1, this.options = e, Pg(this.name, J8e);
  }
  init(e) {
    this.graph = e, !this.disabled && this.startListening();
  }
  startListening() {
    this.graph.on("node:click", this.onNodeClick, this), this.graph.on("blank:mousedown", this.onBlankMouseDown, this);
  }
  stopListening() {
    this.graph.off("node:click", this.onNodeClick, this), this.graph.off("blank:mousedown", this.onBlankMouseDown, this);
  }
  enable() {
    this.disabled && (this.disabled = !1, this.startListening());
  }
  disable() {
    this.disabled || (this.disabled = !0, this.stopListening());
  }
  isEnabled() {
    return !this.disabled;
  }
  createWidget(e) {
    this.clearWidgets();
    const t = this.createTransform(e);
    t && (this.widgets.set(e, t), t.on("*", (i, s) => {
      this.trigger(i, s), this.graph.trigger(i, s);
    }));
  }
  onNodeClick({ node: e }) {
    this.createWidget(e);
  }
  onBlankMouseDown() {
    this.clearWidgets();
  }
  createTransform(e) {
    const t = this.getTransformOptions(e);
    return t.resizable || t.rotatable ? new FM(t, e, this.graph) : null;
  }
  getTransformOptions(e) {
    this.options.resizing || (this.options.resizing = {
      enabled: !1
    }), this.options.rotating || (this.options.rotating = {
      enabled: !1
    }), typeof this.options.resizing == "boolean" && (this.options.resizing = {
      enabled: this.options.resizing
    }), typeof this.options.rotating == "boolean" && (this.options.rotating = {
      enabled: this.options.rotating
    });
    const t = Oc.parseOptionGroup(this.graph, e, this.options.resizing), i = Oc.parseOptionGroup(this.graph, e, this.options.rotating);
    return {
      resizable: !!t.enabled,
      minWidth: t.minWidth || 0,
      maxWidth: t.maxWidth || Number.MAX_SAFE_INTEGER,
      minHeight: t.minHeight || 0,
      maxHeight: t.maxHeight || Number.MAX_SAFE_INTEGER,
      orthogonalResizing: typeof t.orthogonal == "boolean" ? t.orthogonal : !0,
      restrictedResizing: !!t.restrict,
      autoScrollOnResizing: typeof t.autoScroll == "boolean" ? t.autoScroll : !0,
      preserveAspectRatio: !!t.preserveAspectRatio,
      allowReverse: typeof t.allowReverse == "boolean" ? t.allowReverse : !0,
      rotatable: !!i.enabled,
      rotateGrid: i.grid || 15
    };
  }
  clearWidgets() {
    this.widgets.forEach((e, t) => {
      this.graph.getCellById(t.id) && e.dispose();
    }), this.widgets.clear();
  }
  dispose() {
    this.clearWidgets(), this.stopListening(), this.off(), Ag(this.name);
  }
}
eZe([
  Qt.dispose()
], Oc.prototype, "dispose", null);
(function(n) {
  function e(t, i, s) {
    const r = {};
    return Object.keys(s || {}).forEach((o) => {
      const l = s[o];
      r[o] = typeof l == "function" ? l.call(t, i) : l;
    }), r;
  }
  n.parseOptionGroup = e;
})(Oc || (Oc = {}));
var tZe = function(n, e, t, i) {
  var s = arguments.length, r = s < 3 ? e : i === null ? i = Object.getOwnPropertyDescriptor(e, t) : i, o;
  if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
    r = Reflect.decorate(n, e, t, i);
  else
    for (var l = n.length - 1; l >= 0; l--)
      (o = n[l]) && (r = (s < 3 ? o(r) : s > 3 ? o(e, t, r) : o(e, t)) || r);
  return s > 3 && r && Object.defineProperty(e, t, r), r;
};
class VM extends dt {
  get graph() {
    return this.options.graph;
  }
  get boxClassName() {
    return this.prefixClassName(ci.classNames.box);
  }
  get $boxes() {
    return tBe(this.container, this.boxClassName);
  }
  get handleOptions() {
    return this.options;
  }
  constructor(e) {
    super(), this.options = e, this.options.model && (this.options.collection = this.options.model.collection), this.options.collection ? this.collection = this.options.collection : (this.collection = new Pp([], {
      comparator: ci.depthComparator
    }), this.options.collection = this.collection), this.boxCount = 0, this.createContainer(), this.startListening();
  }
  startListening() {
    const e = this.graph, t = this.collection;
    this.delegateEvents({
      [`mousedown .${this.boxClassName}`]: "onSelectionBoxMouseDown",
      [`touchstart .${this.boxClassName}`]: "onSelectionBoxMouseDown"
    }, !0), e.on("scale", this.onGraphTransformed, this), e.on("translate", this.onGraphTransformed, this), e.model.on("updated", this.onModelUpdated, this), t.on("added", this.onCellAdded, this), t.on("removed", this.onCellRemoved, this), t.on("reseted", this.onReseted, this), t.on("updated", this.onCollectionUpdated, this), t.on("node:change:position", this.onNodePositionChanged, this), t.on("cell:changed", this.onCellChanged, this);
  }
  stopListening() {
    const e = this.graph, t = this.collection;
    this.undelegateEvents(), e.off("scale", this.onGraphTransformed, this), e.off("translate", this.onGraphTransformed, this), e.model.off("updated", this.onModelUpdated, this), t.off("added", this.onCellAdded, this), t.off("removed", this.onCellRemoved, this), t.off("reseted", this.onReseted, this), t.off("updated", this.onCollectionUpdated, this), t.off("node:change:position", this.onNodePositionChanged, this), t.off("cell:changed", this.onCellChanged, this);
  }
  onRemove() {
    this.stopListening();
  }
  onGraphTransformed() {
    this.updateSelectionBoxes();
  }
  onCellChanged() {
    this.updateSelectionBoxes();
  }
  onNodePositionChanged({ node: e, options: t }) {
    const { showNodeSelectionBox: i, pointerEvents: s } = this.options, { ui: r, selection: o, translateBy: l, snapped: a } = t, c = (i !== !0 || s && this.getPointerEventsValue(s) === "none") && !this.translating && !o, u = r && l && e.id === l;
    if (c && (u || a)) {
      this.translating = !0;
      const h = e.position(), f = e.previous("position"), d = h.x - f.x, p = h.y - f.y;
      (d !== 0 || p !== 0) && this.translateSelectedNodes(d, p, e, t), this.translating = !1;
    }
  }
  onModelUpdated({ removed: e }) {
    e && e.length && this.unselect(e);
  }
  isEmpty() {
    return this.length <= 0;
  }
  isSelected(e) {
    return this.collection.has(e);
  }
  get length() {
    return this.collection.length;
  }
  get cells() {
    return this.collection.toArray();
  }
  select(e, t = {}) {
    t.dryrun = !0;
    const i = this.filter(Array.isArray(e) ? e : [e]);
    return this.collection.add(i, t), this;
  }
  unselect(e, t = {}) {
    return t.dryrun = !0, this.collection.remove(Array.isArray(e) ? e : [e], t), this;
  }
  reset(e, t = {}) {
    if (e) {
      if (t.batch) {
        const c = this.filter(Array.isArray(e) ? e : [e]);
        return this.collection.reset(c, Object.assign(Object.assign({}, t), { ui: !0 })), this;
      }
      const i = this.cells, s = this.filter(Array.isArray(e) ? e : [e]), r = {}, o = {};
      i.forEach((c) => r[c.id] = c), s.forEach((c) => o[c.id] = c);
      const l = [], a = [];
      return s.forEach((c) => {
        r[c.id] || l.push(c);
      }), i.forEach((c) => {
        o[c.id] || a.push(c);
      }), a.length && this.unselect(a, Object.assign(Object.assign({}, t), { ui: !0 })), l.length && this.select(l, Object.assign(Object.assign({}, t), { ui: !0 })), a.length === 0 && l.length === 0 && this.updateContainer(), this;
    }
    return this.clean(t);
  }
  clean(e = {}) {
    return this.length && (e.batch === !1 ? this.unselect(this.cells, e) : this.collection.reset([], Object.assign(Object.assign({}, e), { ui: !0 }))), this;
  }
  setFilter(e) {
    this.options.filter = e;
  }
  setContent(e) {
    this.options.content = e;
  }
  startSelecting(e) {
    e = this.normalizeEvent(e), this.clean();
    let t, i;
    const s = this.graph.container;
    if (e.offsetX != null && e.offsetY != null && s.contains(e.target))
      t = e.offsetX, i = e.offsetY;
    else {
      const r = Gb(s), o = s.scrollLeft, l = s.scrollTop;
      t = e.clientX - r.left + window.pageXOffset + o, i = e.clientY - r.top + window.pageYOffset + l;
    }
    fn(this.container, {
      top: i,
      left: t,
      width: 1,
      height: 1
    }), this.setEventData(e, {
      action: "selecting",
      clientX: e.clientX,
      clientY: e.clientY,
      offsetX: t,
      offsetY: i,
      scrollerX: 0,
      scrollerY: 0,
      moving: !1
    }), this.delegateDocumentEvents(ci.documentEvents, e.data);
  }
  filter(e) {
    const t = this.options.filter;
    return e.filter((i) => Array.isArray(t) ? t.some((s) => typeof s == "string" ? i.shape === s : i.id === s.id) : typeof t == "function" ? Ee(t, this.graph, i) : !0);
  }
  stopSelecting(e) {
    const t = this.graph, i = this.getEventData(e);
    switch (i.action) {
      case "selecting": {
        let r = NBe(this.container), o = IBe(this.container);
        const l = Gb(this.container), a = t.pageToLocal(l.left, l.top), c = t.transform.getScale();
        r /= c.sx, o /= c.sy;
        const u = new ue(a.x, a.y, r, o), h = this.getCellViewsInArea(u).map((f) => f.cell);
        this.reset(h, { batch: !0 }), this.hideRubberband();
        break;
      }
      case "translating": {
        const r = t.snapToGrid(e.clientX, e.clientY);
        if (!this.options.following) {
          const o = i;
          this.updateSelectedNodesPosition({
            dx: o.clientX - o.originX,
            dy: o.clientY - o.originY
          });
        }
        this.graph.model.stopBatch("move-selection"), this.notifyBoxEvent("box:mouseup", e, r.x, r.y);
        break;
      }
      default: {
        this.clean();
        break;
      }
    }
  }
  onMouseUp(e) {
    this.getEventData(e).action && (this.stopSelecting(e), this.undelegateDocumentEvents());
  }
  onSelectionBoxMouseDown(e) {
    this.options.following || e.stopPropagation();
    const t = this.normalizeEvent(e);
    this.options.movable && this.startTranslating(t);
    const i = this.getCellViewFromElem(t.target);
    this.setEventData(t, { activeView: i });
    const s = this.graph.snapToGrid(t.clientX, t.clientY);
    this.notifyBoxEvent("box:mousedown", t, s.x, s.y), this.delegateDocumentEvents(ci.documentEvents, t.data);
  }
  startTranslating(e) {
    this.graph.model.startBatch("move-selection");
    const t = this.graph.snapToGrid(e.clientX, e.clientY);
    this.setEventData(e, {
      action: "translating",
      clientX: t.x,
      clientY: t.y,
      originX: t.x,
      originY: t.y
    });
  }
  getRestrictArea() {
    const e = this.graph.options.translating.restrict, t = typeof e == "function" ? Ee(e, this.graph, null) : e;
    return typeof t == "number" ? this.graph.transform.getGraphArea().inflate(t) : t === !0 ? this.graph.transform.getGraphArea() : t || null;
  }
  getSelectionOffset(e, t) {
    let i = e.x - t.clientX, s = e.y - t.clientY;
    const r = this.getRestrictArea();
    if (r) {
      const o = this.collection.toArray(), l = He.getCellsBBox(o, { deep: !0 }) || ue.create(), a = r.x - l.x, c = r.y - l.y, u = r.x + r.width - (l.x + l.width), h = r.y + r.height - (l.y + l.height);
      if (i < a && (i = a), s < c && (s = c), u < i && (i = u), h < s && (s = h), !this.options.following) {
        const f = e.x - t.originX, d = e.y - t.originY;
        i = f <= a || f >= u ? 0 : i, s = d <= c || d >= h ? 0 : s;
      }
    }
    return {
      dx: i,
      dy: s
    };
  }
  updateElementPosition(e, t, i) {
    const s = fn(e, "left"), r = fn(e, "top"), o = s ? parseFloat(s) : 0, l = r ? parseFloat(r) : 0;
    fn(e, "left", o + t), fn(e, "top", l + i);
  }
  updateSelectedNodesPosition(e) {
    const { dx: t, dy: i } = e;
    if (t || i)
      if (this.translateSelectedNodes(t, i), this.boxesUpdated)
        this.collection.length > 1 && this.updateSelectionBoxes();
      else {
        const s = this.graph.transform.getScale();
        for (let r = 0, o = this.$boxes, l = o.length; r < l; r += 1)
          this.updateElementPosition(o[r], t * s.sx, i * s.sy);
        this.updateElementPosition(this.selectionContainer, t * s.sx, i * s.sy);
      }
  }
  autoScrollGraph(e, t) {
    const i = this.graph.getPlugin("scroller");
    return i ? i.autoScroll(e, t) : { scrollerX: 0, scrollerY: 0 };
  }
  adjustSelection(e) {
    const t = this.normalizeEvent(e), i = this.getEventData(t);
    switch (i.action) {
      case "selecting": {
        const r = i;
        r.moving !== !0 && (Tu(this.container, this.graph.container), this.showRubberband(), r.moving = !0);
        const { scrollerX: o, scrollerY: l } = this.autoScrollGraph(t.clientX, t.clientY);
        r.scrollerX += o, r.scrollerY += l;
        const a = t.clientX - r.clientX + r.scrollerX, c = t.clientY - r.clientY + r.scrollerY, u = parseInt(fn(this.container, "left") || "0", 10), h = parseInt(fn(this.container, "top") || "0", 10);
        fn(this.container, {
          left: a < 0 ? r.offsetX + a : u,
          top: c < 0 ? r.offsetY + c : h,
          width: Math.abs(a),
          height: Math.abs(c)
        });
        break;
      }
      case "translating": {
        const r = this.graph.snapToGrid(t.clientX, t.clientY), o = i, l = this.getSelectionOffset(r, o);
        this.options.following ? this.updateSelectedNodesPosition(l) : this.updateContainerPosition(l), l.dx && (o.clientX = r.x), l.dy && (o.clientY = r.y), this.notifyBoxEvent("box:mousemove", e, r.x, r.y);
        break;
      }
    }
    this.boxesUpdated = !1;
  }
  translateSelectedNodes(e, t, i, s) {
    const r = {}, o = [];
    if (i && (r[i.id] = !0), this.collection.toArray().forEach((l) => {
      l.getDescendants({ deep: !0 }).forEach((a) => {
        r[a.id] = !0;
      });
    }), s && s.translateBy) {
      const l = this.graph.getCellById(s.translateBy);
      l && (r[l.id] = !0, l.getDescendants({ deep: !0 }).forEach((a) => {
        r[a.id] = !0;
      }), o.push(l));
    }
    this.collection.toArray().forEach((l) => {
      if (!r[l.id]) {
        const a = Object.assign(Object.assign({}, s), { selection: this.cid, exclude: o });
        l.translate(e, t, a), this.graph.model.getConnectedEdges(l).forEach((c) => {
          r[c.id] || (c.translate(e, t, a), r[c.id] = !0);
        });
      }
    });
  }
  getCellViewsInArea(e) {
    const t = this.graph, i = {
      strict: this.options.strict
    };
    let s = [];
    return this.options.rubberNode && (s = s.concat(t.model.getNodesInArea(e, i).map((r) => t.renderer.findViewByCell(r)).filter((r) => r != null))), this.options.rubberEdge && (s = s.concat(t.model.getEdgesInArea(e, i).map((r) => t.renderer.findViewByCell(r)).filter((r) => r != null))), s;
  }
  notifyBoxEvent(e, t, i, s) {
    const o = this.getEventData(t).activeView;
    this.trigger(e, { e: t, view: o, x: i, y: s, cell: o.cell });
  }
  getSelectedClassName(e) {
    return this.prefixClassName(`${e.isNode() ? "node" : "edge"}-selected`);
  }
  addCellSelectedClassName(e) {
    const t = this.graph.renderer.findViewByCell(e);
    t && t.addClass(this.getSelectedClassName(e));
  }
  removeCellUnSelectedClassName(e) {
    const t = this.graph.renderer.findViewByCell(e);
    t && t.removeClass(this.getSelectedClassName(e));
  }
  destroySelectionBox(e) {
    this.removeCellUnSelectedClassName(e), this.canShowSelectionBox(e) && (ar(this.container.querySelector(`[data-cell-id="${e.id}"]`)), this.$boxes.length === 0 && this.hide(), this.boxCount = Math.max(0, this.boxCount - 1));
  }
  destroyAllSelectionBoxes(e) {
    e.forEach((t) => this.removeCellUnSelectedClassName(t)), this.hide(), ar(this.$boxes), this.boxCount = 0;
  }
  hide() {
    nn(this.container, this.prefixClassName(ci.classNames.rubberband)), nn(this.container, this.prefixClassName(ci.classNames.selected));
  }
  showRubberband() {
    Me(this.container, this.prefixClassName(ci.classNames.rubberband));
  }
  hideRubberband() {
    nn(this.container, this.prefixClassName(ci.classNames.rubberband));
  }
  showSelected() {
    nO(this.container, "style"), Me(this.container, this.prefixClassName(ci.classNames.selected));
  }
  createContainer() {
    this.container = document.createElement("div"), Me(this.container, this.prefixClassName(ci.classNames.root)), this.options.className && Me(this.container, this.options.className), this.selectionContainer = document.createElement("div"), Me(this.selectionContainer, this.prefixClassName(ci.classNames.inner)), this.selectionContent = document.createElement("div"), Me(this.selectionContent, this.prefixClassName(ci.classNames.content)), Xo(this.selectionContainer, this.selectionContent), nt(this.selectionContainer, "data-selection-length", this.collection.length), $_(this.container, this.selectionContainer);
  }
  updateContainerPosition(e) {
    (e.dx || e.dy) && this.updateElementPosition(this.selectionContainer, e.dx, e.dy);
  }
  updateContainer() {
    const e = { x: 1 / 0, y: 1 / 0 }, t = { x: 0, y: 0 };
    this.collection.toArray().filter((r) => this.canShowSelectionBox(r)).forEach((r) => {
      const o = this.graph.renderer.findViewByCell(r);
      if (o) {
        const l = o.getBBox({
          useCellGeometry: !0
        });
        e.x = Math.min(e.x, l.x), e.y = Math.min(e.y, l.y), t.x = Math.max(t.x, l.x + l.width), t.y = Math.max(t.y, l.y + l.height);
      }
    }), fn(this.selectionContainer, {
      position: "absolute",
      pointerEvents: "none",
      left: e.x,
      top: e.y,
      width: t.x - e.x,
      height: t.y - e.y
    }), nt(this.selectionContainer, "data-selection-length", this.collection.length);
    const s = this.options.content;
    if (s)
      if (typeof s == "function") {
        const r = Ee(s, this.graph, this, this.selectionContent);
        r && (this.selectionContent.innerHTML = r);
      } else
        this.selectionContent.innerHTML = s;
    this.collection.length > 0 && !this.container.parentNode ? Tu(this.container, this.graph.container) : this.collection.length <= 0 && this.container.parentNode && this.container.parentNode.removeChild(this.container);
  }
  canShowSelectionBox(e) {
    return e.isNode() && this.options.showNodeSelectionBox === !0 || e.isEdge() && this.options.showEdgeSelectionBox === !0;
  }
  getPointerEventsValue(e) {
    return typeof e == "string" ? e : e(this.cells);
  }
  createSelectionBox(e) {
    if (this.addCellSelectedClassName(e), this.canShowSelectionBox(e)) {
      const t = this.graph.renderer.findViewByCell(e);
      if (t) {
        const i = t.getBBox({
          useCellGeometry: !0
        }), s = this.boxClassName, r = document.createElement("div"), o = this.options.pointerEvents;
        Me(r, s), Me(r, `${s}-${e.isNode() ? "node" : "edge"}`), nt(r, "data-cell-id", e.id), fn(r, {
          position: "absolute",
          left: i.x,
          top: i.y,
          width: i.width,
          height: i.height,
          pointerEvents: o ? this.getPointerEventsValue(o) : "auto"
        }), Tu(r, this.container), this.showSelected(), this.boxCount += 1;
      }
    }
  }
  updateSelectionBoxes() {
    this.collection.length > 0 && (this.boxesUpdated = !0, this.confirmUpdate());
  }
  confirmUpdate() {
    if (this.boxCount) {
      this.hide();
      for (let e = 0, t = this.$boxes, i = t.length; e < i; e += 1) {
        const s = t[e], r = nt(s, "data-cell-id");
        ar(s), this.boxCount -= 1;
        const o = this.collection.get(r);
        o && this.createSelectionBox(o);
      }
      this.updateContainer();
    }
    return 0;
  }
  getCellViewFromElem(e) {
    const t = e.getAttribute("data-cell-id");
    if (t) {
      const i = this.collection.get(t);
      if (i)
        return this.graph.renderer.findViewByCell(i);
    }
    return null;
  }
  onCellRemoved({ cell: e }) {
    this.destroySelectionBox(e), this.updateContainer();
  }
  onReseted({ previous: e, current: t }) {
    this.destroyAllSelectionBoxes(e), t.forEach((i) => {
      this.listenCellRemoveEvent(i), this.createSelectionBox(i);
    }), this.updateContainer();
  }
  onCellAdded({ cell: e }) {
    this.listenCellRemoveEvent(e), this.createSelectionBox(e), this.updateContainer();
  }
  listenCellRemoveEvent(e) {
    e.off("removed", this.onCellRemoved, this), e.on("removed", this.onCellRemoved, this);
  }
  onCollectionUpdated({ added: e, removed: t, options: i }) {
    e.forEach((r) => {
      this.trigger("cell:selected", { cell: r, options: i }), r.isNode() ? this.trigger("node:selected", { cell: r, options: i, node: r }) : r.isEdge() && this.trigger("edge:selected", { cell: r, options: i, edge: r });
    }), t.forEach((r) => {
      this.trigger("cell:unselected", { cell: r, options: i }), r.isNode() ? this.trigger("node:unselected", { cell: r, options: i, node: r }) : r.isEdge() && this.trigger("edge:unselected", { cell: r, options: i, edge: r });
    });
    const s = {
      added: e,
      removed: t,
      options: i,
      selected: this.cells.filter((r) => !!this.graph.getCellById(r.id))
    };
    this.trigger("selection:changed", s);
  }
  // #endregion
  dispose() {
    this.clean(), this.remove(), this.off();
  }
}
tZe([
  dt.dispose()
], VM.prototype, "dispose", null);
var ci;
(function(n) {
  const e = "widget-selection";
  n.classNames = {
    root: e,
    inner: `${e}-inner`,
    box: `${e}-box`,
    content: `${e}-content`,
    rubberband: `${e}-rubberband`,
    selected: `${e}-selected`
  }, n.documentEvents = {
    mousemove: "adjustSelection",
    touchmove: "adjustSelection",
    mouseup: "onMouseUp",
    touchend: "onMouseUp",
    touchcancel: "onMouseUp"
  };
  function t(i) {
    return i.getAncestors().length;
  }
  n.depthComparator = t;
})(ci || (ci = {}));
const nZe = `.x6-widget-selection {
  position: absolute;
  top: 0;
  left: 0;
  display: none;
  width: 0;
  height: 0;
  touch-action: none;
}
.x6-widget-selection-rubberband {
  display: block;
  overflow: visible;
  opacity: 0.3;
}
.x6-widget-selection-selected {
  display: block;
}
.x6-widget-selection-box {
  cursor: move;
}
.x6-widget-selection-inner[data-selection-length='0'],
.x6-widget-selection-inner[data-selection-length='1'] {
  display: none;
}
.x6-widget-selection-content {
  position: absolute;
  top: 100%;
  right: -20px;
  left: -20px;
  margin-top: 30px;
  padding: 6px;
  line-height: 14px;
  text-align: center;
  border-radius: 6px;
}
.x6-widget-selection-content:empty {
  display: none;
}
.x6-widget-selection-rubberband {
  background-color: #3498db;
  border: 2px solid #2980b9;
}
.x6-widget-selection-box {
  box-sizing: content-box !important;
  margin-top: -4px;
  margin-left: -4px;
  padding-right: 4px;
  padding-bottom: 4px;
  border: 2px dashed #feb663;
  box-shadow: 2px 2px 5px #d3d3d3;
}
.x6-widget-selection-inner {
  box-sizing: content-box !important;
  margin-top: -8px;
  margin-left: -8px;
  padding-right: 12px;
  padding-bottom: 12px;
  border: 2px solid #feb663;
  box-shadow: 2px 2px 5px #d3d3d3;
}
.x6-widget-selection-content {
  color: #fff;
  font-size: 10px;
  background-color: #6a6b8a;
}
`;
ge.prototype.isSelectionEnabled = function() {
  const n = this.getPlugin("selection");
  return n ? n.isEnabled() : !1;
};
ge.prototype.enableSelection = function() {
  const n = this.getPlugin("selection");
  return n && n.enable(), this;
};
ge.prototype.disableSelection = function() {
  const n = this.getPlugin("selection");
  return n && n.disable(), this;
};
ge.prototype.toggleSelection = function(n) {
  const e = this.getPlugin("selection");
  return e && e.toggleEnabled(n), this;
};
ge.prototype.isMultipleSelection = function() {
  const n = this.getPlugin("selection");
  return n ? n.isMultipleSelection() : !1;
};
ge.prototype.enableMultipleSelection = function() {
  const n = this.getPlugin("selection");
  return n && n.enableMultipleSelection(), this;
};
ge.prototype.disableMultipleSelection = function() {
  const n = this.getPlugin("selection");
  return n && n.disableMultipleSelection(), this;
};
ge.prototype.toggleMultipleSelection = function(n) {
  const e = this.getPlugin("selection");
  return e && e.toggleMultipleSelection(n), this;
};
ge.prototype.isSelectionMovable = function() {
  const n = this.getPlugin("selection");
  return n ? n.isSelectionMovable() : !1;
};
ge.prototype.enableSelectionMovable = function() {
  const n = this.getPlugin("selection");
  return n && n.enableSelectionMovable(), this;
};
ge.prototype.disableSelectionMovable = function() {
  const n = this.getPlugin("selection");
  return n && n.disableSelectionMovable(), this;
};
ge.prototype.toggleSelectionMovable = function(n) {
  const e = this.getPlugin("selection");
  return e && e.toggleSelectionMovable(n), this;
};
ge.prototype.isRubberbandEnabled = function() {
  const n = this.getPlugin("selection");
  return n ? n.isRubberbandEnabled() : !1;
};
ge.prototype.enableRubberband = function() {
  const n = this.getPlugin("selection");
  return n && n.enableRubberband(), this;
};
ge.prototype.disableRubberband = function() {
  const n = this.getPlugin("selection");
  return n && n.disableRubberband(), this;
};
ge.prototype.toggleRubberband = function(n) {
  const e = this.getPlugin("selection");
  return e && e.toggleRubberband(n), this;
};
ge.prototype.isStrictRubberband = function() {
  const n = this.getPlugin("selection");
  return n ? n.isStrictRubberband() : !1;
};
ge.prototype.enableStrictRubberband = function() {
  const n = this.getPlugin("selection");
  return n && n.enableStrictRubberband(), this;
};
ge.prototype.disableStrictRubberband = function() {
  const n = this.getPlugin("selection");
  return n && n.disableStrictRubberband(), this;
};
ge.prototype.toggleStrictRubberband = function(n) {
  const e = this.getPlugin("selection");
  return e && e.toggleStrictRubberband(n), this;
};
ge.prototype.setRubberbandModifiers = function(n) {
  const e = this.getPlugin("selection");
  return e && e.setRubberbandModifiers(n), this;
};
ge.prototype.setSelectionFilter = function(n) {
  const e = this.getPlugin("selection");
  return e && e.setSelectionFilter(n), this;
};
ge.prototype.setSelectionDisplayContent = function(n) {
  const e = this.getPlugin("selection");
  return e && e.setSelectionDisplayContent(n), this;
};
ge.prototype.isSelectionEmpty = function() {
  const n = this.getPlugin("selection");
  return n ? n.isEmpty() : !0;
};
ge.prototype.cleanSelection = function(n) {
  const e = this.getPlugin("selection");
  return e && e.clean(n), this;
};
ge.prototype.resetSelection = function(n, e) {
  const t = this.getPlugin("selection");
  return t && t.reset(n, e), this;
};
ge.prototype.getSelectedCells = function() {
  const n = this.getPlugin("selection");
  return n ? n.getSelectedCells() : [];
};
ge.prototype.getSelectedCellCount = function() {
  const n = this.getPlugin("selection");
  return n ? n.getSelectedCellCount() : 0;
};
ge.prototype.isSelected = function(n) {
  const e = this.getPlugin("selection");
  return e ? e.isSelected(n) : !1;
};
ge.prototype.select = function(n, e) {
  const t = this.getPlugin("selection");
  return t && t.select(n, e), this;
};
ge.prototype.unselect = function(n, e) {
  const t = this.getPlugin("selection");
  return t && t.unselect(n, e), this;
};
var iZe = function(n, e, t, i) {
  var s = arguments.length, r = s < 3 ? e : i === null ? i = Object.getOwnPropertyDescriptor(e, t) : i, o;
  if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
    r = Reflect.decorate(n, e, t, i);
  else
    for (var l = n.length - 1; l >= 0; l--)
      (o = n[l]) && (r = (s < 3 ? o(r) : s > 3 ? o(e, t, r) : o(e, t)) || r);
  return s > 3 && r && Object.defineProperty(e, t, r), r;
};
class Ch extends Qt {
  get rubberbandDisabled() {
    return this.options.enabled !== !0 || this.options.rubberband !== !0;
  }
  get disabled() {
    return this.options.enabled !== !0;
  }
  get length() {
    return this.selectionImpl.length;
  }
  get cells() {
    return this.selectionImpl.cells;
  }
  constructor(e = {}) {
    super(), this.name = "selection", this.movedMap = /* @__PURE__ */ new WeakMap(), this.unselectMap = /* @__PURE__ */ new WeakMap(), this.options = Object.assign(Object.assign({ enabled: !0 }, Ch.defaultOptions), e), Pg(this.name, nZe);
  }
  init(e) {
    this.graph = e, this.selectionImpl = new VM(Object.assign(Object.assign({}, this.options), { graph: e })), this.setup(), this.startListening();
  }
  // #region api
  isEnabled() {
    return !this.disabled;
  }
  enable() {
    this.disabled && (this.options.enabled = !0);
  }
  disable() {
    this.disabled || (this.options.enabled = !1);
  }
  toggleEnabled(e) {
    return e != null ? e !== this.isEnabled() && (e ? this.enable() : this.disable()) : this.isEnabled() ? this.disable() : this.enable(), this;
  }
  isMultipleSelection() {
    return this.isMultiple();
  }
  enableMultipleSelection() {
    return this.enableMultiple(), this;
  }
  disableMultipleSelection() {
    return this.disableMultiple(), this;
  }
  toggleMultipleSelection(e) {
    return e != null ? e !== this.isMultipleSelection() && (e ? this.enableMultipleSelection() : this.disableMultipleSelection()) : this.isMultipleSelection() ? this.disableMultipleSelection() : this.enableMultipleSelection(), this;
  }
  isSelectionMovable() {
    return this.options.movable !== !1;
  }
  enableSelectionMovable() {
    return this.selectionImpl.options.movable = !0, this;
  }
  disableSelectionMovable() {
    return this.selectionImpl.options.movable = !1, this;
  }
  toggleSelectionMovable(e) {
    return e != null ? e !== this.isSelectionMovable() && (e ? this.enableSelectionMovable() : this.disableSelectionMovable()) : this.isSelectionMovable() ? this.disableSelectionMovable() : this.enableSelectionMovable(), this;
  }
  isRubberbandEnabled() {
    return !this.rubberbandDisabled;
  }
  enableRubberband() {
    return this.rubberbandDisabled && (this.options.rubberband = !0), this;
  }
  disableRubberband() {
    return this.rubberbandDisabled || (this.options.rubberband = !1), this;
  }
  toggleRubberband(e) {
    return e != null ? e !== this.isRubberbandEnabled() && (e ? this.enableRubberband() : this.disableRubberband()) : this.isRubberbandEnabled() ? this.disableRubberband() : this.enableRubberband(), this;
  }
  isStrictRubberband() {
    return this.selectionImpl.options.strict === !0;
  }
  enableStrictRubberband() {
    return this.selectionImpl.options.strict = !0, this;
  }
  disableStrictRubberband() {
    return this.selectionImpl.options.strict = !1, this;
  }
  toggleStrictRubberband(e) {
    return e != null ? e !== this.isStrictRubberband() && (e ? this.enableStrictRubberband() : this.disableStrictRubberband()) : this.isStrictRubberband() ? this.disableStrictRubberband() : this.enableStrictRubberband(), this;
  }
  setRubberbandModifiers(e) {
    this.setModifiers(e);
  }
  setSelectionFilter(e) {
    return this.setFilter(e), this;
  }
  setSelectionDisplayContent(e) {
    return this.setContent(e), this;
  }
  isEmpty() {
    return this.length <= 0;
  }
  clean(e = {}) {
    return this.selectionImpl.clean(e), this;
  }
  reset(e, t = {}) {
    return this.selectionImpl.reset(e ? this.getCells(e) : [], t), this;
  }
  getSelectedCells() {
    return this.cells;
  }
  getSelectedCellCount() {
    return this.length;
  }
  isSelected(e) {
    return this.selectionImpl.isSelected(e);
  }
  select(e, t = {}) {
    const i = this.getCells(e);
    return i.length && (this.isMultiple() ? this.selectionImpl.select(i, t) : this.reset(i.slice(0, 1), t)), this;
  }
  unselect(e, t = {}) {
    return this.selectionImpl.unselect(this.getCells(e), t), this;
  }
  // #endregion
  setup() {
    this.selectionImpl.on("*", (e, t) => {
      this.trigger(e, t), this.graph.trigger(e, t);
    });
  }
  startListening() {
    this.graph.on("blank:mousedown", this.onBlankMouseDown, this), this.graph.on("blank:click", this.onBlankClick, this), this.graph.on("cell:mousemove", this.onCellMouseMove, this), this.graph.on("cell:mouseup", this.onCellMouseUp, this), this.selectionImpl.on("box:mousedown", this.onBoxMouseDown, this);
  }
  stopListening() {
    this.graph.off("blank:mousedown", this.onBlankMouseDown, this), this.graph.off("blank:click", this.onBlankClick, this), this.graph.off("cell:mousemove", this.onCellMouseMove, this), this.graph.off("cell:mouseup", this.onCellMouseUp, this), this.selectionImpl.off("box:mousedown", this.onBoxMouseDown, this);
  }
  onBlankMouseDown({ e }) {
    if (!this.allowBlankMouseDown(e))
      return;
    const t = this.graph.panning.allowPanning(e, !0), i = this.graph.getPlugin("scroller"), s = i && i.allowPanning(e, !0);
    (this.allowRubberband(e, !0) || this.allowRubberband(e) && !s && !t) && this.startRubberband(e);
  }
  allowBlankMouseDown(e) {
    const t = this.options.eventTypes;
    return (t == null ? void 0 : t.includes("leftMouseDown")) && e.button === 0 || (t == null ? void 0 : t.includes("mouseWheelDown")) && e.button === 1;
  }
  onBlankClick() {
    this.clean();
  }
  allowRubberband(e, t) {
    return !this.rubberbandDisabled && No.isMatch(e, this.options.modifiers, t);
  }
  allowMultipleSelection(e) {
    return this.isMultiple() && No.isMatch(e, this.options.multipleSelectionModifiers);
  }
  onCellMouseMove({ cell: e }) {
    this.movedMap.set(e, !0);
  }
  onCellMouseUp({ e, cell: t }) {
    const i = this.options;
    let s = this.disabled;
    !s && this.movedMap.has(t) && (s = i.selectCellOnMoved === !1, s || (s = i.selectNodeOnMoved === !1 && t.isNode()), s || (s = i.selectEdgeOnMoved === !1 && t.isEdge())), s || (this.allowMultipleSelection(e) ? this.unselectMap.has(t) ? this.unselectMap.delete(t) : this.isSelected(t) ? this.unselect(t) : this.select(t) : this.reset(t)), this.movedMap.delete(t);
  }
  onBoxMouseDown({ e, cell: t }) {
    this.disabled || this.allowMultipleSelection(e) && (this.unselect(t), this.unselectMap.set(t, !0));
  }
  getCells(e) {
    return (Array.isArray(e) ? e : [e]).map((t) => typeof t == "string" ? this.graph.getCellById(t) : t).filter((t) => t != null);
  }
  startRubberband(e) {
    return this.rubberbandDisabled || this.selectionImpl.startSelecting(e), this;
  }
  isMultiple() {
    return this.options.multiple !== !1;
  }
  enableMultiple() {
    return this.options.multiple = !0, this;
  }
  disableMultiple() {
    return this.options.multiple = !1, this;
  }
  setModifiers(e) {
    return this.options.modifiers = e, this;
  }
  setContent(e) {
    return this.selectionImpl.setContent(e), this;
  }
  setFilter(e) {
    return this.selectionImpl.setFilter(e), this;
  }
  dispose() {
    this.stopListening(), this.off(), this.selectionImpl.dispose(), Ag(this.name);
  }
}
iZe([
  Qt.dispose()
], Ch.prototype, "dispose", null);
(function(n) {
  n.defaultOptions = {
    rubberband: !1,
    rubberNode: !0,
    rubberEdge: !1,
    pointerEvents: "auto",
    multiple: !0,
    multipleSelectionModifiers: ["ctrl", "meta"],
    movable: !0,
    strict: !1,
    selectCellOnMoved: !1,
    selectNodeOnMoved: !1,
    selectEdgeOnMoved: !1,
    following: !0,
    content: null,
    eventTypes: ["leftMouseDown", "mouseWheelDown"]
  };
})(Ch || (Ch = {}));
class sZe {
  constructor() {
    this.cells = [];
  }
  copy(e, t, i = {}) {
    this.options = Object.assign({}, i);
    const r = (wi.isModel(t) ? t : t.model).cloneSubGraph(e, i);
    this.cells = t2(Object.keys(r).map((o) => r[o]), (o) => o.isEdge() ? 2 : 1), this.serialize(i);
  }
  cut(e, t, i = {}) {
    this.copy(e, t, i), (ge.isGraph(t) ? t.model : t).batchUpdate("cut", () => {
      e.forEach((r) => r.remove());
    });
  }
  paste(e, t = {}) {
    const i = Object.assign(Object.assign({}, this.options), t), { offset: s, edgeProps: r, nodeProps: o } = i;
    let l = 20, a = 20;
    s && (l = typeof s == "number" ? s : s.dx, a = typeof s == "number" ? s : s.dy), this.deserialize(i);
    const c = this.cells;
    c.forEach((h) => {
      h.model = null, h.removeProp("zIndex"), (l || a) && h.translate(l, a), o && h.isNode() && h.prop(o), r && h.isEdge() && h.prop(r);
    });
    const u = ge.isGraph(e) ? e.model : e;
    return u.batchUpdate("paste", () => {
      u.addCells(this.cells);
    }), this.copy(c, e, t), c;
  }
  serialize(e) {
    e.useLocalStorage !== !1 && Nu.save(this.cells);
  }
  deserialize(e) {
    if (e.useLocalStorage) {
      const t = Nu.fetch();
      t && (this.cells = t);
    }
  }
  isEmpty(e = {}) {
    return e.useLocalStorage && this.deserialize(e), this.cells.length <= 0;
  }
  clean() {
    this.options = {}, this.cells = [], Nu.clean();
  }
}
var Nu;
(function(n) {
  const e = `${rs.prefixCls}.clipboard.cells`;
  function t(r) {
    if (window.localStorage) {
      const o = r.map((l) => l.toJSON());
      localStorage.setItem(e, JSON.stringify(o));
    }
  }
  n.save = t;
  function i() {
    if (window.localStorage) {
      const r = localStorage.getItem(e), o = r ? JSON.parse(r) : [];
      if (o)
        return wi.fromJSON(o);
    }
  }
  n.fetch = i;
  function s() {
    window.localStorage && localStorage.removeItem(e);
  }
  n.clean = s;
})(Nu || (Nu = {}));
ge.prototype.isClipboardEnabled = function() {
  const n = this.getPlugin("clipboard");
  return n ? n.isEnabled() : !1;
};
ge.prototype.enableClipboard = function() {
  const n = this.getPlugin("clipboard");
  return n && n.enable(), this;
};
ge.prototype.disableClipboard = function() {
  const n = this.getPlugin("clipboard");
  return n && n.disable(), this;
};
ge.prototype.toggleClipboard = function(n) {
  const e = this.getPlugin("clipboard");
  return e && e.toggleEnabled(n), this;
};
ge.prototype.isClipboardEmpty = function(n) {
  const e = this.getPlugin("clipboard");
  return e ? e.isEmpty(n) : !0;
};
ge.prototype.getCellsInClipboard = function() {
  const n = this.getPlugin("clipboard");
  return n ? n.getCellsInClipboard() : [];
};
ge.prototype.cleanClipboard = function() {
  const n = this.getPlugin("clipboard");
  return n && n.clean(), this;
};
ge.prototype.copy = function(n, e) {
  const t = this.getPlugin("clipboard");
  return t && t.copy(n, e), this;
};
ge.prototype.cut = function(n, e) {
  const t = this.getPlugin("clipboard");
  return t && t.cut(n, e), this;
};
ge.prototype.paste = function(n, e) {
  const t = this.getPlugin("clipboard");
  return t ? t.paste(n, e) : [];
};
var rZe = function(n, e, t, i) {
  var s = arguments.length, r = s < 3 ? e : i === null ? i = Object.getOwnPropertyDescriptor(e, t) : i, o;
  if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
    r = Reflect.decorate(n, e, t, i);
  else
    for (var l = n.length - 1; l >= 0; l--)
      (o = n[l]) && (r = (s < 3 ? o(r) : s > 3 ? o(e, t, r) : o(e, t)) || r);
  return s > 3 && r && Object.defineProperty(e, t, r), r;
}, oZe = function(n, e) {
  var t = {};
  for (var i in n)
    Object.prototype.hasOwnProperty.call(n, i) && e.indexOf(i) < 0 && (t[i] = n[i]);
  if (n != null && typeof Object.getOwnPropertySymbols == "function")
    for (var s = 0, i = Object.getOwnPropertySymbols(n); s < i.length; s++)
      e.indexOf(i[s]) < 0 && Object.prototype.propertyIsEnumerable.call(n, i[s]) && (t[i[s]] = n[i[s]]);
  return t;
};
class lZe extends Qt {
  get disabled() {
    return this.options.enabled !== !0;
  }
  get cells() {
    return this.clipboardImpl.cells;
  }
  constructor(e = {}) {
    super(), this.name = "clipboard", this.options = Object.assign({ enabled: !0 }, e);
  }
  init(e) {
    this.graph = e, this.clipboardImpl = new sZe(), this.clipboardImpl.deserialize(this.options);
  }
  // #region api
  isEnabled() {
    return !this.disabled;
  }
  enable() {
    this.disabled && (this.options.enabled = !0);
  }
  disable() {
    this.disabled || (this.options.enabled = !1);
  }
  toggleEnabled(e) {
    return e != null ? e !== this.isEnabled() && (e ? this.enable() : this.disable()) : this.isEnabled() ? this.disable() : this.enable(), this;
  }
  isEmpty(e = {}) {
    return this.clipboardImpl.isEmpty(e);
  }
  getCellsInClipboard() {
    return this.cells;
  }
  clean(e) {
    return (!this.disabled || e) && (this.clipboardImpl.clean(), this.notify("clipboard:changed", { cells: [] })), this;
  }
  copy(e, t = {}) {
    return this.disabled || (this.clipboardImpl.copy(e, this.graph, Object.assign(Object.assign({}, this.commonOptions), t)), this.notify("clipboard:changed", { cells: e })), this;
  }
  cut(e, t = {}) {
    return this.disabled || (this.clipboardImpl.cut(e, this.graph, Object.assign(Object.assign({}, this.commonOptions), t)), this.notify("clipboard:changed", { cells: e })), this;
  }
  paste(e = {}, t = this.graph) {
    return this.disabled ? [] : this.clipboardImpl.paste(t, Object.assign(Object.assign({}, this.commonOptions), e));
  }
  // #endregion
  get commonOptions() {
    const e = this.options;
    return oZe(e, ["enabled"]);
  }
  notify(e, t) {
    this.trigger(e, t), this.graph.trigger(e, t);
  }
  dispose() {
    this.clean(!0), this.off();
  }
}
rZe([
  Qt.dispose()
], lZe.prototype, "dispose", null);
ge.prototype.isHistoryEnabled = function() {
  const n = this.getPlugin("history");
  return n ? n.isEnabled() : !1;
};
ge.prototype.enableHistory = function() {
  const n = this.getPlugin("history");
  return n && n.enable(), this;
};
ge.prototype.disableHistory = function() {
  const n = this.getPlugin("history");
  return n && n.disable(), this;
};
ge.prototype.toggleHistory = function(n) {
  const e = this.getPlugin("history");
  return e && e.toggleEnabled(n), this;
};
ge.prototype.undo = function(n) {
  const e = this.getPlugin("history");
  return e && e.undo(n), this;
};
ge.prototype.redo = function(n) {
  const e = this.getPlugin("history");
  return e && e.redo(n), this;
};
ge.prototype.undoAndCancel = function(n) {
  const e = this.getPlugin("history");
  return e && e.cancel(n), this;
};
ge.prototype.canUndo = function() {
  const n = this.getPlugin("history");
  return n ? n.canUndo() : !1;
};
ge.prototype.canRedo = function() {
  const n = this.getPlugin("history");
  return n ? n.canRedo() : !1;
};
ge.prototype.cleanHistory = function(n) {
  const e = this.getPlugin("history");
  return e && e.clean(n), this;
};
ge.prototype.getHistoryStackSize = function() {
  return this.getPlugin("history").getSize();
};
ge.prototype.getUndoStackSize = function() {
  return this.getPlugin("history").getUndoSize();
};
ge.prototype.getRedoStackSize = function() {
  return this.getPlugin("history").getRedoSize();
};
ge.prototype.getUndoRemainSize = function() {
  return this.getPlugin("history").getUndoRemainSize();
};
var qM = function(n, e, t, i) {
  var s = arguments.length, r = s < 3 ? e : i === null ? i = Object.getOwnPropertyDescriptor(e, t) : i, o;
  if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
    r = Reflect.decorate(n, e, t, i);
  else
    for (var l = n.length - 1; l >= 0; l--)
      (o = n[l]) && (r = (s < 3 ? o(r) : s > 3 ? o(e, t, r) : o(e, t)) || r);
  return s > 3 && r && Object.defineProperty(e, t, r), r;
};
class kh extends Qt {
  constructor(e = {}) {
    super(), this.name = "history", this.batchCommands = null, this.batchLevel = 0, this.lastBatchIndex = -1, this.freezed = !1, this.stackSize = 0, this.handlers = [];
    const { stackSize: t = 0 } = e;
    this.stackSize = t, this.options = It.getOptions(e), this.validator = new kh.Validator({
      history: this,
      cancelInvalid: this.options.cancelInvalid
    });
  }
  init(e) {
    this.graph = e, this.model = this.graph.model, this.clean(), this.startListening();
  }
  // #region api
  isEnabled() {
    return !this.disabled;
  }
  enable() {
    this.disabled && (this.options.enabled = !0);
  }
  disable() {
    this.disabled || (this.options.enabled = !1);
  }
  toggleEnabled(e) {
    return e != null ? e !== this.isEnabled() && (e ? this.enable() : this.disable()) : this.isEnabled() ? this.disable() : this.enable(), this;
  }
  undo(e = {}) {
    if (!this.disabled) {
      const t = this.undoStack.pop();
      t && (this.revertCommand(t, e), this.redoStack.push(t), this.notify("undo", t, e));
    }
    return this;
  }
  redo(e = {}) {
    if (!this.disabled) {
      const t = this.redoStack.pop();
      t && (this.applyCommand(t, e), this.undoStackPush(t), this.notify("redo", t, e));
    }
    return this;
  }
  /**
   * Same as `undo()` but does not store the undo-ed command to the
   * `redoStack`. Canceled command therefore cannot be redo-ed.
   */
  cancel(e = {}) {
    if (!this.disabled) {
      const t = this.undoStack.pop();
      t && (this.revertCommand(t, e), this.redoStack = [], this.notify("cancel", t, e));
    }
    return this;
  }
  getSize() {
    return this.stackSize;
  }
  getUndoRemainSize() {
    const e = this.undoStack.length;
    return this.stackSize - e;
  }
  getUndoSize() {
    return this.undoStack.length;
  }
  getRedoSize() {
    return this.redoStack.length;
  }
  canUndo() {
    return !this.disabled && this.undoStack.length > 0;
  }
  canRedo() {
    return !this.disabled && this.redoStack.length > 0;
  }
  clean(e = {}) {
    return this.undoStack = [], this.redoStack = [], this.notify("clean", null, e), this;
  }
  // #endregion
  get disabled() {
    return this.options.enabled !== !0;
  }
  validate(e, ...t) {
    return this.validator.validate(e, ...t), this;
  }
  startListening() {
    this.model.on("batch:start", this.initBatchCommand, this), this.model.on("batch:stop", this.storeBatchCommand, this), this.options.eventNames && this.options.eventNames.forEach((e, t) => {
      this.handlers[t] = this.addCommand.bind(this, e), this.model.on(e, this.handlers[t]);
    }), this.validator.on("invalid", (e) => this.trigger("invalid", e));
  }
  stopListening() {
    this.model.off("batch:start", this.initBatchCommand, this), this.model.off("batch:stop", this.storeBatchCommand, this), this.options.eventNames && (this.options.eventNames.forEach((e, t) => {
      this.model.off(e, this.handlers[t]);
    }), this.handlers.length = 0), this.validator.off("invalid");
  }
  createCommand(e) {
    return {
      batch: e ? e.batch : !1,
      data: {}
    };
  }
  revertCommand(e, t) {
    this.freezed = !0;
    const i = Array.isArray(e) ? It.sortBatchCommands(e) : [e];
    for (let s = i.length - 1; s >= 0; s -= 1) {
      const r = i[s], o = Object.assign(Object.assign({}, t), l0(r.options, this.options.revertOptionsList || []));
      this.executeCommand(r, !0, o);
    }
    this.freezed = !1;
  }
  applyCommand(e, t) {
    this.freezed = !0;
    const i = Array.isArray(e) ? It.sortBatchCommands(e) : [e];
    for (let s = 0; s < i.length; s += 1) {
      const r = i[s], o = Object.assign(Object.assign({}, t), l0(r.options, this.options.applyOptionsList || []));
      this.executeCommand(r, !1, o);
    }
    this.freezed = !1;
  }
  executeCommand(e, t, i) {
    const s = this.model, r = s.getCell(e.data.id), o = e.event;
    if (It.isAddEvent(o) && t || It.isRemoveEvent(o) && !t)
      r && r.remove(i);
    else if (It.isAddEvent(o) && !t || It.isRemoveEvent(o) && t) {
      const l = e.data;
      l.node ? s.addNode(l.props, i) : l.edge && s.addEdge(l.props, i);
    } else if (It.isChangeEvent(o)) {
      const l = e.data, a = l.key;
      if (a && r) {
        const c = t ? l.prev[a] : l.next[a];
        l.key === "attrs" && this.ensureUndefinedAttrs(c, t ? l.next[a] : l.prev[a]) && (i.dirty = !0), r.prop(a, c, i);
      }
    } else {
      const l = this.options.executeCommand;
      l && Ee(l, this, e, t, i);
    }
  }
  addCommand(e, t) {
    if (this.freezed || this.disabled)
      return;
    const i = t, s = i.options || {};
    if (s.dryrun || It.isAddEvent(e) && this.options.ignoreAdd || It.isRemoveEvent(e) && this.options.ignoreRemove || It.isChangeEvent(e) && this.options.ignoreChange)
      return;
    const r = this.options.beforeAddCommand;
    if (r != null && Ee(r, this, e, t) === !1)
      return;
    e === "cell:change:*" && (e = `cell:change:${i.key}`);
    const o = i.cell, l = wi.isModel(o);
    let a;
    if (this.batchCommands) {
      a = this.batchCommands[Math.max(this.lastBatchIndex, 0)];
      const u = l && !a.modelChange || a.data.id !== o.id, h = a.event !== e;
      if (this.lastBatchIndex >= 0 && (u || h)) {
        const f = this.batchCommands.findIndex((d) => (l && d.modelChange || d.data.id === o.id) && d.event === e);
        f < 0 || It.isAddEvent(e) || It.isRemoveEvent(e) ? a = this.createCommand({ batch: !0 }) : (a = this.batchCommands[f], this.batchCommands.splice(f, 1)), this.batchCommands.push(a), this.lastBatchIndex = this.batchCommands.length - 1;
      }
    } else
      a = this.createCommand({ batch: !1 });
    if (It.isAddEvent(e) || It.isRemoveEvent(e)) {
      const u = a.data;
      return a.event = e, a.options = s, u.id = o.id, u.props = Tt(o.toJSON()), o.isEdge() ? u.edge = !0 : o.isNode() && (u.node = !0), this.push(a, s);
    }
    if (It.isChangeEvent(e)) {
      const u = t.key, h = a.data;
      return (!a.batch || !a.event) && (a.event = e, a.options = s, h.key = u, h.prev == null && (h.prev = {}), h.prev[u] = Tt(o.previous(u)), l ? a.modelChange = !0 : h.id = o.id), h.next == null && (h.next = {}), h.next[u] = Tt(o.prop(u)), this.push(a, s);
    }
    const c = this.options.afterAddCommand;
    c && Ee(c, this, e, t, a), this.push(a, s);
  }
  /**
   * Gather multiple changes into a single command. These commands could
   * be reverted with single `undo()` call. From the moment the function
   * is called every change made on model is not stored into the undoStack.
   * Changes are temporarily kept until `storeBatchCommand()` is called.
   */
  // eslint-disable-next-line
  initBatchCommand(e) {
    this.freezed || (this.batchCommands ? this.batchLevel += 1 : (this.batchCommands = [this.createCommand({ batch: !0 })], this.batchLevel = 0, this.lastBatchIndex = -1));
  }
  /**
   * Store changes temporarily kept in the undoStack. You have to call this
   * function as many times as `initBatchCommand()` been called.
   */
  storeBatchCommand(e) {
    if (!this.freezed)
      if (this.batchCommands && this.batchLevel <= 0) {
        const t = this.filterBatchCommand(this.batchCommands);
        t.length > 0 && (this.redoStack = [], this.undoStackPush(t), this.consolidateCommands(), this.notify("add", t, e)), this.batchCommands = null, this.lastBatchIndex = -1, this.batchLevel = 0;
      } else
        this.batchCommands && this.batchLevel > 0 && (this.batchLevel -= 1);
  }
  filterBatchCommand(e) {
    let t = e.slice();
    const i = [];
    for (; t.length > 0; ) {
      const s = t.shift(), r = s.event, o = s.data.id;
      if (r != null && (o != null || s.modelChange)) {
        if (It.isAddEvent(r)) {
          const l = t.findIndex((a) => It.isRemoveEvent(a.event) && a.data.id === o);
          if (l >= 0) {
            t = t.filter((a, c) => l < c || a.data.id !== o);
            continue;
          }
        } else if (It.isRemoveEvent(r)) {
          const l = t.findIndex((a) => It.isAddEvent(a.event) && a.data.id === o);
          if (l >= 0) {
            t.splice(l, 1);
            continue;
          }
        } else if (It.isChangeEvent(r)) {
          const l = s.data;
          if (Xn(l.prev, l.next))
            continue;
        }
        i.push(s);
      }
    }
    return i;
  }
  notify(e, t, i) {
    const s = t == null ? null : Array.isArray(t) ? t : [t];
    this.emit(e, { cmds: s, options: i }), this.graph.trigger(`history:${e}`, { cmds: s, options: i }), this.emit("change", { cmds: s, options: i }), this.graph.trigger("history:change", { cmds: s, options: i });
  }
  push(e, t) {
    this.redoStack = [], e.batch ? (this.lastBatchIndex = Math.max(this.lastBatchIndex, 0), this.emit("batch", { cmd: e, options: t })) : (this.undoStackPush(e), this.consolidateCommands(), this.notify("add", e, t));
  }
  /**
   * Conditionally combine multiple undo items into one.
   *
   * Currently this is only used combine a `cell:changed:position` event
   * followed by multiple `cell:change:parent` and `cell:change:children`
   * events, such that a "move + embed" action can be undone in one step.
   *
   * See https://github.com/antvis/X6/issues/2421
   *
   * This is an ugly WORKAROUND. It does not solve deficiencies in the batch
   * system itself.
   */
  consolidateCommands() {
    var e;
    const t = this.undoStack[this.undoStack.length - 1], i = this.undoStack[this.undoStack.length - 2];
    if (!Array.isArray(t))
      return;
    const s = new Set(t.map((o) => o.event));
    if (s.size !== 2 || !s.has("cell:change:parent") || !s.has("cell:change:children") || !t.every((o) => {
      var l;
      return o.batch && ((l = o.options) === null || l === void 0 ? void 0 : l.ui);
    }) || !Array.isArray(i) || i.length !== 1)
      return;
    const r = i[0];
    r.event !== "cell:change:position" || !(!((e = r.options) === null || e === void 0) && e.ui) || (i.push(...t), this.undoStack.pop());
  }
  undoStackPush(e) {
    if (this.stackSize === 0) {
      this.undoStack.push(e);
      return;
    }
    this.undoStack.length >= this.stackSize && this.undoStack.shift(), this.undoStack.push(e);
  }
  ensureUndefinedAttrs(e, t) {
    let i = !1;
    return e !== null && t !== null && typeof e == "object" && typeof t == "object" && Object.keys(t).forEach((s) => {
      e[s] === void 0 && t[s] !== void 0 ? (e[s] = void 0, i = !0) : typeof e[s] == "object" && typeof t[s] == "object" && (i = this.ensureUndefinedAttrs(e[s], t[s]));
    }), i;
  }
  dispose() {
    this.validator.dispose(), this.clean(), this.stopListening(), this.off();
  }
}
qM([
  Qt.dispose()
], kh.prototype, "dispose", null);
(function(n) {
  class e extends Qt {
    constructor(i) {
      super(), this.map = {}, this.command = i.history, this.cancelInvalid = i.cancelInvalid !== !1, this.command.on("add", this.onCommandAdded, this);
    }
    onCommandAdded({ cmds: i }) {
      return Array.isArray(i) ? i.every((s) => this.isValidCommand(s)) : this.isValidCommand(i);
    }
    isValidCommand(i) {
      if (i.options && i.options.validation === !1)
        return !0;
      const s = i.event && this.map[i.event] || [];
      let r = null;
      return s.forEach((o) => {
        let l = 0;
        const a = (c) => {
          const u = o[l];
          l += 1;
          try {
            if (u)
              u(c, i, a);
            else {
              r = c;
              return;
            }
          } catch (h) {
            a(h);
          }
        };
        a(r);
      }), r ? (this.cancelInvalid && this.command.cancel(), this.emit("invalid", { err: r }), !1) : !0;
    }
    validate(i, ...s) {
      const r = Array.isArray(i) ? i : i.split(/\s+/);
      return s.forEach((o) => {
        if (typeof o != "function")
          throw new Error(`${r.join(" ")} requires callback functions.`);
      }), r.forEach((o) => {
        this.map[o] == null && (this.map[o] = []), this.map[o].push(s);
      }), this;
    }
    dispose() {
      this.command.off("add", this.onCommandAdded, this);
    }
  }
  qM([
    Qt.dispose()
  ], e.prototype, "dispose", null), n.Validator = e;
})(kh || (kh = {}));
var It;
(function(n) {
  function e(o) {
    return o === "cell:added";
  }
  n.isAddEvent = e;
  function t(o) {
    return o === "cell:removed";
  }
  n.isRemoveEvent = t;
  function i(o) {
    return o != null && o.startsWith("cell:change:");
  }
  n.isChangeEvent = i;
  function s(o) {
    const l = [
      "cell:added",
      "cell:removed",
      "cell:change:*"
    ], a = ["batch:start", "batch:stop"], c = o.eventNames ? o.eventNames.filter((u) => !(n.isChangeEvent(u) || l.includes(u) || a.includes(u))) : l;
    return Object.assign(Object.assign({ enabled: !0 }, o), { eventNames: c, applyOptionsList: o.applyOptionsList || ["propertyPath"], revertOptionsList: o.revertOptionsList || ["propertyPath"] });
  }
  n.getOptions = s;
  function r(o) {
    const l = [];
    for (let a = 0, c = o.length; a < c; a += 1) {
      const u = o[a];
      let h = null;
      if (n.isAddEvent(u.event)) {
        const f = u.data.id;
        for (let d = 0; d < a; d += 1)
          if (o[d].data.id === f) {
            h = d;
            break;
          }
      }
      h !== null ? l.splice(h, 0, u) : l.push(u);
    }
    return l;
  }
  n.sortBatchCommands = r;
})(It || (It = {}));
export {
  bZe as $,
  at as A,
  dFe as B,
  oA as C,
  kZe as D,
  tFe as E,
  oFe as F,
  sFe as G,
  lFe as H,
  vw as I,
  GZe as J,
  UZe as K,
  OZe as L,
  _Ze as M,
  yZe as N,
  $Ze as O,
  EZe as P,
  fZe as Q,
  xZe as R,
  XZe as S,
  Ya as T,
  kt as U,
  KO as V,
  YZe as W,
  h2 as X,
  Ft as Y,
  ge as Z,
  bFe as _,
  eFe as a,
  wZe as a0,
  VZe as a1,
  qZe as a2,
  KZe as a3,
  JZe as a4,
  cf as a5,
  iFe as a6,
  BZe as a7,
  jZe as a8,
  yc as a9,
  ZQ as aA,
  Rs as aB,
  oI as aC,
  Rd as aD,
  gZe as aE,
  hZe as aF,
  pZe as aG,
  aFe as aH,
  UO as aa,
  t2 as ab,
  PZe as ac,
  AZe as ad,
  MZe as ae,
  RZe as af,
  CZe as ag,
  Oc as ah,
  Ch as ai,
  lZe as aj,
  kh as ak,
  nFe as al,
  vFe as am,
  qm as an,
  Tt as ao,
  zu as ap,
  Cn as aq,
  Vt as ar,
  mZe as as,
  dZe as at,
  Bh as au,
  DZe as av,
  Qp as aw,
  LZe as ax,
  lv as ay,
  NZe as az,
  w0 as b,
  qh as c,
  Ue as d,
  Vh as e,
  x5 as f,
  Wi as g,
  o4 as h,
  a2 as i,
  mq as j,
  bq as k,
  WZe as l,
  HZe as m,
  ZZe as n,
  vZe as o,
  c2 as p,
  SZe as q,
  FZe as r,
  TZe as s,
  IZe as t,
  QZe as u,
  x4 as v,
  pFe as w,
  gFe as x,
  rFe as y,
  Oe as z
};
